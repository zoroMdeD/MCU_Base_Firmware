
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ce98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dc8  0801d028  0801d028  0002d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020df0  08020df0  00040248  2**0
                  CONTENTS
  4 .ARM          00000008  08020df0  08020df0  00030df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020df8  08020df8  00040248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020df8  08020df8  00030df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020dfc  08020dfc  00030dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08020e00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007180  20000248  08021048  00040248  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  200073c8  08021048  000473c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006f892  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008da4  00000000  00000000  000afb0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  000b88b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002158  00000000  00000000  000bab58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037d97  00000000  00000000  000bccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003420d  00000000  00000000  000f4a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f35fe  00000000  00000000  00128c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021c252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a078  00000000  00000000  0021c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d010 	.word	0x0801d010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0801d010 	.word	0x0801d010

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f1c:	4a37      	ldr	r2, [pc, #220]	; (8000ffc <MX_ADC1_Init+0xf4>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f4c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6c:	4822      	ldr	r0, [pc, #136]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f6e:	f005 fb53 	bl	8006618 <HAL_ADC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f78:	f003 f9ec 	bl	8004354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000f8e:	f005 fc8d 	bl	80068ac <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f98:	f003 f9dc 	bl	8004354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000faa:	f005 fc7f 	bl	80068ac <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000fb4:	f003 f9ce 	bl	8004354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000fc6:	f005 fc71 	bl	80068ac <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fd0:	f003 f9c0 	bl	8004354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0xf0>)
 8000fe2:	f005 fc63 	bl	80068ac <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000fec:	f003 f9b2 	bl	8004354 <Error_Handler>
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200007a8 	.word	0x200007a8
 8000ffc:	40012000 	.word	0x40012000

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_ADC_MspInit+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d157      	bne.n	80010d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_ADC_MspInit+0xe0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 800105a:	2378      	movs	r3, #120	; 0x78
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xe4>)
 800106e:	f007 fbd1 	bl	8008814 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_ADC_MspInit+0xec>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 8001094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f005 ff7a 	bl	8006fb0 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010c2:	f003 f947 	bl	8004354 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_ADC_MspInit+0xe8>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	200007f0 	.word	0x200007f0
 80010ec:	40026410 	.word	0x40026410

080010f0 <Conversion_ADC1>:
//	Value = (Value / 60);		//Ток

	return Value;
}
double Conversion_ADC1(uint16_t ADC_value)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
	double Value = 0;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0400 	mov.w	r4, #0
 8001102:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const double Resolution = 0.0008056640625;
 8001106:	a416      	add	r4, pc, #88	; (adr r4, 8001160 <Conversion_ADC1+0x70>)
 8001108:	e9d4 3400 	ldrd	r3, r4, [r4]
 800110c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	Value = (ADC_value * Resolution);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa16 	bl	8000544 <__aeabi_i2d>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001124:	f7ff fa78 	bl	8000618 <__aeabi_dmul>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	Value = (Value * 3.2323232323232);	//Напряжение
 8001130:	a30d      	add	r3, pc, #52	; (adr r3, 8001168 <Conversion_ADC1+0x78>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800113a:	f7ff fa6d 	bl	8000618 <__aeabi_dmul>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	e9c7 3404 	strd	r3, r4, [r7, #16]

	return Value;
 8001146:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800114a:	ec44 3b17 	vmov	d7, r3, r4
}
 800114e:	eeb0 0a47 	vmov.f32	s0, s14
 8001152:	eef0 0a67 	vmov.f32	s1, s15
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	3f4a6666 	.word	0x3f4a6666
 8001168:	48676ee8 	.word	0x48676ee8
 800116c:	4009dbcc 	.word	0x4009dbcc

08001170 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <cJSON_strcasecmp+0x20>
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e05d      	b.n	800124c <cJSON_strcasecmp+0xdc>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <cJSON_strcasecmp+0x42>
 8001196:	2301      	movs	r3, #1
 8001198:	e058      	b.n	800124c <cJSON_strcasecmp+0xdc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <cJSON_strcasecmp+0x36>
 80011a2:	2300      	movs	r3, #0
 80011a4:	e052      	b.n	800124c <cJSON_strcasecmp+0xdc>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	f016 fe2a 	bl	8017e10 <__locale_ctype_ptr>
 80011bc:	4602      	mov	r2, r0
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d103      	bne.n	80011d6 <cJSON_strcasecmp+0x66>
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f103 0420 	add.w	r4, r3, #32
 80011d4:	e000      	b.n	80011d8 <cJSON_strcasecmp+0x68>
 80011d6:	7bfc      	ldrb	r4, [r7, #15]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	73bb      	strb	r3, [r7, #14]
 80011de:	f016 fe17 	bl	8017e10 <__locale_ctype_ptr>
 80011e2:	4602      	mov	r2, r0
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <cJSON_strcasecmp+0x8a>
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	3320      	adds	r3, #32
 80011f8:	e000      	b.n	80011fc <cJSON_strcasecmp+0x8c>
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	429c      	cmp	r4, r3
 80011fe:	d0cc      	beq.n	800119a <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	737b      	strb	r3, [r7, #13]
 8001206:	f016 fe03 	bl	8017e10 <__locale_ctype_ptr>
 800120a:	4602      	mov	r2, r0
 800120c:	7b7b      	ldrb	r3, [r7, #13]
 800120e:	3301      	adds	r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d103      	bne.n	8001224 <cJSON_strcasecmp+0xb4>
 800121c:	7b7b      	ldrb	r3, [r7, #13]
 800121e:	f103 0420 	add.w	r4, r3, #32
 8001222:	e000      	b.n	8001226 <cJSON_strcasecmp+0xb6>
 8001224:	7b7c      	ldrb	r4, [r7, #13]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	733b      	strb	r3, [r7, #12]
 800122c:	f016 fdf0 	bl	8017e10 <__locale_ctype_ptr>
 8001230:	4602      	mov	r2, r0
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <cJSON_strcasecmp+0xd8>
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	3320      	adds	r3, #32
 8001246:	e000      	b.n	800124a <cJSON_strcasecmp+0xda>
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	1ae3      	subs	r3, r4, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <cJSON_New_Item+0x2c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	4798      	blx	r3
 8001262:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <cJSON_New_Item+0x20>
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f016 fe31 	bl	8017ed6 <memset>
	return node;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000

08001284 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 800128c:	e037      	b.n	80012fe <cJSON_Delete+0x7a>
	{
		next=c->next;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d108      	bne.n	80012b2 <cJSON_Delete+0x2e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <cJSON_Delete+0x2e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffe9 	bl	8001284 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <cJSON_Delete+0x4e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <cJSON_Delete+0x4e>
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <cJSON_Delete+0x88>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6912      	ldr	r2, [r2, #16]
 80012ce:	4610      	mov	r0, r2
 80012d0:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <cJSON_Delete+0x6e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <cJSON_Delete+0x6e>
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <cJSON_Delete+0x88>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6a12      	ldr	r2, [r2, #32]
 80012ee:	4610      	mov	r0, r2
 80012f0:	4798      	blx	r3
		cJSON_free(c);
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <cJSON_Delete+0x88>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
		c=next;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	607b      	str	r3, [r7, #4]
	while (c)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1c4      	bne.n	800128e <cJSON_Delete+0xa>
	}
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000004 	.word	0x20000004

08001310 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	4c83      	ldr	r4, [pc, #524]	; (8001538 <parse_number+0x228>)
 800132c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	2301      	movs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b2d      	cmp	r3, #45	; 0x2d
 800134a:	d107      	bne.n	800135c <parse_number+0x4c>
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	4c7a      	ldr	r4, [pc, #488]	; (800153c <parse_number+0x22c>)
 8001352:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b30      	cmp	r3, #48	; 0x30
 8001362:	d102      	bne.n	800136a <parse_number+0x5a>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b30      	cmp	r3, #48	; 0x30
 8001370:	d928      	bls.n	80013c4 <parse_number+0xb4>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b39      	cmp	r3, #57	; 0x39
 8001378:	d824      	bhi.n	80013c4 <parse_number+0xb4>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b70      	ldr	r3, [pc, #448]	; (8001540 <parse_number+0x230>)
 8001380:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001384:	f7ff f948 	bl	8000618 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4625      	mov	r5, r4
 800138e:	461c      	mov	r4, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	603a      	str	r2, [r7, #0]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3b30      	subs	r3, #48	; 0x30
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8d2 	bl	8000544 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7fe ff80 	bl	80002ac <__adddf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b2f      	cmp	r3, #47	; 0x2f
 80013ba:	d903      	bls.n	80013c4 <parse_number+0xb4>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b39      	cmp	r3, #57	; 0x39
 80013c2:	d9da      	bls.n	800137a <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b2e      	cmp	r3, #46	; 0x2e
 80013ca:	d13c      	bne.n	8001446 <parse_number+0x136>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b2f      	cmp	r3, #47	; 0x2f
 80013d4:	d937      	bls.n	8001446 <parse_number+0x136>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b39      	cmp	r3, #57	; 0x39
 80013de:	d832      	bhi.n	8001446 <parse_number+0x136>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <parse_number+0x230>)
 80013ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013f0:	f7ff f912 	bl	8000618 <__aeabi_dmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4625      	mov	r5, r4
 80013fa:	461c      	mov	r4, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	603a      	str	r2, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3b30      	subs	r3, #48	; 0x30
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f89c 	bl	8000544 <__aeabi_i2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4620      	mov	r0, r4
 8001412:	4629      	mov	r1, r5
 8001414:	f7fe ff4a 	bl	80002ac <__adddf3>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b44      	ldr	r3, [pc, #272]	; (8001538 <parse_number+0x228>)
 8001426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800142a:	f7fe ff3d 	bl	80002a8 <__aeabi_dsub>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b2f      	cmp	r3, #47	; 0x2f
 800143c:	d903      	bls.n	8001446 <parse_number+0x136>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b39      	cmp	r3, #57	; 0x39
 8001444:	d9cf      	bls.n	80013e6 <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b65      	cmp	r3, #101	; 0x65
 800144c:	d003      	beq.n	8001456 <parse_number+0x146>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b45      	cmp	r3, #69	; 0x45
 8001454:	d12a      	bne.n	80014ac <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b2b      	cmp	r3, #43	; 0x2b
 8001462:	d103      	bne.n	800146c <parse_number+0x15c>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	e017      	b.n	800149c <parse_number+0x18c>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b2d      	cmp	r3, #45	; 0x2d
 8001472:	d113      	bne.n	800149c <parse_number+0x18c>
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8001480:	e00c      	b.n	800149c <parse_number+0x18c>
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4619      	mov	r1, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	603a      	str	r2, [r7, #0]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3b30      	subs	r3, #48	; 0x30
 8001498:	440b      	add	r3, r1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b2f      	cmp	r3, #47	; 0x2f
 80014a2:	d903      	bls.n	80014ac <parse_number+0x19c>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b39      	cmp	r3, #57	; 0x39
 80014aa:	d9ea      	bls.n	8001482 <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 80014ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014b4:	f7ff f8b0 	bl	8000618 <__aeabi_dmul>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	4625      	mov	r5, r4
 80014be:	461c      	mov	r4, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f83b 	bl	8000544 <__aeabi_i2d>
 80014ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014d2:	f7fe feeb 	bl	80002ac <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ec43 2b17 	vmov	d7, r2, r3
 80014de:	eeb0 1a47 	vmov.f32	s2, s14
 80014e2:	eef0 1a67 	vmov.f32	s3, s15
 80014e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001530 <parse_number+0x220>
 80014ea:	f01a fd35 	bl	801bf58 <pow>
 80014ee:	ec53 2b10 	vmov	r2, r3, d0
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7ff f88f 	bl	8000618 <__aeabi_dmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	e9c7 3408 	strd	r3, r4, [r7, #32]
	
	item->valuedouble=n;
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001508:	e9c2 3406 	strd	r3, r4, [r2, #24]
	item->valueint=(int)n;
 800150c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001510:	f7ff fb32 	bl	8000b78 <__aeabi_d2iz>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	60da      	str	r2, [r3, #12]
	return num;
 8001520:	683b      	ldr	r3, [r7, #0]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bdb0      	pop	{r4, r5, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	00000000 	.word	0x00000000
 8001534:	40240000 	.word	0x40240000
 8001538:	3ff00000 	.word	0x3ff00000
 800153c:	bff00000 	.word	0xbff00000
 8001540:	40240000 	.word	0x40240000

08001544 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b2f      	cmp	r3, #47	; 0x2f
 8001556:	d90b      	bls.n	8001570 <parse_hex4+0x2c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b39      	cmp	r3, #57	; 0x39
 800155e:	d807      	bhi.n	8001570 <parse_hex4+0x2c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	3b30      	subs	r3, #48	; 0x30
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e021      	b.n	80015b4 <parse_hex4+0x70>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d90b      	bls.n	8001590 <parse_hex4+0x4c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b46      	cmp	r3, #70	; 0x46
 800157e:	d807      	bhi.n	8001590 <parse_hex4+0x4c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	3b37      	subs	r3, #55	; 0x37
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e011      	b.n	80015b4 <parse_hex4+0x70>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b60      	cmp	r3, #96	; 0x60
 8001596:	d90b      	bls.n	80015b0 <parse_hex4+0x6c>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b66      	cmp	r3, #102	; 0x66
 800159e:	d807      	bhi.n	80015b0 <parse_hex4+0x6c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	3b57      	subs	r3, #87	; 0x57
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e001      	b.n	80015b4 <parse_hex4+0x70>
 80015b0:	2300      	movs	r3, #0
 80015b2:	e0a8      	b.n	8001706 <parse_hex4+0x1c2>
	h=h<<4;str++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3301      	adds	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2f      	cmp	r3, #47	; 0x2f
 80015c6:	d90b      	bls.n	80015e0 <parse_hex4+0x9c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b39      	cmp	r3, #57	; 0x39
 80015ce:	d807      	bhi.n	80015e0 <parse_hex4+0x9c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	3b30      	subs	r3, #48	; 0x30
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e021      	b.n	8001624 <parse_hex4+0xe0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	d90b      	bls.n	8001600 <parse_hex4+0xbc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b46      	cmp	r3, #70	; 0x46
 80015ee:	d807      	bhi.n	8001600 <parse_hex4+0xbc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	3b37      	subs	r3, #55	; 0x37
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e011      	b.n	8001624 <parse_hex4+0xe0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b60      	cmp	r3, #96	; 0x60
 8001606:	d90b      	bls.n	8001620 <parse_hex4+0xdc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b66      	cmp	r3, #102	; 0x66
 800160e:	d807      	bhi.n	8001620 <parse_hex4+0xdc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	3b57      	subs	r3, #87	; 0x57
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e001      	b.n	8001624 <parse_hex4+0xe0>
 8001620:	2300      	movs	r3, #0
 8001622:	e070      	b.n	8001706 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b2f      	cmp	r3, #47	; 0x2f
 8001636:	d90b      	bls.n	8001650 <parse_hex4+0x10c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b39      	cmp	r3, #57	; 0x39
 800163e:	d807      	bhi.n	8001650 <parse_hex4+0x10c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	3b30      	subs	r3, #48	; 0x30
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e021      	b.n	8001694 <parse_hex4+0x150>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	d90b      	bls.n	8001670 <parse_hex4+0x12c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b46      	cmp	r3, #70	; 0x46
 800165e:	d807      	bhi.n	8001670 <parse_hex4+0x12c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	3b37      	subs	r3, #55	; 0x37
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e011      	b.n	8001694 <parse_hex4+0x150>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b60      	cmp	r3, #96	; 0x60
 8001676:	d90b      	bls.n	8001690 <parse_hex4+0x14c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b66      	cmp	r3, #102	; 0x66
 800167e:	d807      	bhi.n	8001690 <parse_hex4+0x14c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	3b57      	subs	r3, #87	; 0x57
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e001      	b.n	8001694 <parse_hex4+0x150>
 8001690:	2300      	movs	r3, #0
 8001692:	e038      	b.n	8001706 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b2f      	cmp	r3, #47	; 0x2f
 80016a6:	d90b      	bls.n	80016c0 <parse_hex4+0x17c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b39      	cmp	r3, #57	; 0x39
 80016ae:	d807      	bhi.n	80016c0 <parse_hex4+0x17c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	3b30      	subs	r3, #48	; 0x30
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e021      	b.n	8001704 <parse_hex4+0x1c0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d90b      	bls.n	80016e0 <parse_hex4+0x19c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b46      	cmp	r3, #70	; 0x46
 80016ce:	d807      	bhi.n	80016e0 <parse_hex4+0x19c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	3b37      	subs	r3, #55	; 0x37
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e011      	b.n	8001704 <parse_hex4+0x1c0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b60      	cmp	r3, #96	; 0x60
 80016e6:	d90b      	bls.n	8001700 <parse_hex4+0x1bc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b66      	cmp	r3, #102	; 0x66
 80016ee:	d807      	bhi.n	8001700 <parse_hex4+0x1bc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	3b57      	subs	r3, #87	; 0x57
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e001      	b.n	8001704 <parse_hex4+0x1c0>
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <parse_hex4+0x1c2>
	return h;
 8001704:	68fb      	ldr	r3, [r7, #12]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b22      	cmp	r3, #34	; 0x22
 800172e:	d00d      	beq.n	800174c <parse_string+0x38>
 8001730:	4aa3      	ldr	r2, [pc, #652]	; (80019c0 <parse_string+0x2ac>)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	e168      	b.n	8001a0c <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	61fa      	str	r2, [r7, #28]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b5c      	cmp	r3, #92	; 0x5c
 8001744:	d102      	bne.n	800174c <parse_string+0x38>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b22      	cmp	r3, #34	; 0x22
 8001752:	d009      	beq.n	8001768 <parse_string+0x54>
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <parse_string+0x54>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e8      	bne.n	800173a <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <parse_string+0x2b0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	3201      	adds	r2, #1
 8001770:	4610      	mov	r0, r2
 8001772:	4798      	blx	r3
 8001774:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <parse_string+0x6c>
 800177c:	2300      	movs	r3, #0
 800177e:	e145      	b.n	8001a0c <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 800178a:	e125      	b.n	80019d8 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b5c      	cmp	r3, #92	; 0x5c
 8001792:	d008      	beq.n	80017a6 <parse_string+0x92>
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	1c53      	adds	r3, r2, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1c59      	adds	r1, r3, #1
 800179e:	61b9      	str	r1, [r7, #24]
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e118      	b.n	80019d8 <parse_string+0x2c4>
		else
		{
			ptr++;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3b62      	subs	r3, #98	; 0x62
 80017b2:	2b13      	cmp	r3, #19
 80017b4:	f200 80fc 	bhi.w	80019b0 <parse_string+0x29c>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <parse_string+0xac>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	08001811 	.word	0x08001811
 80017c4:	080019b1 	.word	0x080019b1
 80017c8:	080019b1 	.word	0x080019b1
 80017cc:	080019b1 	.word	0x080019b1
 80017d0:	0800181d 	.word	0x0800181d
 80017d4:	080019b1 	.word	0x080019b1
 80017d8:	080019b1 	.word	0x080019b1
 80017dc:	080019b1 	.word	0x080019b1
 80017e0:	080019b1 	.word	0x080019b1
 80017e4:	080019b1 	.word	0x080019b1
 80017e8:	080019b1 	.word	0x080019b1
 80017ec:	080019b1 	.word	0x080019b1
 80017f0:	08001829 	.word	0x08001829
 80017f4:	080019b1 	.word	0x080019b1
 80017f8:	080019b1 	.word	0x080019b1
 80017fc:	080019b1 	.word	0x080019b1
 8001800:	08001835 	.word	0x08001835
 8001804:	080019b1 	.word	0x080019b1
 8001808:	08001841 	.word	0x08001841
 800180c:	0800184d 	.word	0x0800184d
			{
				case 'b': *ptr2++='\b';	break;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	61ba      	str	r2, [r7, #24]
 8001816:	2208      	movs	r2, #8
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e0da      	b.n	80019d2 <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	61ba      	str	r2, [r7, #24]
 8001822:	220c      	movs	r2, #12
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e0d4      	b.n	80019d2 <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	61ba      	str	r2, [r7, #24]
 800182e:	220a      	movs	r2, #10
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e0ce      	b.n	80019d2 <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	61ba      	str	r2, [r7, #24]
 800183a:	220d      	movs	r2, #13
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e0c8      	b.n	80019d2 <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	61ba      	str	r2, [r7, #24]
 8001846:	2209      	movs	r2, #9
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e0c2      	b.n	80019d2 <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	3301      	adds	r3, #1
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe77 	bl	8001544 <parse_hex4>
 8001856:	6138      	str	r0, [r7, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	3304      	adds	r3, #4
 800185c:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001864:	d304      	bcc.n	8001870 <parse_string+0x15c>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800186c:	f0c0 80b0 	bcc.w	80019d0 <parse_string+0x2bc>
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80ac 	beq.w	80019d0 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800187e:	d32d      	bcc.n	80018dc <parse_string+0x1c8>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001886:	d229      	bcs.n	80018dc <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	3301      	adds	r3, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b5c      	cmp	r3, #92	; 0x5c
 8001890:	f040 809e 	bne.w	80019d0 <parse_string+0x2bc>
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b75      	cmp	r3, #117	; 0x75
 800189c:	f040 8098 	bne.w	80019d0 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	3303      	adds	r3, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe4d 	bl	8001544 <parse_hex4>
 80018aa:	60b8      	str	r0, [r7, #8]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3306      	adds	r3, #6
 80018b0:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018b8:	f0c0 808a 	bcc.w	80019d0 <parse_string+0x2bc>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018c2:	f080 8085 	bcs.w	80019d0 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	029a      	lsls	r2, r3, #10
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <parse_string+0x2b4>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80018d4:	4313      	orrs	r3, r2
 80018d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018da:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 80018dc:	2304      	movs	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b7f      	cmp	r3, #127	; 0x7f
 80018e4:	d802      	bhi.n	80018ec <parse_string+0x1d8>
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e00c      	b.n	8001906 <parse_string+0x1f2>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f2:	d202      	bcs.n	80018fa <parse_string+0x1e6>
 80018f4:	2302      	movs	r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e005      	b.n	8001906 <parse_string+0x1f2>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d201      	bcs.n	8001906 <parse_string+0x1f2>
 8001902:	2303      	movs	r3, #3
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4413      	add	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
					
					switch (len) {
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3b01      	subs	r3, #1
 8001912:	2b03      	cmp	r3, #3
 8001914:	d847      	bhi.n	80019a6 <parse_string+0x292>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <parse_string+0x208>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	0800198d 	.word	0x0800198d
 8001920:	0800196d 	.word	0x0800196d
 8001924:	0800194d 	.word	0x0800194d
 8001928:	0800192d 	.word	0x0800192d
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	b2db      	uxtb	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	3a01      	subs	r2, #1
 800193a:	61ba      	str	r2, [r7, #24]
 800193c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001940:	b2da      	uxtb	r2, r3
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	3a01      	subs	r2, #1
 800195a:	61ba      	str	r2, [r7, #24]
 800195c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001960:	b2da      	uxtb	r2, r3
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	b2db      	uxtb	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	3a01      	subs	r2, #1
 800197a:	61ba      	str	r2, [r7, #24]
 800197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001980:	b2da      	uxtb	r2, r3
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <parse_string+0x2b8>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	69b9      	ldr	r1, [r7, #24]
 800199a:	3901      	subs	r1, #1
 800199c:	61b9      	str	r1, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
					break;
 80019ae:	e010      	b.n	80019d2 <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	61ba      	str	r2, [r7, #24]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e009      	b.n	80019d2 <parse_string+0x2be>
 80019be:	bf00      	nop
 80019c0:	20000264 	.word	0x20000264
 80019c4:	20000000 	.word	0x20000000
 80019c8:	000ffc00 	.word	0x000ffc00
 80019cc:	08020970 	.word	0x08020970
			}
			ptr++;
 80019d0:	bf00      	nop
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b22      	cmp	r3, #34	; 0x22
 80019de:	d004      	beq.n	80019ea <parse_string+0x2d6>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f47f aed1 	bne.w	800178c <parse_string+0x78>
		}
	}
	*ptr2=0;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b22      	cmp	r3, #34	; 0x22
 80019f6:	d102      	bne.n	80019fe <parse_string+0x2ea>
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	3301      	adds	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	60da      	str	r2, [r3, #12]
	return ptr;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	e002      	b.n	8001a24 <skip+0x10>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <skip+0x26>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <skip+0x26>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d9f1      	bls.n	8001a1e <skip+0xa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001a58:	f7ff fbfc 	bl	8001254 <cJSON_New_Item>
 8001a5c:	6138      	str	r0, [r7, #16]
	ep=0;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <cJSON_ParseWithOpts+0x84>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <cJSON_ParseWithOpts+0x26>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e02a      	b.n	8001ac4 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff ffd0 	bl	8001a14 <skip>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f000 f837 	bl	8001aec <parse_value>
 8001a7e:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <cJSON_ParseWithOpts+0x48>
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7ff fbfc 	bl	8001284 <cJSON_Delete>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e019      	b.n	8001ac4 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <cJSON_ParseWithOpts+0x6e>
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ffbc 	bl	8001a14 <skip>
 8001a9c:	6178      	str	r0, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <cJSON_ParseWithOpts+0x6e>
 8001aa6:	6938      	ldr	r0, [r7, #16]
 8001aa8:	f7ff fbec 	bl	8001284 <cJSON_Delete>
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <cJSON_ParseWithOpts+0x84>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e006      	b.n	8001ac4 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <cJSON_ParseWithOpts+0x7a>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
	return c;
 8001ac2:	693b      	ldr	r3, [r7, #16]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000264 	.word	0x20000264

08001ad0 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffb3 	bl	8001a48 <cJSON_ParseWithOpts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <parse_value+0x14>
 8001afc:	2300      	movs	r3, #0
 8001afe:	e060      	b.n	8001bc2 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001b00:	2204      	movs	r2, #4
 8001b02:	4932      	ldr	r1, [pc, #200]	; (8001bcc <parse_value+0xe0>)
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f016 ffa3 	bl	8018a50 <strncmp>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <parse_value+0x30>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	e052      	b.n	8001bc2 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001b1c:	2205      	movs	r2, #5
 8001b1e:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <parse_value+0xe4>)
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f016 ff95 	bl	8018a50 <strncmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <parse_value+0x4c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3305      	adds	r3, #5
 8001b36:	e044      	b.n	8001bc2 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001b38:	2204      	movs	r2, #4
 8001b3a:	4926      	ldr	r1, [pc, #152]	; (8001bd4 <parse_value+0xe8>)
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f016 ff87 	bl	8018a50 <strncmp>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <parse_value+0x6e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	615a      	str	r2, [r3, #20]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3304      	adds	r3, #4
 8001b58:	e033      	b.n	8001bc2 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b22      	cmp	r3, #34	; 0x22
 8001b60:	d105      	bne.n	8001b6e <parse_value+0x82>
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fdd5 	bl	8001714 <parse_string>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e029      	b.n	8001bc2 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b2d      	cmp	r3, #45	; 0x2d
 8001b74:	d007      	beq.n	8001b86 <parse_value+0x9a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b7c:	d909      	bls.n	8001b92 <parse_value+0xa6>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b39      	cmp	r3, #57	; 0x39
 8001b84:	d805      	bhi.n	8001b92 <parse_value+0xa6>
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fbc1 	bl	8001310 <parse_number>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	e017      	b.n	8001bc2 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b5b      	cmp	r3, #91	; 0x5b
 8001b98:	d105      	bne.n	8001ba6 <parse_value+0xba>
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f81d 	bl	8001bdc <parse_array>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	e00d      	b.n	8001bc2 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b7b      	cmp	r3, #123	; 0x7b
 8001bac:	d105      	bne.n	8001bba <parse_value+0xce>
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f889 	bl	8001cc8 <parse_object>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e003      	b.n	8001bc2 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <parse_value+0xec>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0801d054 	.word	0x0801d054
 8001bd0:	0801d05c 	.word	0x0801d05c
 8001bd4:	0801d064 	.word	0x0801d064
 8001bd8:	20000264 	.word	0x20000264

08001bdc <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b5b      	cmp	r3, #91	; 0x5b
 8001bec:	d004      	beq.n	8001bf8 <parse_array+0x1c>
 8001bee:	4a35      	ldr	r2, [pc, #212]	; (8001cc4 <parse_array+0xe8>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e060      	b.n	8001cba <parse_array+0xde>

	item->type=cJSON_Array;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff06 	bl	8001a14 <skip>
 8001c08:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b5d      	cmp	r3, #93	; 0x5d
 8001c10:	d102      	bne.n	8001c18 <parse_array+0x3c>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	e050      	b.n	8001cba <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001c18:	f7ff fb1c 	bl	8001254 <cJSON_New_Item>
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <parse_array+0x54>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e044      	b.n	8001cba <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001c30:	6838      	ldr	r0, [r7, #0]
 8001c32:	f7ff feef 	bl	8001a14 <skip>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff ff56 	bl	8001aec <parse_value>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fee6 	bl	8001a14 <skip>
 8001c48:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d125      	bne.n	8001c9c <parse_array+0xc0>
 8001c50:	2300      	movs	r3, #0
 8001c52:	e032      	b.n	8001cba <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001c54:	f7ff fafe 	bl	8001254 <cJSON_New_Item>
 8001c58:	60b8      	str	r0, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <parse_array+0x88>
 8001c60:	2300      	movs	r3, #0
 8001c62:	e02a      	b.n	8001cba <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fecb 	bl	8001a14 <skip>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff ff32 	bl	8001aec <parse_value>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fec2 	bl	8001a14 <skip>
 8001c90:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <parse_array+0xc0>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e00e      	b.n	8001cba <parse_array+0xde>
	while (*value==',')
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca2:	d0d7      	beq.n	8001c54 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b5d      	cmp	r3, #93	; 0x5d
 8001caa:	d102      	bne.n	8001cb2 <parse_array+0xd6>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	e003      	b.n	8001cba <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <parse_array+0xe8>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000264 	.word	0x20000264

08001cc8 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b7b      	cmp	r3, #123	; 0x7b
 8001cd8:	d004      	beq.n	8001ce4 <parse_object+0x1c>
 8001cda:	4a59      	ldr	r2, [pc, #356]	; (8001e40 <parse_object+0x178>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e0a8      	b.n	8001e36 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2206      	movs	r2, #6
 8001ce8:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe90 	bl	8001a14 <skip>
 8001cf4:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfc:	d102      	bne.n	8001d04 <parse_object+0x3c>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	e098      	b.n	8001e36 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001d04:	f7ff faa6 	bl	8001254 <cJSON_New_Item>
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <parse_object+0x54>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e08c      	b.n	8001e36 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff fe79 	bl	8001a14 <skip>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fcf4 	bl	8001714 <parse_string>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe70 	bl	8001a14 <skip>
 8001d34:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <parse_object+0x78>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e07a      	b.n	8001e36 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	621a      	str	r2, [r3, #32]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b3a      	cmp	r3, #58	; 0x3a
 8001d54:	d004      	beq.n	8001d60 <parse_object+0x98>
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <parse_object+0x178>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e06a      	b.n	8001e36 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe55 	bl	8001a14 <skip>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff febc 	bl	8001aec <parse_value>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe4c 	bl	8001a14 <skip>
 8001d7c:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d149      	bne.n	8001e18 <parse_object+0x150>
 8001d84:	2300      	movs	r3, #0
 8001d86:	e056      	b.n	8001e36 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001d88:	f7ff fa64 	bl	8001254 <cJSON_New_Item>
 8001d8c:	60b8      	str	r0, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <parse_object+0xd0>
 8001d94:	2300      	movs	r3, #0
 8001d96:	e04e      	b.n	8001e36 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe31 	bl	8001a14 <skip>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7ff fcac 	bl	8001714 <parse_string>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe28 	bl	8001a14 <skip>
 8001dc4:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <parse_object+0x108>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e032      	b.n	8001e36 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b3a      	cmp	r3, #58	; 0x3a
 8001de4:	d004      	beq.n	8001df0 <parse_object+0x128>
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <parse_object+0x178>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	e022      	b.n	8001e36 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe0d 	bl	8001a14 <skip>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fe74 	bl	8001aec <parse_value>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe04 	bl	8001a14 <skip>
 8001e0c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <parse_object+0x150>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e00e      	b.n	8001e36 <parse_object+0x16e>
	while (*value==',')
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e1e:	d0b3      	beq.n	8001d88 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b7d      	cmp	r3, #125	; 0x7d
 8001e26:	d102      	bne.n	8001e2e <parse_object+0x166>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	e003      	b.n	8001e36 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <parse_object+0x178>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000264 	.word	0x20000264

08001e44 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e002      	b.n	8001e5c <cJSON_GetObjectItem+0x18>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <cJSON_GetObjectItem+0x30>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f981 	bl	8001170 <cJSON_strcasecmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <cJSON_GetObjectItem+0x12>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001e8a:	bf00      	nop
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <USART_Tx+0x2c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f9      	beq.n	8001e8c <USART_Tx+0xc>
	USART3->DR = Data;
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <USART_Tx+0x2c>)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	6053      	str	r3, [r2, #4]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40004800 	.word	0x40004800

08001eb0 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001ebc:	e009      	b.n	8001ed2 <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffda 	bl	8001e80 <USART_Tx>
		i++;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ef      	bne.n	8001ebe <SEND_str+0xe>
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <DEBUG_main>:
void DEBUG_main(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001eee:	f004 fa99 	bl	8006424 <dbg_available>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80d5 	beq.w	80020a4 <DEBUG_main+0x1bc>
	{
		uint16_t i = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	2100      	movs	r1, #0
 8001f06:	4869      	ldr	r0, [pc, #420]	; (80020ac <DEBUG_main+0x1c4>)
 8001f08:	f015 ffe5 	bl	8017ed6 <memset>
		HAL_Delay(50);
 8001f0c:	2032      	movs	r0, #50	; 0x32
 8001f0e:	f004 fb61 	bl	80065d4 <HAL_Delay>

		while(dbg_available())
 8001f12:	e010      	b.n	8001f36 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8001f14:	f004 fa9e 	bl	8006454 <dbg_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	80fa      	strh	r2, [r7, #6]
 8001f22:	461a      	mov	r2, r3
 8001f24:	b2c9      	uxtb	r1, r1
 8001f26:	4b61      	ldr	r3, [pc, #388]	; (80020ac <DEBUG_main+0x1c4>)
 8001f28:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f2e:	d808      	bhi.n	8001f42 <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f004 fb4f 	bl	80065d4 <HAL_Delay>
		while(dbg_available())
 8001f36:	f004 fa75 	bl	8006424 <dbg_available>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e9      	bne.n	8001f14 <DEBUG_main+0x2c>
 8001f40:	e000      	b.n	8001f44 <DEBUG_main+0x5c>
				break;
 8001f42:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001f44:	4859      	ldr	r0, [pc, #356]	; (80020ac <DEBUG_main+0x1c4>)
 8001f46:	f000 faa1 	bl	800248c <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001f4a:	4959      	ldr	r1, [pc, #356]	; (80020b0 <DEBUG_main+0x1c8>)
 8001f4c:	4857      	ldr	r0, [pc, #348]	; (80020ac <DEBUG_main+0x1c4>)
 8001f4e:	f016 fd91 	bl	8018a74 <strstr>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8001f58:	4856      	ldr	r0, [pc, #344]	; (80020b4 <DEBUG_main+0x1cc>)
 8001f5a:	f7ff ffa9 	bl	8001eb0 <SEND_str>
 8001f5e:	e098      	b.n	8002092 <DEBUG_main+0x1aa>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001f60:	4955      	ldr	r1, [pc, #340]	; (80020b8 <DEBUG_main+0x1d0>)
 8001f62:	4852      	ldr	r0, [pc, #328]	; (80020ac <DEBUG_main+0x1c4>)
 8001f64:	f016 fd86 	bl	8018a74 <strstr>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001f6e:	4853      	ldr	r0, [pc, #332]	; (80020bc <DEBUG_main+0x1d4>)
 8001f70:	f000 fafa 	bl	8002568 <json_input>
 8001f74:	e08d      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001f76:	4952      	ldr	r1, [pc, #328]	; (80020c0 <DEBUG_main+0x1d8>)
 8001f78:	484c      	ldr	r0, [pc, #304]	; (80020ac <DEBUG_main+0x1c4>)
 8001f7a:	f016 fd7b 	bl	8018a74 <strstr>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001f84:	484f      	ldr	r0, [pc, #316]	; (80020c4 <DEBUG_main+0x1dc>)
 8001f86:	f000 faef 	bl	8002568 <json_input>
 8001f8a:	e082      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001f8c:	494e      	ldr	r1, [pc, #312]	; (80020c8 <DEBUG_main+0x1e0>)
 8001f8e:	4847      	ldr	r0, [pc, #284]	; (80020ac <DEBUG_main+0x1c4>)
 8001f90:	f016 fd70 	bl	8018a74 <strstr>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8001f9a:	484c      	ldr	r0, [pc, #304]	; (80020cc <DEBUG_main+0x1e4>)
 8001f9c:	f000 fae4 	bl	8002568 <json_input>
 8001fa0:	e077      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8001fa2:	494b      	ldr	r1, [pc, #300]	; (80020d0 <DEBUG_main+0x1e8>)
 8001fa4:	4841      	ldr	r0, [pc, #260]	; (80020ac <DEBUG_main+0x1c4>)
 8001fa6:	f016 fd65 	bl	8018a74 <strstr>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD1\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001fb0:	4848      	ldr	r0, [pc, #288]	; (80020d4 <DEBUG_main+0x1ec>)
 8001fb2:	f000 fad9 	bl	8002568 <json_input>
 8001fb6:	e06c      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8001fb8:	4947      	ldr	r1, [pc, #284]	; (80020d8 <DEBUG_main+0x1f0>)
 8001fba:	483c      	ldr	r0, [pc, #240]	; (80020ac <DEBUG_main+0x1c4>)
 8001fbc:	f016 fd5a 	bl	8018a74 <strstr>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001fc6:	4845      	ldr	r0, [pc, #276]	; (80020dc <DEBUG_main+0x1f4>)
 8001fc8:	f000 face 	bl	8002568 <json_input>
 8001fcc:	e061      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 8001fce:	4944      	ldr	r1, [pc, #272]	; (80020e0 <DEBUG_main+0x1f8>)
 8001fd0:	4836      	ldr	r0, [pc, #216]	; (80020ac <DEBUG_main+0x1c4>)
 8001fd2:	f016 fd4f 	bl	8018a74 <strstr>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001fdc:	4841      	ldr	r0, [pc, #260]	; (80020e4 <DEBUG_main+0x1fc>)
 8001fde:	f000 fac3 	bl	8002568 <json_input>
 8001fe2:	e056      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP4") != NULL)
 8001fe4:	4940      	ldr	r1, [pc, #256]	; (80020e8 <DEBUG_main+0x200>)
 8001fe6:	4831      	ldr	r0, [pc, #196]	; (80020ac <DEBUG_main+0x1c4>)
 8001fe8:	f016 fd44 	bl	8018a74 <strstr>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0\",\"RANGE_HIGH\":\"1\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001ff2:	483e      	ldr	r0, [pc, #248]	; (80020ec <DEBUG_main+0x204>)
 8001ff4:	f000 fab8 	bl	8002568 <json_input>
 8001ff8:	e04b      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 8001ffa:	493d      	ldr	r1, [pc, #244]	; (80020f0 <DEBUG_main+0x208>)
 8001ffc:	482b      	ldr	r0, [pc, #172]	; (80020ac <DEBUG_main+0x1c4>)
 8001ffe:	f016 fd39 	bl	8018a74 <strstr>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002008:	483a      	ldr	r0, [pc, #232]	; (80020f4 <DEBUG_main+0x20c>)
 800200a:	f000 faad 	bl	8002568 <json_input>
 800200e:	e040      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002010:	4939      	ldr	r1, [pc, #228]	; (80020f8 <DEBUG_main+0x210>)
 8002012:	4826      	ldr	r0, [pc, #152]	; (80020ac <DEBUG_main+0x1c4>)
 8002014:	f016 fd2e 	bl	8018a74 <strstr>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 800201e:	4837      	ldr	r0, [pc, #220]	; (80020fc <DEBUG_main+0x214>)
 8002020:	f000 faa2 	bl	8002568 <json_input>
 8002024:	e035      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <DEBUG_main+0x218>)
 8002028:	4820      	ldr	r0, [pc, #128]	; (80020ac <DEBUG_main+0x1c4>)
 800202a:	f016 fd23 	bl	8018a74 <strstr>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002034:	4833      	ldr	r0, [pc, #204]	; (8002104 <DEBUG_main+0x21c>)
 8002036:	f000 fa97 	bl	8002568 <json_input>
 800203a:	e02a      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 800203c:	4932      	ldr	r1, [pc, #200]	; (8002108 <DEBUG_main+0x220>)
 800203e:	481b      	ldr	r0, [pc, #108]	; (80020ac <DEBUG_main+0x1c4>)
 8002040:	f016 fd18 	bl	8018a74 <strstr>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 800204a:	4830      	ldr	r0, [pc, #192]	; (800210c <DEBUG_main+0x224>)
 800204c:	f000 fa8c 	bl	8002568 <json_input>
 8002050:	e01f      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 8002052:	492f      	ldr	r1, [pc, #188]	; (8002110 <DEBUG_main+0x228>)
 8002054:	4815      	ldr	r0, [pc, #84]	; (80020ac <DEBUG_main+0x1c4>)
 8002056:	f016 fd0d 	bl	8018a74 <strstr>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <DEBUG_main+0x180>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002060:	482c      	ldr	r0, [pc, #176]	; (8002114 <DEBUG_main+0x22c>)
 8002062:	f000 fa81 	bl	8002568 <json_input>
 8002066:	e014      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 8002068:	492b      	ldr	r1, [pc, #172]	; (8002118 <DEBUG_main+0x230>)
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <DEBUG_main+0x1c4>)
 800206c:	f016 fd02 	bl	8018a74 <strstr>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <DEBUG_main+0x196>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002076:	4829      	ldr	r0, [pc, #164]	; (800211c <DEBUG_main+0x234>)
 8002078:	f000 fa76 	bl	8002568 <json_input>
 800207c:	e009      	b.n	8002092 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 800207e:	4928      	ldr	r1, [pc, #160]	; (8002120 <DEBUG_main+0x238>)
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <DEBUG_main+0x1c4>)
 8002082:	f016 fcf7 	bl	8018a74 <strstr>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <DEBUG_main+0x1aa>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 800208c:	4825      	ldr	r0, [pc, #148]	; (8002124 <DEBUG_main+0x23c>)
 800208e:	f000 fa6b 	bl	8002568 <json_input>
		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		if(fdbg)
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <DEBUG_main+0x1bc>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <DEBUG_main+0x1c4>)
 800209a:	4a23      	ldr	r2, [pc, #140]	; (8002128 <DEBUG_main+0x240>)
 800209c:	2140      	movs	r1, #64	; 0x40
 800209e:	4823      	ldr	r0, [pc, #140]	; (800212c <DEBUG_main+0x244>)
 80020a0:	f016 fc82 	bl	80189a8 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000268 	.word	0x20000268
 80020b0:	0801d070 	.word	0x0801d070
 80020b4:	0801d078 	.word	0x0801d078
 80020b8:	0801d084 	.word	0x0801d084
 80020bc:	0801d088 	.word	0x0801d088
 80020c0:	0801d0f4 	.word	0x0801d0f4
 80020c4:	0801d0f8 	.word	0x0801d0f8
 80020c8:	0801d168 	.word	0x0801d168
 80020cc:	0801d16c 	.word	0x0801d16c
 80020d0:	0801d1d8 	.word	0x0801d1d8
 80020d4:	0801d1dc 	.word	0x0801d1dc
 80020d8:	0801d268 	.word	0x0801d268
 80020dc:	0801d26c 	.word	0x0801d26c
 80020e0:	0801d2f8 	.word	0x0801d2f8
 80020e4:	0801d2fc 	.word	0x0801d2fc
 80020e8:	0801d3a4 	.word	0x0801d3a4
 80020ec:	0801d3a8 	.word	0x0801d3a8
 80020f0:	0801d44c 	.word	0x0801d44c
 80020f4:	0801d450 	.word	0x0801d450
 80020f8:	0801d4c0 	.word	0x0801d4c0
 80020fc:	0801d4c4 	.word	0x0801d4c4
 8002100:	0801d534 	.word	0x0801d534
 8002104:	0801d538 	.word	0x0801d538
 8002108:	0801d5a8 	.word	0x0801d5a8
 800210c:	0801d5ac 	.word	0x0801d5ac
 8002110:	0801d61c 	.word	0x0801d61c
 8002114:	0801d620 	.word	0x0801d620
 8002118:	0801d690 	.word	0x0801d690
 800211c:	0801d694 	.word	0x0801d694
 8002120:	0801d758 	.word	0x0801d758
 8002124:	0801d75c 	.word	0x0801d75c
 8002128:	0801d820 	.word	0x0801d820
 800212c:	200002a8 	.word	0x200002a8

08002130 <DWT_Init>:
 *      Author: mmorozov
 */
#include "main.h"

void DWT_Init(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <DWT_Init+0x28>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <DWT_Init+0x28>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <DWT_Init+0x2c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a05      	ldr	r2, [pc, #20]	; (800215c <DWT_Init+0x2c>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000edfc 	.word	0xe000edfc
 800215c:	e0001000 	.word	0xe0001000

08002160 <delay_micros>:

void delay_micros(uint32_t us)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000); // получаем кол-во тактов за 1 мкс и умножаем на наше значение
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <delay_micros+0x3c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <delay_micros+0x40>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9a      	lsrs	r2, r3, #18
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <delay_micros+0x44>)
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8002182:	bf00      	nop
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <delay_micros+0x44>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	429a      	cmp	r2, r3
 800218c:	d8fa      	bhi.n	8002184 <delay_micros+0x24>
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2000005c 	.word	0x2000005c
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	e0001000 	.word	0xe0001000

080021a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MX_DMA_Init+0x98>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <MX_DMA_Init+0x98>)
 80021b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_DMA_Init+0x98>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_DMA_Init+0x98>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <MX_DMA_Init+0x98>)
 80021d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_DMA_Init+0x98>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	200d      	movs	r0, #13
 80021ec:	f004 feb6 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021f0:	200d      	movs	r0, #13
 80021f2:	f004 fecf 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	200f      	movs	r0, #15
 80021fc:	f004 feae 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002200:	200f      	movs	r0, #15
 8002202:	f004 fec7 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	2010      	movs	r0, #16
 800220c:	f004 fea6 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002210:	2010      	movs	r0, #16
 8002212:	f004 febf 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	202f      	movs	r0, #47	; 0x2f
 800221c:	f004 fe9e 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002220:	202f      	movs	r0, #47	; 0x2f
 8002222:	f004 feb7 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2038      	movs	r0, #56	; 0x38
 800222c:	f004 fe96 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002230:	2038      	movs	r0, #56	; 0x38
 8002232:	f004 feaf 	bl	8006f94 <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	4b84      	ldr	r3, [pc, #528]	; (8002470 <MX_GPIO_Init+0x22c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a83      	ldr	r2, [pc, #524]	; (8002470 <MX_GPIO_Init+0x22c>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <MX_GPIO_Init+0x22c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <MX_GPIO_Init+0x22c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <MX_GPIO_Init+0x22c>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <MX_GPIO_Init+0x22c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <MX_GPIO_Init+0x22c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <MX_GPIO_Init+0x22c>)
 800229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b68      	ldr	r3, [pc, #416]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a67      	ldr	r2, [pc, #412]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4b61      	ldr	r3, [pc, #388]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a60      	ldr	r2, [pc, #384]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <MX_GPIO_Init+0x22c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	2140      	movs	r1, #64	; 0x40
 8002306:	485b      	ldr	r0, [pc, #364]	; (8002474 <MX_GPIO_Init+0x230>)
 8002308:	f006 fc36 	bl	8008b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002312:	4859      	ldr	r0, [pc, #356]	; (8002478 <MX_GPIO_Init+0x234>)
 8002314:	f006 fc30 	bl	8008b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	2101      	movs	r1, #1
 800231c:	4857      	ldr	r0, [pc, #348]	; (800247c <MX_GPIO_Init+0x238>)
 800231e:	f006 fc2b 	bl	8008b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2143      	movs	r1, #67	; 0x43
 8002326:	4856      	ldr	r0, [pc, #344]	; (8002480 <MX_GPIO_Init+0x23c>)
 8002328:	f006 fc26 	bl	8008b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 800232c:	2200      	movs	r2, #0
 800232e:	f64f 7183 	movw	r1, #65411	; 0xff83
 8002332:	4850      	ldr	r0, [pc, #320]	; (8002474 <MX_GPIO_Init+0x230>)
 8002334:	f006 fc20 	bl	8008b78 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233e:	484f      	ldr	r0, [pc, #316]	; (800247c <MX_GPIO_Init+0x238>)
 8002340:	f006 fc1a 	bl	8008b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 8002344:	2200      	movs	r2, #0
 8002346:	219b      	movs	r1, #155	; 0x9b
 8002348:	484e      	ldr	r0, [pc, #312]	; (8002484 <MX_GPIO_Init+0x240>)
 800234a:	f006 fc15 	bl	8008b78 <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 800234e:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 8002352:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4843      	ldr	r0, [pc, #268]	; (8002474 <MX_GPIO_Init+0x230>)
 8002368:	f006 fa54 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	483c      	ldr	r0, [pc, #240]	; (8002478 <MX_GPIO_Init+0x234>)
 8002386:	f006 fa45 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4836      	ldr	r0, [pc, #216]	; (8002478 <MX_GPIO_Init+0x234>)
 800239e:	f006 fa39 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 80023a2:	f640 0301 	movw	r3, #2049	; 0x801
 80023a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	4830      	ldr	r0, [pc, #192]	; (800247c <MX_GPIO_Init+0x238>)
 80023bc:	f006 fa2a 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 80023c0:	2343      	movs	r3, #67	; 0x43
 80023c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	482a      	ldr	r0, [pc, #168]	; (8002480 <MX_GPIO_Init+0x23c>)
 80023d8:	f006 fa1c 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 80023dc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80023e0:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MX_GPIO_Init+0x244>)
 80023e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4824      	ldr	r0, [pc, #144]	; (8002484 <MX_GPIO_Init+0x240>)
 80023f2:	f006 fa0f 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023fa:	2311      	movs	r3, #17
 80023fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002402:	2302      	movs	r3, #2
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	481d      	ldr	r0, [pc, #116]	; (8002484 <MX_GPIO_Init+0x240>)
 800240e:	f006 fa01 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 8002412:	239a      	movs	r3, #154	; 0x9a
 8002414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002416:	2301      	movs	r3, #1
 8002418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <MX_GPIO_Init+0x240>)
 800242a:	f006 f9f3 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	480f      	ldr	r0, [pc, #60]	; (8002480 <MX_GPIO_Init+0x23c>)
 8002442:	f006 f9e7 	bl	8008814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2017      	movs	r0, #23
 800244c:	f004 fd86 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002450:	2017      	movs	r0, #23
 8002452:	f004 fd9f 	bl	8006f94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2028      	movs	r0, #40	; 0x28
 800245c:	f004 fd7e 	bl	8006f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002460:	2028      	movs	r0, #40	; 0x28
 8002462:	f004 fd97 	bl	8006f94 <HAL_NVIC_EnableIRQ>

}
 8002466:	bf00      	nop
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40021000 	.word	0x40021000
 8002478:	40020800 	.word	0x40020800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020c00 	.word	0x40020c00
 8002488:	10310000 	.word	0x10310000

0800248c <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02f      	beq.n	80024fe <clear_string+0x72>
	uint8_t i = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e022      	b.n	80024ee <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d80b      	bhi.n	80024c6 <clear_string+0x3a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d003      	beq.n	80024be <clear_string+0x32>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b0d      	cmp	r3, #13
 80024bc:	d103      	bne.n	80024c6 <clear_string+0x3a>
		{
			i++;
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	3301      	adds	r3, #1
 80024c2:	72fb      	strb	r3, [r7, #11]
			continue;
 80024c4:	e010      	b.n	80024e8 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d003      	beq.n	80024d6 <clear_string+0x4a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b0d      	cmp	r3, #13
 80024d4:	d102      	bne.n	80024dc <clear_string+0x50>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60fa      	str	r2, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1d8      	bne.n	80024a8 <clear_string+0x1c>
	}

	*dst = 0;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e000      	b.n	8002500 <clear_string+0x74>
	if(!src) return;
 80024fe:	bf00      	nop
}
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e013      	b.n	8002546 <parseValue+0x3a>
	{
		if(i % 2)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	7819      	ldrb	r1, [r3, #0]
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <parseValue+0x58>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	460a      	mov	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
			j++;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	3301      	adds	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fd fe4c 	bl	80001e4 <strlen>
 800254c:	4602      	mov	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8e4      	bhi.n	800251e <parseValue+0x12>
		}
	}
	tmp = paramValue;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <parseValue+0x58>)
 8002556:	60fb      	str	r3, [r7, #12]

	return tmp;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200009e8 	.word	0x200009e8

08002568 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	ed2d 8b04 	vpush	{d8-d9}
 800256e:	b0a3      	sub	sp, #140	; 0x8c
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff faab 	bl	8001ad0 <cJSON_Parse>
 800257a:	67b8      	str	r0, [r7, #120]	; 0x78

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 800257c:	49a5      	ldr	r1, [pc, #660]	; (8002814 <json_input+0x2ac>)
 800257e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002580:	f7ff fc60 	bl	8001e44 <cJSON_GetObjectItem>
 8002584:	6778      	str	r0, [r7, #116]	; 0x74
	TIME = stime->valuestring;
 8002586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4aa3      	ldr	r2, [pc, #652]	; (8002818 <json_input+0x2b0>)
 800258c:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 800258e:	4ba2      	ldr	r3, [pc, #648]	; (8002818 <json_input+0x2b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f015 fc0f 	bl	8017db6 <atoi>
 8002598:	4602      	mov	r2, r0
 800259a:	4ba0      	ldr	r3, [pc, #640]	; (800281c <json_input+0x2b4>)
 800259c:	601a      	str	r2, [r3, #0]
	if(Time_Server > Time_Client)
 800259e:	4b9f      	ldr	r3, [pc, #636]	; (800281c <json_input+0x2b4>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b9f      	ldr	r3, [pc, #636]	; (8002820 <json_input+0x2b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f340 856b 	ble.w	8003082 <json_input+0xb1a>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 80025ac:	499d      	ldr	r1, [pc, #628]	; (8002824 <json_input+0x2bc>)
 80025ae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025b0:	f7ff fc48 	bl	8001e44 <cJSON_GetObjectItem>
 80025b4:	6738      	str	r0, [r7, #112]	; 0x70
		INSTRUCTION = sInstruction->valuestring;
 80025b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	4a9b      	ldr	r2, [pc, #620]	; (8002828 <json_input+0x2c0>)
 80025bc:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 80025be:	4b9a      	ldr	r3, [pc, #616]	; (8002828 <json_input+0x2c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	499a      	ldr	r1, [pc, #616]	; (800282c <json_input+0x2c4>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe03 	bl	80001d0 <strcmp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 8419 	bne.w	8002e04 <json_input+0x89c>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80025d2:	4997      	ldr	r1, [pc, #604]	; (8002830 <json_input+0x2c8>)
 80025d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025d6:	f7ff fc35 	bl	8001e44 <cJSON_GetObjectItem>
 80025da:	4603      	mov	r3, r0
 80025dc:	4995      	ldr	r1, [pc, #596]	; (8002834 <json_input+0x2cc>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fc30 	bl	8001e44 <cJSON_GetObjectItem>
 80025e4:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	4a93      	ldr	r2, [pc, #588]	; (8002838 <json_input+0x2d0>)
 80025ec:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 80025ee:	4b92      	ldr	r3, [pc, #584]	; (8002838 <json_input+0x2d0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4992      	ldr	r1, [pc, #584]	; (800283c <json_input+0x2d4>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd fdeb 	bl	80001d0 <strcmp>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80a8 	bne.w	8002752 <json_input+0x1ea>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002602:	498b      	ldr	r1, [pc, #556]	; (8002830 <json_input+0x2c8>)
 8002604:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002606:	f7ff fc1d 	bl	8001e44 <cJSON_GetObjectItem>
 800260a:	4603      	mov	r3, r0
 800260c:	498c      	ldr	r1, [pc, #560]	; (8002840 <json_input+0x2d8>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fc18 	bl	8001e44 <cJSON_GetObjectItem>
 8002614:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8002616:	4986      	ldr	r1, [pc, #536]	; (8002830 <json_input+0x2c8>)
 8002618:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800261a:	f7ff fc13 	bl	8001e44 <cJSON_GetObjectItem>
 800261e:	4603      	mov	r3, r0
 8002620:	4988      	ldr	r1, [pc, #544]	; (8002844 <json_input+0x2dc>)
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc0e 	bl	8001e44 <cJSON_GetObjectItem>
 8002628:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 800262a:	4981      	ldr	r1, [pc, #516]	; (8002830 <json_input+0x2c8>)
 800262c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800262e:	f7ff fc09 	bl	8001e44 <cJSON_GetObjectItem>
 8002632:	4603      	mov	r3, r0
 8002634:	4984      	ldr	r1, [pc, #528]	; (8002848 <json_input+0x2e0>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fc04 	bl	8001e44 <cJSON_GetObjectItem>
 800263c:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800263e:	497c      	ldr	r1, [pc, #496]	; (8002830 <json_input+0x2c8>)
 8002640:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002642:	f7ff fbff 	bl	8001e44 <cJSON_GetObjectItem>
 8002646:	4603      	mov	r3, r0
 8002648:	4980      	ldr	r1, [pc, #512]	; (800284c <json_input+0x2e4>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fbfa 	bl	8001e44 <cJSON_GetObjectItem>
 8002650:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4a7e      	ldr	r2, [pc, #504]	; (8002850 <json_input+0x2e8>)
 8002658:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4a7d      	ldr	r2, [pc, #500]	; (8002854 <json_input+0x2ec>)
 8002660:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <json_input+0x2f0>)
 8002668:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a7b      	ldr	r2, [pc, #492]	; (800285c <json_input+0x2f4>)
 8002670:	6013      	str	r3, [r2, #0]

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002672:	4b77      	ldr	r3, [pc, #476]	; (8002850 <json_input+0x2e8>)
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <json_input+0x2ec>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f015 fb9b 	bl	8017db6 <atoi>
 8002680:	4603      	mov	r3, r0
 8002682:	b2dd      	uxtb	r5, r3
 8002684:	4b74      	ldr	r3, [pc, #464]	; (8002858 <json_input+0x2f0>)
 8002686:	681e      	ldr	r6, [r3, #0]
 8002688:	4b74      	ldr	r3, [pc, #464]	; (800285c <json_input+0x2f4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f015 fb92 	bl	8017db6 <atoi>
 8002692:	4603      	mov	r3, r0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4632      	mov	r2, r6
 8002698:	4629      	mov	r1, r5
 800269a:	4620      	mov	r0, r4
 800269c:	f000 ff80 	bl	80035a0 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 80026a0:	486f      	ldr	r0, [pc, #444]	; (8002860 <json_input+0x2f8>)
 80026a2:	f7ff fc05 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 80026a6:	4b64      	ldr	r3, [pc, #400]	; (8002838 <json_input+0x2d0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fc00 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 80026b0:	486b      	ldr	r0, [pc, #428]	; (8002860 <json_input+0x2f8>)
 80026b2:	f7ff fbfd 	bl	8001eb0 <SEND_str>
				SEND_str(D_IN);
 80026b6:	4b66      	ldr	r3, [pc, #408]	; (8002850 <json_input+0x2e8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fbf8 	bl	8001eb0 <SEND_str>
				SEND_str(": ");
 80026c0:	4868      	ldr	r0, [pc, #416]	; (8002864 <json_input+0x2fc>)
 80026c2:	f7ff fbf5 	bl	8001eb0 <SEND_str>
				USART_Tx(D_IN[4]);
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <json_input+0x2e8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3304      	adds	r3, #4
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fbd6 	bl	8001e80 <USART_Tx>
				SEND_str("\n");
 80026d4:	4862      	ldr	r0, [pc, #392]	; (8002860 <json_input+0x2f8>)
 80026d6:	f7ff fbeb 	bl	8001eb0 <SEND_str>
				SEND_str(VAR_IN);
 80026da:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <json_input+0x2ec>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fbe6 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 80026e4:	485e      	ldr	r0, [pc, #376]	; (8002860 <json_input+0x2f8>)
 80026e6:	f7ff fbe3 	bl	8001eb0 <SEND_str>
				SEND_str(D_OUT);
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <json_input+0x2f0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fbde 	bl	8001eb0 <SEND_str>
				SEND_str(": ");
 80026f4:	485b      	ldr	r0, [pc, #364]	; (8002864 <json_input+0x2fc>)
 80026f6:	f7ff fbdb 	bl	8001eb0 <SEND_str>
				USART_Tx(D_OUT[5]);
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <json_input+0x2f0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3305      	adds	r3, #5
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fbbc 	bl	8001e80 <USART_Tx>
				SEND_str("\n");
 8002708:	4855      	ldr	r0, [pc, #340]	; (8002860 <json_input+0x2f8>)
 800270a:	f7ff fbd1 	bl	8001eb0 <SEND_str>
				SEND_str(VAR_OUT);
 800270e:	4b53      	ldr	r3, [pc, #332]	; (800285c <json_input+0x2f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fbcc 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002718:	4851      	ldr	r0, [pc, #324]	; (8002860 <json_input+0x2f8>)
 800271a:	f7ff fbc9 	bl	8001eb0 <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 800271e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002720:	f7fe fdb0 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002724:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002726:	f015 fb89 	bl	8017e3c <free>
				free(sInstruction);
 800272a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800272c:	f015 fb86 	bl	8017e3c <free>
				free(sType);
 8002730:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002732:	f015 fb83 	bl	8017e3c <free>
				free(s1);
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f015 fb80 	bl	8017e3c <free>
				free(s2);
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f015 fb7d 	bl	8017e3c <free>
				free(s3);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f015 fb7a 	bl	8017e3c <free>
				free(s4);
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f015 fb77 	bl	8017e3c <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 800274e:	f000 bc9e 	b.w	800308e <json_input+0xb26>
			else if(strcmp(TYPE, "SET_VAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <json_input+0x2d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4944      	ldr	r1, [pc, #272]	; (8002868 <json_input+0x300>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fd39 	bl	80001d0 <strcmp>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 813b 	bne.w	80029dc <json_input+0x474>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002766:	4932      	ldr	r1, [pc, #200]	; (8002830 <json_input+0x2c8>)
 8002768:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800276a:	f7ff fb6b 	bl	8001e44 <cJSON_GetObjectItem>
 800276e:	4603      	mov	r3, r0
 8002770:	493e      	ldr	r1, [pc, #248]	; (800286c <json_input+0x304>)
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fb66 	bl	8001e44 <cJSON_GetObjectItem>
 8002778:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 800277a:	492d      	ldr	r1, [pc, #180]	; (8002830 <json_input+0x2c8>)
 800277c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800277e:	f7ff fb61 	bl	8001e44 <cJSON_GetObjectItem>
 8002782:	4603      	mov	r3, r0
 8002784:	493a      	ldr	r1, [pc, #232]	; (8002870 <json_input+0x308>)
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fb5c 	bl	8001e44 <cJSON_GetObjectItem>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 800278e:	4928      	ldr	r1, [pc, #160]	; (8002830 <json_input+0x2c8>)
 8002790:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002792:	f7ff fb57 	bl	8001e44 <cJSON_GetObjectItem>
 8002796:	4603      	mov	r3, r0
 8002798:	4936      	ldr	r1, [pc, #216]	; (8002874 <json_input+0x30c>)
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fb52 	bl	8001e44 <cJSON_GetObjectItem>
 80027a0:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80027a2:	4923      	ldr	r1, [pc, #140]	; (8002830 <json_input+0x2c8>)
 80027a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027a6:	f7ff fb4d 	bl	8001e44 <cJSON_GetObjectItem>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4926      	ldr	r1, [pc, #152]	; (8002848 <json_input+0x2e0>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fb48 	bl	8001e44 <cJSON_GetObjectItem>
 80027b4:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80027b6:	491e      	ldr	r1, [pc, #120]	; (8002830 <json_input+0x2c8>)
 80027b8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027ba:	f7ff fb43 	bl	8001e44 <cJSON_GetObjectItem>
 80027be:	4603      	mov	r3, r0
 80027c0:	4922      	ldr	r1, [pc, #136]	; (800284c <json_input+0x2e4>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fb3e 	bl	8001e44 <cJSON_GetObjectItem>
 80027c8:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <json_input+0x310>)
 80027d0:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4a29      	ldr	r2, [pc, #164]	; (800287c <json_input+0x314>)
 80027d8:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	4a28      	ldr	r2, [pc, #160]	; (8002880 <json_input+0x318>)
 80027e0:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <json_input+0x2f0>)
 80027e8:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <json_input+0x2f4>)
 80027f0:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <json_input+0x310>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4923      	ldr	r1, [pc, #140]	; (8002884 <json_input+0x31c>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fce9 	bl	80001d0 <strcmp>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d143      	bne.n	800288c <json_input+0x324>
					SelectChannelOne;
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280a:	481f      	ldr	r0, [pc, #124]	; (8002888 <json_input+0x320>)
 800280c:	f006 f9b4 	bl	8008b78 <HAL_GPIO_WritePin>
 8002810:	e06b      	b.n	80028ea <json_input+0x382>
 8002812:	bf00      	nop
 8002814:	0801d824 	.word	0x0801d824
 8002818:	200009c0 	.word	0x200009c0
 800281c:	200002e8 	.word	0x200002e8
 8002820:	200002ec 	.word	0x200002ec
 8002824:	0801d82c 	.word	0x0801d82c
 8002828:	20000a10 	.word	0x20000a10
 800282c:	0801d838 	.word	0x0801d838
 8002830:	0801d848 	.word	0x0801d848
 8002834:	0801d850 	.word	0x0801d850
 8002838:	200009b4 	.word	0x200009b4
 800283c:	0801d858 	.word	0x0801d858
 8002840:	0801d864 	.word	0x0801d864
 8002844:	0801d86c 	.word	0x0801d86c
 8002848:	0801d874 	.word	0x0801d874
 800284c:	0801d87c 	.word	0x0801d87c
 8002850:	20000a04 	.word	0x20000a04
 8002854:	200009c8 	.word	0x200009c8
 8002858:	200009f4 	.word	0x200009f4
 800285c:	200009d4 	.word	0x200009d4
 8002860:	0801d884 	.word	0x0801d884
 8002864:	0801d888 	.word	0x0801d888
 8002868:	0801d88c 	.word	0x0801d88c
 800286c:	0801d898 	.word	0x0801d898
 8002870:	0801d8a0 	.word	0x0801d8a0
 8002874:	0801d8ac 	.word	0x0801d8ac
 8002878:	20000a0c 	.word	0x20000a0c
 800287c:	200009d8 	.word	0x200009d8
 8002880:	200009f8 	.word	0x200009f8
 8002884:	0801d8b8 	.word	0x0801d8b8
 8002888:	40021000 	.word	0x40021000
				else if(strcmp(A_IN, "VHOD2") == 0)
 800288c:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <json_input+0x534>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4983      	ldr	r1, [pc, #524]	; (8002aa0 <json_input+0x538>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fc9c 	bl	80001d0 <strcmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <json_input+0x344>
					SelectChannelTwo;
 800289e:	2201      	movs	r2, #1
 80028a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a4:	487f      	ldr	r0, [pc, #508]	; (8002aa4 <json_input+0x53c>)
 80028a6:	f006 f967 	bl	8008b78 <HAL_GPIO_WritePin>
 80028aa:	e01e      	b.n	80028ea <json_input+0x382>
				else if(strcmp(A_IN, "VHOD3") == 0)
 80028ac:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <json_input+0x534>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	497d      	ldr	r1, [pc, #500]	; (8002aa8 <json_input+0x540>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fc8c 	bl	80001d0 <strcmp>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <json_input+0x364>
					SelectChannelThree;
 80028be:	2201      	movs	r2, #1
 80028c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c4:	4877      	ldr	r0, [pc, #476]	; (8002aa4 <json_input+0x53c>)
 80028c6:	f006 f957 	bl	8008b78 <HAL_GPIO_WritePin>
 80028ca:	e00e      	b.n	80028ea <json_input+0x382>
				else if(strcmp(A_IN, "VHOD4") == 0)
 80028cc:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <json_input+0x534>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4976      	ldr	r1, [pc, #472]	; (8002aac <json_input+0x544>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fc7c 	bl	80001d0 <strcmp>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <json_input+0x382>
					SelectChannelFour;
 80028de:	2201      	movs	r2, #1
 80028e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e4:	486f      	ldr	r0, [pc, #444]	; (8002aa4 <json_input+0x53c>)
 80028e6:	f006 f947 	bl	8008b78 <HAL_GPIO_WritePin>
				set_vaido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80028ea:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <json_input+0x534>)
 80028ec:	681c      	ldr	r4, [r3, #0]
 80028ee:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <json_input+0x548>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f015 fa5c 	bl	8017db0 <atof>
 80028f8:	eeb0 8a40 	vmov.f32	s16, s0
 80028fc:	eef0 8a60 	vmov.f32	s17, s1
 8002900:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <json_input+0x54c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f015 fa53 	bl	8017db0 <atof>
 800290a:	eeb0 9a40 	vmov.f32	s18, s0
 800290e:	eef0 9a60 	vmov.f32	s19, s1
 8002912:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <json_input+0x550>)
 8002914:	681d      	ldr	r5, [r3, #0]
 8002916:	4b69      	ldr	r3, [pc, #420]	; (8002abc <json_input+0x554>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f015 fa4b 	bl	8017db6 <atoi>
 8002920:	4603      	mov	r3, r0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4629      	mov	r1, r5
 8002928:	eeb0 1a49 	vmov.f32	s2, s18
 800292c:	eef0 1a69 	vmov.f32	s3, s19
 8002930:	eeb0 0a48 	vmov.f32	s0, s16
 8002934:	eef0 0a68 	vmov.f32	s1, s17
 8002938:	4620      	mov	r0, r4
 800293a:	f001 f801 	bl	8003940 <set_vaido>
				SEND_str("\n");
 800293e:	4860      	ldr	r0, [pc, #384]	; (8002ac0 <json_input+0x558>)
 8002940:	f7ff fab6 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <json_input+0x55c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fab1 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800294e:	485c      	ldr	r0, [pc, #368]	; (8002ac0 <json_input+0x558>)
 8002950:	f7ff faae 	bl	8001eb0 <SEND_str>
				SEND_str(A_IN);
 8002954:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <json_input+0x534>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff faa9 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800295e:	4858      	ldr	r0, [pc, #352]	; (8002ac0 <json_input+0x558>)
 8002960:	f7ff faa6 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_LOW);
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <json_input+0x548>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff faa1 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800296e:	4854      	ldr	r0, [pc, #336]	; (8002ac0 <json_input+0x558>)
 8002970:	f7ff fa9e 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002974:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <json_input+0x54c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fa99 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800297e:	4850      	ldr	r0, [pc, #320]	; (8002ac0 <json_input+0x558>)
 8002980:	f7ff fa96 	bl	8001eb0 <SEND_str>
				SEND_str(D_OUT);
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <json_input+0x550>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fa91 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800298e:	484c      	ldr	r0, [pc, #304]	; (8002ac0 <json_input+0x558>)
 8002990:	f7ff fa8e 	bl	8001eb0 <SEND_str>
				SEND_str(VAR_OUT);
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <json_input+0x554>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fa89 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 800299e:	4848      	ldr	r0, [pc, #288]	; (8002ac0 <json_input+0x558>)
 80029a0:	f7ff fa86 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 80029a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029a6:	f7fe fc6d 	bl	8001284 <cJSON_Delete>
				free(stime);
 80029aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80029ac:	f015 fa46 	bl	8017e3c <free>
				free(sInstruction);
 80029b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80029b2:	f015 fa43 	bl	8017e3c <free>
				free(sType);
 80029b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029b8:	f015 fa40 	bl	8017e3c <free>
				free(s1);
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f015 fa3d 	bl	8017e3c <free>
				free(s2);
 80029c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c4:	f015 fa3a 	bl	8017e3c <free>
				free(s3);
 80029c8:	6a38      	ldr	r0, [r7, #32]
 80029ca:	f015 fa37 	bl	8017e3c <free>
				free(s4);
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	f015 fa34 	bl	8017e3c <free>
				free(s5);
 80029d4:	69b8      	ldr	r0, [r7, #24]
 80029d6:	f015 fa31 	bl	8017e3c <free>
}
 80029da:	e358      	b.n	800308e <json_input+0xb26>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <json_input+0x55c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4939      	ldr	r1, [pc, #228]	; (8002ac8 <json_input+0x560>)
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fbf4 	bl	80001d0 <strcmp>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d178      	bne.n	8002ae0 <json_input+0x578>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 80029ee:	4937      	ldr	r1, [pc, #220]	; (8002acc <json_input+0x564>)
 80029f0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029f2:	f7ff fa27 	bl	8001e44 <cJSON_GetObjectItem>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <json_input+0x568>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fa22 	bl	8001e44 <cJSON_GetObjectItem>
 8002a00:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 8002a02:	4932      	ldr	r1, [pc, #200]	; (8002acc <json_input+0x564>)
 8002a04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a06:	f7ff fa1d 	bl	8001e44 <cJSON_GetObjectItem>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4931      	ldr	r1, [pc, #196]	; (8002ad4 <json_input+0x56c>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fa18 	bl	8001e44 <cJSON_GetObjectItem>
 8002a14:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <json_input+0x570>)
 8002a1c:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <json_input+0x574>)
 8002a24:	6013      	str	r3, [r2, #0]
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <json_input+0x570>)
 8002a28:	681c      	ldr	r4, [r3, #0]
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <json_input+0x574>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f015 f9c1 	bl	8017db6 <atoi>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f001 f8d1 	bl	8003be0 <set_pwm>
				SEND_str("\n");
 8002a3e:	4820      	ldr	r0, [pc, #128]	; (8002ac0 <json_input+0x558>)
 8002a40:	f7ff fa36 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <json_input+0x55c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fa31 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002a4e:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <json_input+0x558>)
 8002a50:	f7ff fa2e 	bl	8001eb0 <SEND_str>
				SEND_str(PWM_OUT);
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <json_input+0x570>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fa29 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002a5e:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <json_input+0x558>)
 8002a60:	f7ff fa26 	bl	8001eb0 <SEND_str>
				SEND_str(D_CYCLE);
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <json_input+0x574>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fa21 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002a6e:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <json_input+0x558>)
 8002a70:	f7ff fa1e 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 8002a74:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a76:	f7fe fc05 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002a7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a7c:	f015 f9de 	bl	8017e3c <free>
				free(sInstruction);
 8002a80:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a82:	f015 f9db 	bl	8017e3c <free>
				free(sType);
 8002a86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a88:	f015 f9d8 	bl	8017e3c <free>
				free(s1);
 8002a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a8e:	f015 f9d5 	bl	8017e3c <free>
				free(s2);
 8002a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a94:	f015 f9d2 	bl	8017e3c <free>
}
 8002a98:	e2f9      	b.n	800308e <json_input+0xb26>
 8002a9a:	bf00      	nop
 8002a9c:	20000a0c 	.word	0x20000a0c
 8002aa0:	0801d8c0 	.word	0x0801d8c0
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	0801d8c8 	.word	0x0801d8c8
 8002aac:	0801d8d0 	.word	0x0801d8d0
 8002ab0:	200009d8 	.word	0x200009d8
 8002ab4:	200009f8 	.word	0x200009f8
 8002ab8:	200009f4 	.word	0x200009f4
 8002abc:	200009d4 	.word	0x200009d4
 8002ac0:	0801d884 	.word	0x0801d884
 8002ac4:	200009b4 	.word	0x200009b4
 8002ac8:	0801d8d8 	.word	0x0801d8d8
 8002acc:	0801d848 	.word	0x0801d848
 8002ad0:	0801d8e0 	.word	0x0801d8e0
 8002ad4:	0801d8e8 	.word	0x0801d8e8
 8002ad8:	200009bc 	.word	0x200009bc
 8002adc:	200009fc 	.word	0x200009fc
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 8002ae0:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <json_input+0x70c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4964      	ldr	r1, [pc, #400]	; (8002c78 <json_input+0x710>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fb72 	bl	80001d0 <strcmp>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80dc 	bne.w	8002cac <json_input+0x744>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 8002af4:	4961      	ldr	r1, [pc, #388]	; (8002c7c <json_input+0x714>)
 8002af6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002af8:	f7ff f9a4 	bl	8001e44 <cJSON_GetObjectItem>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4960      	ldr	r1, [pc, #384]	; (8002c80 <json_input+0x718>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f99f 	bl	8001e44 <cJSON_GetObjectItem>
 8002b06:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 8002b08:	495c      	ldr	r1, [pc, #368]	; (8002c7c <json_input+0x714>)
 8002b0a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b0c:	f7ff f99a 	bl	8001e44 <cJSON_GetObjectItem>
 8002b10:	4603      	mov	r3, r0
 8002b12:	495c      	ldr	r1, [pc, #368]	; (8002c84 <json_input+0x71c>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f995 	bl	8001e44 <cJSON_GetObjectItem>
 8002b1a:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 8002b1c:	4957      	ldr	r1, [pc, #348]	; (8002c7c <json_input+0x714>)
 8002b1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b20:	f7ff f990 	bl	8001e44 <cJSON_GetObjectItem>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4958      	ldr	r1, [pc, #352]	; (8002c88 <json_input+0x720>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f98b 	bl	8001e44 <cJSON_GetObjectItem>
 8002b2e:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002b30:	4952      	ldr	r1, [pc, #328]	; (8002c7c <json_input+0x714>)
 8002b32:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b34:	f7ff f986 	bl	8001e44 <cJSON_GetObjectItem>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4954      	ldr	r1, [pc, #336]	; (8002c8c <json_input+0x724>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f981 	bl	8001e44 <cJSON_GetObjectItem>
 8002b42:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002b44:	494d      	ldr	r1, [pc, #308]	; (8002c7c <json_input+0x714>)
 8002b46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b48:	f7ff f97c 	bl	8001e44 <cJSON_GetObjectItem>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4950      	ldr	r1, [pc, #320]	; (8002c90 <json_input+0x728>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f977 	bl	8001e44 <cJSON_GetObjectItem>
 8002b56:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <json_input+0x72c>)
 8002b5e:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 8002b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <json_input+0x730>)
 8002b66:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <json_input+0x734>)
 8002b6e:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <json_input+0x738>)
 8002b76:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <json_input+0x73c>)
 8002b7e:	6013      	str	r3, [r2, #0]
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <json_input+0x72c>)
 8002b82:	681c      	ldr	r4, [r3, #0]
 8002b84:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <json_input+0x730>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f015 f911 	bl	8017db0 <atof>
 8002b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8002b92:	eef0 8a60 	vmov.f32	s17, s1
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <json_input+0x734>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f015 f908 	bl	8017db0 <atof>
 8002ba0:	eeb0 9a40 	vmov.f32	s18, s0
 8002ba4:	eef0 9a60 	vmov.f32	s19, s1
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <json_input+0x738>)
 8002baa:	681d      	ldr	r5, [r3, #0]
 8002bac:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <json_input+0x73c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f015 f900 	bl	8017db6 <atoi>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	eeb0 1a49 	vmov.f32	s2, s18
 8002bc2:	eef0 1a69 	vmov.f32	s3, s19
 8002bc6:	eeb0 0a48 	vmov.f32	s0, s16
 8002bca:	eef0 0a68 	vmov.f32	s1, s17
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f001 f8b4 	bl	8003d3c <set_temperature>
				SEND_str("\n");
 8002bd4:	4834      	ldr	r0, [pc, #208]	; (8002ca8 <json_input+0x740>)
 8002bd6:	f7ff f96b 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <json_input+0x70c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f966 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002be4:	4830      	ldr	r0, [pc, #192]	; (8002ca8 <json_input+0x740>)
 8002be6:	f7ff f963 	bl	8001eb0 <SEND_str>
				SEND_str(ROM_RAW);
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <json_input+0x72c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f95e 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002bf4:	482c      	ldr	r0, [pc, #176]	; (8002ca8 <json_input+0x740>)
 8002bf6:	f7ff f95b 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <json_input+0x730>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f956 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002c04:	4828      	ldr	r0, [pc, #160]	; (8002ca8 <json_input+0x740>)
 8002c06:	f7ff f953 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <json_input+0x734>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f94e 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002c14:	4824      	ldr	r0, [pc, #144]	; (8002ca8 <json_input+0x740>)
 8002c16:	f7ff f94b 	bl	8001eb0 <SEND_str>
				SEND_str(D_OUT);
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <json_input+0x738>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f946 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002c24:	4820      	ldr	r0, [pc, #128]	; (8002ca8 <json_input+0x740>)
 8002c26:	f7ff f943 	bl	8001eb0 <SEND_str>
				SEND_str(VAR_OUT);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <json_input+0x73c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f93e 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002c34:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <json_input+0x740>)
 8002c36:	f7ff f93b 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 8002c3a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c3c:	f7fe fb22 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002c40:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002c42:	f015 f8fb 	bl	8017e3c <free>
				free(sInstruction);
 8002c46:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c48:	f015 f8f8 	bl	8017e3c <free>
				free(sType);
 8002c4c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c4e:	f015 f8f5 	bl	8017e3c <free>
				free(s1);
 8002c52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c54:	f015 f8f2 	bl	8017e3c <free>
				free(s2);
 8002c58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c5a:	f015 f8ef 	bl	8017e3c <free>
				free(s3);
 8002c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c60:	f015 f8ec 	bl	8017e3c <free>
				free(s4);
 8002c64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c66:	f015 f8e9 	bl	8017e3c <free>
				free(s5);
 8002c6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c6c:	f015 f8e6 	bl	8017e3c <free>
}
 8002c70:	e20d      	b.n	800308e <json_input+0xb26>
 8002c72:	bf00      	nop
 8002c74:	200009b4 	.word	0x200009b4
 8002c78:	0801d8f0 	.word	0x0801d8f0
 8002c7c:	0801d848 	.word	0x0801d848
 8002c80:	0801d904 	.word	0x0801d904
 8002c84:	0801d90c 	.word	0x0801d90c
 8002c88:	0801d91c 	.word	0x0801d91c
 8002c8c:	0801d874 	.word	0x0801d874
 8002c90:	0801d87c 	.word	0x0801d87c
 8002c94:	20000a18 	.word	0x20000a18
 8002c98:	200009b0 	.word	0x200009b0
 8002c9c:	20000a14 	.word	0x20000a14
 8002ca0:	200009f4 	.word	0x200009f4
 8002ca4:	200009d4 	.word	0x200009d4
 8002ca8:	0801d884 	.word	0x0801d884
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 8002cac:	4b9d      	ldr	r3, [pc, #628]	; (8002f24 <json_input+0x9bc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	499d      	ldr	r1, [pc, #628]	; (8002f28 <json_input+0x9c0>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fa8c 	bl	80001d0 <strcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 8095 	bne.w	8002dea <json_input+0x882>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002cc0:	499a      	ldr	r1, [pc, #616]	; (8002f2c <json_input+0x9c4>)
 8002cc2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002cc4:	f7ff f8be 	bl	8001e44 <cJSON_GetObjectItem>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4999      	ldr	r1, [pc, #612]	; (8002f30 <json_input+0x9c8>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f8b9 	bl	8001e44 <cJSON_GetObjectItem>
 8002cd2:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002cd4:	4995      	ldr	r1, [pc, #596]	; (8002f2c <json_input+0x9c4>)
 8002cd6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002cd8:	f7ff f8b4 	bl	8001e44 <cJSON_GetObjectItem>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4995      	ldr	r1, [pc, #596]	; (8002f34 <json_input+0x9cc>)
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f8af 	bl	8001e44 <cJSON_GetObjectItem>
 8002ce6:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002ce8:	4990      	ldr	r1, [pc, #576]	; (8002f2c <json_input+0x9c4>)
 8002cea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002cec:	f7ff f8aa 	bl	8001e44 <cJSON_GetObjectItem>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4991      	ldr	r1, [pc, #580]	; (8002f38 <json_input+0x9d0>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f8a5 	bl	8001e44 <cJSON_GetObjectItem>
 8002cfa:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 8002cfc:	498b      	ldr	r1, [pc, #556]	; (8002f2c <json_input+0x9c4>)
 8002cfe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d00:	f7ff f8a0 	bl	8001e44 <cJSON_GetObjectItem>
 8002d04:	4603      	mov	r3, r0
 8002d06:	498d      	ldr	r1, [pc, #564]	; (8002f3c <json_input+0x9d4>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f89b 	bl	8001e44 <cJSON_GetObjectItem>
 8002d0e:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002d10:	4986      	ldr	r1, [pc, #536]	; (8002f2c <json_input+0x9c4>)
 8002d12:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d14:	f7ff f896 	bl	8001e44 <cJSON_GetObjectItem>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4989      	ldr	r1, [pc, #548]	; (8002f40 <json_input+0x9d8>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f891 	bl	8001e44 <cJSON_GetObjectItem>
 8002d22:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	4a86      	ldr	r2, [pc, #536]	; (8002f44 <json_input+0x9dc>)
 8002d2a:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4a85      	ldr	r2, [pc, #532]	; (8002f48 <json_input+0x9e0>)
 8002d32:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4a84      	ldr	r2, [pc, #528]	; (8002f4c <json_input+0x9e4>)
 8002d3a:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4a83      	ldr	r2, [pc, #524]	; (8002f50 <json_input+0x9e8>)
 8002d42:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4a82      	ldr	r2, [pc, #520]	; (8002f54 <json_input+0x9ec>)
 8002d4a:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002d4c:	4882      	ldr	r0, [pc, #520]	; (8002f58 <json_input+0x9f0>)
 8002d4e:	f7ff f8af 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002d52:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <json_input+0x9bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f8aa 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002d5c:	487e      	ldr	r0, [pc, #504]	; (8002f58 <json_input+0x9f0>)
 8002d5e:	f7ff f8a7 	bl	8001eb0 <SEND_str>
				SEND_str(A_IN);
 8002d62:	4b78      	ldr	r3, [pc, #480]	; (8002f44 <json_input+0x9dc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8a2 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002d6c:	487a      	ldr	r0, [pc, #488]	; (8002f58 <json_input+0x9f0>)
 8002d6e:	f7ff f89f 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_LOW);
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <json_input+0x9e0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f89a 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002d7c:	4876      	ldr	r0, [pc, #472]	; (8002f58 <json_input+0x9f0>)
 8002d7e:	f7ff f897 	bl	8001eb0 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <json_input+0x9e4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f892 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002d8c:	4872      	ldr	r0, [pc, #456]	; (8002f58 <json_input+0x9f0>)
 8002d8e:	f7ff f88f 	bl	8001eb0 <SEND_str>
				SEND_str(A_OUT);
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <json_input+0x9e8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f88a 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002d9c:	486e      	ldr	r0, [pc, #440]	; (8002f58 <json_input+0x9f0>)
 8002d9e:	f7ff f887 	bl	8001eb0 <SEND_str>
				SEND_str(VAR_OUT);
 8002da2:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <json_input+0x9ec>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f882 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002dac:	486a      	ldr	r0, [pc, #424]	; (8002f58 <json_input+0x9f0>)
 8002dae:	f7ff f87f 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 8002db2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002db4:	f7fe fa66 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002db8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002dba:	f015 f83f 	bl	8017e3c <free>
				free(sInstruction);
 8002dbe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002dc0:	f015 f83c 	bl	8017e3c <free>
				free(sType);
 8002dc4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002dc6:	f015 f839 	bl	8017e3c <free>
				free(s1);
 8002dca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002dcc:	f015 f836 	bl	8017e3c <free>
				free(s2);
 8002dd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dd2:	f015 f833 	bl	8017e3c <free>
				free(s3);
 8002dd6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002dd8:	f015 f830 	bl	8017e3c <free>
				free(s4);
 8002ddc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002dde:	f015 f82d 	bl	8017e3c <free>
				free(s5);
 8002de2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002de4:	f015 f82a 	bl	8017e3c <free>
}
 8002de8:	e151      	b.n	800308e <json_input+0xb26>
				cJSON_Delete(json);
 8002dea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002dec:	f7fe fa4a 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002df0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002df2:	f015 f823 	bl	8017e3c <free>
				free(sInstruction);
 8002df6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002df8:	f015 f820 	bl	8017e3c <free>
				free(sType);
 8002dfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002dfe:	f015 f81d 	bl	8017e3c <free>
}
 8002e02:	e144      	b.n	800308e <json_input+0xb26>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002e04:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <json_input+0x9f4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4955      	ldr	r1, [pc, #340]	; (8002f60 <json_input+0x9f8>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd f9e0 	bl	80001d0 <strcmp>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 812e 	bne.w	8003074 <json_input+0xb0c>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002e18:	4944      	ldr	r1, [pc, #272]	; (8002f2c <json_input+0x9c4>)
 8002e1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e1c:	f7ff f812 	bl	8001e44 <cJSON_GetObjectItem>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4950      	ldr	r1, [pc, #320]	; (8002f64 <json_input+0x9fc>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f80d 	bl	8001e44 <cJSON_GetObjectItem>
 8002e2a:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <json_input+0x9bc>)
 8002e32:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <json_input+0x9bc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	494b      	ldr	r1, [pc, #300]	; (8002f68 <json_input+0xa00>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd f9c8 	bl	80001d0 <strcmp>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d14b      	bne.n	8002ede <json_input+0x976>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002e46:	4939      	ldr	r1, [pc, #228]	; (8002f2c <json_input+0x9c4>)
 8002e48:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e4a:	f7fe fffb 	bl	8001e44 <cJSON_GetObjectItem>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4946      	ldr	r1, [pc, #280]	; (8002f6c <json_input+0xa04>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fff6 	bl	8001e44 <cJSON_GetObjectItem>
 8002e58:	6638      	str	r0, [r7, #96]	; 0x60
				DigitalParamMass = s1->valuestring;
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	4a44      	ldr	r2, [pc, #272]	; (8002f70 <json_input+0xa08>)
 8002e60:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002e62:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <json_input+0xa08>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fb50 	bl	800250c <parseValue>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <json_input+0xa0c>)
 8002e70:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e78:	e012      	b.n	8002ea0 <json_input+0x938>
					Status_DIN[i] = (test[i] - 0x30);
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <json_input+0xa0c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	3b30      	subs	r3, #48	; 0x30
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <json_input+0xa10>)
 8002e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e90:	4413      	add	r3, r2
 8002e92:	460a      	mov	r2, r1
 8002e94:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	dde8      	ble.n	8002e7a <json_input+0x912>
				SEND_str("\n");
 8002ea8:	482b      	ldr	r0, [pc, #172]	; (8002f58 <json_input+0x9f0>)
 8002eaa:	f7ff f801 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <json_input+0x9bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fffc 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002eb8:	4827      	ldr	r0, [pc, #156]	; (8002f58 <json_input+0x9f0>)
 8002eba:	f7fe fff9 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 8002ebe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ec0:	f7fe f9e0 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002ec4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002ec6:	f014 ffb9 	bl	8017e3c <free>
				free(sInstruction);
 8002eca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ecc:	f014 ffb6 	bl	8017e3c <free>
				free(sType);
 8002ed0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ed2:	f014 ffb3 	bl	8017e3c <free>
				free(s1);
 8002ed6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ed8:	f014 ffb0 	bl	8017e3c <free>
}
 8002edc:	e0d7      	b.n	800308e <json_input+0xb26>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <json_input+0x9bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4926      	ldr	r1, [pc, #152]	; (8002f7c <json_input+0xa14>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd f973 	bl	80001d0 <strcmp>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d17b      	bne.n	8002fe8 <json_input+0xa80>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002ef0:	490e      	ldr	r1, [pc, #56]	; (8002f2c <json_input+0x9c4>)
 8002ef2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ef4:	f7fe ffa6 	bl	8001e44 <cJSON_GetObjectItem>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	491c      	ldr	r1, [pc, #112]	; (8002f6c <json_input+0xa04>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe ffa1 	bl	8001e44 <cJSON_GetObjectItem>
 8002f02:	6678      	str	r0, [r7, #100]	; 0x64
				AnalogParamMass = s1->valuestring;
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <json_input+0xa18>)
 8002f0a:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <json_input+0xa18>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fafb 	bl	800250c <parseValue>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <json_input+0xa0c>)
 8002f1a:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f22:	e042      	b.n	8002faa <json_input+0xa42>
 8002f24:	200009b4 	.word	0x200009b4
 8002f28:	0801d92c 	.word	0x0801d92c
 8002f2c:	0801d848 	.word	0x0801d848
 8002f30:	0801d898 	.word	0x0801d898
 8002f34:	0801d8a0 	.word	0x0801d8a0
 8002f38:	0801d8ac 	.word	0x0801d8ac
 8002f3c:	0801d938 	.word	0x0801d938
 8002f40:	0801d87c 	.word	0x0801d87c
 8002f44:	20000a0c 	.word	0x20000a0c
 8002f48:	200009d8 	.word	0x200009d8
 8002f4c:	200009f8 	.word	0x200009f8
 8002f50:	200009f0 	.word	0x200009f0
 8002f54:	200009d4 	.word	0x200009d4
 8002f58:	0801d884 	.word	0x0801d884
 8002f5c:	20000a10 	.word	0x20000a10
 8002f60:	0801d940 	.word	0x0801d940
 8002f64:	0801d850 	.word	0x0801d850
 8002f68:	0801d950 	.word	0x0801d950
 8002f6c:	0801d958 	.word	0x0801d958
 8002f70:	200009b8 	.word	0x200009b8
 8002f74:	20000a08 	.word	0x20000a08
 8002f78:	20000364 	.word	0x20000364
 8002f7c:	0801d95c 	.word	0x0801d95c
 8002f80:	200009e4 	.word	0x200009e4
					Status_AIN[i] = (test[i] - 0x30);
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <json_input+0xb34>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3b30      	subs	r3, #48	; 0x30
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <json_input+0xb38>)
 8002f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f9a:	4413      	add	r3, r2
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	dde8      	ble.n	8002f84 <json_input+0xa1c>
				SEND_str("\n");
 8002fb2:	483c      	ldr	r0, [pc, #240]	; (80030a4 <json_input+0xb3c>)
 8002fb4:	f7fe ff7c 	bl	8001eb0 <SEND_str>
				SEND_str(TYPE);
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <json_input+0xb40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe ff77 	bl	8001eb0 <SEND_str>
				SEND_str("\n");
 8002fc2:	4838      	ldr	r0, [pc, #224]	; (80030a4 <json_input+0xb3c>)
 8002fc4:	f7fe ff74 	bl	8001eb0 <SEND_str>
				cJSON_Delete(json);
 8002fc8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002fca:	f7fe f95b 	bl	8001284 <cJSON_Delete>
				free(stime);
 8002fce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002fd0:	f014 ff34 	bl	8017e3c <free>
				free(sInstruction);
 8002fd4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fd6:	f014 ff31 	bl	8017e3c <free>
				free(sType);
 8002fda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002fdc:	f014 ff2e 	bl	8017e3c <free>
				free(s1);
 8002fe0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002fe2:	f014 ff2b 	bl	8017e3c <free>
}
 8002fe6:	e052      	b.n	800308e <json_input+0xb26>
			else if(strcmp(TYPE, "OCD") == 0)
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <json_input+0xb40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	492f      	ldr	r1, [pc, #188]	; (80030ac <json_input+0xb44>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f8ee 	bl	80001d0 <strcmp>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d149      	bne.n	800308e <json_input+0xb26>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002ffa:	492d      	ldr	r1, [pc, #180]	; (80030b0 <json_input+0xb48>)
 8002ffc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ffe:	f7fe ff21 	bl	8001e44 <cJSON_GetObjectItem>
 8003002:	4603      	mov	r3, r0
 8003004:	492b      	ldr	r1, [pc, #172]	; (80030b4 <json_input+0xb4c>)
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe ff1c 	bl	8001e44 <cJSON_GetObjectItem>
 800300c:	66b8      	str	r0, [r7, #104]	; 0x68
				OpenCollectorDrainParamMass = s1->valuestring;
 800300e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <json_input+0xb50>)
 8003014:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <json_input+0xb50>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fa76 	bl	800250c <parseValue>
 8003020:	4602      	mov	r2, r0
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <json_input+0xb34>)
 8003024:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	67fb      	str	r3, [r7, #124]	; 0x7c
 800302a:	e00e      	b.n	800304a <json_input+0xae2>
					Status_OCD[i] = (test[i] - 0x30);
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <json_input+0xb34>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	3b30      	subs	r3, #48	; 0x30
 8003038:	b2d9      	uxtb	r1, r3
 800303a:	4a20      	ldr	r2, [pc, #128]	; (80030bc <json_input+0xb54>)
 800303c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800303e:	4413      	add	r3, r2
 8003040:	460a      	mov	r2, r1
 8003042:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8003044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003046:	3301      	adds	r3, #1
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
 800304a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800304c:	2b07      	cmp	r3, #7
 800304e:	dded      	ble.n	800302c <json_input+0xac4>
				ReWriteOCD();
 8003050:	f001 fb04 	bl	800465c <ReWriteOCD>
				cJSON_Delete(json);
 8003054:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003056:	f7fe f915 	bl	8001284 <cJSON_Delete>
				free(stime);
 800305a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800305c:	f014 feee 	bl	8017e3c <free>
				free(sInstruction);
 8003060:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003062:	f014 feeb 	bl	8017e3c <free>
				free(sType);
 8003066:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003068:	f014 fee8 	bl	8017e3c <free>
				free(s1);
 800306c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800306e:	f014 fee5 	bl	8017e3c <free>
}
 8003072:	e00c      	b.n	800308e <json_input+0xb26>
			free(stime);
 8003074:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003076:	f014 fee1 	bl	8017e3c <free>
			free(sInstruction);
 800307a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800307c:	f014 fede 	bl	8017e3c <free>
}
 8003080:	e005      	b.n	800308e <json_input+0xb26>
		cJSON_Delete(json);
 8003082:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003084:	f7fe f8fe 	bl	8001284 <cJSON_Delete>
		free(stime);
 8003088:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800308a:	f014 fed7 	bl	8017e3c <free>
}
 800308e:	bf00      	nop
 8003090:	378c      	adds	r7, #140	; 0x8c
 8003092:	46bd      	mov	sp, r7
 8003094:	ecbd 8b04 	vpop	{d8-d9}
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	bf00      	nop
 800309c:	20000a08 	.word	0x20000a08
 80030a0:	2000035c 	.word	0x2000035c
 80030a4:	0801d884 	.word	0x0801d884
 80030a8:	200009b4 	.word	0x200009b4
 80030ac:	0801d964 	.word	0x0801d964
 80030b0:	0801d848 	.word	0x0801d848
 80030b4:	0801d958 	.word	0x0801d958
 80030b8:	20000a20 	.word	0x20000a20
 80030bc:	20000374 	.word	0x20000374

080030c0 <CheckReWriteDiDo>:
uint16_t OCD_Pin[8] = {O0_Pin, O1_Pin, O2_Pin, O3_Pin, O4_Pin, O5_Pin, O6_Pin, O7_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	e0aa      	b.n	8003222 <CheckReWriteDiDo+0x162>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 80030cc:	4959      	ldr	r1, [pc, #356]	; (8003234 <CheckReWriteDiDo+0x174>)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	4955      	ldr	r1, [pc, #340]	; (8003234 <CheckReWriteDiDo+0x174>)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3306      	adds	r3, #6
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	4619      	mov	r1, r3
 80030f0:	f005 fd2a 	bl	8008b48 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4618      	mov	r0, r3
 80030f8:	494e      	ldr	r1, [pc, #312]	; (8003234 <CheckReWriteDiDo+0x174>)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3304      	adds	r3, #4
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4298      	cmp	r0, r3
 800310c:	d02d      	beq.n	800316a <CheckReWriteDiDo+0xaa>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 800310e:	4949      	ldr	r1, [pc, #292]	; (8003234 <CheckReWriteDiDo+0x174>)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	330c      	adds	r3, #12
 800311e:	7819      	ldrb	r1, [r3, #0]
 8003120:	4a45      	ldr	r2, [pc, #276]	; (8003238 <CheckReWriteDiDo+0x178>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	460a      	mov	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 800312a:	4942      	ldr	r1, [pc, #264]	; (8003234 <CheckReWriteDiDo+0x174>)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3308      	adds	r3, #8
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	493d      	ldr	r1, [pc, #244]	; (8003234 <CheckReWriteDiDo+0x174>)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	330e      	adds	r3, #14
 800314c:	881c      	ldrh	r4, [r3, #0]
 800314e:	4939      	ldr	r1, [pc, #228]	; (8003234 <CheckReWriteDiDo+0x174>)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	330c      	adds	r3, #12
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4621      	mov	r1, r4
 8003164:	f005 fd08 	bl	8008b78 <HAL_GPIO_WritePin>
 8003168:	e058      	b.n	800321c <CheckReWriteDiDo+0x15c>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 800316a:	4932      	ldr	r1, [pc, #200]	; (8003234 <CheckReWriteDiDo+0x174>)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	492e      	ldr	r1, [pc, #184]	; (8003234 <CheckReWriteDiDo+0x174>)
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3306      	adds	r3, #6
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f005 fcdb 	bl	8008b48 <HAL_GPIO_ReadPin>
 8003192:	4603      	mov	r3, r0
 8003194:	4618      	mov	r0, r3
 8003196:	4927      	ldr	r1, [pc, #156]	; (8003234 <CheckReWriteDiDo+0x174>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3304      	adds	r3, #4
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4298      	cmp	r0, r3
 80031aa:	d137      	bne.n	800321c <CheckReWriteDiDo+0x15c>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 80031ac:	4921      	ldr	r1, [pc, #132]	; (8003234 <CheckReWriteDiDo+0x174>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	330c      	adds	r3, #12
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <CheckReWriteDiDo+0x178>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	460a      	mov	r2, r1
 80031d2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 80031d4:	4917      	ldr	r1, [pc, #92]	; (8003234 <CheckReWriteDiDo+0x174>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3308      	adds	r3, #8
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	4913      	ldr	r1, [pc, #76]	; (8003234 <CheckReWriteDiDo+0x174>)
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	330e      	adds	r3, #14
 80031f6:	881c      	ldrh	r4, [r3, #0]
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <CheckReWriteDiDo+0x174>)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	330c      	adds	r3, #12
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4621      	mov	r1, r4
 8003218:	f005 fcae 	bl	8008b78 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3301      	adds	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b07      	cmp	r3, #7
 8003226:	f77f af51 	ble.w	80030cc <CheckReWriteDiDo+0xc>
		}
	}
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	20000910 	.word	0x20000910
 8003238:	20000374 	.word	0x20000374

0800323c <CheckReWriteVAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteVAiDo(void)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	e07f      	b.n	8003348 <CheckReWriteVAiDo+0x10c>
	{
		for(int j = 0; j < 8; j++)
 8003248:	2300      	movs	r3, #0
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	e076      	b.n	800333c <CheckReWriteVAiDo+0x100>
		{
			if(VAiDo[i].OCD_Pin == OCD_Pin[j])
 800324e:	4942      	ldr	r1, [pc, #264]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	331e      	adds	r3, #30
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	493e      	ldr	r1, [pc, #248]	; (800335c <CheckReWriteVAiDo+0x120>)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003268:	429a      	cmp	r2, r3
 800326a:	d164      	bne.n	8003336 <CheckReWriteVAiDo+0xfa>
			{
				if((adcValue[i] >= VAiDo[i].RANGE_LOW) && (VAiDo[i].RANGE_HIGH >= adcValue[i]))
 800326c:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <CheckReWriteVAiDo+0x124>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003278:	4c37      	ldr	r4, [pc, #220]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4423      	add	r3, r4
 8003286:	3308      	adds	r3, #8
 8003288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	f7fd fc48 	bl	8000b24 <__aeabi_dcmpge>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d032      	beq.n	8003300 <CheckReWriteVAiDo+0xc4>
 800329a:	492f      	ldr	r1, [pc, #188]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3310      	adds	r3, #16
 80032aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <CheckReWriteVAiDo+0x124>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4623      	mov	r3, r4
 80032be:	f7fd fc31 	bl	8000b24 <__aeabi_dcmpge>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <CheckReWriteVAiDo+0xc4>
				{
					Status_OCD[j] = 1;
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <CheckReWriteVAiDo+0x128>)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, SET);
 80032d2:	4921      	ldr	r1, [pc, #132]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	3318      	adds	r3, #24
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	491c      	ldr	r1, [pc, #112]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	331e      	adds	r3, #30
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4619      	mov	r1, r3
 80032fa:	f005 fc3d 	bl	8008b78 <HAL_GPIO_WritePin>
 80032fe:	e01a      	b.n	8003336 <CheckReWriteVAiDo+0xfa>
				}
				else
				{
					Status_OCD[j] = 0;
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <CheckReWriteVAiDo+0x128>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4413      	add	r3, r2
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 800330a:	4913      	ldr	r1, [pc, #76]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3318      	adds	r3, #24
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <CheckReWriteVAiDo+0x11c>)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	331e      	adds	r3, #30
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	4619      	mov	r1, r3
 8003332:	f005 fc21 	bl	8008b78 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b07      	cmp	r3, #7
 8003340:	dd85      	ble.n	800324e <CheckReWriteVAiDo+0x12>
	for(int i = 0; i < 4; i++)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3301      	adds	r3, #1
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b03      	cmp	r3, #3
 800334c:	f77f af7c 	ble.w	8003248 <CheckReWriteVAiDo+0xc>
				}
			}
		}
	}
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bd90      	pop	{r4, r7, pc}
 8003358:	20000870 	.word	0x20000870
 800335c:	20000048 	.word	0x20000048
 8003360:	200002f8 	.word	0x200002f8
 8003364:	20000374 	.word	0x20000374

08003368 <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 800336e:	4b80      	ldr	r3, [pc, #512]	; (8003570 <CheckReWriteTSiDo+0x208>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 8003376:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <CheckReWriteTSiDo+0x208>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
 8003380:	e007      	b.n	8003392 <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	4619      	mov	r1, r3
 8003386:	2001      	movs	r0, #1
 8003388:	f002 fb1c 	bl	80059c4 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	3301      	adds	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
 8003392:	4b78      	ldr	r3, [pc, #480]	; (8003574 <CheckReWriteTSiDo+0x20c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	7dfa      	ldrb	r2, [r7, #23]
 8003398:	429a      	cmp	r2, r3
 800339a:	d9f2      	bls.n	8003382 <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 800339c:	4b76      	ldr	r3, [pc, #472]	; (8003578 <CheckReWriteTSiDo+0x210>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80e1 	beq.w	8003568 <CheckReWriteTSiDo+0x200>
	{
		OneWire_Test_Flag_Read = false;
 80033a6:	4b74      	ldr	r3, [pc, #464]	; (8003578 <CheckReWriteTSiDo+0x210>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80033ac:	2301      	movs	r3, #1
 80033ae:	75bb      	strb	r3, [r7, #22]
 80033b0:	e0d4      	b.n	800355c <CheckReWriteTSiDo+0x1f4>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	757b      	strb	r3, [r7, #21]
 80033b6:	e0ca      	b.n	800354e <CheckReWriteTSiDo+0x1e6>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 80033b8:	7dbb      	ldrb	r3, [r7, #22]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	496f      	ldr	r1, [pc, #444]	; (800357c <CheckReWriteTSiDo+0x214>)
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	332e      	adds	r3, #46	; 0x2e
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	7d7b      	ldrb	r3, [r7, #21]
 80033ce:	496c      	ldr	r1, [pc, #432]	; (8003580 <CheckReWriteTSiDo+0x218>)
 80033d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f040 80b7 	bne.w	8003548 <CheckReWriteTSiDo+0x1e0>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 80033da:	7dbb      	ldrb	r3, [r7, #22]
 80033dc:	461a      	mov	r2, r3
 80033de:	4969      	ldr	r1, [pc, #420]	; (8003584 <CheckReWriteTSiDo+0x21c>)
 80033e0:	2001      	movs	r0, #1
 80033e2:	f002 fb23 	bl	8005a2c <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <CheckReWriteTSiDo+0x21c>)
 80033e8:	785b      	ldrb	r3, [r3, #1]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	b21a      	sxth	r2, r3
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <CheckReWriteTSiDo+0x21c>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <CheckReWriteTSiDo+0x220>)
 80033fc:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 80033fe:	4b62      	ldr	r3, [pc, #392]	; (8003588 <CheckReWriteTSiDo+0x220>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f002 fb54 	bl	8005ab0 <sensors_GetSign>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <CheckReWriteTSiDo+0xae>
    					c='-';
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <CheckReWriteTSiDo+0x224>)
 8003410:	222d      	movs	r2, #45	; 0x2d
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e002      	b.n	800341c <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <CheckReWriteTSiDo+0x224>)
 8003418:	222b      	movs	r2, #43	; 0x2b
 800341a:	701a      	strb	r2, [r3, #0]
    				char test[16];
    				temper = sensors_Convert(raw_temper);
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <CheckReWriteTSiDo+0x220>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fb58 	bl	8005ad6 <sensors_Convert>
 8003426:	eef0 7a40 	vmov.f32	s15, s0
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <CheckReWriteTSiDo+0x228>)
 800342c:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(test, "%d t: %c%.2f\r\n", i, c, temper);
 8003430:	7dbd      	ldrb	r5, [r7, #22]
 8003432:	4b56      	ldr	r3, [pc, #344]	; (800358c <CheckReWriteTSiDo+0x224>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461e      	mov	r6, r3
 8003438:	4b55      	ldr	r3, [pc, #340]	; (8003590 <CheckReWriteTSiDo+0x228>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f893 	bl	8000568 <__aeabi_f2d>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	1d38      	adds	r0, r7, #4
 8003448:	e9cd 3400 	strd	r3, r4, [sp]
 800344c:	4633      	mov	r3, r6
 800344e:	462a      	mov	r2, r5
 8003450:	4950      	ldr	r1, [pc, #320]	; (8003594 <CheckReWriteTSiDo+0x22c>)
 8003452:	f015 fadd 	bl	8018a10 <siprintf>
    				HAL_UART_Transmit(&huart3, (uint8_t*)test, strlen(test), 0x1000);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fc fec3 	bl	80001e4 <strlen>
 800345e:	4603      	mov	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	1d39      	adds	r1, r7, #4
 8003464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003468:	484b      	ldr	r0, [pc, #300]	; (8003598 <CheckReWriteTSiDo+0x230>)
 800346a:	f007 ffcc 	bl	800b406 <HAL_UART_Transmit>

					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 800346e:	4b48      	ldr	r3, [pc, #288]	; (8003590 <CheckReWriteTSiDo+0x228>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f878 	bl	8000568 <__aeabi_f2d>
 8003478:	4605      	mov	r5, r0
 800347a:	460e      	mov	r6, r1
 800347c:	7dbb      	ldrb	r3, [r7, #22]
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	493e      	ldr	r1, [pc, #248]	; (800357c <CheckReWriteTSiDo+0x214>)
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3318      	adds	r3, #24
 800348e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003492:	461a      	mov	r2, r3
 8003494:	4623      	mov	r3, r4
 8003496:	4628      	mov	r0, r5
 8003498:	4631      	mov	r1, r6
 800349a:	f7fd fb43 	bl	8000b24 <__aeabi_dcmpge>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d035      	beq.n	8003510 <CheckReWriteTSiDo+0x1a8>
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	4934      	ldr	r1, [pc, #208]	; (800357c <CheckReWriteTSiDo+0x214>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	3320      	adds	r3, #32
 80034b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <CheckReWriteTSiDo+0x228>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f852 	bl	8000568 <__aeabi_f2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fd fb2a 	bl	8000b24 <__aeabi_dcmpge>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01c      	beq.n	8003510 <CheckReWriteTSiDo+0x1a8>
					{
						Status_OCD[j] = 1;
 80034d6:	7d7b      	ldrb	r3, [r7, #21]
 80034d8:	4a30      	ldr	r2, [pc, #192]	; (800359c <CheckReWriteTSiDo+0x234>)
 80034da:	2101      	movs	r1, #1
 80034dc:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, SET);
 80034de:	7dbb      	ldrb	r3, [r7, #22]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	4926      	ldr	r1, [pc, #152]	; (800357c <CheckReWriteTSiDo+0x214>)
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3328      	adds	r3, #40	; 0x28
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	7dbb      	ldrb	r3, [r7, #22]
 80034f4:	1e5a      	subs	r2, r3, #1
 80034f6:	4921      	ldr	r1, [pc, #132]	; (800357c <CheckReWriteTSiDo+0x214>)
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	332e      	adds	r3, #46	; 0x2e
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	4619      	mov	r1, r3
 800350a:	f005 fb35 	bl	8008b78 <HAL_GPIO_WritePin>
 800350e:	e01b      	b.n	8003548 <CheckReWriteTSiDo+0x1e0>
					}
					else
					{
						Status_OCD[j] = 0;
 8003510:	7d7b      	ldrb	r3, [r7, #21]
 8003512:	4a22      	ldr	r2, [pc, #136]	; (800359c <CheckReWriteTSiDo+0x234>)
 8003514:	2100      	movs	r1, #0
 8003516:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <CheckReWriteTSiDo+0x214>)
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3328      	adds	r3, #40	; 0x28
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	7dbb      	ldrb	r3, [r7, #22]
 800352e:	1e5a      	subs	r2, r3, #1
 8003530:	4912      	ldr	r1, [pc, #72]	; (800357c <CheckReWriteTSiDo+0x214>)
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	332e      	adds	r3, #46	; 0x2e
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	4619      	mov	r1, r3
 8003544:	f005 fb18 	bl	8008b78 <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 8003548:	7d7b      	ldrb	r3, [r7, #21]
 800354a:	3301      	adds	r3, #1
 800354c:	757b      	strb	r3, [r7, #21]
 800354e:	7d7b      	ldrb	r3, [r7, #21]
 8003550:	2b07      	cmp	r3, #7
 8003552:	f67f af31 	bls.w	80033b8 <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8003556:	7dbb      	ldrb	r3, [r7, #22]
 8003558:	3301      	adds	r3, #1
 800355a:	75bb      	strb	r3, [r7, #22]
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <CheckReWriteTSiDo+0x20c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	7dba      	ldrb	r2, [r7, #22]
 8003562:	429a      	cmp	r2, r3
 8003564:	f67f af25 	bls.w	80033b2 <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003570:	2000035a 	.word	0x2000035a
 8003574:	20000a34 	.word	0x20000a34
 8003578:	2000035b 	.word	0x2000035b
 800357c:	200005e8 	.word	0x200005e8
 8003580:	20000048 	.word	0x20000048
 8003584:	20000a28 	.word	0x20000a28
 8003588:	20000a24 	.word	0x20000a24
 800358c:	20000a26 	.word	0x20000a26
 8003590:	20000a30 	.word	0x20000a30
 8003594:	0801d968 	.word	0x0801d968
 8003598:	2000106c 	.word	0x2000106c
 800359c:	20000374 	.word	0x20000374

080035a0 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b0b3      	sub	sp, #204	; 0xcc
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	460b      	mov	r3, r1
 80035ae:	72fb      	strb	r3, [r7, #11]
 80035b0:	4613      	mov	r3, r2
 80035b2:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 80035b4:	4acb      	ldr	r2, [pc, #812]	; (80038e4 <set_dido+0x344>)
 80035b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035ba:	4611      	mov	r1, r2
 80035bc:	2250      	movs	r2, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f014 fc65 	bl	8017e8e <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80035c4:	4ac8      	ldr	r2, [pc, #800]	; (80038e8 <set_dido+0x348>)
 80035c6:	f107 0320 	add.w	r3, r7, #32
 80035ca:	4611      	mov	r1, r2
 80035cc:	2250      	movs	r2, #80	; 0x50
 80035ce:	4618      	mov	r0, r3
 80035d0:	f014 fc5d 	bl	8017e8e <memcpy>

	uint16_t DIN_Pin[8] = {IN0_Pin, IN1_Pin, IN2_Pin, IN3_Pin, IN4_Pin, IN5_Pin, IN6_Pin, IN7_Pin};
 80035d4:	4bc5      	ldr	r3, [pc, #788]	; (80038ec <set_dido+0x34c>)
 80035d6:	f107 0410 	add.w	r4, r7, #16
 80035da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 8; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e6:	e1a2      	b.n	800392e <set_dido+0x38e>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 80035e8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80035ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	440b      	add	r3, r1
 80035fa:	4619      	mov	r1, r3
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7fc fde7 	bl	80001d0 <strcmp>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 818d 	bne.w	8003924 <set_dido+0x384>
		{
			if(DiDo[i].clrFlag != false)
 800360a:	49b9      	ldr	r1, [pc, #740]	; (80038f0 <set_dido+0x350>)
 800360c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3310      	adds	r3, #16
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <set_dido+0xb2>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8003622:	49b3      	ldr	r1, [pc, #716]	; (80038f0 <set_dido+0x350>)
 8003624:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3308      	adds	r3, #8
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	49ae      	ldr	r1, [pc, #696]	; (80038f0 <set_dido+0x350>)
 8003638:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	330e      	adds	r3, #14
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	4619      	mov	r1, r3
 800364e:	f005 fa93 	bl	8008b78 <HAL_GPIO_WritePin>

			DiDo[i].clrFlag = true;
 8003652:	49a7      	ldr	r1, [pc, #668]	; (80038f0 <set_dido+0x350>)
 8003654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3310      	adds	r3, #16
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 8003668:	4aa2      	ldr	r2, [pc, #648]	; (80038f4 <set_dido+0x354>)
 800366a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003672:	489f      	ldr	r0, [pc, #636]	; (80038f0 <set_dido+0x350>)
 8003674:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 8003684:	499a      	ldr	r1, [pc, #616]	; (80038f0 <set_dido+0x350>)
 8003686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3304      	adds	r3, #4
 8003696:	7afa      	ldrb	r2, [r7, #11]
 8003698:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 800369a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80036a4:	4413      	add	r3, r2
 80036a6:	f833 0cb8 	ldrh.w	r0, [r3, #-184]
 80036aa:	4991      	ldr	r1, [pc, #580]	; (80038f0 <set_dido+0x350>)
 80036ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3306      	adds	r3, #6
 80036bc:	4602      	mov	r2, r0
 80036be:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c6:	e104      	b.n	80038d2 <set_dido+0x332>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 80036c8:	f107 0120 	add.w	r1, r7, #32
 80036cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fc fd77 	bl	80001d0 <strcmp>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 80ef 	bne.w	80038c8 <set_dido+0x328>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 80036ea:	4a83      	ldr	r2, [pc, #524]	; (80038f8 <set_dido+0x358>)
 80036ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036f4:	487e      	ldr	r0, [pc, #504]	; (80038f0 <set_dido+0x350>)
 80036f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4403      	add	r3, r0
 8003704:	3308      	adds	r3, #8
 8003706:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8003708:	4979      	ldr	r1, [pc, #484]	; (80038f0 <set_dido+0x350>)
 800370a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	330c      	adds	r3, #12
 800371a:	7aba      	ldrb	r2, [r7, #10]
 800371c:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 800371e:	4a77      	ldr	r2, [pc, #476]	; (80038fc <set_dido+0x35c>)
 8003720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003724:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003728:	4971      	ldr	r1, [pc, #452]	; (80038f0 <set_dido+0x350>)
 800372a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	330e      	adds	r3, #14
 800373a:	4602      	mov	r2, r0
 800373c:	801a      	strh	r2, [r3, #0]

					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 800373e:	496c      	ldr	r1, [pc, #432]	; (80038f0 <set_dido+0x350>)
 8003740:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4967      	ldr	r1, [pc, #412]	; (80038f0 <set_dido+0x350>)
 8003752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3306      	adds	r3, #6
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f005 f9ef 	bl	8008b48 <HAL_GPIO_ReadPin>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	4293      	cmp	r3, r2
 8003772:	d021      	beq.n	80037b8 <set_dido+0x218>
					{
						Status_OCD[j] = VAR_OUT;
 8003774:	4a62      	ldr	r2, [pc, #392]	; (8003900 <set_dido+0x360>)
 8003776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800377a:	4413      	add	r3, r2
 800377c:	7aba      	ldrb	r2, [r7, #10]
 800377e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 8003780:	495b      	ldr	r1, [pc, #364]	; (80038f0 <set_dido+0x350>)
 8003782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4956      	ldr	r1, [pc, #344]	; (80038f0 <set_dido+0x350>)
 8003796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	330e      	adds	r3, #14
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	7aba      	ldrb	r2, [r7, #10]
 80037aa:	4619      	mov	r1, r3
 80037ac:	f005 f9e4 	bl	8008b78 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 80037b0:	4854      	ldr	r0, [pc, #336]	; (8003904 <set_dido+0x364>)
 80037b2:	f7fe fb7d 	bl	8001eb0 <SEND_str>
 80037b6:	e047      	b.n	8003848 <set_dido+0x2a8>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 80037b8:	494d      	ldr	r1, [pc, #308]	; (80038f0 <set_dido+0x350>)
 80037ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	4949      	ldr	r1, [pc, #292]	; (80038f0 <set_dido+0x350>)
 80037cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3306      	adds	r3, #6
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	f005 f9b2 	bl	8008b48 <HAL_GPIO_ReadPin>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d12c      	bne.n	8003848 <set_dido+0x2a8>
					{
						Status_OCD[j] = !VAR_OUT;
 80037ee:	7abb      	ldrb	r3, [r7, #10]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4619      	mov	r1, r3
 80037fc:	4a40      	ldr	r2, [pc, #256]	; (8003900 <set_dido+0x360>)
 80037fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003802:	4413      	add	r3, r2
 8003804:	460a      	mov	r2, r1
 8003806:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8003808:	4939      	ldr	r1, [pc, #228]	; (80038f0 <set_dido+0x350>)
 800380a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3308      	adds	r3, #8
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	4934      	ldr	r1, [pc, #208]	; (80038f0 <set_dido+0x350>)
 800381e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	330e      	adds	r3, #14
 800382e:	8819      	ldrh	r1, [r3, #0]
 8003830:	7abb      	ldrb	r3, [r7, #10]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	f005 f99b 	bl	8008b78 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8003842:	4831      	ldr	r0, [pc, #196]	; (8003908 <set_dido+0x368>)
 8003844:	f7fe fb34 	bl	8001eb0 <SEND_str>
					}

					//For Debug:
					//------------------------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8003848:	4929      	ldr	r1, [pc, #164]	; (80038f0 <set_dido+0x350>)
 800384a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2c      	ldr	r2, [pc, #176]	; (800390c <set_dido+0x36c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <set_dido+0x2c6>
						SEND_str("1 - success...\n");
 8003860:	482b      	ldr	r0, [pc, #172]	; (8003910 <set_dido+0x370>)
 8003862:	f7fe fb25 	bl	8001eb0 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <set_dido+0x350>)
 8003868:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3304      	adds	r3, #4
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	7afa      	ldrb	r2, [r7, #11]
 800387c:	429a      	cmp	r2, r3
 800387e:	d102      	bne.n	8003886 <set_dido+0x2e6>
						SEND_str("2 - success...\n");
 8003880:	4824      	ldr	r0, [pc, #144]	; (8003914 <set_dido+0x374>)
 8003882:	f7fe fb15 	bl	8001eb0 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 8003886:	491a      	ldr	r1, [pc, #104]	; (80038f0 <set_dido+0x350>)
 8003888:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3308      	adds	r3, #8
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <set_dido+0x378>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d102      	bne.n	80038a6 <set_dido+0x306>
						SEND_str("3 - success...\n");
 80038a0:	481e      	ldr	r0, [pc, #120]	; (800391c <set_dido+0x37c>)
 80038a2:	f7fe fb05 	bl	8001eb0 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 80038a6:	4912      	ldr	r1, [pc, #72]	; (80038f0 <set_dido+0x350>)
 80038a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	330c      	adds	r3, #12
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	7aba      	ldrb	r2, [r7, #10]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d10e      	bne.n	80038de <set_dido+0x33e>
						SEND_str("4 - success...\n");
 80038c0:	4817      	ldr	r0, [pc, #92]	; (8003920 <set_dido+0x380>)
 80038c2:	f7fe faf5 	bl	8001eb0 <SEND_str>
					//------------------------------------------------

					break;
 80038c6:	e00a      	b.n	80038de <set_dido+0x33e>
			for(int j = 0; j < 8; j++)
 80038c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038cc:	3301      	adds	r3, #1
 80038ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	f77f aef6 	ble.w	80036c8 <set_dido+0x128>
				}
			}
			break;
 80038dc:	e02c      	b.n	8003938 <set_dido+0x398>
					break;
 80038de:	bf00      	nop
			break;
 80038e0:	e02a      	b.n	8003938 <set_dido+0x398>
 80038e2:	bf00      	nop
 80038e4:	0801d9d0 	.word	0x0801d9d0
 80038e8:	0801da20 	.word	0x0801da20
 80038ec:	0801da70 	.word	0x0801da70
 80038f0:	20000910 	.word	0x20000910
 80038f4:	20000008 	.word	0x20000008
 80038f8:	20000028 	.word	0x20000028
 80038fc:	20000048 	.word	0x20000048
 8003900:	20000374 	.word	0x20000374
 8003904:	0801d978 	.word	0x0801d978
 8003908:	0801d984 	.word	0x0801d984
 800390c:	40020c00 	.word	0x40020c00
 8003910:	0801d990 	.word	0x0801d990
 8003914:	0801d9a0 	.word	0x0801d9a0
 8003918:	40020400 	.word	0x40020400
 800391c:	0801d9b0 	.word	0x0801d9b0
 8003920:	0801d9c0 	.word	0x0801d9c0
	for(int i = 0; i < 8; i++)
 8003924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003928:	3301      	adds	r3, #1
 800392a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800392e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003932:	2b07      	cmp	r3, #7
 8003934:	f77f ae58 	ble.w	80035e8 <set_dido+0x48>
		}
	}
}
 8003938:	bf00      	nop
 800393a:	37cc      	adds	r7, #204	; 0xcc
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}

08003940 <set_vaido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_vaido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b0b2      	sub	sp, #200	; 0xc8
 8003944:	af00      	add	r7, sp, #0
 8003946:	61f8      	str	r0, [r7, #28]
 8003948:	ed87 0b04 	vstr	d0, [r7, #16]
 800394c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003950:	61b9      	str	r1, [r7, #24]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 8003956:	4b96      	ldr	r3, [pc, #600]	; (8003bb0 <set_vaido+0x270>)
 8003958:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800395c:	461d      	mov	r5, r3
 800395e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003966:	e895 0003 	ldmia.w	r5, {r0, r1}
 800396a:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 800396e:	4a91      	ldr	r2, [pc, #580]	; (8003bb4 <set_vaido+0x274>)
 8003970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003974:	4611      	mov	r1, r2
 8003976:	2250      	movs	r2, #80	; 0x50
 8003978:	4618      	mov	r0, r3
 800397a:	f014 fa88 	bl	8017e8e <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 800397e:	4b8e      	ldr	r3, [pc, #568]	; (8003bb8 <set_vaido+0x278>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800398a:	e108      	b.n	8003b9e <set_vaido+0x25e>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 800398c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003990:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	4619      	mov	r1, r3
 80039a0:	69f8      	ldr	r0, [r7, #28]
 80039a2:	f7fc fc15 	bl	80001d0 <strcmp>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 80f3 	bne.w	8003b94 <set_vaido+0x254>
		{
			if(VAiDo[i].clrFlag != false)
 80039ae:	4983      	ldr	r1, [pc, #524]	; (8003bbc <set_vaido+0x27c>)
 80039b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	3320      	adds	r3, #32
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <set_vaido+0xb6>
				HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 80039c6:	497d      	ldr	r1, [pc, #500]	; (8003bbc <set_vaido+0x27c>)
 80039c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	3318      	adds	r3, #24
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	4978      	ldr	r1, [pc, #480]	; (8003bbc <set_vaido+0x27c>)
 80039dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	331e      	adds	r3, #30
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	4619      	mov	r1, r3
 80039f2:	f005 f8c1 	bl	8008b78 <HAL_GPIO_WritePin>

			VAiDo[i].clrFlag = true;
 80039f6:	4971      	ldr	r1, [pc, #452]	; (8003bbc <set_vaido+0x27c>)
 80039f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	3320      	adds	r3, #32
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
			VAiDo[i].A_IN = pVHOD[i];
 8003a0c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a14:	4413      	add	r3, r2
 8003a16:	7818      	ldrb	r0, [r3, #0]
 8003a18:	4968      	ldr	r1, [pc, #416]	; (8003bbc <set_vaido+0x27c>)
 8003a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	4602      	mov	r2, r0
 8003a2a:	701a      	strb	r2, [r3, #0]
			VAiDo[i].RANGE_LOW = RANGE_LOW;
 8003a2c:	4963      	ldr	r1, [pc, #396]	; (8003bbc <set_vaido+0x27c>)
 8003a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f103 0208 	add.w	r2, r3, #8
 8003a40:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a44:	e9c2 3400 	strd	r3, r4, [r2]
			VAiDo[i].RANGE_HIGH = RANGE_HIGH;
 8003a48:	495c      	ldr	r1, [pc, #368]	; (8003bbc <set_vaido+0x27c>)
 8003a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	f103 0210 	add.w	r2, r3, #16
 8003a5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a60:	e9c2 3400 	strd	r3, r4, [r2]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6a:	e08d      	b.n	8003b88 <set_vaido+0x248>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8003a6c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	4619      	mov	r1, r3
 8003a80:	69b8      	ldr	r0, [r7, #24]
 8003a82:	f7fc fba5 	bl	80001d0 <strcmp>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d178      	bne.n	8003b7e <set_vaido+0x23e>
				{
					VAiDo[i].D_OUT = pVIHOD[j];
 8003a8c:	4a4c      	ldr	r2, [pc, #304]	; (8003bc0 <set_vaido+0x280>)
 8003a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a96:	4849      	ldr	r0, [pc, #292]	; (8003bbc <set_vaido+0x27c>)
 8003a98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4403      	add	r3, r0
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	6019      	str	r1, [r3, #0]
					VAiDo[i].VAR_OUT = VAR_OUT;
 8003aaa:	4944      	ldr	r1, [pc, #272]	; (8003bbc <set_vaido+0x27c>)
 8003aac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	331c      	adds	r3, #28
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	701a      	strb	r2, [r3, #0]
					VAiDo[i].OCD_Pin = OCD_Pin[j];
 8003ac0:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <set_vaido+0x284>)
 8003ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ac6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003aca:	493c      	ldr	r1, [pc, #240]	; (8003bbc <set_vaido+0x27c>)
 8003acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	331e      	adds	r3, #30
 8003adc:	4602      	mov	r2, r0
 8003ade:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 8003ae0:	4839      	ldr	r0, [pc, #228]	; (8003bc8 <set_vaido+0x288>)
 8003ae2:	f7fe f9e5 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 8003ae6:	4a39      	ldr	r2, [pc, #228]	; (8003bcc <set_vaido+0x28c>)
 8003ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003af4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	4934      	ldr	r1, [pc, #208]	; (8003bd0 <set_vaido+0x290>)
 8003afe:	f014 ff87 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe f9d2 	bl	8001eb0 <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 8003b0c:	4831      	ldr	r0, [pc, #196]	; (8003bd4 <set_vaido+0x294>)
 8003b0e:	f7fe f9cf 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_LOW);
 8003b12:	492a      	ldr	r1, [pc, #168]	; (8003bbc <set_vaido+0x27c>)
 8003b14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	440b      	add	r3, r1
 8003b22:	3308      	adds	r3, #8
 8003b24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b28:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <set_vaido+0x290>)
 8003b32:	f014 ff6d 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe f9b8 	bl	8001eb0 <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 8003b40:	4825      	ldr	r0, [pc, #148]	; (8003bd8 <set_vaido+0x298>)
 8003b42:	f7fe f9b5 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_HIGH);
 8003b46:	491d      	ldr	r1, [pc, #116]	; (8003bbc <set_vaido+0x27c>)
 8003b48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	3310      	adds	r3, #16
 8003b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	491a      	ldr	r1, [pc, #104]	; (8003bd0 <set_vaido+0x290>)
 8003b66:	f014 ff53 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe f99e 	bl	8001eb0 <SEND_str>
					SEND_str("\n");
 8003b74:	4819      	ldr	r0, [pc, #100]	; (8003bdc <set_vaido+0x29c>)
 8003b76:	f7fe f99b 	bl	8001eb0 <SEND_str>
					//------------------------------------------------

					break;
 8003b7a:	bf00      	nop
				}
			}
			break;
 8003b7c:	e014      	b.n	8003ba8 <set_vaido+0x268>
			for(int j = 0; j < 8; j++)
 8003b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b82:	3301      	adds	r3, #1
 8003b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b8c:	2b07      	cmp	r3, #7
 8003b8e:	f77f af6d 	ble.w	8003a6c <set_vaido+0x12c>
			break;
 8003b92:	e009      	b.n	8003ba8 <set_vaido+0x268>
	for(int i = 0; i < 4; i++)
 8003b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f77f aef2 	ble.w	800398c <set_vaido+0x4c>
		}
	}
}
 8003ba8:	bf00      	nop
 8003baa:	37c8      	adds	r7, #200	; 0xc8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb0:	0801dab8 	.word	0x0801dab8
 8003bb4:	0801da20 	.word	0x0801da20
 8003bb8:	0801dae0 	.word	0x0801dae0
 8003bbc:	20000870 	.word	0x20000870
 8003bc0:	20000028 	.word	0x20000028
 8003bc4:	20000048 	.word	0x20000048
 8003bc8:	0801da80 	.word	0x0801da80
 8003bcc:	200002f8 	.word	0x200002f8
 8003bd0:	0801da8c 	.word	0x0801da8c
 8003bd4:	0801da94 	.word	0x0801da94
 8003bd8:	0801daa4 	.word	0x0801daa4
 8003bdc:	0801dab4 	.word	0x0801dab4

08003be0 <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b094      	sub	sp, #80	; 0x50
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <set_pwm+0x138>)
 8003bec:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8003bfa:	4b48      	ldr	r3, [pc, #288]	; (8003d1c <set_pwm+0x13c>)
 8003bfc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0a:	e07d      	b.n	8003d08 <set_pwm+0x128>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8003c0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	440b      	add	r3, r1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fc fad7 	bl	80001d0 <strcmp>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d16c      	bne.n	8003d02 <set_pwm+0x122>
		{
			if(PWM[i].clrFlag != false)
 8003c28:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <set_pwm+0x140>)
 8003c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	799b      	ldrb	r3, [r3, #6]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c3e:	4413      	add	r3, r2
 8003c40:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8003c44:	2301      	movs	r3, #1
 8003c46:	2200      	movs	r2, #0
 8003c48:	4836      	ldr	r0, [pc, #216]	; (8003d24 <set_pwm+0x144>)
 8003c4a:	f006 fc8b 	bl	800a564 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 8003c4e:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <set_pwm+0x140>)
 8003c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	2201      	movs	r2, #1
 8003c58:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c62:	4413      	add	r3, r2
 8003c64:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003c68:	492d      	ldr	r1, [pc, #180]	; (8003d20 <set_pwm+0x140>)
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	0091      	lsls	r1, r2, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	460b      	mov	r3, r1
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	b299      	uxth	r1, r3
 8003c88:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <set_pwm+0x140>)
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	460a      	mov	r2, r1
 8003c92:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 8003c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <set_pwm+0x140>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	2301      	movs	r3, #1
 8003cae:	481d      	ldr	r0, [pc, #116]	; (8003d24 <set_pwm+0x144>)
 8003cb0:	f006 fc58 	bl	800a564 <HAL_TIM_PWM_Start_DMA>

			//For Debug:
			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8003cb4:	481c      	ldr	r0, [pc, #112]	; (8003d28 <set_pwm+0x148>)
 8003cb6:	f7fe f8fb 	bl	8001eb0 <SEND_str>
			SEND_str(PVIHOD[i]);
 8003cba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe f8f1 	bl	8001eb0 <SEND_str>
			SEND_str("\n");
 8003cce:	4817      	ldr	r0, [pc, #92]	; (8003d2c <set_pwm+0x14c>)
 8003cd0:	f7fe f8ee 	bl	8001eb0 <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8003cd4:	4816      	ldr	r0, [pc, #88]	; (8003d30 <set_pwm+0x150>)
 8003cd6:	f7fe f8eb 	bl	8001eb0 <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	4914      	ldr	r1, [pc, #80]	; (8003d34 <set_pwm+0x154>)
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f014 fe94 	bl	8018a10 <siprintf>
			SEND_str(Buff);
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe f8df 	bl	8001eb0 <SEND_str>
			SEND_str("%");
 8003cf2:	4811      	ldr	r0, [pc, #68]	; (8003d38 <set_pwm+0x158>)
 8003cf4:	f7fe f8dc 	bl	8001eb0 <SEND_str>
			SEND_str("\n");
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <set_pwm+0x14c>)
 8003cfa:	f7fe f8d9 	bl	8001eb0 <SEND_str>
			//------------------------------------------------

			break;
 8003cfe:	bf00      	nop
 8003d00:	e006      	b.n	8003d10 <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 8003d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d04:	3301      	adds	r3, #1
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	f77f af7e 	ble.w	8003c0c <set_pwm+0x2c>
		}
	}
}
 8003d10:	bf00      	nop
 8003d12:	3750      	adds	r7, #80	; 0x50
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bdb0      	pop	{r4, r5, r7, pc}
 8003d18:	0801db08 	.word	0x0801db08
 8003d1c:	0801db1c 	.word	0x0801db1c
 8003d20:	20000850 	.word	0x20000850
 8003d24:	20000ecc 	.word	0x20000ecc
 8003d28:	0801dae4 	.word	0x0801dae4
 8003d2c:	0801dab4 	.word	0x0801dab4
 8003d30:	0801daf0 	.word	0x0801daf0
 8003d34:	0801db00 	.word	0x0801db00
 8003d38:	0801db04 	.word	0x0801db04

08003d3c <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a9      	sub	sp, #164	; 0xa4
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	61f8      	str	r0, [r7, #28]
 8003d44:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d48:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d4c:	61b9      	str	r1, [r7, #24]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8003d52:	4aa6      	ldr	r2, [pc, #664]	; (8003fec <set_temperature+0x2b0>)
 8003d54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d58:	4611      	mov	r1, r2
 8003d5a:	2250      	movs	r2, #80	; 0x50
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f014 f896 	bl	8017e8e <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d68:	e137      	b.n	8003fda <set_temperature+0x29e>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 8003d6a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4a9e      	ldr	r2, [pc, #632]	; (8003ff0 <set_temperature+0x2b4>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	69f8      	ldr	r0, [r7, #28]
 8003d7e:	f7fc fa27 	bl	80001d0 <strcmp>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8123 	bne.w	8003fd0 <set_temperature+0x294>
		{
			if(TSiDo[i].clrFlag != false)
 8003d8a:	499a      	ldr	r1, [pc, #616]	; (8003ff4 <set_temperature+0x2b8>)
 8003d8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	3330      	adds	r3, #48	; 0x30
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 8003da2:	4994      	ldr	r1, [pc, #592]	; (8003ff4 <set_temperature+0x2b8>)
 8003da4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3328      	adds	r3, #40	; 0x28
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	498f      	ldr	r1, [pc, #572]	; (8003ff4 <set_temperature+0x2b8>)
 8003db8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	332e      	adds	r3, #46	; 0x2e
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f004 fed3 	bl	8008b78 <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 8003dd2:	4988      	ldr	r1, [pc, #544]	; (8003ff4 <set_temperature+0x2b8>)
 8003dd4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	3330      	adds	r3, #48	; 0x30
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 8003de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	b2d8      	uxtb	r0, r3
 8003df2:	4980      	ldr	r1, [pc, #512]	; (8003ff4 <set_temperature+0x2b8>)
 8003df4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	440b      	add	r3, r1
 8003e02:	4602      	mov	r2, r0
 8003e04:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e0c:	e01e      	b.n	8003e4c <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 8003e0e:	4978      	ldr	r1, [pc, #480]	; (8003ff0 <set_temperature+0x2b4>)
 8003e10:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	18ca      	adds	r2, r1, r3
 8003e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e22:	4413      	add	r3, r2
 8003e24:	7818      	ldrb	r0, [r3, #0]
 8003e26:	4973      	ldr	r1, [pc, #460]	; (8003ff4 <set_temperature+0x2b8>)
 8003e28:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	18ca      	adds	r2, r1, r3
 8003e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4602      	mov	r2, r0
 8003e40:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8003e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e46:	3301      	adds	r3, #1
 8003e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	dddc      	ble.n	8003e0e <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 8003e54:	4967      	ldr	r1, [pc, #412]	; (8003ff4 <set_temperature+0x2b8>)
 8003e56:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	f103 0218 	add.w	r2, r3, #24
 8003e68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e6c:	e9c2 3400 	strd	r3, r4, [r2]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 8003e70:	4960      	ldr	r1, [pc, #384]	; (8003ff4 <set_temperature+0x2b8>)
 8003e72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	f103 0220 	add.w	r2, r3, #32
 8003e84:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e88:	e9c2 3400 	strd	r3, r4, [r2]
			for(int j = 0; j < 8; j++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e92:	e097      	b.n	8003fc4 <set_temperature+0x288>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8003e94:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	440b      	add	r3, r1
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	69b8      	ldr	r0, [r7, #24]
 8003eaa:	f7fc f991 	bl	80001d0 <strcmp>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 8082 	bne.w	8003fba <set_temperature+0x27e>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8003eb6:	4a50      	ldr	r2, [pc, #320]	; (8003ff8 <set_temperature+0x2bc>)
 8003eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ebc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ec0:	484c      	ldr	r0, [pc, #304]	; (8003ff4 <set_temperature+0x2b8>)
 8003ec2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4403      	add	r3, r0
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 8003ed4:	4947      	ldr	r1, [pc, #284]	; (8003ff4 <set_temperature+0x2b8>)
 8003ed6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	332c      	adds	r3, #44	; 0x2c
 8003ee6:	79fa      	ldrb	r2, [r7, #7]
 8003ee8:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 8003eea:	4a44      	ldr	r2, [pc, #272]	; (8003ffc <set_temperature+0x2c0>)
 8003eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ef0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003ef4:	493f      	ldr	r1, [pc, #252]	; (8003ff4 <set_temperature+0x2b8>)
 8003ef6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	332e      	adds	r3, #46	; 0x2e
 8003f06:	4602      	mov	r2, r0
 8003f08:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 8003f0a:	483d      	ldr	r0, [pc, #244]	; (8004000 <set_temperature+0x2c4>)
 8003f0c:	f7fd ffd0 	bl	8001eb0 <SEND_str>
					SEND_str(ROM_RAW);
 8003f10:	69f8      	ldr	r0, [r7, #28]
 8003f12:	f7fd ffcd 	bl	8001eb0 <SEND_str>
					SEND_str("\n");
 8003f16:	483b      	ldr	r0, [pc, #236]	; (8004004 <set_temperature+0x2c8>)
 8003f18:	f7fd ffca 	bl	8001eb0 <SEND_str>
					SEND_str("SET VALUE: ");
 8003f1c:	483a      	ldr	r0, [pc, #232]	; (8004008 <set_temperature+0x2cc>)
 8003f1e:	f7fd ffc7 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.2f", temper);
 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <set_temperature+0x2d0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fb1e 	bl	8000568 <__aeabi_f2d>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f34:	461a      	mov	r2, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <set_temperature+0x2d4>)
 8003f3a:	f014 fd69 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd ffb4 	bl	8001eb0 <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 8003f48:	4832      	ldr	r0, [pc, #200]	; (8004014 <set_temperature+0x2d8>)
 8003f4a:	f7fd ffb1 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 8003f4e:	4929      	ldr	r1, [pc, #164]	; (8003ff4 <set_temperature+0x2b8>)
 8003f50:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3318      	adds	r3, #24
 8003f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f64:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	4928      	ldr	r1, [pc, #160]	; (8004010 <set_temperature+0x2d4>)
 8003f6e:	f014 fd4f 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd ff9a 	bl	8001eb0 <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 8003f7c:	4826      	ldr	r0, [pc, #152]	; (8004018 <set_temperature+0x2dc>)
 8003f7e:	f7fd ff97 	bl	8001eb0 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 8003f82:	491c      	ldr	r1, [pc, #112]	; (8003ff4 <set_temperature+0x2b8>)
 8003f84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	3320      	adds	r3, #32
 8003f94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f98:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	491b      	ldr	r1, [pc, #108]	; (8004010 <set_temperature+0x2d4>)
 8003fa2:	f014 fd35 	bl	8018a10 <siprintf>
					SEND_str(Buff);
 8003fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd ff80 	bl	8001eb0 <SEND_str>
					SEND_str("\n");
 8003fb0:	4814      	ldr	r0, [pc, #80]	; (8004004 <set_temperature+0x2c8>)
 8003fb2:	f7fd ff7d 	bl	8001eb0 <SEND_str>
					//------------------------------------------------

					break;
 8003fb6:	bf00      	nop
				}
			}
			break;
 8003fb8:	e014      	b.n	8003fe4 <set_temperature+0x2a8>
			for(int j = 0; j < 8; j++)
 8003fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	f77f af63 	ble.w	8003e94 <set_temperature+0x158>
			break;
 8003fce:	e009      	b.n	8003fe4 <set_temperature+0x2a8>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8003fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fde:	2b07      	cmp	r3, #7
 8003fe0:	f77f aec3 	ble.w	8003d6a <set_temperature+0x2e>
		}
	}
}
 8003fe4:	bf00      	nop
 8003fe6:	37a4      	adds	r7, #164	; 0xa4
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	0801da20 	.word	0x0801da20
 8003ff0:	20000c70 	.word	0x20000c70
 8003ff4:	200005e8 	.word	0x200005e8
 8003ff8:	20000028 	.word	0x20000028
 8003ffc:	20000048 	.word	0x20000048
 8004000:	0801db2c 	.word	0x0801db2c
 8004004:	0801dab4 	.word	0x0801dab4
 8004008:	0801da80 	.word	0x0801da80
 800400c:	20000a30 	.word	0x20000a30
 8004010:	0801db38 	.word	0x0801db38
 8004014:	0801db40 	.word	0x0801db40
 8004018:	0801db54 	.word	0x0801db54

0800401c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004020:	f002 fa96 	bl	8006550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004024:	f000 f862 	bl	80040ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004028:	f7fe f90c 	bl	8002244 <MX_GPIO_Init>
  MX_DMA_Init();
 800402c:	f7fe f8bc 	bl	80021a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004030:	f7fc ff6a 	bl	8000f08 <MX_ADC1_Init>
  MX_SPI1_Init();
 8004034:	f000 fa06 	bl	8004444 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004038:	f000 fa3a 	bl	80044b0 <MX_SPI2_Init>
  MX_TIM3_Init();
 800403c:	f001 fe1a 	bl	8005c74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004040:	f002 f8a4 	bl	800618c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004044:	f002 f8cc 	bl	80061e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004048:	f002 f8f4 	bl	8006234 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800404c:	f007 fe3a 	bl	800bcc4 <MX_LWIP_Init>
  MX_TIM4_Init();
 8004050:	f001 fe8c 	bl	8005d6c <MX_TIM4_Init>
  MX_RTC_Init();
 8004054:	f000 f986 	bl	8004364 <MX_RTC_Init>
  MX_TIM6_Init();
 8004058:	f001 fede 	bl	8005e18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 800405c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004060:	f002 fab8 	bl	80065d4 <HAL_Delay>
	DWT_Init();
 8004064:	f7fe f864 	bl	8002130 <DWT_Init>

	EN_Interrupt();		//Для дебага по USART3
 8004068:	f002 fa22 	bl	80064b0 <EN_Interrupt>
												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	//Допилить фичу переключения аналогового комутатора !!!
	HAL_GPIO_WritePin(GPIOE, S1_Pin, RESET);	//Вход аналогового комутатора - выход линии 1
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004072:	4817      	ldr	r0, [pc, #92]	; (80040d0 <main+0xb4>)
 8004074:	f004 fd80 	bl	8008b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S2_Pin, RESET);
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800407e:	4814      	ldr	r0, [pc, #80]	; (80040d0 <main+0xb4>)
 8004080:	f004 fd7a 	bl	8008b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S3_Pin, RESET);
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800408a:	4811      	ldr	r0, [pc, #68]	; (80040d0 <main+0xb4>)
 800408c:	f004 fd74 	bl	8008b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S4_Pin, RESET);
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004096:	480e      	ldr	r0, [pc, #56]	; (80040d0 <main+0xb4>)
 8004098:	f004 fd6e 	bl	8008b78 <HAL_GPIO_WritePin>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 800409c:	2204      	movs	r2, #4
 800409e:	490d      	ldr	r1, [pc, #52]	; (80040d4 <main+0xb8>)
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <main+0xbc>)
 80040a2:	f002 fafd 	bl	80066a0 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80040a6:	210c      	movs	r1, #12
 80040a8:	480c      	ldr	r0, [pc, #48]	; (80040dc <main+0xc0>)
 80040aa:	f006 f9f1 	bl	800a490 <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 80040ae:	f001 fd3d 	bl	8005b2c <UpdateTempSens>
	//------------------------------------------


//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);		//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 80040b2:	2301      	movs	r3, #1
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <main+0xc4>)
 80040b6:	490b      	ldr	r1, [pc, #44]	; (80040e4 <main+0xc8>)
 80040b8:	480b      	ldr	r0, [pc, #44]	; (80040e8 <main+0xcc>)
 80040ba:	f005 fdd1 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
		//----------------GSM_test----------------
//		GSM_RxCpltCallback();		//Обработчик принятых данных от модуля GSM
		//----------------------------------------

		//--------------SPI_test_MK---------------
		SPI_available();			//Необходимо переделать так чтобы на дисплее был только статус вывода.
 80040be:	f000 fb59 	bl	8004774 <SPI_available>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 80040c2:	f7fd ff11 	bl	8001ee8 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteVAiDo();
 80040c6:	f7ff f8b9 	bl	800323c <CheckReWriteVAiDo>
		//----------------------------------------

		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 80040ca:	f7ff f94d 	bl	8003368 <CheckReWriteTSiDo>
		SPI_available();			//Необходимо переделать так чтобы на дисплее был только статус вывода.
 80040ce:	e7f6      	b.n	80040be <main+0xa2>
 80040d0:	40021000 	.word	0x40021000
 80040d4:	200002f0 	.word	0x200002f0
 80040d8:	200007a8 	.word	0x200007a8
 80040dc:	20000e2c 	.word	0x20000e2c
 80040e0:	20000384 	.word	0x20000384
 80040e4:	20000388 	.word	0x20000388
 80040e8:	20000d30 	.word	0x20000d30

080040ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b098      	sub	sp, #96	; 0x60
 80040f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f6:	2230      	movs	r2, #48	; 0x30
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f013 feeb 	bl	8017ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004100:	f107 031c 	add.w	r3, r7, #28
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <SystemClock_Config+0xfc>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <SystemClock_Config+0xfc>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <SystemClock_Config+0xfc>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <SystemClock_Config+0x100>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <SystemClock_Config+0x100>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <SystemClock_Config+0x100>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004156:	2305      	movs	r3, #5
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800415a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004160:	2301      	movs	r3, #1
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004164:	2302      	movs	r3, #2
 8004166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800416c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800416e:	2304      	movs	r3, #4
 8004170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004172:	23a8      	movs	r3, #168	; 0xa8
 8004174:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004176:	2302      	movs	r3, #2
 8004178:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800417a:	2304      	movs	r3, #4
 800417c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800417e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004182:	4618      	mov	r0, r3
 8004184:	f004 fd2a 	bl	8008bdc <HAL_RCC_OscConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800418e:	f000 f8e1 	bl	8004354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004192:	230f      	movs	r3, #15
 8004194:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004196:	2302      	movs	r3, #2
 8004198:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800419e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80041aa:	f107 031c 	add.w	r3, r7, #28
 80041ae:	2105      	movs	r1, #5
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 ff83 	bl	80090bc <HAL_RCC_ClockConfig>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80041bc:	f000 f8ca 	bl	8004354 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041c0:	2302      	movs	r3, #2
 80041c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041ca:	f107 030c 	add.w	r3, r7, #12
 80041ce:	4618      	mov	r0, r3
 80041d0:	f005 f998 	bl	8009504 <HAL_RCCEx_PeriphCLKConfig>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80041da:	f000 f8bb 	bl	8004354 <Error_Handler>
  }
}
 80041de:	bf00      	nop
 80041e0:	3760      	adds	r7, #96	; 0x60
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 80041fa:	f7fe ff61 	bl	80030c0 <CheckReWriteDiDo>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_SPI_TxRxCpltCallback+0x34>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10b      	bne.n	8004230 <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_SPI_TxRxCpltCallback+0x34>)
 800421a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_SPI_TxRxCpltCallback+0x28>
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_SPI_TxRxCpltCallback+0x38>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_SPI_TxRxCpltCallback+0x38>)
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000d30 	.word	0x20000d30
 8004240:	20000389 	.word	0x20000389

08004244 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_ADC_ConvCpltCallback+0x84>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d133      	bne.n	80042be <HAL_ADC_ConvCpltCallback+0x7a>
    {
        adcValue[0] = Conversion_ADC1((uint16_t)adc[0]);
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_ADC_ConvCpltCallback+0x88>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc ff47 	bl	80010f0 <Conversion_ADC1>
 8004262:	eeb0 7a40 	vmov.f32	s14, s0
 8004266:	eef0 7a60 	vmov.f32	s15, s1
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 800426c:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1]);
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_ADC_ConvCpltCallback+0x88>)
 8004272:	885b      	ldrh	r3, [r3, #2]
 8004274:	b29b      	uxth	r3, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc ff3a 	bl	80010f0 <Conversion_ADC1>
 800427c:	eeb0 7a40 	vmov.f32	s14, s0
 8004280:	eef0 7a60 	vmov.f32	s15, s1
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8004286:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2]);
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_ADC_ConvCpltCallback+0x88>)
 800428c:	889b      	ldrh	r3, [r3, #4]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc ff2d 	bl	80010f0 <Conversion_ADC1>
 8004296:	eeb0 7a40 	vmov.f32	s14, s0
 800429a:	eef0 7a60 	vmov.f32	s15, s1
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042a0:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3]);
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_ADC_ConvCpltCallback+0x88>)
 80042a6:	88db      	ldrh	r3, [r3, #6]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc ff20 	bl	80010f0 <Conversion_ADC1>
 80042b0:	eeb0 7a40 	vmov.f32	s14, s0
 80042b4:	eef0 7a60 	vmov.f32	s15, s1
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042ba:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40012000 	.word	0x40012000
 80042cc:	200002f0 	.word	0x200002f0
 80042d0:	200002f8 	.word	0x200002f8

080042d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11f      	bne.n	8004326 <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80042f0:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80042fc:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)	//Запрос данных каждую 0.8 сек
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b10      	cmp	r3, #16
 8004304:	d102      	bne.n	800430c <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую 1.6 сек
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b20      	cmp	r3, #32
 8004312:	d108      	bne.n	8004326 <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 8004314:	4b0d      	ldr	r3, [pc, #52]	; (800434c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 8004320:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 8004330:	f002 f930 	bl	8006594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40001000 	.word	0x40001000
 8004340:	20000358 	.word	0x20000358
 8004344:	20000359 	.word	0x20000359
 8004348:	2000035a 	.word	0x2000035a
 800434c:	2000035b 	.word	0x2000035b
 8004350:	40010000 	.word	0x40010000

08004354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004378:	2300      	movs	r3, #0
 800437a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <MX_RTC_Init+0xac>)
 800437e:	4a25      	ldr	r2, [pc, #148]	; (8004414 <MX_RTC_Init+0xb0>)
 8004380:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <MX_RTC_Init+0xac>)
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <MX_RTC_Init+0xac>)
 800438a:	227f      	movs	r2, #127	; 0x7f
 800438c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <MX_RTC_Init+0xac>)
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004394:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <MX_RTC_Init+0xac>)
 8004396:	2200      	movs	r2, #0
 8004398:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <MX_RTC_Init+0xac>)
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <MX_RTC_Init+0xac>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80043a6:	481a      	ldr	r0, [pc, #104]	; (8004410 <MX_RTC_Init+0xac>)
 80043a8:	f005 f98e 	bl	80096c8 <HAL_RTC_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80043b2:	f7ff ffcf 	bl	8004354 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80043b6:	230a      	movs	r3, #10
 80043b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 80043ba:	2322      	movs	r3, #34	; 0x22
 80043bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	2200      	movs	r2, #0
 80043ce:	4619      	mov	r1, r3
 80043d0:	480f      	ldr	r0, [pc, #60]	; (8004410 <MX_RTC_Init+0xac>)
 80043d2:	f005 fa0a 	bl	80097ea <HAL_RTC_SetTime>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80043dc:	f7ff ffba 	bl	8004354 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80043e0:	2302      	movs	r3, #2
 80043e2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80043e4:	2304      	movs	r3, #4
 80043e6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 80043e8:	2314      	movs	r3, #20
 80043ea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 80043ec:	2315      	movs	r3, #21
 80043ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80043f0:	463b      	mov	r3, r7
 80043f2:	2200      	movs	r2, #0
 80043f4:	4619      	mov	r1, r3
 80043f6:	4806      	ldr	r0, [pc, #24]	; (8004410 <MX_RTC_Init+0xac>)
 80043f8:	f005 fab4 	bl	8009964 <HAL_RTC_SetDate>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004402:	f7ff ffa7 	bl	8004354 <Error_Handler>
  }

}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000d10 	.word	0x20000d10
 8004414:	40002800 	.word	0x40002800

08004418 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a05      	ldr	r2, [pc, #20]	; (800443c <HAL_RTC_MspInit+0x24>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d102      	bne.n	8004430 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RTC_MspInit+0x28>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40002800 	.word	0x40002800
 8004440:	42470e3c 	.word	0x42470e3c

08004444 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <MX_SPI1_Init+0x64>)
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <MX_SPI1_Init+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <MX_SPI1_Init+0x64>)
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <MX_SPI1_Init+0x64>)
 800446a:	2200      	movs	r2, #0
 800446c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004478:	2200      	movs	r2, #0
 800447a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <MX_SPI1_Init+0x64>)
 800447e:	2200      	movs	r2, #0
 8004480:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004484:	2200      	movs	r2, #0
 8004486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <MX_SPI1_Init+0x64>)
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004490:	220a      	movs	r2, #10
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004494:	4804      	ldr	r0, [pc, #16]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004496:	f005 fb7e 	bl	8009b96 <HAL_SPI_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044a0:	f7ff ff58 	bl	8004354 <Error_Handler>
  }

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000d88 	.word	0x20000d88
 80044ac:	40013000 	.word	0x40013000

080044b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <MX_SPI2_Init+0x5c>)
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <MX_SPI2_Init+0x60>)
 80044b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <MX_SPI2_Init+0x5c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <MX_SPI2_Init+0x5c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <MX_SPI2_Init+0x5c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <MX_SPI2_Init+0x5c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <MX_SPI2_Init+0x5c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <MX_SPI2_Init+0x5c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <MX_SPI2_Init+0x5c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <MX_SPI2_Init+0x5c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <MX_SPI2_Init+0x5c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <MX_SPI2_Init+0x5c>)
 80044f2:	220a      	movs	r2, #10
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044f6:	4805      	ldr	r0, [pc, #20]	; (800450c <MX_SPI2_Init+0x5c>)
 80044f8:	f005 fb4d 	bl	8009b96 <HAL_SPI_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8004502:	f7ff ff27 	bl	8004354 <Error_Handler>
  }

}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000d30 	.word	0x20000d30
 8004510:	40003800 	.word	0x40003800

08004514 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	; 0x30
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 031c 	add.w	r3, r7, #28
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a45      	ldr	r2, [pc, #276]	; (8004648 <HAL_SPI_MspInit+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d12c      	bne.n	8004590 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_SPI_MspInit+0x138>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	4a43      	ldr	r2, [pc, #268]	; (800464c <HAL_SPI_MspInit+0x138>)
 8004540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004544:	6453      	str	r3, [r2, #68]	; 0x44
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_SPI_MspInit+0x138>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	4b3d      	ldr	r3, [pc, #244]	; (800464c <HAL_SPI_MspInit+0x138>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a3c      	ldr	r2, [pc, #240]	; (800464c <HAL_SPI_MspInit+0x138>)
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_SPI_MspInit+0x138>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 800456e:	2338      	movs	r3, #56	; 0x38
 8004570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800457e:	2305      	movs	r3, #5
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004582:	f107 031c 	add.w	r3, r7, #28
 8004586:	4619      	mov	r1, r3
 8004588:	4831      	ldr	r0, [pc, #196]	; (8004650 <HAL_SPI_MspInit+0x13c>)
 800458a:	f004 f943 	bl	8008814 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800458e:	e057      	b.n	8004640 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <HAL_SPI_MspInit+0x140>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d152      	bne.n	8004640 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b28      	ldr	r3, [pc, #160]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a23      	ldr	r2, [pc, #140]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6313      	str	r3, [r2, #48]	; 0x30
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_SPI_MspInit+0x138>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 80045ee:	230c      	movs	r3, #12
 80045f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fa:	2303      	movs	r3, #3
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045fe:	2305      	movs	r3, #5
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004602:	f107 031c 	add.w	r3, r7, #28
 8004606:	4619      	mov	r1, r3
 8004608:	4813      	ldr	r0, [pc, #76]	; (8004658 <HAL_SPI_MspInit+0x144>)
 800460a:	f004 f903 	bl	8008814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 800460e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004620:	2305      	movs	r3, #5
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	4619      	mov	r1, r3
 800462a:	4809      	ldr	r0, [pc, #36]	; (8004650 <HAL_SPI_MspInit+0x13c>)
 800462c:	f004 f8f2 	bl	8008814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004630:	2200      	movs	r2, #0
 8004632:	2100      	movs	r1, #0
 8004634:	2024      	movs	r0, #36	; 0x24
 8004636:	f002 fc91 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800463a:	2024      	movs	r0, #36	; 0x24
 800463c:	f002 fcaa 	bl	8006f94 <HAL_NVIC_EnableIRQ>
}
 8004640:	bf00      	nop
 8004642:	3730      	adds	r7, #48	; 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40013000 	.word	0x40013000
 800464c:	40023800 	.word	0x40023800
 8004650:	40020400 	.word	0x40020400
 8004654:	40003800 	.word	0x40003800
 8004658:	40020800 	.word	0x40020800

0800465c <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
	if(Status_OCD[0])
 8004660:	4b40      	ldr	r3, [pc, #256]	; (8004764 <ReWriteOCD+0x108>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <ReWriteOCD+0x18>
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8004668:	2201      	movs	r2, #1
 800466a:	2101      	movs	r1, #1
 800466c:	483e      	ldr	r0, [pc, #248]	; (8004768 <ReWriteOCD+0x10c>)
 800466e:	f004 fa83 	bl	8008b78 <HAL_GPIO_WritePin>
 8004672:	e004      	b.n	800467e <ReWriteOCD+0x22>
	else
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8004674:	2200      	movs	r2, #0
 8004676:	2101      	movs	r1, #1
 8004678:	483b      	ldr	r0, [pc, #236]	; (8004768 <ReWriteOCD+0x10c>)
 800467a:	f004 fa7d 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[1])
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <ReWriteOCD+0x108>)
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <ReWriteOCD+0x36>
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8004686:	2201      	movs	r2, #1
 8004688:	2101      	movs	r1, #1
 800468a:	4838      	ldr	r0, [pc, #224]	; (800476c <ReWriteOCD+0x110>)
 800468c:	f004 fa74 	bl	8008b78 <HAL_GPIO_WritePin>
 8004690:	e004      	b.n	800469c <ReWriteOCD+0x40>
	else
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8004692:	2200      	movs	r2, #0
 8004694:	2101      	movs	r1, #1
 8004696:	4835      	ldr	r0, [pc, #212]	; (800476c <ReWriteOCD+0x110>)
 8004698:	f004 fa6e 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[2])
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <ReWriteOCD+0x108>)
 800469e:	789b      	ldrb	r3, [r3, #2]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <ReWriteOCD+0x54>
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 80046a4:	2201      	movs	r2, #1
 80046a6:	2102      	movs	r1, #2
 80046a8:	4830      	ldr	r0, [pc, #192]	; (800476c <ReWriteOCD+0x110>)
 80046aa:	f004 fa65 	bl	8008b78 <HAL_GPIO_WritePin>
 80046ae:	e004      	b.n	80046ba <ReWriteOCD+0x5e>
	else
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2102      	movs	r1, #2
 80046b4:	482d      	ldr	r0, [pc, #180]	; (800476c <ReWriteOCD+0x110>)
 80046b6:	f004 fa5f 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[3])
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <ReWriteOCD+0x108>)
 80046bc:	78db      	ldrb	r3, [r3, #3]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <ReWriteOCD+0x72>
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80046c2:	2201      	movs	r2, #1
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	482a      	ldr	r0, [pc, #168]	; (8004770 <ReWriteOCD+0x114>)
 80046c8:	f004 fa56 	bl	8008b78 <HAL_GPIO_WritePin>
 80046cc:	e004      	b.n	80046d8 <ReWriteOCD+0x7c>
	else
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	4827      	ldr	r0, [pc, #156]	; (8004770 <ReWriteOCD+0x114>)
 80046d4:	f004 fa50 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[4])
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <ReWriteOCD+0x108>)
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <ReWriteOCD+0x92>
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80046e0:	2201      	movs	r2, #1
 80046e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046e6:	4822      	ldr	r0, [pc, #136]	; (8004770 <ReWriteOCD+0x114>)
 80046e8:	f004 fa46 	bl	8008b78 <HAL_GPIO_WritePin>
 80046ec:	e005      	b.n	80046fa <ReWriteOCD+0x9e>
	else
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 80046ee:	2200      	movs	r2, #0
 80046f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046f4:	481e      	ldr	r0, [pc, #120]	; (8004770 <ReWriteOCD+0x114>)
 80046f6:	f004 fa3f 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[5])
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <ReWriteOCD+0x108>)
 80046fc:	795b      	ldrb	r3, [r3, #5]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <ReWriteOCD+0xb4>
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 8004702:	2201      	movs	r2, #1
 8004704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004708:	4819      	ldr	r0, [pc, #100]	; (8004770 <ReWriteOCD+0x114>)
 800470a:	f004 fa35 	bl	8008b78 <HAL_GPIO_WritePin>
 800470e:	e005      	b.n	800471c <ReWriteOCD+0xc0>
	else
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 8004710:	2200      	movs	r2, #0
 8004712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004716:	4816      	ldr	r0, [pc, #88]	; (8004770 <ReWriteOCD+0x114>)
 8004718:	f004 fa2e 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[6])
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <ReWriteOCD+0x108>)
 800471e:	799b      	ldrb	r3, [r3, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <ReWriteOCD+0xd6>
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004724:	2201      	movs	r2, #1
 8004726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800472a:	4811      	ldr	r0, [pc, #68]	; (8004770 <ReWriteOCD+0x114>)
 800472c:	f004 fa24 	bl	8008b78 <HAL_GPIO_WritePin>
 8004730:	e005      	b.n	800473e <ReWriteOCD+0xe2>
	else
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004732:	2200      	movs	r2, #0
 8004734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <ReWriteOCD+0x114>)
 800473a:	f004 fa1d 	bl	8008b78 <HAL_GPIO_WritePin>
	if(Status_OCD[7])
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <ReWriteOCD+0x108>)
 8004740:	79db      	ldrb	r3, [r3, #7]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <ReWriteOCD+0xf8>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 8004746:	2201      	movs	r2, #1
 8004748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800474c:	4808      	ldr	r0, [pc, #32]	; (8004770 <ReWriteOCD+0x114>)
 800474e:	f004 fa13 	bl	8008b78 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
}
 8004752:	e005      	b.n	8004760 <ReWriteOCD+0x104>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800475a:	4805      	ldr	r0, [pc, #20]	; (8004770 <ReWriteOCD+0x114>)
 800475c:	f004 fa0c 	bl	8008b78 <HAL_GPIO_WritePin>
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000374 	.word	0x20000374
 8004768:	40020000 	.word	0x40020000
 800476c:	40020400 	.word	0x40020400
 8004770:	40021000 	.word	0x40021000

08004774 <SPI_available>:
		HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
}
//Функция обработки посылок от интрефейсного МК
//Обновляет значения в массивах данных входов/выходов
void SPI_available(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 8004778:	4bd6      	ldr	r3, [pc, #856]	; (8004ad4 <SPI_available+0x360>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8470 	beq.w	8005062 <SPI_available+0x8ee>
	{
		switch(SPI_rx_buf[0])	//Избаиться от постоянной проверки кейс условий!
 8004782:	4bd5      	ldr	r3, [pc, #852]	; (8004ad8 <SPI_available+0x364>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b65      	cmp	r3, #101	; 0x65
 800478a:	f200 82de 	bhi.w	8004d4a <SPI_available+0x5d6>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <SPI_available+0x20>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	0800492d 	.word	0x0800492d
 8004798:	0800493f 	.word	0x0800493f
 800479c:	08004951 	.word	0x08004951
 80047a0:	08004963 	.word	0x08004963
 80047a4:	08004975 	.word	0x08004975
 80047a8:	08004987 	.word	0x08004987
 80047ac:	08004999 	.word	0x08004999
 80047b0:	080049ab 	.word	0x080049ab
 80047b4:	080049bd 	.word	0x080049bd
 80047b8:	08004d4b 	.word	0x08004d4b
 80047bc:	08004d4b 	.word	0x08004d4b
 80047c0:	08004d4b 	.word	0x08004d4b
 80047c4:	08004d4b 	.word	0x08004d4b
 80047c8:	08004d4b 	.word	0x08004d4b
 80047cc:	08004d4b 	.word	0x08004d4b
 80047d0:	080049d1 	.word	0x080049d1
 80047d4:	080049e5 	.word	0x080049e5
 80047d8:	080049f9 	.word	0x080049f9
 80047dc:	08004a0d 	.word	0x08004a0d
 80047e0:	08004a21 	.word	0x08004a21
 80047e4:	08004a35 	.word	0x08004a35
 80047e8:	08004a49 	.word	0x08004a49
 80047ec:	08004a5d 	.word	0x08004a5d
 80047f0:	08004a71 	.word	0x08004a71
 80047f4:	08004a85 	.word	0x08004a85
 80047f8:	08004d4b 	.word	0x08004d4b
 80047fc:	08004d4b 	.word	0x08004d4b
 8004800:	08004d4b 	.word	0x08004d4b
 8004804:	08004d4b 	.word	0x08004d4b
 8004808:	08004d4b 	.word	0x08004d4b
 800480c:	08004d4b 	.word	0x08004d4b
 8004810:	08004a99 	.word	0x08004a99
 8004814:	08004aad 	.word	0x08004aad
 8004818:	08004ac1 	.word	0x08004ac1
 800481c:	08004af5 	.word	0x08004af5
 8004820:	08004b09 	.word	0x08004b09
 8004824:	08004b1d 	.word	0x08004b1d
 8004828:	08004b31 	.word	0x08004b31
 800482c:	08004b45 	.word	0x08004b45
 8004830:	08004b59 	.word	0x08004b59
 8004834:	08004b6d 	.word	0x08004b6d
 8004838:	08004d4b 	.word	0x08004d4b
 800483c:	08004d4b 	.word	0x08004d4b
 8004840:	08004d4b 	.word	0x08004d4b
 8004844:	08004d4b 	.word	0x08004d4b
 8004848:	08004d4b 	.word	0x08004d4b
 800484c:	08004d4b 	.word	0x08004d4b
 8004850:	08004b81 	.word	0x08004b81
 8004854:	08004b95 	.word	0x08004b95
 8004858:	08004ba9 	.word	0x08004ba9
 800485c:	08004bbd 	.word	0x08004bbd
 8004860:	08004bcf 	.word	0x08004bcf
 8004864:	08004be1 	.word	0x08004be1
 8004868:	08004bf3 	.word	0x08004bf3
 800486c:	08004c05 	.word	0x08004c05
 8004870:	08004c17 	.word	0x08004c17
 8004874:	08004c29 	.word	0x08004c29
 8004878:	08004d4b 	.word	0x08004d4b
 800487c:	08004d4b 	.word	0x08004d4b
 8004880:	08004d4b 	.word	0x08004d4b
 8004884:	08004d4b 	.word	0x08004d4b
 8004888:	08004d4b 	.word	0x08004d4b
 800488c:	08004d4b 	.word	0x08004d4b
 8004890:	08004c3b 	.word	0x08004c3b
 8004894:	08004d4b 	.word	0x08004d4b
 8004898:	08004d4b 	.word	0x08004d4b
 800489c:	08004d4b 	.word	0x08004d4b
 80048a0:	08004d4b 	.word	0x08004d4b
 80048a4:	08004d4b 	.word	0x08004d4b
 80048a8:	08004d4b 	.word	0x08004d4b
 80048ac:	08004d4b 	.word	0x08004d4b
 80048b0:	08004d4b 	.word	0x08004d4b
 80048b4:	08004c4d 	.word	0x08004c4d
 80048b8:	08004d4b 	.word	0x08004d4b
 80048bc:	08004d4b 	.word	0x08004d4b
 80048c0:	08004d4b 	.word	0x08004d4b
 80048c4:	08004d4b 	.word	0x08004d4b
 80048c8:	08004d4b 	.word	0x08004d4b
 80048cc:	08004d4b 	.word	0x08004d4b
 80048d0:	08004c5f 	.word	0x08004c5f
 80048d4:	08004c71 	.word	0x08004c71
 80048d8:	08004c83 	.word	0x08004c83
 80048dc:	08004c95 	.word	0x08004c95
 80048e0:	08004ca9 	.word	0x08004ca9
 80048e4:	08004cbd 	.word	0x08004cbd
 80048e8:	08004cd1 	.word	0x08004cd1
 80048ec:	08004ce5 	.word	0x08004ce5
 80048f0:	08004cf7 	.word	0x08004cf7
 80048f4:	08004d09 	.word	0x08004d09
 80048f8:	08004d4b 	.word	0x08004d4b
 80048fc:	08004d4b 	.word	0x08004d4b
 8004900:	08004d4b 	.word	0x08004d4b
 8004904:	08004d4b 	.word	0x08004d4b
 8004908:	08004d4b 	.word	0x08004d4b
 800490c:	08004d4b 	.word	0x08004d4b
 8004910:	08004d39 	.word	0x08004d39
 8004914:	08004d4b 	.word	0x08004d4b
 8004918:	08004d4b 	.word	0x08004d4b
 800491c:	08004d4b 	.word	0x08004d4b
 8004920:	08004d4b 	.word	0x08004d4b
 8004924:	08004d4b 	.word	0x08004d4b
 8004928:	08004d4b 	.word	0x08004d4b
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 800492c:	4b6b      	ldr	r3, [pc, #428]	; (8004adc <SPI_available+0x368>)
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8004932:	2201      	movs	r2, #1
 8004934:	2101      	movs	r1, #1
 8004936:	486a      	ldr	r0, [pc, #424]	; (8004ae0 <SPI_available+0x36c>)
 8004938:	f004 f91e 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 800493c:	e205      	b.n	8004d4a <SPI_available+0x5d6>
			case OC0_OFF:
				Status_OCD[0] = 0;
 800493e:	4b67      	ldr	r3, [pc, #412]	; (8004adc <SPI_available+0x368>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8004944:	2200      	movs	r2, #0
 8004946:	2101      	movs	r1, #1
 8004948:	4865      	ldr	r0, [pc, #404]	; (8004ae0 <SPI_available+0x36c>)
 800494a:	f004 f915 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 800494e:	e1fc      	b.n	8004d4a <SPI_available+0x5d6>
			case OC1_ON:
				Status_OCD[1] = 1;
 8004950:	4b62      	ldr	r3, [pc, #392]	; (8004adc <SPI_available+0x368>)
 8004952:	2201      	movs	r2, #1
 8004954:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8004956:	2201      	movs	r2, #1
 8004958:	2101      	movs	r1, #1
 800495a:	4862      	ldr	r0, [pc, #392]	; (8004ae4 <SPI_available+0x370>)
 800495c:	f004 f90c 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004960:	e1f3      	b.n	8004d4a <SPI_available+0x5d6>
			case OC1_OFF:
				Status_OCD[1] = 0;
 8004962:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <SPI_available+0x368>)
 8004964:	2200      	movs	r2, #0
 8004966:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8004968:	2200      	movs	r2, #0
 800496a:	2101      	movs	r1, #1
 800496c:	485d      	ldr	r0, [pc, #372]	; (8004ae4 <SPI_available+0x370>)
 800496e:	f004 f903 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004972:	e1ea      	b.n	8004d4a <SPI_available+0x5d6>
			case OC2_ON:
				Status_OCD[2] = 1;
 8004974:	4b59      	ldr	r3, [pc, #356]	; (8004adc <SPI_available+0x368>)
 8004976:	2201      	movs	r2, #1
 8004978:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 800497a:	2201      	movs	r2, #1
 800497c:	2102      	movs	r1, #2
 800497e:	4859      	ldr	r0, [pc, #356]	; (8004ae4 <SPI_available+0x370>)
 8004980:	f004 f8fa 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004984:	e1e1      	b.n	8004d4a <SPI_available+0x5d6>
			case OC2_OFF:
				Status_OCD[2] = 0;
 8004986:	4b55      	ldr	r3, [pc, #340]	; (8004adc <SPI_available+0x368>)
 8004988:	2200      	movs	r2, #0
 800498a:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 800498c:	2200      	movs	r2, #0
 800498e:	2102      	movs	r1, #2
 8004990:	4854      	ldr	r0, [pc, #336]	; (8004ae4 <SPI_available+0x370>)
 8004992:	f004 f8f1 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004996:	e1d8      	b.n	8004d4a <SPI_available+0x5d6>
			case OC3_ON:
				Status_OCD[3] = 1;
 8004998:	4b50      	ldr	r3, [pc, #320]	; (8004adc <SPI_available+0x368>)
 800499a:	2201      	movs	r2, #1
 800499c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 800499e:	2201      	movs	r2, #1
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	4851      	ldr	r0, [pc, #324]	; (8004ae8 <SPI_available+0x374>)
 80049a4:	f004 f8e8 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 80049a8:	e1cf      	b.n	8004d4a <SPI_available+0x5d6>
			case OC3_OFF:
				Status_OCD[3] = 0;
 80049aa:	4b4c      	ldr	r3, [pc, #304]	; (8004adc <SPI_available+0x368>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	484c      	ldr	r0, [pc, #304]	; (8004ae8 <SPI_available+0x374>)
 80049b6:	f004 f8df 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 80049ba:	e1c6      	b.n	8004d4a <SPI_available+0x5d6>
			case OC4_ON:
				Status_OCD[4] = 1;
 80049bc:	4b47      	ldr	r3, [pc, #284]	; (8004adc <SPI_available+0x368>)
 80049be:	2201      	movs	r2, #1
 80049c0:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80049c2:	2201      	movs	r2, #1
 80049c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049c8:	4847      	ldr	r0, [pc, #284]	; (8004ae8 <SPI_available+0x374>)
 80049ca:	f004 f8d5 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 80049ce:	e1bc      	b.n	8004d4a <SPI_available+0x5d6>
			case OC4_OFF:
				Status_OCD[4] = 0;
 80049d0:	4b42      	ldr	r3, [pc, #264]	; (8004adc <SPI_available+0x368>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 80049d6:	2200      	movs	r2, #0
 80049d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049dc:	4842      	ldr	r0, [pc, #264]	; (8004ae8 <SPI_available+0x374>)
 80049de:	f004 f8cb 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 80049e2:	e1b2      	b.n	8004d4a <SPI_available+0x5d6>
			case OC5_ON:
				Status_OCD[5] = 1;
 80049e4:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <SPI_available+0x368>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049f0:	483d      	ldr	r0, [pc, #244]	; (8004ae8 <SPI_available+0x374>)
 80049f2:	f004 f8c1 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 80049f6:	e1a8      	b.n	8004d4a <SPI_available+0x5d6>
			case OC5_OFF:
				Status_OCD[5] = 0;
 80049f8:	4b38      	ldr	r3, [pc, #224]	; (8004adc <SPI_available+0x368>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a04:	4838      	ldr	r0, [pc, #224]	; (8004ae8 <SPI_available+0x374>)
 8004a06:	f004 f8b7 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a0a:	e19e      	b.n	8004d4a <SPI_available+0x5d6>
			case OC6_ON:
				Status_OCD[6] = 1;
 8004a0c:	4b33      	ldr	r3, [pc, #204]	; (8004adc <SPI_available+0x368>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004a12:	2201      	movs	r2, #1
 8004a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a18:	4833      	ldr	r0, [pc, #204]	; (8004ae8 <SPI_available+0x374>)
 8004a1a:	f004 f8ad 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a1e:	e194      	b.n	8004d4a <SPI_available+0x5d6>
			case OC6_OFF:
				Status_OCD[6] = 0;
 8004a20:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <SPI_available+0x368>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004a26:	2200      	movs	r2, #0
 8004a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a2c:	482e      	ldr	r0, [pc, #184]	; (8004ae8 <SPI_available+0x374>)
 8004a2e:	f004 f8a3 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a32:	e18a      	b.n	8004d4a <SPI_available+0x5d6>
			case OC7_ON:
				Status_OCD[7] = 1;
 8004a34:	4b29      	ldr	r3, [pc, #164]	; (8004adc <SPI_available+0x368>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a40:	4829      	ldr	r0, [pc, #164]	; (8004ae8 <SPI_available+0x374>)
 8004a42:	f004 f899 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a46:	e180      	b.n	8004d4a <SPI_available+0x5d6>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <SPI_available+0x368>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a54:	4824      	ldr	r0, [pc, #144]	; (8004ae8 <SPI_available+0x374>)
 8004a56:	f004 f88f 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a5a:	e176      	b.n	8004d4a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <SPI_available+0x378>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, SET);
 8004a62:	2201      	movs	r2, #1
 8004a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a68:	4821      	ldr	r0, [pc, #132]	; (8004af0 <SPI_available+0x37c>)
 8004a6a:	f004 f885 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a6e:	e16c      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN0_F:
				Status_DIN[0] = 0;
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <SPI_available+0x378>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, RESET);
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a7c:	481c      	ldr	r0, [pc, #112]	; (8004af0 <SPI_available+0x37c>)
 8004a7e:	f004 f87b 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a82:	e162      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN1_R:
				Status_DIN[1] = 1;
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <SPI_available+0x378>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a90:	4817      	ldr	r0, [pc, #92]	; (8004af0 <SPI_available+0x37c>)
 8004a92:	f004 f871 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004a96:	e158      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN1_F:
				Status_DIN[1] = 0;
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <SPI_available+0x378>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aa4:	4812      	ldr	r0, [pc, #72]	; (8004af0 <SPI_available+0x37c>)
 8004aa6:	f004 f867 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004aaa:	e14e      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN2_R:
				Status_DIN[2] = 1;
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <SPI_available+0x378>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ab8:	480d      	ldr	r0, [pc, #52]	; (8004af0 <SPI_available+0x37c>)
 8004aba:	f004 f85d 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004abe:	e144      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN2_F:
				Status_DIN[2] = 0;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <SPI_available+0x378>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004acc:	4808      	ldr	r0, [pc, #32]	; (8004af0 <SPI_available+0x37c>)
 8004ace:	f004 f853 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004ad2:	e13a      	b.n	8004d4a <SPI_available+0x5d6>
 8004ad4:	20000389 	.word	0x20000389
 8004ad8:	20000384 	.word	0x20000384
 8004adc:	20000374 	.word	0x20000374
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	20000364 	.word	0x20000364
 8004af0:	40020c00 	.word	0x40020c00
			case DIN3_R:
				Status_DIN[3] = 1;
 8004af4:	4b89      	ldr	r3, [pc, #548]	; (8004d1c <SPI_available+0x5a8>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, SET);
 8004afa:	2201      	movs	r2, #1
 8004afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b00:	4887      	ldr	r0, [pc, #540]	; (8004d20 <SPI_available+0x5ac>)
 8004b02:	f004 f839 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b06:	e120      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN3_F:
				Status_DIN[3] = 0;
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <SPI_available+0x5a8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, RESET);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b14:	4882      	ldr	r0, [pc, #520]	; (8004d20 <SPI_available+0x5ac>)
 8004b16:	f004 f82f 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b1a:	e116      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN4_R:
				Status_DIN[4] = 1;
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <SPI_available+0x5a8>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, SET);
 8004b22:	2201      	movs	r2, #1
 8004b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b28:	487d      	ldr	r0, [pc, #500]	; (8004d20 <SPI_available+0x5ac>)
 8004b2a:	f004 f825 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b2e:	e10c      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN4_F:
				Status_DIN[4] = 0;
 8004b30:	4b7a      	ldr	r3, [pc, #488]	; (8004d1c <SPI_available+0x5a8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, RESET);
 8004b36:	2200      	movs	r2, #0
 8004b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b3c:	4878      	ldr	r0, [pc, #480]	; (8004d20 <SPI_available+0x5ac>)
 8004b3e:	f004 f81b 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b42:	e102      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN5_R:
				Status_DIN[5] = 1;
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <SPI_available+0x5a8>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, SET);
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b50:	4873      	ldr	r0, [pc, #460]	; (8004d20 <SPI_available+0x5ac>)
 8004b52:	f004 f811 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b56:	e0f8      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN5_F:
				Status_DIN[5] = 0;
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <SPI_available+0x5a8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, RESET);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b64:	486e      	ldr	r0, [pc, #440]	; (8004d20 <SPI_available+0x5ac>)
 8004b66:	f004 f807 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b6a:	e0ee      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN6_R:
				Status_DIN[6] = 1;
 8004b6c:	4b6b      	ldr	r3, [pc, #428]	; (8004d1c <SPI_available+0x5a8>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, SET);
 8004b72:	2201      	movs	r2, #1
 8004b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b78:	4869      	ldr	r0, [pc, #420]	; (8004d20 <SPI_available+0x5ac>)
 8004b7a:	f003 fffd 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b7e:	e0e4      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN6_F:
				Status_DIN[6] = 0;
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <SPI_available+0x5a8>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, RESET);
 8004b86:	2200      	movs	r2, #0
 8004b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b8c:	4864      	ldr	r0, [pc, #400]	; (8004d20 <SPI_available+0x5ac>)
 8004b8e:	f003 fff3 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004b92:	e0da      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN7_R:
				Status_DIN[7] = 1;
 8004b94:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <SPI_available+0x5a8>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, SET);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba0:	485f      	ldr	r0, [pc, #380]	; (8004d20 <SPI_available+0x5ac>)
 8004ba2:	f003 ffe9 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004ba6:	e0d0      	b.n	8004d4a <SPI_available+0x5d6>
			case DIN7_F:
				Status_DIN[7] = 0;
 8004ba8:	4b5c      	ldr	r3, [pc, #368]	; (8004d1c <SPI_available+0x5a8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, RESET);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb4:	485a      	ldr	r0, [pc, #360]	; (8004d20 <SPI_available+0x5ac>)
 8004bb6:	f003 ffdf 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004bba:	e0c6      	b.n	8004d4a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 8004bbc:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <SPI_available+0x5b0>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, SET);
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2108      	movs	r1, #8
 8004bc6:	4858      	ldr	r0, [pc, #352]	; (8004d28 <SPI_available+0x5b4>)
 8004bc8:	f003 ffd6 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004bcc:	e0bd      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 8004bce:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <SPI_available+0x5b0>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, RESET);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2108      	movs	r1, #8
 8004bd8:	4853      	ldr	r0, [pc, #332]	; (8004d28 <SPI_available+0x5b4>)
 8004bda:	f003 ffcd 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004bde:	e0b4      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN1_ON:
				Status_AIN[1] = 1;
 8004be0:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <SPI_available+0x5b0>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 8004be6:	2201      	movs	r2, #1
 8004be8:	2110      	movs	r1, #16
 8004bea:	484f      	ldr	r0, [pc, #316]	; (8004d28 <SPI_available+0x5b4>)
 8004bec:	f003 ffc4 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004bf0:	e0ab      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 8004bf2:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <SPI_available+0x5b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	484a      	ldr	r0, [pc, #296]	; (8004d28 <SPI_available+0x5b4>)
 8004bfe:	f003 ffbb 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c02:	e0a2      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN2_ON:
				Status_AIN[2] = 1;
 8004c04:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <SPI_available+0x5b0>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	4846      	ldr	r0, [pc, #280]	; (8004d28 <SPI_available+0x5b4>)
 8004c10:	f003 ffb2 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c14:	e099      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 8004c16:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <SPI_available+0x5b0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2120      	movs	r1, #32
 8004c20:	4841      	ldr	r0, [pc, #260]	; (8004d28 <SPI_available+0x5b4>)
 8004c22:	f003 ffa9 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c26:	e090      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN3_ON:
				Status_AIN[3] = 1;
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <SPI_available+0x5b0>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, SET);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2140      	movs	r1, #64	; 0x40
 8004c32:	483d      	ldr	r0, [pc, #244]	; (8004d28 <SPI_available+0x5b4>)
 8004c34:	f003 ffa0 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c38:	e087      	b.n	8004d4a <SPI_available+0x5d6>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <SPI_available+0x5b0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, RESET);
 8004c40:	2200      	movs	r2, #0
 8004c42:	2140      	movs	r1, #64	; 0x40
 8004c44:	4838      	ldr	r0, [pc, #224]	; (8004d28 <SPI_available+0x5b4>)
 8004c46:	f003 ff97 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c4a:	e07e      	b.n	8004d4a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <SPI_available+0x5b8>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, SET);
 8004c52:	2201      	movs	r2, #1
 8004c54:	2140      	movs	r1, #64	; 0x40
 8004c56:	4836      	ldr	r0, [pc, #216]	; (8004d30 <SPI_available+0x5bc>)
 8004c58:	f003 ff8e 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c5c:	e075      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 8004c5e:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <SPI_available+0x5b8>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, RESET);
 8004c64:	2200      	movs	r2, #0
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	4831      	ldr	r0, [pc, #196]	; (8004d30 <SPI_available+0x5bc>)
 8004c6a:	f003 ff85 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c6e:	e06c      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM1_ON:
				Status_PWM[1] = 1;
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <SPI_available+0x5b8>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, SET);
 8004c76:	2201      	movs	r2, #1
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	482d      	ldr	r0, [pc, #180]	; (8004d30 <SPI_available+0x5bc>)
 8004c7c:	f003 ff7c 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c80:	e063      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <SPI_available+0x5b8>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	4828      	ldr	r0, [pc, #160]	; (8004d30 <SPI_available+0x5bc>)
 8004c8e:	f003 ff73 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004c92:	e05a      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM2_ON:
				Status_PWM[2] = 1;
 8004c94:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <SPI_available+0x5b8>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, SET);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ca0:	4823      	ldr	r0, [pc, #140]	; (8004d30 <SPI_available+0x5bc>)
 8004ca2:	f003 ff69 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004ca6:	e050      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <SPI_available+0x5b8>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, RESET);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cb4:	481e      	ldr	r0, [pc, #120]	; (8004d30 <SPI_available+0x5bc>)
 8004cb6:	f003 ff5f 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004cba:	e046      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM3_ON:
				Status_PWM[3] = 1;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <SPI_available+0x5b8>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, SET);
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cc8:	4819      	ldr	r0, [pc, #100]	; (8004d30 <SPI_available+0x5bc>)
 8004cca:	f003 ff55 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004cce:	e03c      	b.n	8004d4a <SPI_available+0x5d6>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <SPI_available+0x5b8>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cdc:	4814      	ldr	r0, [pc, #80]	; (8004d30 <SPI_available+0x5bc>)
 8004cde:	f003 ff4b 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004ce2:	e032      	b.n	8004d4a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <SPI_available+0x5c0>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, SET);
 8004cea:	2201      	movs	r2, #1
 8004cec:	2101      	movs	r1, #1
 8004cee:	480c      	ldr	r0, [pc, #48]	; (8004d20 <SPI_available+0x5ac>)
 8004cf0:	f003 ff42 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004cf4:	e029      	b.n	8004d4a <SPI_available+0x5d6>
			case WR0_OFF:
				Status_1WR[0] = 0;
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <SPI_available+0x5c0>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, RESET);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4807      	ldr	r0, [pc, #28]	; (8004d20 <SPI_available+0x5ac>)
 8004d02:	f003 ff39 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004d06:	e020      	b.n	8004d4a <SPI_available+0x5d6>
			case WR1_ON:
				Status_1WR[1] = 1;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <SPI_available+0x5c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, SET);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	2102      	movs	r1, #2
 8004d12:	4803      	ldr	r0, [pc, #12]	; (8004d20 <SPI_available+0x5ac>)
 8004d14:	f003 ff30 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004d18:	e017      	b.n	8004d4a <SPI_available+0x5d6>
 8004d1a:	bf00      	nop
 8004d1c:	20000364 	.word	0x20000364
 8004d20:	40020c00 	.word	0x40020c00
 8004d24:	2000035c 	.word	0x2000035c
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	2000036c 	.word	0x2000036c
 8004d30:	40020800 	.word	0x40020800
 8004d34:	2000037c 	.word	0x2000037c
			case WR1_OFF:
				Status_1WR[1] = 0;
 8004d38:	4ba1      	ldr	r3, [pc, #644]	; (8004fc0 <SPI_available+0x84c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2102      	movs	r1, #2
 8004d42:	48a0      	ldr	r0, [pc, #640]	; (8004fc4 <SPI_available+0x850>)
 8004d44:	f003 ff18 	bl	8008b78 <HAL_GPIO_WritePin>
				break;
 8004d48:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 8004d4a:	4b9f      	ldr	r3, [pc, #636]	; (8004fc8 <SPI_available+0x854>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d50:	d136      	bne.n	8004dc0 <SPI_available+0x64c>
		{
			tp = 1;
 8004d52:	4b9e      	ldr	r3, [pc, #632]	; (8004fcc <SPI_available+0x858>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 8004d58:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <SPI_available+0x85c>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 8004d5e:	489d      	ldr	r0, [pc, #628]	; (8004fd4 <SPI_available+0x860>)
 8004d60:	f7fd f8a6 	bl	8001eb0 <SEND_str>
			SEND_str("status_OCD ");
 8004d64:	489c      	ldr	r0, [pc, #624]	; (8004fd8 <SPI_available+0x864>)
 8004d66:	f7fd f8a3 	bl	8001eb0 <SEND_str>
			USART_Tx(Status_OCD[0]);
 8004d6a:	4b9c      	ldr	r3, [pc, #624]	; (8004fdc <SPI_available+0x868>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd f886 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[1]);
 8004d74:	4b99      	ldr	r3, [pc, #612]	; (8004fdc <SPI_available+0x868>)
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd f881 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[2]);
 8004d7e:	4b97      	ldr	r3, [pc, #604]	; (8004fdc <SPI_available+0x868>)
 8004d80:	789b      	ldrb	r3, [r3, #2]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd f87c 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[3]);
 8004d88:	4b94      	ldr	r3, [pc, #592]	; (8004fdc <SPI_available+0x868>)
 8004d8a:	78db      	ldrb	r3, [r3, #3]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd f877 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[4]);
 8004d92:	4b92      	ldr	r3, [pc, #584]	; (8004fdc <SPI_available+0x868>)
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd f872 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[5]);
 8004d9c:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <SPI_available+0x868>)
 8004d9e:	795b      	ldrb	r3, [r3, #5]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd f86d 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[6]);
 8004da6:	4b8d      	ldr	r3, [pc, #564]	; (8004fdc <SPI_available+0x868>)
 8004da8:	799b      	ldrb	r3, [r3, #6]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd f868 	bl	8001e80 <USART_Tx>
			USART_Tx(Status_OCD[7]);
 8004db0:	4b8a      	ldr	r3, [pc, #552]	; (8004fdc <SPI_available+0x868>)
 8004db2:	79db      	ldrb	r3, [r3, #7]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fd f863 	bl	8001e80 <USART_Tx>
			SEND_str(" END_status_OCD\n");
 8004dba:	4889      	ldr	r0, [pc, #548]	; (8004fe0 <SPI_available+0x86c>)
 8004dbc:	f7fd f878 	bl	8001eb0 <SEND_str>
//			else
//				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
			//-------------------------------------------------------

		}
		if(tp)
 8004dc0:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <SPI_available+0x858>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 811f 	beq.w	8005008 <SPI_available+0x894>
		{
			if(i == 0)
 8004dca:	4b86      	ldr	r3, [pc, #536]	; (8004fe4 <SPI_available+0x870>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d128      	bne.n	8004e24 <SPI_available+0x6b0>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 8004dd2:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <SPI_available+0x874>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b84      	ldr	r3, [pc, #528]	; (8004fec <SPI_available+0x878>)
 8004dda:	5c9a      	ldrb	r2, [r3, r2]
 8004ddc:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <SPI_available+0x87c>)
 8004dde:	701a      	strb	r2, [r3, #0]
				j++;
 8004de0:	4b81      	ldr	r3, [pc, #516]	; (8004fe8 <SPI_available+0x874>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b7f      	ldr	r3, [pc, #508]	; (8004fe8 <SPI_available+0x874>)
 8004dea:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004dec:	4b7e      	ldr	r3, [pc, #504]	; (8004fe8 <SPI_available+0x874>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d908      	bls.n	8004e06 <SPI_available+0x692>
				{
					j = 0;
 8004df4:	4b7c      	ldr	r3, [pc, #496]	; (8004fe8 <SPI_available+0x874>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
					i++;
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	; (8004fe4 <SPI_available+0x870>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <SPI_available+0x870>)
 8004e04:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004e06:	4b7b      	ldr	r3, [pc, #492]	; (8004ff4 <SPI_available+0x880>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4a6e      	ldr	r2, [pc, #440]	; (8004fc8 <SPI_available+0x854>)
 8004e10:	4977      	ldr	r1, [pc, #476]	; (8004ff0 <SPI_available+0x87c>)
 8004e12:	4879      	ldr	r0, [pc, #484]	; (8004ff8 <SPI_available+0x884>)
 8004e14:	f004 ff24 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004e18:	bf00      	nop
 8004e1a:	4b76      	ldr	r3, [pc, #472]	; (8004ff4 <SPI_available+0x880>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0fb      	beq.n	8004e1a <SPI_available+0x6a6>
 8004e22:	e10c      	b.n	800503e <SPI_available+0x8ca>
			}
			else if(i == 1)
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <SPI_available+0x870>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d128      	bne.n	8004e7e <SPI_available+0x70a>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 8004e2c:	4b6e      	ldr	r3, [pc, #440]	; (8004fe8 <SPI_available+0x874>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <SPI_available+0x888>)
 8004e34:	5c9a      	ldrb	r2, [r3, r2]
 8004e36:	4b6e      	ldr	r3, [pc, #440]	; (8004ff0 <SPI_available+0x87c>)
 8004e38:	701a      	strb	r2, [r3, #0]
				j++;
 8004e3a:	4b6b      	ldr	r3, [pc, #428]	; (8004fe8 <SPI_available+0x874>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <SPI_available+0x874>)
 8004e44:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004e46:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <SPI_available+0x874>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	d908      	bls.n	8004e60 <SPI_available+0x6ec>
				{
					j = 0;
 8004e4e:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <SPI_available+0x874>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
					i++;
 8004e54:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <SPI_available+0x870>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <SPI_available+0x870>)
 8004e5e:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004e60:	4b64      	ldr	r3, [pc, #400]	; (8004ff4 <SPI_available+0x880>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004e66:	2301      	movs	r3, #1
 8004e68:	4a57      	ldr	r2, [pc, #348]	; (8004fc8 <SPI_available+0x854>)
 8004e6a:	4961      	ldr	r1, [pc, #388]	; (8004ff0 <SPI_available+0x87c>)
 8004e6c:	4862      	ldr	r0, [pc, #392]	; (8004ff8 <SPI_available+0x884>)
 8004e6e:	f004 fef7 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004e72:	bf00      	nop
 8004e74:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <SPI_available+0x880>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0fb      	beq.n	8004e74 <SPI_available+0x700>
 8004e7c:	e0df      	b.n	800503e <SPI_available+0x8ca>
			}
			else if(i == 2)
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <SPI_available+0x870>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d128      	bne.n	8004ed8 <SPI_available+0x764>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 8004e86:	4b58      	ldr	r3, [pc, #352]	; (8004fe8 <SPI_available+0x874>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <SPI_available+0x88c>)
 8004e8e:	5c9a      	ldrb	r2, [r3, r2]
 8004e90:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <SPI_available+0x87c>)
 8004e92:	701a      	strb	r2, [r3, #0]
				j++;
 8004e94:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <SPI_available+0x874>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <SPI_available+0x874>)
 8004e9e:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004ea0:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <SPI_available+0x874>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	d908      	bls.n	8004eba <SPI_available+0x746>
				{
					j = 0;
 8004ea8:	4b4f      	ldr	r3, [pc, #316]	; (8004fe8 <SPI_available+0x874>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
					i++;
 8004eae:	4b4d      	ldr	r3, [pc, #308]	; (8004fe4 <SPI_available+0x870>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <SPI_available+0x870>)
 8004eb8:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004eba:	4b4e      	ldr	r3, [pc, #312]	; (8004ff4 <SPI_available+0x880>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4a41      	ldr	r2, [pc, #260]	; (8004fc8 <SPI_available+0x854>)
 8004ec4:	494a      	ldr	r1, [pc, #296]	; (8004ff0 <SPI_available+0x87c>)
 8004ec6:	484c      	ldr	r0, [pc, #304]	; (8004ff8 <SPI_available+0x884>)
 8004ec8:	f004 feca 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004ecc:	bf00      	nop
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <SPI_available+0x880>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0fb      	beq.n	8004ece <SPI_available+0x75a>
 8004ed6:	e0b2      	b.n	800503e <SPI_available+0x8ca>
			}
			else if(i == 3)
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <SPI_available+0x870>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d128      	bne.n	8004f32 <SPI_available+0x7be>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 8004ee0:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <SPI_available+0x874>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b3d      	ldr	r3, [pc, #244]	; (8004fdc <SPI_available+0x868>)
 8004ee8:	5c9a      	ldrb	r2, [r3, r2]
 8004eea:	4b41      	ldr	r3, [pc, #260]	; (8004ff0 <SPI_available+0x87c>)
 8004eec:	701a      	strb	r2, [r3, #0]
				j++;
 8004eee:	4b3e      	ldr	r3, [pc, #248]	; (8004fe8 <SPI_available+0x874>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <SPI_available+0x874>)
 8004ef8:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004efa:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <SPI_available+0x874>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	d908      	bls.n	8004f14 <SPI_available+0x7a0>
				{
					j = 0;
 8004f02:	4b39      	ldr	r3, [pc, #228]	; (8004fe8 <SPI_available+0x874>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
					i++;
 8004f08:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <SPI_available+0x870>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <SPI_available+0x870>)
 8004f12:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <SPI_available+0x880>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <SPI_available+0x854>)
 8004f1e:	4934      	ldr	r1, [pc, #208]	; (8004ff0 <SPI_available+0x87c>)
 8004f20:	4835      	ldr	r0, [pc, #212]	; (8004ff8 <SPI_available+0x884>)
 8004f22:	f004 fe9d 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004f26:	bf00      	nop
 8004f28:	4b32      	ldr	r3, [pc, #200]	; (8004ff4 <SPI_available+0x880>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0fb      	beq.n	8004f28 <SPI_available+0x7b4>
 8004f30:	e085      	b.n	800503e <SPI_available+0x8ca>
			}
			else if(i == 4)
 8004f32:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <SPI_available+0x870>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d128      	bne.n	8004f8c <SPI_available+0x818>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <SPI_available+0x874>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b1f      	ldr	r3, [pc, #124]	; (8004fc0 <SPI_available+0x84c>)
 8004f42:	5c9a      	ldrb	r2, [r3, r2]
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <SPI_available+0x87c>)
 8004f46:	701a      	strb	r2, [r3, #0]
				j++;
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <SPI_available+0x874>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <SPI_available+0x874>)
 8004f52:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <SPI_available+0x874>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	d908      	bls.n	8004f6e <SPI_available+0x7fa>
				{
					j = 0;
 8004f5c:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <SPI_available+0x874>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
					i++;
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <SPI_available+0x870>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	3301      	adds	r3, #1
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <SPI_available+0x870>)
 8004f6c:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
					flag_iput_spi2 = 0;
 8004f6e:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <SPI_available+0x880>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004f74:	2301      	movs	r3, #1
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <SPI_available+0x854>)
 8004f78:	491d      	ldr	r1, [pc, #116]	; (8004ff0 <SPI_available+0x87c>)
 8004f7a:	481f      	ldr	r0, [pc, #124]	; (8004ff8 <SPI_available+0x884>)
 8004f7c:	f004 fe70 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 8004f80:	bf00      	nop
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <SPI_available+0x880>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0fb      	beq.n	8004f82 <SPI_available+0x80e>
 8004f8a:	e058      	b.n	800503e <SPI_available+0x8ca>
//				}
			}
			else if(i == 5)
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <SPI_available+0x870>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d154      	bne.n	800503e <SPI_available+0x8ca>
			{
				i = 0;
 8004f94:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <SPI_available+0x870>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
				j = 0;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <SPI_available+0x874>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
				tp = 0;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <SPI_available+0x858>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 8004fa6:	4817      	ldr	r0, [pc, #92]	; (8005004 <SPI_available+0x890>)
 8004fa8:	f7fc ff82 	bl	8001eb0 <SEND_str>
				flag_iput_spi2 = 0;
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <SPI_available+0x880>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <SPI_available+0x854>)
 8004fb6:	490e      	ldr	r1, [pc, #56]	; (8004ff0 <SPI_available+0x87c>)
 8004fb8:	480f      	ldr	r0, [pc, #60]	; (8004ff8 <SPI_available+0x884>)
 8004fba:	f004 fe51 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
 8004fbe:	e03e      	b.n	800503e <SPI_available+0x8ca>
 8004fc0:	2000037c 	.word	0x2000037c
 8004fc4:	40020c00 	.word	0x40020c00
 8004fc8:	20000384 	.word	0x20000384
 8004fcc:	2000038c 	.word	0x2000038c
 8004fd0:	20000058 	.word	0x20000058
 8004fd4:	0801db68 	.word	0x0801db68
 8004fd8:	0801db70 	.word	0x0801db70
 8004fdc:	20000374 	.word	0x20000374
 8004fe0:	0801db7c 	.word	0x0801db7c
 8004fe4:	2000038a 	.word	0x2000038a
 8004fe8:	2000038b 	.word	0x2000038b
 8004fec:	2000035c 	.word	0x2000035c
 8004ff0:	20000388 	.word	0x20000388
 8004ff4:	20000389 	.word	0x20000389
 8004ff8:	20000d30 	.word	0x20000d30
 8004ffc:	20000364 	.word	0x20000364
 8005000:	2000036c 	.word	0x2000036c
 8005004:	0801db90 	.word	0x0801db90
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <SPI_available+0x8f4>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2ba1      	cmp	r3, #161	; 0xa1
 800500e:	d016      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <SPI_available+0x8f4>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2ba2      	cmp	r3, #162	; 0xa2
 8005016:	d012      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <SPI_available+0x8f4>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2ba3      	cmp	r3, #163	; 0xa3
 800501e:	d00e      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <SPI_available+0x8f4>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2ba4      	cmp	r3, #164	; 0xa4
 8005026:	d00a      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <SPI_available+0x8f4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2bb1      	cmp	r3, #177	; 0xb1
 800502e:	d006      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <SPI_available+0x8f4>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2bb2      	cmp	r3, #178	; 0xb2
 8005036:	d002      	beq.n	800503e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <SPI_available+0x8f4>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <SPI_available+0x8f8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <SPI_available+0x8ee>
//			{
//				tp1 = 0;
//			}
//			else
//			{
				flag_iput_spi2 = 1;		//Fix bag! so so
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <SPI_available+0x8fc>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800504c:	2301      	movs	r3, #1
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <SPI_available+0x8f4>)
 8005050:	4908      	ldr	r1, [pc, #32]	; (8005074 <SPI_available+0x900>)
 8005052:	4809      	ldr	r0, [pc, #36]	; (8005078 <SPI_available+0x904>)
 8005054:	f004 fe04 	bl	8009c60 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8005058:	bf00      	nop
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <SPI_available+0x8fc>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0fb      	beq.n	800505a <SPI_available+0x8e6>
		//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
		//				while(!flag_iput_spi2) {;}
		//			}
		//		}
	}
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000384 	.word	0x20000384
 800506c:	2000038c 	.word	0x2000038c
 8005070:	20000389 	.word	0x20000389
 8005074:	20000388 	.word	0x20000388
 8005078:	20000d30 	.word	0x20000d30

0800507c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_MspInit+0x4c>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <HAL_MspInit+0x4c>)
 800508c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005090:	6453      	str	r3, [r2, #68]	; 0x44
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_MspInit+0x4c>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_MspInit+0x4c>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <HAL_MspInit+0x4c>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6413      	str	r3, [r2, #64]	; 0x40
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_MspInit+0x4c>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80050dc:	2200      	movs	r2, #0
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	2019      	movs	r0, #25
 80050e2:	f001 ff3b 	bl	8006f5c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050e6:	2019      	movs	r0, #25
 80050e8:	f001 ff54 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <HAL_InitTick+0xa4>)
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_InitTick+0xa4>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6453      	str	r3, [r2, #68]	; 0x44
 80050fc:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <HAL_InitTick+0xa4>)
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005108:	f107 0210 	add.w	r2, r7, #16
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f004 f9c4 	bl	80094a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005118:	f004 f9ae 	bl	8009478 <HAL_RCC_GetPCLK2Freq>
 800511c:	4603      	mov	r3, r0
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	4a13      	ldr	r2, [pc, #76]	; (8005174 <HAL_InitTick+0xa8>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0c9b      	lsrs	r3, r3, #18
 800512c:	3b01      	subs	r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_InitTick+0xac>)
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <HAL_InitTick+0xb0>)
 8005134:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_InitTick+0xac>)
 8005138:	f240 32e7 	movw	r2, #999	; 0x3e7
 800513c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800513e:	4a0e      	ldr	r2, [pc, #56]	; (8005178 <HAL_InitTick+0xac>)
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_InitTick+0xac>)
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_InitTick+0xac>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005150:	4809      	ldr	r0, [pc, #36]	; (8005178 <HAL_InitTick+0xac>)
 8005152:	f005 f923 	bl	800a39c <HAL_TIM_Base_Init>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800515c:	4806      	ldr	r0, [pc, #24]	; (8005178 <HAL_InitTick+0xac>)
 800515e:	f005 f948 	bl	800a3f2 <HAL_TIM_Base_Start_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	e000      	b.n	8005168 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	431bde83 	.word	0x431bde83
 8005178:	20000de0 	.word	0x20000de0
 800517c:	40010000 	.word	0x40010000

08005180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005192:	e7fe      	b.n	8005192 <HardFault_Handler+0x4>

08005194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005198:	e7fe      	b.n	8005198 <MemManage_Handler+0x4>

0800519a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800519e:	e7fe      	b.n	800519e <BusFault_Handler+0x4>

080051a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a4:	e7fe      	b.n	80051a4 <UsageFault_Handler+0x4>

080051a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a6:	b480      	push	{r7}
 80051a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80051e4:	4802      	ldr	r0, [pc, #8]	; (80051f0 <DMA1_Stream2_IRQHandler+0x10>)
 80051e6:	f002 f80b 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000100c 	.word	0x2000100c

080051f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80051f8:	4802      	ldr	r0, [pc, #8]	; (8005204 <DMA1_Stream4_IRQHandler+0x10>)
 80051fa:	f002 f801 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000f0c 	.word	0x20000f0c

08005208 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <DMA1_Stream5_IRQHandler+0x10>)
 800520e:	f001 fff7 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000f6c 	.word	0x20000f6c

0800521c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005220:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005224:	f003 fcc2 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800522c:	f003 fcbe 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}

08005234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005238:	4802      	ldr	r0, [pc, #8]	; (8005244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800523a:	f005 faa5 	bl	800a788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000de0 	.word	0x20000de0

08005248 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800524c:	4802      	ldr	r0, [pc, #8]	; (8005258 <SPI2_IRQHandler+0x10>)
 800524e:	f004 fd9b 	bl	8009d88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000d30 	.word	0x20000d30

0800525c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8005262:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <USART1_IRQHandler+0x68>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d023      	beq.n	80052b8 <USART1_IRQHandler+0x5c>
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <USART1_IRQHandler+0x68>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01c      	beq.n	80052b8 <USART1_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <USART1_IRQHandler+0x68>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <USART1_IRQHandler+0x6c>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3301      	adds	r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005294:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <USART1_IRQHandler+0x70>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	79ba      	ldrb	r2, [r7, #6]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00a      	beq.n	80052b8 <USART1_IRQHandler+0x5c>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <USART1_IRQHandler+0x6c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	4619      	mov	r1, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <USART1_IRQHandler+0x74>)
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 80052b0:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <USART1_IRQHandler+0x6c>)
 80052b2:	79bb      	ldrb	r3, [r7, #6]
 80052b4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	200010ac 	.word	0x200010ac
 80052c8:	20000394 	.word	0x20000394
 80052cc:	20000395 	.word	0x20000395
 80052d0:	20000398 	.word	0x20000398

080052d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <USART2_IRQHandler+0x68>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <USART2_IRQHandler+0x5c>
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <USART2_IRQHandler+0x68>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01c      	beq.n	8005330 <USART2_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <USART2_IRQHandler+0x68>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <USART2_IRQHandler+0x6c>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	3301      	adds	r3, #1
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530c:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <USART2_IRQHandler+0x70>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	79ba      	ldrb	r2, [r7, #6]
 8005316:	429a      	cmp	r2, r3
 8005318:	d00a      	beq.n	8005330 <USART2_IRQHandler+0x5c>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <USART2_IRQHandler+0x6c>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	4619      	mov	r1, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USART2_IRQHandler+0x74>)
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <USART2_IRQHandler+0x6c>)
 800532a:	79bb      	ldrb	r3, [r7, #6]
 800532c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 800532e:	bf00      	nop
 8005330:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	200010ec 	.word	0x200010ec
 8005340:	2000041c 	.word	0x2000041c
 8005344:	2000041d 	.word	0x2000041d
 8005348:	20000420 	.word	0x20000420

0800534c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <USART3_IRQHandler+0x68>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d023      	beq.n	80053a8 <USART3_IRQHandler+0x5c>
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <USART3_IRQHandler+0x68>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01c      	beq.n	80053a8 <USART3_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <USART3_IRQHandler+0x68>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <USART3_IRQHandler+0x6c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	3301      	adds	r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <USART3_IRQHandler+0x70>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	79ba      	ldrb	r2, [r7, #6]
 800538e:	429a      	cmp	r2, r3
 8005390:	d00a      	beq.n	80053a8 <USART3_IRQHandler+0x5c>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <USART3_IRQHandler+0x6c>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <USART3_IRQHandler+0x74>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <USART3_IRQHandler+0x6c>)
 80053a2:	79bb      	ldrb	r3, [r7, #6]
 80053a4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	2000106c 	.word	0x2000106c
 80053b8:	200003d8 	.word	0x200003d8
 80053bc:	200003d9 	.word	0x200003d9
 80053c0:	200003dc 	.word	0x200003dc

080053c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80053c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053cc:	f003 fbee 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80053d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053d4:	f003 fbea 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80053d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053dc:	f003 fbe6 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80053e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80053e4:	f003 fbe2 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80053e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80053ec:	f003 fbde 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80053f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053f4:	f003 fbda 	bl	8008bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}

080053fc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8005400:	4802      	ldr	r0, [pc, #8]	; (800540c <DMA1_Stream7_IRQHandler+0x10>)
 8005402:	f001 fefd 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000e6c 	.word	0x20000e6c

08005410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005414:	4802      	ldr	r0, [pc, #8]	; (8005420 <TIM6_DAC_IRQHandler+0x10>)
 8005416:	f005 f9b7 	bl	800a788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800541a:	bf00      	nop
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000fcc 	.word	0x20000fcc

08005424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <DMA2_Stream0_IRQHandler+0x10>)
 800542a:	f001 fee9 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200007f0 	.word	0x200007f0

08005438 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e00a      	b.n	8005460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800544a:	f3af 8000 	nop.w
 800544e:	4601      	mov	r1, r0
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	60ba      	str	r2, [r7, #8]
 8005456:	b2ca      	uxtb	r2, r1
 8005458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	3301      	adds	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	dbf0      	blt.n	800544a <_read+0x12>
	}

return len;
 8005468:	687b      	ldr	r3, [r7, #4]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e009      	b.n	8005498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	60ba      	str	r2, [r7, #8]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3301      	adds	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	dbf1      	blt.n	8005484 <_write+0x12>
	}
	return len;
 80054a0:	687b      	ldr	r3, [r7, #4]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_close>:

int _close(int file)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
	return -1;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054d2:	605a      	str	r2, [r3, #4]
	return 0;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <_isatty>:

int _isatty(int file)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
	return 1;
 80054ea:	2301      	movs	r3, #1
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <_sbrk+0x5c>)
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <_sbrk+0x60>)
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <_sbrk+0x64>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <_sbrk+0x64>)
 8005532:	4a12      	ldr	r2, [pc, #72]	; (800557c <_sbrk+0x68>)
 8005534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <_sbrk+0x64>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	429a      	cmp	r2, r3
 8005542:	d205      	bcs.n	8005550 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <_sbrk+0x6c>)
 8005546:	220c      	movs	r2, #12
 8005548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	e009      	b.n	8005564 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <_sbrk+0x64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <_sbrk+0x64>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	4a06      	ldr	r2, [pc, #24]	; (8005578 <_sbrk+0x64>)
 8005560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20020000 	.word	0x20020000
 8005574:	00004000 	.word	0x00004000
 8005578:	20000390 	.word	0x20000390
 800557c:	200073c8 	.word	0x200073c8
 8005580:	200073c4 	.word	0x200073c4

08005584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <SystemInit+0x28>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <SystemInit+0x28>)
 8005590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <SystemInit+0x28>)
 800559a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800559e:	609a      	str	r2, [r3, #8]
#endif
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <sensors_Reset+0x54>)
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <sensors_Reset+0x54>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 80055c2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80055c6:	f7fc fdcb 	bl	8002160 <delay_micros>
	SET_HIGH;					//высокий уровень
 80055ca:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <sensors_Reset+0x54>)
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <sensors_Reset+0x54>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 80055d6:	203c      	movs	r0, #60	; 0x3c
 80055d8:	f7fc fdc2 	bl	8002160 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <sensors_Reset+0x54>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 80055e8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80055ec:	f7fc fdb8 	bl	8002160 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf14      	ite	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	2300      	moveq	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40020c00 	.word	0x40020c00

08005608 <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <sensors_ReadBit+0x54>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <sensors_ReadBit+0x54>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 800561e:	2001      	movs	r0, #1
 8005620:	f7fc fd9e 	bl	8002160 <delay_micros>
	SET_HIGH;							//высокий уровень
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <sensors_ReadBit+0x54>)
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	4a0c      	ldr	r2, [pc, #48]	; (800565c <sensors_ReadBit+0x54>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 8005630:	200e      	movs	r0, #14
 8005632:	f7fc fd95 	bl	8002160 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <sensors_ReadBit+0x54>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf14      	ite	ne
 8005642:	2301      	movne	r3, #1
 8005644:	2300      	moveq	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 800564a:	202d      	movs	r0, #45	; 0x2d
 800564c:	f7fc fd88 	bl	8002160 <delay_micros>

	return bit;
 8005650:	79fb      	ldrb	r3, [r7, #7]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40020c00 	.word	0x40020c00

08005660 <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	71bb      	strb	r3, [r7, #6]
 800566e:	e00d      	b.n	800568c <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 8005670:	f7ff ffca 	bl	8005608 <sensors_ReadBit>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	79bb      	ldrb	r3, [r7, #6]
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	b2da      	uxtb	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4413      	add	r3, r2
 8005684:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 8005686:	79bb      	ldrb	r3, [r7, #6]
 8005688:	3301      	adds	r3, #1
 800568a:	71bb      	strb	r3, [r7, #6]
 800568c:	79bb      	ldrb	r3, [r7, #6]
 800568e:	2b07      	cmp	r3, #7
 8005690:	d9ee      	bls.n	8005670 <sensors_ReadByte+0x10>

	return data;
 8005692:	79fb      	ldrb	r3, [r7, #7]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <sensors_WriteBit+0x50>)
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4a10      	ldr	r2, [pc, #64]	; (80056ec <sensors_WriteBit+0x50>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <sensors_WriteBit+0x20>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <sensors_WriteBit+0x22>
 80056bc:	233c      	movs	r3, #60	; 0x3c
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc fd4e 	bl	8002160 <delay_micros>
	SET_HIGH;
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <sensors_WriteBit+0x50>)
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4a08      	ldr	r2, [pc, #32]	; (80056ec <sensors_WriteBit+0x50>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <sensors_WriteBit+0x3e>
 80056d6:	233c      	movs	r3, #60	; 0x3c
 80056d8:	e000      	b.n	80056dc <sensors_WriteBit+0x40>
 80056da:	2301      	movs	r3, #1
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fc fd3f 	bl	8002160 <delay_micros>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40020c00 	.word	0x40020c00

080056f0 <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	e010      	b.n	8005722 <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 8005700:	79fa      	ldrb	r2, [r7, #7]
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	fa42 f303 	asr.w	r3, r2, r3
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ffc3 	bl	800569c <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 8005716:	2005      	movs	r0, #5
 8005718:	f7fc fd22 	bl	8002160 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	3301      	adds	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b07      	cmp	r3, #7
 8005726:	d9eb      	bls.n	8005700 <sensors_WriteByte+0x10>
	}
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 800574c:	4b55      	ldr	r3, [pc, #340]	; (80058a4 <sensors_SearchRom+0x174>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 8005754:	f7ff ff2c 	bl	80055b0 <sensors_Reset>
		sensors_WriteByte(0xF0);
 8005758:	20f0      	movs	r0, #240	; 0xf0
 800575a:	f7ff ffc9 	bl	80056f0 <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 800575e:	f7ff ff53 	bl	8005608 <sensors_ReadBit>
 8005762:	4603      	mov	r3, r0
 8005764:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 8005766:	f7ff ff4f 	bl	8005608 <sensors_ReadBit>
 800576a:	4603      	mov	r3, r0
 800576c:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d102      	bne.n	800577a <sensors_SearchRom+0x4a>
 8005774:	7abb      	ldrb	r3, [r7, #10]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d05c      	beq.n	8005834 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 800577a:	7afa      	ldrb	r2, [r7, #11]
 800577c:	7abb      	ldrb	r3, [r7, #10]
 800577e:	429a      	cmp	r2, r3
 8005780:	d002      	beq.n	8005788 <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	74bb      	strb	r3, [r7, #18]
 8005786:	e025      	b.n	80057d4 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 8005788:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <sensors_SearchRom+0x178>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	7dfa      	ldrb	r2, [r7, #23]
 800578e:	429a      	cmp	r2, r3
 8005790:	d20c      	bcs.n	80057ac <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8005792:	7d7b      	ldrb	r3, [r7, #21]
 8005794:	4a45      	ldr	r2, [pc, #276]	; (80058ac <sensors_SearchRom+0x17c>)
 8005796:	5cd2      	ldrb	r2, [r2, r3]
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	4013      	ands	r3, r2
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	74bb      	strb	r3, [r7, #18]
 80057aa:	e008      	b.n	80057be <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <sensors_SearchRom+0x178>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	7dfa      	ldrb	r2, [r7, #23]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 80057be:	7cbb      	ldrb	r3, [r7, #18]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d107      	bne.n	80057d4 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d802      	bhi.n	80057d4 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <sensors_SearchRom+0x180>)
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 80057d4:	7cbb      	ldrb	r3, [r7, #18]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d109      	bne.n	80057ee <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 80057da:	7d7b      	ldrb	r3, [r7, #21]
 80057dc:	4a33      	ldr	r2, [pc, #204]	; (80058ac <sensors_SearchRom+0x17c>)
 80057de:	5cd1      	ldrb	r1, [r2, r3]
 80057e0:	7d7b      	ldrb	r3, [r7, #21]
 80057e2:	7cfa      	ldrb	r2, [r7, #19]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	b2d1      	uxtb	r1, r2
 80057e8:	4a30      	ldr	r2, [pc, #192]	; (80058ac <sensors_SearchRom+0x17c>)
 80057ea:	54d1      	strb	r1, [r2, r3]
 80057ec:	e00d      	b.n	800580a <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80057ee:	7d7b      	ldrb	r3, [r7, #21]
 80057f0:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <sensors_SearchRom+0x17c>)
 80057f2:	5cd3      	ldrb	r3, [r2, r3]
 80057f4:	b25a      	sxtb	r2, r3
 80057f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	4013      	ands	r3, r2
 8005800:	b25a      	sxtb	r2, r3
 8005802:	7d7b      	ldrb	r3, [r7, #21]
 8005804:	b2d1      	uxtb	r1, r2
 8005806:	4a29      	ldr	r2, [pc, #164]	; (80058ac <sensors_SearchRom+0x17c>)
 8005808:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 800580a:	7cbb      	ldrb	r3, [r7, #18]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff ff45 	bl	800569c <sensors_WriteBit>
			id_bit_number++;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	3301      	adds	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 8005824:	7d7b      	ldrb	r3, [r7, #21]
 8005826:	3301      	adds	r3, #1
 8005828:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 800582a:	2301      	movs	r3, #1
 800582c:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 800582e:	7d7b      	ldrb	r3, [r7, #21]
 8005830:	2b07      	cmp	r3, #7
 8005832:	d994      	bls.n	800575e <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d90b      	bls.n	8005852 <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 800583a:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <sensors_SearchRom+0x178>)
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <sensors_SearchRom+0x178>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 8005848:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <sensors_SearchRom+0x174>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 800584e:	2301      	movs	r3, #1
 8005850:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 8005852:	7d3b      	ldrb	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <sensors_SearchRom+0x130>
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <sensors_SearchRom+0x17c>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <sensors_SearchRom+0x178>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <sensors_SearchRom+0x174>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <sensors_SearchRom+0x180>)
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	753b      	strb	r3, [r7, #20]
 8005876:	e010      	b.n	800589a <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e00a      	b.n	8005894 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	4413      	add	r3, r2
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <sensors_SearchRom+0x17c>)
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	440a      	add	r2, r1
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b07      	cmp	r3, #7
 8005898:	ddf1      	ble.n	800587e <sensors_SearchRom+0x14e>
	}
	return search_result;
 800589a:	7d3b      	ldrb	r3, [r7, #20]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000e29 	.word	0x20000e29
 80058a8:	20000e2a 	.word	0x20000e2a
 80058ac:	20000e20 	.word	0x20000e20
 80058b0:	20000e28 	.word	0x20000e28

080058b4 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d116      	bne.n	80058fa <sensors_init+0x46>
	{
		if(sensors_Reset())
 80058cc:	f7ff fe70 	bl	80055b0 <sensors_Reset>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <sensors_init+0x26>
			return 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06b      	b.n	80059b2 <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 80058da:	20cc      	movs	r0, #204	; 0xcc
 80058dc:	f7ff ff08 	bl	80056f0 <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 80058e0:	204e      	movs	r0, #78	; 0x4e
 80058e2:	f7ff ff05 	bl	80056f0 <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 80058e6:	2064      	movs	r0, #100	; 0x64
 80058e8:	f7ff ff02 	bl	80056f0 <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 80058ec:	209e      	movs	r0, #158	; 0x9e
 80058ee:	f7ff feff 	bl	80056f0 <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 80058f2:	207f      	movs	r0, #127	; 0x7f
 80058f4:	f7ff fefc 	bl	80056f0 <sensors_WriteByte>
 80058f8:	e05a      	b.n	80059b0 <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	e01c      	b.n	800593a <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff13 	bl	8005730 <sensors_SearchRom>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <sensors_init+0x8e>
			{
				Dev_Cnt++;
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <sensors_init+0x108>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <sensors_init+0x108>)
 800591a:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <sensors_init+0x108>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <sensors_init+0x10c>)
 8005926:	4413      	add	r3, r2
 8005928:	461a      	mov	r2, r3
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	cb03      	ldmia	r3!, {r0, r1}
 8005930:	6010      	str	r0, [r2, #0]
 8005932:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b08      	cmp	r3, #8
 800593e:	dddf      	ble.n	8005900 <sensors_init+0x4c>
 8005940:	e000      	b.n	8005944 <sensors_init+0x90>
			}
			else break;
 8005942:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e02c      	b.n	80059a4 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 800594a:	f7ff fe31 	bl	80055b0 <sensors_Reset>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <sensors_init+0xa4>
				return 1;
 8005954:	2301      	movs	r3, #1
 8005956:	e02c      	b.n	80059b2 <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 8005958:	2055      	movs	r0, #85	; 0x55
 800595a:	f7ff fec9 	bl	80056f0 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800595e:	2300      	movs	r3, #0
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e00d      	b.n	8005980 <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	3b01      	subs	r3, #1
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <sensors_init+0x10c>)
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	441a      	add	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff febb 	bl	80056f0 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b07      	cmp	r3, #7
 8005984:	ddee      	ble.n	8005964 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 8005986:	204e      	movs	r0, #78	; 0x4e
 8005988:	f7ff feb2 	bl	80056f0 <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 800598c:	2064      	movs	r0, #100	; 0x64
 800598e:	f7ff feaf 	bl	80056f0 <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 8005992:	209e      	movs	r0, #158	; 0x9e
 8005994:	f7ff feac 	bl	80056f0 <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 8005998:	207f      	movs	r0, #127	; 0x7f
 800599a:	f7ff fea9 	bl	80056f0 <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3301      	adds	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <sensors_init+0x108>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	ddcc      	ble.n	800594a <sensors_init+0x96>
		}
	}
	return 0;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000a34 	.word	0x20000a34
 80059c0:	20000318 	.word	0x20000318

080059c4 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	460a      	mov	r2, r1
 80059ce:	71fb      	strb	r3, [r7, #7]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 80059d8:	f7ff fdea 	bl	80055b0 <sensors_Reset>
	if(mode == SKIP_ROM)
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 80059e2:	20cc      	movs	r0, #204	; 0xcc
 80059e4:	f7ff fe84 	bl	80056f0 <sensors_WriteByte>
 80059e8:	e016      	b.n	8005a18 <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 80059ea:	2055      	movs	r0, #85	; 0x55
 80059ec:	f7ff fe80 	bl	80056f0 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e00d      	b.n	8005a12 <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 80059f6:	79bb      	ldrb	r3, [r7, #6]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	4a0b      	ldr	r2, [pc, #44]	; (8005a28 <sensors_MeasureTemperCmd+0x64>)
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	441a      	add	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fe72 	bl	80056f0 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b07      	cmp	r3, #7
 8005a16:	ddee      	ble.n	80059f6 <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 8005a18:	2044      	movs	r0, #68	; 0x44
 8005a1a:	f7ff fe69 	bl	80056f0 <sensors_WriteByte>
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000318 	.word	0x20000318

08005a2c <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 8005a3c:	f7ff fdb8 	bl	80055b0 <sensors_Reset>
	if(mode == SKIP_ROM)
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8005a46:	20cc      	movs	r0, #204	; 0xcc
 8005a48:	f7ff fe52 	bl	80056f0 <sensors_WriteByte>
 8005a4c:	e016      	b.n	8005a7c <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8005a4e:	2055      	movs	r0, #85	; 0x55
 8005a50:	f7ff fe4e 	bl	80056f0 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	e00d      	b.n	8005a76 <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8005a5a:	79bb      	ldrb	r3, [r7, #6]
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4912      	ldr	r1, [pc, #72]	; (8005aac <sensors_ReadStratcpad+0x80>)
 8005a62:	00d2      	lsls	r2, r2, #3
 8005a64:	440a      	add	r2, r1
 8005a66:	4413      	add	r3, r2
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe40 	bl	80056f0 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	3301      	adds	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d9ee      	bls.n	8005a5a <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 8005a7c:	20be      	movs	r0, #190	; 0xbe
 8005a7e:	f7ff fe37 	bl	80056f0 <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e009      	b.n	8005a9c <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	18d4      	adds	r4, r2, r3
 8005a8e:	f7ff fde7 	bl	8005660 <sensors_ReadByte>
 8005a92:	4603      	mov	r3, r0
 8005a94:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b07      	cmp	r3, #7
 8005aa0:	d9f2      	bls.n	8005a88 <sensors_ReadStratcpad+0x5c>
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000318 	.word	0x20000318

08005ab0 <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <sensors_GetSign+0x18>
		return 1;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <sensors_GetSign+0x1a>
	else
		return 0;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	111b      	asrs	r3, r3, #4
 8005ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af0:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b02:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b12:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	ee07 3a90 	vmov	s15, r3
}
 8005b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	b08b      	sub	sp, #44	; 0x2c
 8005b30:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 8005b32:	2001      	movs	r0, #1
 8005b34:	f7ff febe 	bl	80058b4 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e079      	b.n	8005c32 <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4a42      	ldr	r2, [pc, #264]	; (8005c54 <UpdateTempSens+0x128>)
 8005b4a:	1898      	adds	r0, r3, r2
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	4a42      	ldr	r2, [pc, #264]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b50:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005b54:	469c      	mov	ip, r3
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	469e      	mov	lr, r3
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	4a39      	ldr	r2, [pc, #228]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	78db      	ldrb	r3, [r3, #3]
 8005b78:	461c      	mov	r4, r3
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	4a36      	ldr	r2, [pc, #216]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	461d      	mov	r5, r3
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	4a33      	ldr	r2, [pc, #204]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	795b      	ldrb	r3, [r3, #5]
 8005b90:	461e      	mov	r6, r3
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <UpdateTempSens+0x12c>)
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	799b      	ldrb	r3, [r3, #6]
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <UpdateTempSens+0x12c>)
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	79db      	ldrb	r3, [r3, #7]
 8005ba8:	9305      	str	r3, [sp, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	9304      	str	r3, [sp, #16]
 8005bae:	9603      	str	r6, [sp, #12]
 8005bb0:	9502      	str	r5, [sp, #8]
 8005bb2:	9401      	str	r4, [sp, #4]
 8005bb4:	9100      	str	r1, [sp, #0]
 8005bb6:	4673      	mov	r3, lr
 8005bb8:	4662      	mov	r2, ip
 8005bba:	4928      	ldr	r1, [pc, #160]	; (8005c5c <UpdateTempSens+0x130>)
 8005bbc:	f012 ff28 	bl	8018a10 <siprintf>
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <UpdateTempSens+0x128>)
 8005bcc:	4413      	add	r3, r2
 8005bce:	4924      	ldr	r1, [pc, #144]	; (8005c60 <UpdateTempSens+0x134>)
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fa fafd 	bl	80001d0 <strcmp>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10c      	bne.n	8005bf6 <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <UpdateTempSens+0x128>)
 8005be8:	4413      	add	r3, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fc f960 	bl	8001eb0 <SEND_str>
			SEND_str(" - YES\n");
 8005bf0:	481c      	ldr	r0, [pc, #112]	; (8005c64 <UpdateTempSens+0x138>)
 8005bf2:	f7fc f95d 	bl	8001eb0 <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <UpdateTempSens+0x128>)
 8005c02:	4413      	add	r3, r2
 8005c04:	4918      	ldr	r1, [pc, #96]	; (8005c68 <UpdateTempSens+0x13c>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa fae2 	bl	80001d0 <strcmp>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a0d      	ldr	r2, [pc, #52]	; (8005c54 <UpdateTempSens+0x128>)
 8005c1e:	4413      	add	r3, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fc f945 	bl	8001eb0 <SEND_str>
			SEND_str(" - YES\n");
 8005c26:	480f      	ldr	r0, [pc, #60]	; (8005c64 <UpdateTempSens+0x138>)
 8005c28:	f7fc f942 	bl	8001eb0 <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
 8005c32:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <UpdateTempSens+0x140>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d380      	bcc.n	8005b3e <UpdateTempSens+0x12>
		}
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <UpdateTempSens+0x144>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0201 	mvn.w	r2, #1
 8005c44:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 8005c46:	480a      	ldr	r0, [pc, #40]	; (8005c70 <UpdateTempSens+0x144>)
 8005c48:	f004 fbd3 	bl	800a3f2 <HAL_TIM_Base_Start_IT>
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c54:	20000c70 	.word	0x20000c70
 8005c58:	20000318 	.word	0x20000318
 8005c5c:	0801db9c 	.word	0x0801db9c
 8005c60:	0801dbc0 	.word	0x0801dbc0
 8005c64:	0801dbd4 	.word	0x0801dbd4
 8005c68:	0801dbdc 	.word	0x0801dbdc
 8005c6c:	20000a34 	.word	0x20000a34
 8005c70:	20000fcc 	.word	0x20000fcc

08005c74 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c7a:	f107 0320 	add.w	r3, r7, #32
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c84:	1d3b      	adds	r3, r7, #4
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	615a      	str	r2, [r3, #20]
 8005c94:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005c96:	4b33      	ldr	r3, [pc, #204]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005c98:	4a33      	ldr	r2, [pc, #204]	; (8005d68 <MX_TIM3_Init+0xf4>)
 8005c9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8005c9c:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8005ca8:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005caa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cbc:	4829      	ldr	r0, [pc, #164]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005cbe:	f004 fc25 	bl	800a50c <HAL_TIM_PWM_Init>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005cc8:	f7fe fb44 	bl	8004354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cd4:	f107 0320 	add.w	r3, r7, #32
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4822      	ldr	r0, [pc, #136]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005cdc:	f005 fab6 	bl	800b24c <HAL_TIMEx_MasterConfigSynchronization>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005ce6:	f7fe fb35 	bl	8004354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cea:	2360      	movs	r3, #96	; 0x60
 8005cec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4619      	mov	r1, r3
 8005d02:	4818      	ldr	r0, [pc, #96]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005d04:	f004 fea8 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005d0e:	f7fe fb21 	bl	8004354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	2204      	movs	r2, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4812      	ldr	r0, [pc, #72]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005d1a:	f004 fe9d 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005d24:	f7fe fb16 	bl	8004354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	480d      	ldr	r0, [pc, #52]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005d30:	f004 fe92 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8005d3a:	f7fe fb0b 	bl	8004354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	220c      	movs	r2, #12
 8005d42:	4619      	mov	r1, r3
 8005d44:	4807      	ldr	r0, [pc, #28]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005d46:	f004 fe87 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8005d50:	f7fe fb00 	bl	8004354 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005d54:	4803      	ldr	r0, [pc, #12]	; (8005d64 <MX_TIM3_Init+0xf0>)
 8005d56:	f000 f9df 	bl	8006118 <HAL_TIM_MspPostInit>

}
 8005d5a:	bf00      	nop
 8005d5c:	3728      	adds	r7, #40	; 0x28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000ecc 	.word	0x20000ecc
 8005d68:	40000400 	.word	0x40000400

08005d6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d72:	f107 0320 	add.w	r3, r7, #32
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <MX_TIM4_Init+0xa8>)
 8005d92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005d94:	4b1e      	ldr	r3, [pc, #120]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005da2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005da6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8005db4:	4816      	ldr	r0, [pc, #88]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005db6:	f004 fb40 	bl	800a43a <HAL_TIM_OC_Init>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005dc0:	f7fe fac8 	bl	8004354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005dcc:	f107 0320 	add.w	r3, r7, #32
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	480f      	ldr	r0, [pc, #60]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005dd4:	f005 fa3a 	bl	800b24c <HAL_TIMEx_MasterConfigSynchronization>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005dde:	f7fe fab9 	bl	8004354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8005de2:	2330      	movs	r3, #48	; 0x30
 8005de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	220c      	movs	r2, #12
 8005df6:	4619      	mov	r1, r3
 8005df8:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_TIM4_Init+0xa4>)
 8005dfa:	f004 fdcd 	bl	800a998 <HAL_TIM_OC_ConfigChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005e04:	f7fe faa6 	bl	8004354 <Error_Handler>
  }

}
 8005e08:	bf00      	nop
 8005e0a:	3728      	adds	r7, #40	; 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000e2c 	.word	0x20000e2c
 8005e14:	40000800 	.word	0x40000800

08005e18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e1e:	463b      	mov	r3, r7
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e28:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <MX_TIM6_Init+0x68>)
 8005e2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e2e:	2253      	movs	r2, #83	; 0x53
 8005e30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8005e38:	4b10      	ldr	r3, [pc, #64]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e3a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e40:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005e46:	480d      	ldr	r0, [pc, #52]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e48:	f004 faa8 	bl	800a39c <HAL_TIM_Base_Init>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005e52:	f7fe fa7f 	bl	8004354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e56:	2300      	movs	r3, #0
 8005e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005e5e:	463b      	mov	r3, r7
 8005e60:	4619      	mov	r1, r3
 8005e62:	4806      	ldr	r0, [pc, #24]	; (8005e7c <MX_TIM6_Init+0x64>)
 8005e64:	f005 f9f2 	bl	800b24c <HAL_TIMEx_MasterConfigSynchronization>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005e6e:	f7fe fa71 	bl	8004354 <Error_Handler>
  }

}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000fcc 	.word	0x20000fcc
 8005e80:	40001000 	.word	0x40001000

08005e84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a72      	ldr	r2, [pc, #456]	; (800605c <HAL_TIM_PWM_MspInit+0x1d8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f040 80de 	bne.w	8006054 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	4b70      	ldr	r3, [pc, #448]	; (8006060 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	4a6f      	ldr	r2, [pc, #444]	; (8006060 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea8:	4b6d      	ldr	r3, [pc, #436]	; (8006060 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005eb6:	4a6c      	ldr	r2, [pc, #432]	; (8006068 <HAL_TIM_PWM_MspInit+0x1e4>)
 8005eb8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8005eba:	4b6a      	ldr	r3, [pc, #424]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ebc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005ec0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ec2:	4b68      	ldr	r3, [pc, #416]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8005ece:	4b65      	ldr	r3, [pc, #404]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ed6:	4b63      	ldr	r3, [pc, #396]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005edc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ede:	4b61      	ldr	r3, [pc, #388]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ee4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8005ee6:	4b5f      	ldr	r3, [pc, #380]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8005eee:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef4:	4b5b      	ldr	r3, [pc, #364]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8005efa:	485a      	ldr	r0, [pc, #360]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005efc:	f001 f858 	bl	8006fb0 <HAL_DMA_Init>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8005f06:	f7fe fa25 	bl	8004354 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a55      	ldr	r2, [pc, #340]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f10:	4a54      	ldr	r2, [pc, #336]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a52      	ldr	r2, [pc, #328]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f1c:	4a51      	ldr	r2, [pc, #324]	; (8006064 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8005f22:	4b52      	ldr	r3, [pc, #328]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f24:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_TIM_PWM_MspInit+0x1ec>)
 8005f26:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8005f28:	4b50      	ldr	r3, [pc, #320]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f2a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005f2e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f30:	4b4e      	ldr	r3, [pc, #312]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f36:	4b4d      	ldr	r3, [pc, #308]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005f3c:	4b4b      	ldr	r3, [pc, #300]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f42:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f44:	4b49      	ldr	r3, [pc, #292]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f4c:	4b47      	ldr	r3, [pc, #284]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f52:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8005f54:	4b45      	ldr	r3, [pc, #276]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f5a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005f5c:	4b43      	ldr	r3, [pc, #268]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f62:	4b42      	ldr	r3, [pc, #264]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8005f68:	4840      	ldr	r0, [pc, #256]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f6a:	f001 f821 	bl	8006fb0 <HAL_DMA_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8005f74:	f7fe f9ee 	bl	8004354 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3c      	ldr	r2, [pc, #240]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7e:	4a3b      	ldr	r2, [pc, #236]	; (800606c <HAL_TIM_PWM_MspInit+0x1e8>)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8005f84:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005f86:	4a3c      	ldr	r2, [pc, #240]	; (8006078 <HAL_TIM_PWM_MspInit+0x1f4>)
 8005f88:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8005f8a:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005f8c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005f90:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005f94:	2240      	movs	r2, #64	; 0x40
 8005f96:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f98:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005f9e:	4b35      	ldr	r3, [pc, #212]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fa4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005fa6:	4b33      	ldr	r3, [pc, #204]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fb4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fbc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005fbe:	4b2d      	ldr	r3, [pc, #180]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fc4:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8005fca:	482a      	ldr	r0, [pc, #168]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fcc:	f000 fff0 	bl	8006fb0 <HAL_DMA_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 8005fd6:	f7fe f9bd 	bl	8004354 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8005fe8:	4a25      	ldr	r2, [pc, #148]	; (8006080 <HAL_TIM_PWM_MspInit+0x1fc>)
 8005fea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8005fee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005ff2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8005ff6:	2240      	movs	r2, #64	; 0x40
 8005ff8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006006:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006008:	4b1c      	ldr	r3, [pc, #112]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 800600a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800600e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006016:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006022:	2200      	movs	r2, #0
 8006024:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006028:	2200      	movs	r2, #0
 800602a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800602c:	4813      	ldr	r0, [pc, #76]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 800602e:	f000 ffbf 	bl	8006fb0 <HAL_DMA_Init>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8006038:	f7fe f98c 	bl	8004354 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a0f      	ldr	r2, [pc, #60]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 800604c:	621a      	str	r2, [r3, #32]
 800604e:	4a0b      	ldr	r2, [pc, #44]	; (800607c <HAL_TIM_PWM_MspInit+0x1f8>)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40000400 	.word	0x40000400
 8006060:	40023800 	.word	0x40023800
 8006064:	20000f0c 	.word	0x20000f0c
 8006068:	40026070 	.word	0x40026070
 800606c:	20000f6c 	.word	0x20000f6c
 8006070:	40026088 	.word	0x40026088
 8006074:	20000e6c 	.word	0x20000e6c
 8006078:	400260b8 	.word	0x400260b8
 800607c:	2000100c 	.word	0x2000100c
 8006080:	40026040 	.word	0x40026040

08006084 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0b      	ldr	r2, [pc, #44]	; (80060c0 <HAL_TIM_OC_MspInit+0x3c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10d      	bne.n	80060b2 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <HAL_TIM_OC_MspInit+0x40>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <HAL_TIM_OC_MspInit+0x40>)
 80060a0:	f043 0304 	orr.w	r3, r3, #4
 80060a4:	6413      	str	r3, [r2, #64]	; 0x40
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <HAL_TIM_OC_MspInit+0x40>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40023800 	.word	0x40023800

080060c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0e      	ldr	r2, [pc, #56]	; (8006110 <HAL_TIM_Base_MspInit+0x48>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d115      	bne.n	8006106 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <HAL_TIM_Base_MspInit+0x4c>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <HAL_TIM_Base_MspInit+0x4c>)
 80060e4:	f043 0310 	orr.w	r3, r3, #16
 80060e8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <HAL_TIM_Base_MspInit+0x4c>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	2036      	movs	r0, #54	; 0x36
 80060fc:	f000 ff2e 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006100:	2036      	movs	r0, #54	; 0x36
 8006102:	f000 ff47 	bl	8006f94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40001000 	.word	0x40001000
 8006114:	40023800 	.word	0x40023800

08006118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006120:	f107 030c 	add.w	r3, r7, #12
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a12      	ldr	r2, [pc, #72]	; (8006180 <HAL_TIM_MspPostInit+0x68>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d11e      	bne.n	8006178 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_TIM_MspPostInit+0x6c>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <HAL_TIM_MspPostInit+0x6c>)
 8006144:	f043 0304 	orr.w	r3, r3, #4
 8006148:	6313      	str	r3, [r2, #48]	; 0x30
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <HAL_TIM_MspPostInit+0x6c>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 8006156:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800615a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615c:	2302      	movs	r3, #2
 800615e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006164:	2303      	movs	r3, #3
 8006166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006168:	2302      	movs	r3, #2
 800616a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800616c:	f107 030c 	add.w	r3, r7, #12
 8006170:	4619      	mov	r1, r3
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <HAL_TIM_MspPostInit+0x70>)
 8006174:	f002 fb4e 	bl	8008814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006178:	bf00      	nop
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40000400 	.word	0x40000400
 8006184:	40023800 	.word	0x40023800
 8006188:	40020800 	.word	0x40020800

0800618c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <MX_USART1_UART_Init+0x50>)
 8006194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 8006198:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800619c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800619e:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061b2:	220c      	movs	r2, #12
 80061b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061c2:	4805      	ldr	r0, [pc, #20]	; (80061d8 <MX_USART1_UART_Init+0x4c>)
 80061c4:	f005 f8d2 	bl	800b36c <HAL_UART_Init>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80061ce:	f7fe f8c1 	bl	8004354 <Error_Handler>
  }

}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200010ac 	.word	0x200010ac
 80061dc:	40011000 	.word	0x40011000

080061e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <MX_USART2_UART_Init+0x4c>)
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <MX_USART2_UART_Init+0x50>)
 80061e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <MX_USART2_UART_Init+0x4c>)
 80061ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80061f2:	4b0e      	ldr	r3, [pc, #56]	; (800622c <MX_USART2_UART_Init+0x4c>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <MX_USART2_UART_Init+0x4c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <MX_USART2_UART_Init+0x4c>)
 8006200:	2200      	movs	r2, #0
 8006202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <MX_USART2_UART_Init+0x4c>)
 8006206:	220c      	movs	r2, #12
 8006208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <MX_USART2_UART_Init+0x4c>)
 800620c:	2200      	movs	r2, #0
 800620e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <MX_USART2_UART_Init+0x4c>)
 8006212:	2200      	movs	r2, #0
 8006214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006216:	4805      	ldr	r0, [pc, #20]	; (800622c <MX_USART2_UART_Init+0x4c>)
 8006218:	f005 f8a8 	bl	800b36c <HAL_UART_Init>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006222:	f7fe f897 	bl	8004354 <Error_Handler>
  }

}
 8006226:	bf00      	nop
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200010ec 	.word	0x200010ec
 8006230:	40004400 	.word	0x40004400

08006234 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <MX_USART3_UART_Init+0x50>)
 800623c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 8006240:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006244:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 8006254:	2200      	movs	r2, #0
 8006256:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 800625a:	220c      	movs	r2, #12
 800625c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 8006260:	2200      	movs	r2, #0
 8006262:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 8006266:	2200      	movs	r2, #0
 8006268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <MX_USART3_UART_Init+0x4c>)
 800626c:	f005 f87e 	bl	800b36c <HAL_UART_Init>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006276:	f7fe f86d 	bl	8004354 <Error_Handler>
  }

}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2000106c 	.word	0x2000106c
 8006284:	40004800 	.word	0x40004800

08006288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a58      	ldr	r2, [pc, #352]	; (8006408 <HAL_UART_MspInit+0x180>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d135      	bne.n	8006316 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	4b57      	ldr	r3, [pc, #348]	; (800640c <HAL_UART_MspInit+0x184>)
 80062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b2:	4a56      	ldr	r2, [pc, #344]	; (800640c <HAL_UART_MspInit+0x184>)
 80062b4:	f043 0310 	orr.w	r3, r3, #16
 80062b8:	6453      	str	r3, [r2, #68]	; 0x44
 80062ba:	4b54      	ldr	r3, [pc, #336]	; (800640c <HAL_UART_MspInit+0x184>)
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	4b50      	ldr	r3, [pc, #320]	; (800640c <HAL_UART_MspInit+0x184>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	4a4f      	ldr	r2, [pc, #316]	; (800640c <HAL_UART_MspInit+0x184>)
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6313      	str	r3, [r2, #48]	; 0x30
 80062d6:	4b4d      	ldr	r3, [pc, #308]	; (800640c <HAL_UART_MspInit+0x184>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80062e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e8:	2302      	movs	r3, #2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062f4:	2307      	movs	r3, #7
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	4619      	mov	r1, r3
 80062fe:	4844      	ldr	r0, [pc, #272]	; (8006410 <HAL_UART_MspInit+0x188>)
 8006300:	f002 fa88 	bl	8008814 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	2025      	movs	r0, #37	; 0x25
 800630a:	f000 fe27 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800630e:	2025      	movs	r0, #37	; 0x25
 8006310:	f000 fe40 	bl	8006f94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006314:	e073      	b.n	80063fe <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a3e      	ldr	r2, [pc, #248]	; (8006414 <HAL_UART_MspInit+0x18c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d134      	bne.n	800638a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006320:	2300      	movs	r3, #0
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	4b39      	ldr	r3, [pc, #228]	; (800640c <HAL_UART_MspInit+0x184>)
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	4a38      	ldr	r2, [pc, #224]	; (800640c <HAL_UART_MspInit+0x184>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	6413      	str	r3, [r2, #64]	; 0x40
 8006330:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_UART_MspInit+0x184>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	4b32      	ldr	r3, [pc, #200]	; (800640c <HAL_UART_MspInit+0x184>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	4a31      	ldr	r2, [pc, #196]	; (800640c <HAL_UART_MspInit+0x184>)
 8006346:	f043 0308 	orr.w	r3, r3, #8
 800634a:	6313      	str	r3, [r2, #48]	; 0x30
 800634c:	4b2f      	ldr	r3, [pc, #188]	; (800640c <HAL_UART_MspInit+0x184>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8006358:	2360      	movs	r3, #96	; 0x60
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635c:	2302      	movs	r3, #2
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006360:	2300      	movs	r3, #0
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006364:	2303      	movs	r3, #3
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006368:	2307      	movs	r3, #7
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800636c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006370:	4619      	mov	r1, r3
 8006372:	4829      	ldr	r0, [pc, #164]	; (8006418 <HAL_UART_MspInit+0x190>)
 8006374:	f002 fa4e 	bl	8008814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006378:	2200      	movs	r2, #0
 800637a:	2100      	movs	r1, #0
 800637c:	2026      	movs	r0, #38	; 0x26
 800637e:	f000 fded 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006382:	2026      	movs	r0, #38	; 0x26
 8006384:	f000 fe06 	bl	8006f94 <HAL_NVIC_EnableIRQ>
}
 8006388:	e039      	b.n	80063fe <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <HAL_UART_MspInit+0x194>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d134      	bne.n	80063fe <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	4b1c      	ldr	r3, [pc, #112]	; (800640c <HAL_UART_MspInit+0x184>)
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <HAL_UART_MspInit+0x184>)
 800639e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a2:	6413      	str	r3, [r2, #64]	; 0x40
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_UART_MspInit+0x184>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	4b15      	ldr	r3, [pc, #84]	; (800640c <HAL_UART_MspInit+0x184>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	4a14      	ldr	r2, [pc, #80]	; (800640c <HAL_UART_MspInit+0x184>)
 80063ba:	f043 0304 	orr.w	r3, r3, #4
 80063be:	6313      	str	r3, [r2, #48]	; 0x30
 80063c0:	4b12      	ldr	r3, [pc, #72]	; (800640c <HAL_UART_MspInit+0x184>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80063cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d2:	2302      	movs	r3, #2
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063da:	2303      	movs	r3, #3
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063de:	2307      	movs	r3, #7
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e6:	4619      	mov	r1, r3
 80063e8:	480d      	ldr	r0, [pc, #52]	; (8006420 <HAL_UART_MspInit+0x198>)
 80063ea:	f002 fa13 	bl	8008814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80063ee:	2200      	movs	r2, #0
 80063f0:	2100      	movs	r1, #0
 80063f2:	2027      	movs	r0, #39	; 0x27
 80063f4:	f000 fdb2 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80063f8:	2027      	movs	r0, #39	; 0x27
 80063fa:	f000 fdcb 	bl	8006f94 <HAL_NVIC_EnableIRQ>
}
 80063fe:	bf00      	nop
 8006400:	3738      	adds	r7, #56	; 0x38
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40011000 	.word	0x40011000
 800640c:	40023800 	.word	0x40023800
 8006410:	40020000 	.word	0x40020000
 8006414:	40004400 	.word	0x40004400
 8006418:	40020c00 	.word	0x40020c00
 800641c:	40004800 	.word	0x40004800
 8006420:	40020800 	.word	0x40020800

08006424 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8006428:	4b08      	ldr	r3, [pc, #32]	; (800644c <dbg_available+0x28>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <dbg_available+0x2c>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	b21b      	sxth	r3, r3
 800643a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800643e:	b21b      	sxth	r3, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200003d8 	.word	0x200003d8
 8006450:	200003d9 	.word	0x200003d9

08006454 <dbg_read>:

int16_t dbg_read(void)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <dbg_read+0x50>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <dbg_read+0x54>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	429a      	cmp	r2, r3
 8006468:	d102      	bne.n	8006470 <dbg_read+0x1c>
	{
		return -1;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	e012      	b.n	8006496 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <dbg_read+0x54>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <dbg_read+0x58>)
 800647a:	5c9b      	ldrb	r3, [r3, r2]
 800647c:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <dbg_read+0x54>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	3301      	adds	r3, #1
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800648c:	b2da      	uxtb	r2, r3
 800648e:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <dbg_read+0x54>)
 8006490:	701a      	strb	r2, [r3, #0]
		return c;
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	b21b      	sxth	r3, r3
	}
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	200003d8 	.word	0x200003d8
 80064a8:	200003d9 	.word	0x200003d9
 80064ac:	200003dc 	.word	0x200003dc

080064b0 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80064b4:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <EN_Interrupt+0x40>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <EN_Interrupt+0x40>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0220 	orr.w	r2, r2, #32
 80064c2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <EN_Interrupt+0x44>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <EN_Interrupt+0x44>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0220 	orr.w	r2, r2, #32
 80064d2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <EN_Interrupt+0x48>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <EN_Interrupt+0x48>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0220 	orr.w	r2, r2, #32
 80064e2:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	200010ac 	.word	0x200010ac
 80064f4:	2000106c 	.word	0x2000106c
 80064f8:	200010ec 	.word	0x200010ec

080064fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80064fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006502:	e003      	b.n	800650c <LoopCopyDataInit>

08006504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800650a:	3104      	adds	r1, #4

0800650c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006514:	d3f6      	bcc.n	8006504 <CopyDataInit>
  ldr  r2, =_sbss
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006518:	e002      	b.n	8006520 <LoopFillZerobss>

0800651a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800651a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800651c:	f842 3b04 	str.w	r3, [r2], #4

08006520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006524:	d3f9      	bcc.n	800651a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006526:	f7ff f82d 	bl	8005584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800652a:	f011 fc49 	bl	8017dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800652e:	f7fd fd75 	bl	800401c <main>
  bx  lr    
 8006532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006534:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006538:	08020e00 	.word	0x08020e00
  ldr  r0, =_sdata
 800653c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006540:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8006544:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8006548:	200073c8 	.word	0x200073c8

0800654c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800654c:	e7fe      	b.n	800654c <ADC_IRQHandler>
	...

08006550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_Init+0x40>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <HAL_Init+0x40>)
 800655a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800655e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <HAL_Init+0x40>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <HAL_Init+0x40>)
 8006566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800656a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800656c:	4b08      	ldr	r3, [pc, #32]	; (8006590 <HAL_Init+0x40>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a07      	ldr	r2, [pc, #28]	; (8006590 <HAL_Init+0x40>)
 8006572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006578:	2003      	movs	r0, #3
 800657a:	f000 fce4 	bl	8006f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800657e:	2000      	movs	r0, #0
 8006580:	f7fe fda4 	bl	80050cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006584:	f7fe fd7a 	bl	800507c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40023c00 	.word	0x40023c00

08006594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <HAL_IncTick+0x20>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_IncTick+0x24>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4413      	add	r3, r2
 80065a4:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <HAL_IncTick+0x24>)
 80065a6:	6013      	str	r3, [r2, #0]
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000064 	.word	0x20000064
 80065b8:	2000112c 	.word	0x2000112c

080065bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return uwTick;
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <HAL_GetTick+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000112c 	.word	0x2000112c

080065d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065dc:	f7ff ffee 	bl	80065bc <HAL_GetTick>
 80065e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d005      	beq.n	80065fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_Delay+0x40>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065fa:	bf00      	nop
 80065fc:	f7ff ffde 	bl	80065bc <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d8f7      	bhi.n	80065fc <HAL_Delay+0x28>
  {
  }
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000064 	.word	0x20000064

08006618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e033      	b.n	8006696 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fce2 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b00      	cmp	r3, #0
 8006654:	d118      	bne.n	8006688 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800665e:	f023 0302 	bic.w	r3, r3, #2
 8006662:	f043 0202 	orr.w	r2, r3, #2
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa40 	bl	8006af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
 8006686:	e001      	b.n	800668c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_ADC_Start_DMA+0x1e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e0cc      	b.n	8006858 <HAL_ADC_Start_DMA+0x1b8>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d018      	beq.n	8006706 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80066e4:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <HAL_ADC_Start_DMA+0x1c0>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a5e      	ldr	r2, [pc, #376]	; (8006864 <HAL_ADC_Start_DMA+0x1c4>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	0c9a      	lsrs	r2, r3, #18
 80066f0:	4613      	mov	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4413      	add	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066f8:	e002      	b.n	8006700 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f9      	bne.n	80066fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	f040 80a0 	bne.w	8006856 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006740:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d106      	bne.n	8006764 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	f023 0206 	bic.w	r2, r3, #6
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	645a      	str	r2, [r3, #68]	; 0x44
 8006762:	e002      	b.n	800676a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <HAL_ADC_Start_DMA+0x1c8>)
 8006774:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	4a3c      	ldr	r2, [pc, #240]	; (800686c <HAL_ADC_Start_DMA+0x1cc>)
 800677c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	4a3b      	ldr	r2, [pc, #236]	; (8006870 <HAL_ADC_Start_DMA+0x1d0>)
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <HAL_ADC_Start_DMA+0x1d4>)
 800678c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006796:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80067a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	334c      	adds	r3, #76	; 0x4c
 80067c2:	4619      	mov	r1, r3
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f000 fca0 	bl	800710c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d12a      	bne.n	800682e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <HAL_ADC_Start_DMA+0x1d8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d015      	beq.n	800680e <HAL_ADC_Start_DMA+0x16e>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a25      	ldr	r2, [pc, #148]	; (800687c <HAL_ADC_Start_DMA+0x1dc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d105      	bne.n	80067f8 <HAL_ADC_Start_DMA+0x158>
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <HAL_ADC_Start_DMA+0x1c8>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a20      	ldr	r2, [pc, #128]	; (8006880 <HAL_ADC_Start_DMA+0x1e0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d129      	bne.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <HAL_ADC_Start_DMA+0x1c8>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2b0f      	cmp	r3, #15
 800680c:	d823      	bhi.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800682a:	609a      	str	r2, [r3, #8]
 800682c:	e013      	b.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a11      	ldr	r2, [pc, #68]	; (8006878 <HAL_ADC_Start_DMA+0x1d8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10e      	bne.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006854:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	2000005c 	.word	0x2000005c
 8006864:	431bde83 	.word	0x431bde83
 8006868:	40012300 	.word	0x40012300
 800686c:	08006ce9 	.word	0x08006ce9
 8006870:	08006da3 	.word	0x08006da3
 8006874:	08006dbf 	.word	0x08006dbf
 8006878:	40012000 	.word	0x40012000
 800687c:	40012100 	.word	0x40012100
 8006880:	40012200 	.word	0x40012200

08006884 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x1c>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e105      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x228>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b09      	cmp	r3, #9
 80068d6:	d925      	bls.n	8006924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68d9      	ldr	r1, [r3, #12]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	4613      	mov	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	3b1e      	subs	r3, #30
 80068ee:	2207      	movs	r2, #7
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	43da      	mvns	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	400a      	ands	r2, r1
 80068fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68d9      	ldr	r1, [r3, #12]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	4618      	mov	r0, r3
 8006910:	4603      	mov	r3, r0
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	4403      	add	r3, r0
 8006916:	3b1e      	subs	r3, #30
 8006918:	409a      	lsls	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	e022      	b.n	800696a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6919      	ldr	r1, [r3, #16]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	4613      	mov	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	4413      	add	r3, r2
 8006938:	2207      	movs	r2, #7
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43da      	mvns	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	400a      	ands	r2, r1
 8006946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6919      	ldr	r1, [r3, #16]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	4618      	mov	r0, r3
 800695a:	4603      	mov	r3, r0
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4403      	add	r3, r0
 8006960:	409a      	lsls	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b06      	cmp	r3, #6
 8006970:	d824      	bhi.n	80069bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	3b05      	subs	r3, #5
 8006984:	221f      	movs	r2, #31
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43da      	mvns	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	400a      	ands	r2, r1
 8006992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4618      	mov	r0, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	3b05      	subs	r3, #5
 80069ae:	fa00 f203 	lsl.w	r2, r0, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34
 80069ba:	e04c      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d824      	bhi.n	8006a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	3b23      	subs	r3, #35	; 0x23
 80069d6:	221f      	movs	r2, #31
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43da      	mvns	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	400a      	ands	r2, r1
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4618      	mov	r0, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	3b23      	subs	r3, #35	; 0x23
 8006a00:	fa00 f203 	lsl.w	r2, r0, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0c:	e023      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3b41      	subs	r3, #65	; 0x41
 8006a20:	221f      	movs	r2, #31
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43da      	mvns	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	400a      	ands	r2, r1
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	3b41      	subs	r3, #65	; 0x41
 8006a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <HAL_ADC_ConfigChannel+0x234>)
 8006a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a21      	ldr	r2, [pc, #132]	; (8006ae4 <HAL_ADC_ConfigChannel+0x238>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d109      	bne.n	8006a78 <HAL_ADC_ConfigChannel+0x1cc>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b12      	cmp	r3, #18
 8006a6a:	d105      	bne.n	8006a78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_ADC_ConfigChannel+0x238>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d123      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x21e>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d003      	beq.n	8006a92 <HAL_ADC_ConfigChannel+0x1e6>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b11      	cmp	r3, #17
 8006a90:	d11b      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d111      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_ADC_ConfigChannel+0x23c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a10      	ldr	r2, [pc, #64]	; (8006aec <HAL_ADC_ConfigChannel+0x240>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	0c9a      	lsrs	r2, r3, #18
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006abc:	e002      	b.n	8006ac4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f9      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40012300 	.word	0x40012300
 8006ae4:	40012000 	.word	0x40012000
 8006ae8:	2000005c 	.word	0x2000005c
 8006aec:	431bde83 	.word	0x431bde83

08006af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006af8:	4b79      	ldr	r3, [pc, #484]	; (8006ce0 <ADC_Init+0x1f0>)
 8006afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6859      	ldr	r1, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6899      	ldr	r1, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	4a58      	ldr	r2, [pc, #352]	; (8006ce4 <ADC_Init+0x1f4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6899      	ldr	r1, [r3, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6899      	ldr	r1, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	e00f      	b.n	8006bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0202 	bic.w	r2, r2, #2
 8006bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7e1b      	ldrb	r3, [r3, #24]
 8006c08:	005a      	lsls	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01b      	beq.n	8006c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	3b01      	subs	r3, #1
 8006c48:	035a      	lsls	r2, r3, #13
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	e007      	b.n	8006c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	051a      	lsls	r2, r3, #20
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6899      	ldr	r1, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ca6:	025a      	lsls	r2, r3, #9
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6899      	ldr	r1, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	029a      	lsls	r2, r3, #10
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	40012300 	.word	0x40012300
 8006ce4:	0f000001 	.word	0x0f000001

08006ce8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d13c      	bne.n	8006d7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d12b      	bne.n	8006d74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d127      	bne.n	8006d74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d119      	bne.n	8006d74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0220 	bic.w	r2, r2, #32
 8006d4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d105      	bne.n	8006d74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f043 0201 	orr.w	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7fd fa65 	bl	8004244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d7a:	e00e      	b.n	8006d9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fd85 	bl	8006898 <HAL_ADC_ErrorCallback>
}
 8006d8e:	e004      	b.n	8006d9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff fd67 	bl	8006884 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2240      	movs	r2, #64	; 0x40
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	f043 0204 	orr.w	r2, r3, #4
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff fd5a 	bl	8006898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <__NVIC_SetPriorityGrouping+0x44>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1e:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <__NVIC_SetPriorityGrouping+0x44>)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	60d3      	str	r3, [r2, #12]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <__NVIC_GetPriorityGrouping+0x18>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f003 0307 	and.w	r3, r3, #7
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00

08006e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db0b      	blt.n	8006e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 021f 	and.w	r2, r3, #31
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <__NVIC_EnableIRQ+0x38>)
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2001      	movs	r0, #1
 8006e72:	fa00 f202 	lsl.w	r2, r0, r2
 8006e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000e100 	.word	0xe000e100

08006e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db0a      	blt.n	8006eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	490c      	ldr	r1, [pc, #48]	; (8006ed8 <__NVIC_SetPriority+0x4c>)
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	0112      	lsls	r2, r2, #4
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	440b      	add	r3, r1
 8006eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006eb4:	e00a      	b.n	8006ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	4908      	ldr	r1, [pc, #32]	; (8006edc <__NVIC_SetPriority+0x50>)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	0112      	lsls	r2, r2, #4
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	440b      	add	r3, r1
 8006eca:	761a      	strb	r2, [r3, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	e000e100 	.word	0xe000e100
 8006edc:	e000ed00 	.word	0xe000ed00

08006ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b089      	sub	sp, #36	; 0x24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f1c3 0307 	rsb	r3, r3, #7
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	bf28      	it	cs
 8006efe:	2304      	movcs	r3, #4
 8006f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d902      	bls.n	8006f10 <NVIC_EncodePriority+0x30>
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3b03      	subs	r3, #3
 8006f0e:	e000      	b.n	8006f12 <NVIC_EncodePriority+0x32>
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f14:	f04f 32ff 	mov.w	r2, #4294967295
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	401a      	ands	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f28:	f04f 31ff 	mov.w	r1, #4294967295
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	43d9      	mvns	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f38:	4313      	orrs	r3, r2
         );
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3724      	adds	r7, #36	; 0x24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff ff4c 	bl	8006dec <__NVIC_SetPriorityGrouping>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f6e:	f7ff ff61 	bl	8006e34 <__NVIC_GetPriorityGrouping>
 8006f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68b9      	ldr	r1, [r7, #8]
 8006f78:	6978      	ldr	r0, [r7, #20]
 8006f7a:	f7ff ffb1 	bl	8006ee0 <NVIC_EncodePriority>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ff80 	bl	8006e8c <__NVIC_SetPriority>
}
 8006f8c:	bf00      	nop
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff54 	bl	8006e50 <__NVIC_EnableIRQ>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fbc:	f7ff fafe 	bl	80065bc <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e099      	b.n	8007100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fec:	e00f      	b.n	800700e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fee:	f7ff fae5 	bl	80065bc <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d908      	bls.n	800700e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2203      	movs	r2, #3
 8007006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e078      	b.n	8007100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e8      	bne.n	8006fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4b38      	ldr	r3, [pc, #224]	; (8007108 <HAL_DMA_Init+0x158>)
 8007028:	4013      	ands	r3, r2
 800702a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800703a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b04      	cmp	r3, #4
 8007066:	d107      	bne.n	8007078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	4313      	orrs	r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d117      	bne.n	80070d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa91 	bl	80075dc <DMA_CheckFifoParam>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2240      	movs	r2, #64	; 0x40
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80070ce:	2301      	movs	r3, #1
 80070d0:	e016      	b.n	8007100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa48 	bl	8007570 <DMA_CalcBaseAndBitshift>
 80070e0:	4603      	mov	r3, r0
 80070e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	223f      	movs	r2, #63	; 0x3f
 80070ea:	409a      	lsls	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	f010803f 	.word	0xf010803f

0800710c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_DMA_Start_IT+0x26>
 800712e:	2302      	movs	r3, #2
 8007130:	e040      	b.n	80071b4 <HAL_DMA_Start_IT+0xa8>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d12f      	bne.n	80071a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f9da 	bl	8007514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007164:	223f      	movs	r2, #63	; 0x3f
 8007166:	409a      	lsls	r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0216 	orr.w	r2, r2, #22
 800717a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0208 	orr.w	r2, r2, #8
 8007192:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e005      	b.n	80071b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
 80071b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d004      	beq.n	80071da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2280      	movs	r2, #128	; 0x80
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e00c      	b.n	80071f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2205      	movs	r2, #5
 80071de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800720c:	4b92      	ldr	r3, [pc, #584]	; (8007458 <HAL_DMA_IRQHandler+0x258>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a92      	ldr	r2, [pc, #584]	; (800745c <HAL_DMA_IRQHandler+0x25c>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	0a9b      	lsrs	r3, r3, #10
 8007218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722a:	2208      	movs	r2, #8
 800722c:	409a      	lsls	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007258:	2208      	movs	r2, #8
 800725a:	409a      	lsls	r2, r3
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	2201      	movs	r2, #1
 8007290:	409a      	lsls	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a6:	2204      	movs	r2, #4
 80072a8:	409a      	lsls	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d012      	beq.n	80072d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	2204      	movs	r2, #4
 80072c6:	409a      	lsls	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	f043 0204 	orr.w	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	2210      	movs	r2, #16
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d043      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d03c      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fa:	2210      	movs	r2, #16
 80072fc:	409a      	lsls	r2, r3
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d024      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
 800732e:	e01f      	b.n	8007370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01b      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	e016      	b.n	8007370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0208 	bic.w	r2, r2, #8
 800735e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	2220      	movs	r2, #32
 8007376:	409a      	lsls	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 808e 	beq.w	800749e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8086 	beq.w	800749e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	2220      	movs	r2, #32
 8007398:	409a      	lsls	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d136      	bne.n	8007418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0216 	bic.w	r2, r2, #22
 80073b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <HAL_DMA_IRQHandler+0x1da>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0208 	bic.w	r2, r2, #8
 80073e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	223f      	movs	r2, #63	; 0x3f
 80073f0:	409a      	lsls	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	2b00      	cmp	r3, #0
 800740c:	d07d      	beq.n	800750a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
        }
        return;
 8007416:	e078      	b.n	800750a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	2b00      	cmp	r3, #0
 800743a:	d030      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
 8007444:	e02b      	b.n	800749e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d027      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
 8007456:	e022      	b.n	800749e <HAL_DMA_IRQHandler+0x29e>
 8007458:	2000005c 	.word	0x2000005c
 800745c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0210 	bic.w	r2, r2, #16
 800747c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d032      	beq.n	800750c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d022      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2205      	movs	r2, #5
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d307      	bcc.n	80074e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f2      	bne.n	80074ca <HAL_DMA_IRQHandler+0x2ca>
 80074e4:	e000      	b.n	80074e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80074e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
 8007508:	e000      	b.n	800750c <HAL_DMA_IRQHandler+0x30c>
        return;
 800750a:	bf00      	nop
    }
  }
}
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d108      	bne.n	8007554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007552:	e007      	b.n	8007564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	60da      	str	r2, [r3, #12]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	3b10      	subs	r3, #16
 8007580:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <DMA_CalcBaseAndBitshift+0x64>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800758a:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <DMA_CalcBaseAndBitshift+0x68>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d909      	bls.n	80075b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	1d1a      	adds	r2, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	659a      	str	r2, [r3, #88]	; 0x58
 80075b0:	e007      	b.n	80075c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	aaaaaaab 	.word	0xaaaaaaab
 80075d8:	08020990 	.word	0x08020990

080075dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d11f      	bne.n	8007636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d855      	bhi.n	80076a8 <DMA_CheckFifoParam+0xcc>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <DMA_CheckFifoParam+0x28>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007615 	.word	0x08007615
 8007608:	08007627 	.word	0x08007627
 800760c:	08007615 	.word	0x08007615
 8007610:	080076a9 	.word	0x080076a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d045      	beq.n	80076ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007624:	e042      	b.n	80076ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800762e:	d13f      	bne.n	80076b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007634:	e03c      	b.n	80076b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	d121      	bne.n	8007684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d836      	bhi.n	80076b4 <DMA_CheckFifoParam+0xd8>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <DMA_CheckFifoParam+0x70>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800765d 	.word	0x0800765d
 8007658:	08007675 	.word	0x08007675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	e02f      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d024      	beq.n	80076b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007672:	e021      	b.n	80076b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800767c:	d11e      	bne.n	80076bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007682:	e01b      	b.n	80076bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d902      	bls.n	8007690 <DMA_CheckFifoParam+0xb4>
 800768a:	2b03      	cmp	r3, #3
 800768c:	d003      	beq.n	8007696 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800768e:	e018      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e015      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
      break;
 80076a6:	e00b      	b.n	80076c0 <DMA_CheckFifoParam+0xe4>
      break;
 80076a8:	bf00      	nop
 80076aa:	e00a      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076ac:	bf00      	nop
 80076ae:	e008      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b0:	bf00      	nop
 80076b2:	e006      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076c0:	bf00      	nop
    }
  } 
  
  return status; 
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80076e0:	4baa      	ldr	r3, [pc, #680]	; (800798c <HAL_ETH_Init+0x2bc>)
 80076e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e185      	b.n	8007a02 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f004 fb20 	bl	800bd50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	4b9e      	ldr	r3, [pc, #632]	; (8007990 <HAL_ETH_Init+0x2c0>)
 8007716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007718:	4a9d      	ldr	r2, [pc, #628]	; (8007990 <HAL_ETH_Init+0x2c0>)
 800771a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800771e:	6453      	str	r3, [r2, #68]	; 0x44
 8007720:	4b9b      	ldr	r3, [pc, #620]	; (8007990 <HAL_ETH_Init+0x2c0>)
 8007722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800772c:	4b99      	ldr	r3, [pc, #612]	; (8007994 <HAL_ETH_Init+0x2c4>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	4a98      	ldr	r2, [pc, #608]	; (8007994 <HAL_ETH_Init+0x2c4>)
 8007732:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007736:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007738:	4b96      	ldr	r3, [pc, #600]	; (8007994 <HAL_ETH_Init+0x2c4>)
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	4994      	ldr	r1, [pc, #592]	; (8007994 <HAL_ETH_Init+0x2c4>)
 8007742:	4313      	orrs	r3, r2
 8007744:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0201 	orr.w	r2, r2, #1
 8007758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800775c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800775e:	f7fe ff2d 	bl	80065bc <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007764:	e011      	b.n	800778a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8007766:	f7fe ff29 	bl	80065bc <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007774:	d909      	bls.n	800778a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2203      	movs	r2, #3
 800777a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e13b      	b.n	8007a02 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e4      	bne.n	8007766 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f023 031c 	bic.w	r3, r3, #28
 80077aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80077ac:	f001 fe44 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 80077b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	4a78      	ldr	r2, [pc, #480]	; (8007998 <HAL_ETH_Init+0x2c8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d908      	bls.n	80077cc <HAL_ETH_Init+0xfc>
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	4a77      	ldr	r2, [pc, #476]	; (800799c <HAL_ETH_Init+0x2cc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d804      	bhi.n	80077cc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f043 0308 	orr.w	r3, r3, #8
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	e027      	b.n	800781c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	4a73      	ldr	r2, [pc, #460]	; (800799c <HAL_ETH_Init+0x2cc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d908      	bls.n	80077e6 <HAL_ETH_Init+0x116>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	4a72      	ldr	r2, [pc, #456]	; (80079a0 <HAL_ETH_Init+0x2d0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d804      	bhi.n	80077e6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f043 030c 	orr.w	r3, r3, #12
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	e01a      	b.n	800781c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	4a6d      	ldr	r2, [pc, #436]	; (80079a0 <HAL_ETH_Init+0x2d0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d903      	bls.n	80077f6 <HAL_ETH_Init+0x126>
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	4a6c      	ldr	r2, [pc, #432]	; (80079a4 <HAL_ETH_Init+0x2d4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d911      	bls.n	800781a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	4a6a      	ldr	r2, [pc, #424]	; (80079a4 <HAL_ETH_Init+0x2d4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d908      	bls.n	8007810 <HAL_ETH_Init+0x140>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	4a69      	ldr	r2, [pc, #420]	; (80079a8 <HAL_ETH_Init+0x2d8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d804      	bhi.n	8007810 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f043 0304 	orr.w	r3, r3, #4
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	e005      	b.n	800781c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f043 0310 	orr.w	r3, r3, #16
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e000      	b.n	800781c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800781a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007824:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007828:	2100      	movs	r1, #0
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fb16 	bl	8007e5c <HAL_ETH_WritePHYRegister>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800783a:	6939      	ldr	r1, [r7, #16]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fccb 	bl	80081d8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e0d9      	b.n	8007a02 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800784e:	20ff      	movs	r0, #255	; 0xff
 8007850:	f7fe fec0 	bl	80065d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 80a7 	beq.w	80079ac <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800785e:	f7fe fead 	bl	80065bc <HAL_GetTick>
 8007862:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	461a      	mov	r2, r3
 800786a:	2101      	movs	r1, #1
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa8d 	bl	8007d8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007872:	f7fe fea3 	bl	80065bc <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d90f      	bls.n	80078a4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007888:	6939      	ldr	r1, [r7, #16]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fca4 	bl	80081d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e0ae      	b.n	8007a02 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0da      	beq.n	8007864 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80078ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078b2:	2100      	movs	r1, #0
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fad1 	bl	8007e5c <HAL_ETH_WritePHYRegister>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80078c4:	6939      	ldr	r1, [r7, #16]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc86 	bl	80081d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80078d4:	2301      	movs	r3, #1
 80078d6:	e094      	b.n	8007a02 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80078d8:	f7fe fe70 	bl	80065bc <HAL_GetTick>
 80078dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	461a      	mov	r2, r3
 80078e4:	2101      	movs	r1, #1
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa50 	bl	8007d8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80078ec:	f7fe fe66 	bl	80065bc <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d90f      	bls.n	800791e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007902:	6939      	ldr	r1, [r7, #16]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc67 	bl	80081d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e071      	b.n	8007a02 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0da      	beq.n	80078de <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	461a      	mov	r2, r3
 800792e:	211f      	movs	r1, #31
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fa2b 	bl	8007d8c <HAL_ETH_ReadPHYRegister>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007940:	6939      	ldr	r1, [r7, #16]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fc48 	bl	80081d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8007950:	2301      	movs	r3, #1
 8007952:	e056      	b.n	8007a02 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	e002      	b.n	800796e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
 800797e:	e037      	b.n	80079f0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007986:	609a      	str	r2, [r3, #8]
 8007988:	e032      	b.n	80079f0 <HAL_ETH_Init+0x320>
 800798a:	bf00      	nop
 800798c:	03938700 	.word	0x03938700
 8007990:	40023800 	.word	0x40023800
 8007994:	40013800 	.word	0x40013800
 8007998:	01312cff 	.word	0x01312cff
 800799c:	02160ebf 	.word	0x02160ebf
 80079a0:	039386ff 	.word	0x039386ff
 80079a4:	05f5e0ff 	.word	0x05f5e0ff
 80079a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	08db      	lsrs	r3, r3, #3
 80079b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80079bc:	4313      	orrs	r3, r2
 80079be:	b29b      	uxth	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	2100      	movs	r1, #0
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa49 	bl	8007e5c <HAL_ETH_WritePHYRegister>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80079d4:	6939      	ldr	r1, [r7, #16]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fbfe 	bl	80081d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e00c      	b.n	8007a02 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80079e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80079ec:	f7fe fdf2 	bl	80065d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80079f0:	6939      	ldr	r1, [r7, #16]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fbf0 	bl	80081d8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop

08007a0c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_ETH_DMATxDescListInit+0x20>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e052      	b.n	8007ad2 <HAL_ETH_DMATxDescListInit+0xc6>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e030      	b.n	8007aaa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	015b      	lsls	r3, r3, #5
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	4413      	add	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a58:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007a60:	fb02 f303 	mul.w	r3, r2, r3
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4413      	add	r3, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d208      	bcs.n	8007a9e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	015b      	lsls	r3, r3, #5
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4413      	add	r3, r2
 8007a96:	461a      	mov	r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	60da      	str	r2, [r3, #12]
 8007a9c:	e002      	b.n	8007aa4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d3ca      	bcc.n	8007a48 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	3310      	adds	r3, #16
 8007abe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_ETH_DMARxDescListInit+0x20>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e056      	b.n	8007bac <HAL_ETH_DMARxDescListInit+0xce>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e034      	b.n	8007b84 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	015b      	lsls	r3, r3, #5
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b2a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007b32:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	461a      	mov	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d105      	bne.n	8007b5c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d208      	bcs.n	8007b78 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	015b      	lsls	r3, r3, #5
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	4413      	add	r3, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	e002      	b.n	8007b7e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	3301      	adds	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d3c6      	bcc.n	8007b1a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b96:	330c      	adds	r3, #12
 8007b98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_ETH_TransmitFrame+0x24>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e0cd      	b.n	8007d78 <HAL_ETH_TransmitFrame+0x1c0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8007c02:	2301      	movs	r3, #1
 8007c04:	e0b8      	b.n	8007d78 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da09      	bge.n	8007c24 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2212      	movs	r2, #18
 8007c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0a9      	b.n	8007d78 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d915      	bls.n	8007c5a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	4a54      	ldr	r2, [pc, #336]	; (8007d84 <HAL_ETH_TransmitFrame+0x1cc>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	0a9b      	lsrs	r3, r3, #10
 8007c38:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4b51      	ldr	r3, [pc, #324]	; (8007d84 <HAL_ETH_TransmitFrame+0x1cc>)
 8007c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c42:	0a9b      	lsrs	r3, r3, #10
 8007c44:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3301      	adds	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e001      	b.n	8007c5e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d11c      	bne.n	8007c9e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8007c72:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007c7e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007c8e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c9c:	e04b      	b.n	8007d36 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]
 8007ca2:	e044      	b.n	8007d2e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cb2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007cc8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007cd2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d116      	bne.n	8007d0c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007cec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <HAL_ETH_TransmitFrame+0x1d0>)
 8007cf2:	fb02 f203 	mul.w	r2, r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007cfe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007d0a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007d1a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3b6      	bcc.n	8007ca4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3e:	3314      	adds	r3, #20
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00d      	beq.n	8007d66 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d52:	3314      	adds	r3, #20
 8007d54:	2204      	movs	r2, #4
 8007d56:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d60:	3304      	adds	r3, #4
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	ac02b00b 	.word	0xac02b00b
 8007d88:	fffffa0c 	.word	0xfffffa0c

08007d8c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	460b      	mov	r3, r1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b82      	cmp	r3, #130	; 0x82
 8007dac:	d101      	bne.n	8007db2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007dae:	2302      	movs	r3, #2
 8007db0:	e050      	b.n	8007e54 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2282      	movs	r2, #130	; 0x82
 8007db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f003 031c 	and.w	r3, r3, #28
 8007dc8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8a1b      	ldrh	r3, [r3, #16]
 8007dce:	02db      	lsls	r3, r3, #11
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007dd8:	897b      	ldrh	r3, [r7, #10]
 8007dda:	019b      	lsls	r3, r3, #6
 8007ddc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f023 0302 	bic.w	r3, r3, #2
 8007dec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007dfe:	f7fe fbdd 	bl	80065bc <HAL_GetTick>
 8007e02:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e04:	e015      	b.n	8007e32 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007e06:	f7fe fbd9 	bl	80065bc <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e14:	d309      	bcc.n	8007e2a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e014      	b.n	8007e54 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e4      	bne.n	8007e06 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	460b      	mov	r3, r1
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b42      	cmp	r3, #66	; 0x42
 8007e7c:	d101      	bne.n	8007e82 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e04e      	b.n	8007f20 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2242      	movs	r2, #66	; 0x42
 8007e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 031c 	and.w	r3, r3, #28
 8007e98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8a1b      	ldrh	r3, [r3, #16]
 8007e9e:	02db      	lsls	r3, r3, #11
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007ea8:	897b      	ldrh	r3, [r7, #10]
 8007eaa:	019b      	lsls	r3, r3, #6
 8007eac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f043 0302 	orr.w	r3, r3, #2
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007ed8:	f7fe fb70 	bl	80065bc <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007ede:	e015      	b.n	8007f0c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007ee0:	f7fe fb6c 	bl	80065bc <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eee:	d309      	bcc.n	8007f04 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e00d      	b.n	8007f20 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e4      	bne.n	8007ee0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_ETH_Start+0x16>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e01f      	b.n	8007f7e <HAL_ETH_Start+0x56>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fb44 	bl	80085dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb7b 	bl	8008650 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fc12 	bl	8008784 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbaf 	bl	80086c4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fbdc 	bl	8008724 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_ETH_Stop+0x16>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e01f      	b.n	8007fdc <HAL_ETH_Stop+0x56>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fba1 	bl	80086f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fbce 	bl	8008754 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fb66 	bl	800868a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fbe0 	bl	8008784 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fb26 	bl	8008616 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_ETH_ConfigMAC+0x1c>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e0e4      	b.n	80081ca <HAL_ETH_ConfigMAC+0x1e6>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80b1 	beq.w	800817a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4b6c      	ldr	r3, [pc, #432]	; (80081d4 <HAL_ETH_ConfigMAC+0x1f0>)
 8008024:	4013      	ands	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008030:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8008036:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800803c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8008042:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8008048:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800804e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8008054:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800805a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8008060:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8008066:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800806c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8008072:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800808a:	2001      	movs	r0, #1
 800808c:	f7fe faa2 	bl	80065d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80080a0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80080a6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80080ac:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80080b2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80080b8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80080be:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80080ca:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80080cc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80080d6:	2001      	movs	r0, #1
 80080d8:	f7fe fa7c 	bl	80065d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80080ec:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80080f6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008106:	4013      	ands	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008114:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800811a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8008120:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8008126:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800812c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008144:	2001      	movs	r0, #1
 8008146:	f7fe fa45 	bl	80065d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800816a:	2001      	movs	r0, #1
 800816c:	f7fe fa32 	bl	80065d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	61da      	str	r2, [r3, #28]
 8008178:	e01e      	b.n	80081b8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008188:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80081aa:	2001      	movs	r0, #1
 80081ac:	f7fe fa12 	bl	80065d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	ff20810f 	.word	0xff20810f

080081d8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b0b0      	sub	sp, #192	; 0xc0
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d007      	beq.n	80081fe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081f4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80081fe:	2300      	movs	r3, #0
 8008200:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8008202:	2300      	movs	r3, #0
 8008204:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8008206:	2300      	movs	r3, #0
 8008208:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800820a:	2300      	movs	r3, #0
 800820c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800820e:	2300      	movs	r3, #0
 8008210:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8008212:	2300      	movs	r3, #0
 8008214:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800821e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008222:	663b      	str	r3, [r7, #96]	; 0x60
 8008224:	e001      	b.n	800822a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8008226:	2300      	movs	r3, #0
 8008228:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800822a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800822e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008230:	2300      	movs	r3, #0
 8008232:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008234:	2300      	movs	r3, #0
 8008236:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8008238:	2300      	movs	r3, #0
 800823a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8008240:	2300      	movs	r3, #0
 8008242:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8008248:	2300      	movs	r3, #0
 800824a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800824e:	2300      	movs	r3, #0
 8008250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800825a:	2300      	movs	r3, #0
 800825c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8008260:	2300      	movs	r3, #0
 8008262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8008272:	2300      	movs	r3, #0
 8008274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8008278:	2380      	movs	r3, #128	; 0x80
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800827e:	2300      	movs	r3, #0
 8008280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8008284:	2300      	movs	r3, #0
 8008286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800828a:	2300      	movs	r3, #0
 800828c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008296:	2300      	movs	r3, #0
 8008298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800829c:	2300      	movs	r3, #0
 800829e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80082ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80082b0:	4bac      	ldr	r3, [pc, #688]	; (8008564 <ETH_MACDMAConfig+0x38c>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80082b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80082ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80082bc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80082be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80082c0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80082c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80082c4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80082ca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80082cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80082ce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80082d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80082d2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80082d8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80082da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80082dc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80082de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80082e0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80082e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80082e4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80082e8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80082ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80082ec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80082ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008300:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800830c:	2001      	movs	r0, #1
 800830e:	f7fe f961 	bl	80065d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800831a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800831c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800831e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008320:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8008324:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8008326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800832a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800832c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8008330:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8008336:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800833c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008340:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008348:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800834a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008356:	2001      	movs	r0, #1
 8008358:	f7fe f93c 	bl	80065d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008364:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800836e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008378:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008388:	f64f 7341 	movw	r3, #65345	; 0xff41
 800838c:	4013      	ands	r3, r2
 800838e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008396:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800839c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800839e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80083a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80083a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80083a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80083aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80083ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80083b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80083b4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80083b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083c8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80083d4:	2001      	movs	r0, #1
 80083d6:	f7fe f8fd 	bl	80065d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083e2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80083e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80083e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80083fe:	2001      	movs	r0, #1
 8008400:	f7fe f8e8 	bl	80065d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800840c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800840e:	2300      	movs	r3, #0
 8008410:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8008412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008416:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800841c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008420:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800842a:	2300      	movs	r3, #0
 800842c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800842e:	2300      	movs	r3, #0
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008432:	2304      	movs	r3, #4
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800843c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008440:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800844c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800844e:	2380      	movs	r3, #128	; 0x80
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8008452:	2300      	movs	r3, #0
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008456:	2300      	movs	r3, #0
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008462:	3318      	adds	r3, #24
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800846a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800846e:	4b3e      	ldr	r3, [pc, #248]	; (8008568 <ETH_MACDMAConfig+0x390>)
 8008470:	4013      	ands	r3, r2
 8008472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008476:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8008478:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800847a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800847c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800847e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8008480:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8008482:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8008484:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8008486:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8008488:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800848a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800848c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800848e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8008492:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8008496:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084aa:	3318      	adds	r3, #24
 80084ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80084b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ba:	3318      	adds	r3, #24
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80084c2:	2001      	movs	r0, #1
 80084c4:	f7fe f886 	bl	80065d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d0:	3318      	adds	r3, #24
 80084d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80084d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80084d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80084dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80084e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80084e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80084e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80084ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80084ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80084f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80084f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80084fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008500:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008510:	2001      	movs	r0, #1
 8008512:	f7fe f85f 	bl	80065d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008522:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d10f      	bne.n	800854c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008534:	331c      	adds	r3, #28
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008548:	331c      	adds	r3, #28
 800854a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	461a      	mov	r2, r3
 8008552:	2100      	movs	r1, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f809 	bl	800856c <ETH_MACAddressConfig>
}
 800855a:	bf00      	nop
 800855c:	37c0      	adds	r7, #192	; 0xc0
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	ff20810f 	.word	0xff20810f
 8008568:	f8de3f23 	.word	0xf8de3f23

0800856c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3305      	adds	r3, #5
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	3204      	adds	r2, #4
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <ETH_MACAddressConfig+0x68>)
 800858e:	4413      	add	r3, r2
 8008590:	461a      	mov	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3303      	adds	r3, #3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	061a      	lsls	r2, r3, #24
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3302      	adds	r3, #2
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3301      	adds	r3, #1
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	4313      	orrs	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <ETH_MACAddressConfig+0x6c>)
 80085be:	4413      	add	r3, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6013      	str	r3, [r2, #0]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40028040 	.word	0x40028040
 80085d8:	40028044 	.word	0x40028044

080085dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0208 	orr.w	r2, r2, #8
 80085f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008600:	2001      	movs	r0, #1
 8008602:	f000 f8e9 	bl	80087d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0208 	bic.w	r2, r2, #8
 8008630:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800863a:	2001      	movs	r0, #1
 800863c:	f000 f8cc 	bl	80087d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0204 	orr.w	r2, r2, #4
 800866a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008674:	2001      	movs	r0, #1
 8008676:	f000 f8af 	bl	80087d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0204 	bic.w	r2, r2, #4
 80086a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80086ae:	2001      	movs	r0, #1
 80086b0:	f000 f892 	bl	80087d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	3318      	adds	r3, #24
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e4:	3318      	adds	r3, #24
 80086e6:	601a      	str	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008704:	3318      	adds	r3, #24
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008714:	3318      	adds	r3, #24
 8008716:	601a      	str	r2, [r3, #0]
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008734:	3318      	adds	r3, #24
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0202 	orr.w	r2, r2, #2
 8008740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008744:	3318      	adds	r3, #24
 8008746:	601a      	str	r2, [r3, #0]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008764:	3318      	adds	r3, #24
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0202 	bic.w	r2, r2, #2
 8008770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008774:	3318      	adds	r3, #24
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008798:	3318      	adds	r3, #24
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	3318      	adds	r3, #24
 80087aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b4:	3318      	adds	r3, #24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80087ba:	2001      	movs	r0, #1
 80087bc:	f000 f80c 	bl	80087d8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ca:	3318      	adds	r3, #24
 80087cc:	601a      	str	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <ETH_Delay+0x34>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <ETH_Delay+0x38>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	0a5b      	lsrs	r3, r3, #9
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80087f4:	bf00      	nop
  } 
  while (Delay --);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1e5a      	subs	r2, r3, #1
 80087fa:	60fa      	str	r2, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f9      	bne.n	80087f4 <ETH_Delay+0x1c>
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000005c 	.word	0x2000005c
 8008810:	10624dd3 	.word	0x10624dd3

08008814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008826:	2300      	movs	r3, #0
 8008828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e16b      	b.n	8008b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008830:	2201      	movs	r2, #1
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4013      	ands	r3, r2
 8008842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	429a      	cmp	r2, r3
 800884a:	f040 815a 	bne.w	8008b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d00b      	beq.n	800886e <HAL_GPIO_Init+0x5a>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d007      	beq.n	800886e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008862:	2b11      	cmp	r3, #17
 8008864:	d003      	beq.n	800886e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b12      	cmp	r3, #18
 800886c:	d130      	bne.n	80088d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	2203      	movs	r2, #3
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	43db      	mvns	r3, r3
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	4013      	ands	r3, r2
 8008884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	4313      	orrs	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088a4:	2201      	movs	r2, #1
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	43db      	mvns	r3, r3
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	4013      	ands	r3, r2
 80088b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	091b      	lsrs	r3, r3, #4
 80088ba:	f003 0201 	and.w	r2, r3, #1
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	2203      	movs	r2, #3
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	43db      	mvns	r3, r3
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	4013      	ands	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d003      	beq.n	8008910 <HAL_GPIO_Init+0xfc>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b12      	cmp	r3, #18
 800890e:	d123      	bne.n	8008958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	08da      	lsrs	r2, r3, #3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3208      	adds	r2, #8
 8008918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	220f      	movs	r2, #15
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	43db      	mvns	r3, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4013      	ands	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	4313      	orrs	r3, r2
 8008948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	08da      	lsrs	r2, r3, #3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	3208      	adds	r2, #8
 8008952:	69b9      	ldr	r1, [r7, #24]
 8008954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	2203      	movs	r2, #3
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	43db      	mvns	r3, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4013      	ands	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f003 0203 	and.w	r2, r3, #3
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4313      	orrs	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80b4 	beq.w	8008b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	4b5f      	ldr	r3, [pc, #380]	; (8008b1c <HAL_GPIO_Init+0x308>)
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	4a5e      	ldr	r2, [pc, #376]	; (8008b1c <HAL_GPIO_Init+0x308>)
 80089a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089a8:	6453      	str	r3, [r2, #68]	; 0x44
 80089aa:	4b5c      	ldr	r3, [pc, #368]	; (8008b1c <HAL_GPIO_Init+0x308>)
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089b6:	4a5a      	ldr	r2, [pc, #360]	; (8008b20 <HAL_GPIO_Init+0x30c>)
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	3302      	adds	r3, #2
 80089be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	220f      	movs	r2, #15
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43db      	mvns	r3, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a51      	ldr	r2, [pc, #324]	; (8008b24 <HAL_GPIO_Init+0x310>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d02b      	beq.n	8008a3a <HAL_GPIO_Init+0x226>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a50      	ldr	r2, [pc, #320]	; (8008b28 <HAL_GPIO_Init+0x314>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d025      	beq.n	8008a36 <HAL_GPIO_Init+0x222>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a4f      	ldr	r2, [pc, #316]	; (8008b2c <HAL_GPIO_Init+0x318>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01f      	beq.n	8008a32 <HAL_GPIO_Init+0x21e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a4e      	ldr	r2, [pc, #312]	; (8008b30 <HAL_GPIO_Init+0x31c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d019      	beq.n	8008a2e <HAL_GPIO_Init+0x21a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a4d      	ldr	r2, [pc, #308]	; (8008b34 <HAL_GPIO_Init+0x320>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_GPIO_Init+0x216>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4c      	ldr	r2, [pc, #304]	; (8008b38 <HAL_GPIO_Init+0x324>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00d      	beq.n	8008a26 <HAL_GPIO_Init+0x212>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a4b      	ldr	r2, [pc, #300]	; (8008b3c <HAL_GPIO_Init+0x328>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_GPIO_Init+0x20e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a4a      	ldr	r2, [pc, #296]	; (8008b40 <HAL_GPIO_Init+0x32c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d101      	bne.n	8008a1e <HAL_GPIO_Init+0x20a>
 8008a1a:	2307      	movs	r3, #7
 8008a1c:	e00e      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a1e:	2308      	movs	r3, #8
 8008a20:	e00c      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a22:	2306      	movs	r3, #6
 8008a24:	e00a      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a26:	2305      	movs	r3, #5
 8008a28:	e008      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a2a:	2304      	movs	r3, #4
 8008a2c:	e006      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e004      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e002      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <HAL_GPIO_Init+0x228>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	f002 0203 	and.w	r2, r2, #3
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	4093      	lsls	r3, r2
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a4c:	4934      	ldr	r1, [pc, #208]	; (8008b20 <HAL_GPIO_Init+0x30c>)
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	089b      	lsrs	r3, r3, #2
 8008a52:	3302      	adds	r3, #2
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a5a:	4b3a      	ldr	r3, [pc, #232]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a7e:	4a31      	ldr	r2, [pc, #196]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a84:	4b2f      	ldr	r3, [pc, #188]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4013      	ands	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aa8:	4a26      	ldr	r2, [pc, #152]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008aae:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4013      	ands	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008afc:	4a11      	ldr	r2, [pc, #68]	; (8008b44 <HAL_GPIO_Init+0x330>)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b0f      	cmp	r3, #15
 8008b0c:	f67f ae90 	bls.w	8008830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b10:	bf00      	nop
 8008b12:	3724      	adds	r7, #36	; 0x24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	40013800 	.word	0x40013800
 8008b24:	40020000 	.word	0x40020000
 8008b28:	40020400 	.word	0x40020400
 8008b2c:	40020800 	.word	0x40020800
 8008b30:	40020c00 	.word	0x40020c00
 8008b34:	40021000 	.word	0x40021000
 8008b38:	40021400 	.word	0x40021400
 8008b3c:	40021800 	.word	0x40021800
 8008b40:	40021c00 	.word	0x40021c00
 8008b44:	40013c00 	.word	0x40013c00

08008b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	887b      	ldrh	r3, [r7, #2]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]
 8008b64:	e001      	b.n	8008b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	807b      	strh	r3, [r7, #2]
 8008b84:	4613      	mov	r3, r2
 8008b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b88:	787b      	ldrb	r3, [r7, #1]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b8e:	887a      	ldrh	r2, [r7, #2]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b94:	e003      	b.n	8008b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	041a      	lsls	r2, r3, #16
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	619a      	str	r2, [r3, #24]
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008bb6:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bb8:	695a      	ldr	r2, [r3, #20]
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d006      	beq.n	8008bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bc2:	4a05      	ldr	r2, [pc, #20]	; (8008bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fb fb10 	bl	80041f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40013c00 	.word	0x40013c00

08008bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e25b      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d075      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bfa:	4ba3      	ldr	r3, [pc, #652]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 030c 	and.w	r3, r3, #12
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d00c      	beq.n	8008c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c06:	4ba0      	ldr	r3, [pc, #640]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d112      	bne.n	8008c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c12:	4b9d      	ldr	r3, [pc, #628]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c1e:	d10b      	bne.n	8008c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c20:	4b99      	ldr	r3, [pc, #612]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d05b      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x108>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d157      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e236      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c40:	d106      	bne.n	8008c50 <HAL_RCC_OscConfig+0x74>
 8008c42:	4b91      	ldr	r3, [pc, #580]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a90      	ldr	r2, [pc, #576]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	e01d      	b.n	8008c8c <HAL_RCC_OscConfig+0xb0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c58:	d10c      	bne.n	8008c74 <HAL_RCC_OscConfig+0x98>
 8008c5a:	4b8b      	ldr	r3, [pc, #556]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a8a      	ldr	r2, [pc, #552]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	4b88      	ldr	r3, [pc, #544]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a87      	ldr	r2, [pc, #540]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	e00b      	b.n	8008c8c <HAL_RCC_OscConfig+0xb0>
 8008c74:	4b84      	ldr	r3, [pc, #528]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a83      	ldr	r2, [pc, #524]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	4b81      	ldr	r3, [pc, #516]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a80      	ldr	r2, [pc, #512]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d013      	beq.n	8008cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c94:	f7fd fc92 	bl	80065bc <HAL_GetTick>
 8008c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c9c:	f7fd fc8e 	bl	80065bc <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b64      	cmp	r3, #100	; 0x64
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e1fb      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cae:	4b76      	ldr	r3, [pc, #472]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0f0      	beq.n	8008c9c <HAL_RCC_OscConfig+0xc0>
 8008cba:	e014      	b.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbc:	f7fd fc7e 	bl	80065bc <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cc4:	f7fd fc7a 	bl	80065bc <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b64      	cmp	r3, #100	; 0x64
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e1e7      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cd6:	4b6c      	ldr	r3, [pc, #432]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0xe8>
 8008ce2:	e000      	b.n	8008ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d063      	beq.n	8008dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cf2:	4b65      	ldr	r3, [pc, #404]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 030c 	and.w	r3, r3, #12
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cfe:	4b62      	ldr	r3, [pc, #392]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d11c      	bne.n	8008d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d0a:	4b5f      	ldr	r3, [pc, #380]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d116      	bne.n	8008d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d16:	4b5c      	ldr	r3, [pc, #368]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_RCC_OscConfig+0x152>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d001      	beq.n	8008d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e1bb      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2e:	4b56      	ldr	r3, [pc, #344]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4952      	ldr	r1, [pc, #328]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d42:	e03a      	b.n	8008dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d020      	beq.n	8008d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d4c:	4b4f      	ldr	r3, [pc, #316]	; (8008e8c <HAL_RCC_OscConfig+0x2b0>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d52:	f7fd fc33 	bl	80065bc <HAL_GetTick>
 8008d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d58:	e008      	b.n	8008d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d5a:	f7fd fc2f 	bl	80065bc <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e19c      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6c:	4b46      	ldr	r3, [pc, #280]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d78:	4b43      	ldr	r3, [pc, #268]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	4940      	ldr	r1, [pc, #256]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	600b      	str	r3, [r1, #0]
 8008d8c:	e015      	b.n	8008dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d8e:	4b3f      	ldr	r3, [pc, #252]	; (8008e8c <HAL_RCC_OscConfig+0x2b0>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d94:	f7fd fc12 	bl	80065bc <HAL_GetTick>
 8008d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d9a:	e008      	b.n	8008dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d9c:	f7fd fc0e 	bl	80065bc <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e17b      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dae:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f0      	bne.n	8008d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d030      	beq.n	8008e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d016      	beq.n	8008dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dce:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <HAL_RCC_OscConfig+0x2b4>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd4:	f7fd fbf2 	bl	80065bc <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ddc:	f7fd fbee 	bl	80065bc <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e15b      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dee:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0f0      	beq.n	8008ddc <HAL_RCC_OscConfig+0x200>
 8008dfa:	e015      	b.n	8008e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dfc:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <HAL_RCC_OscConfig+0x2b4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e02:	f7fd fbdb 	bl	80065bc <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e0a:	f7fd fbd7 	bl	80065bc <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e144      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e1c:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f0      	bne.n	8008e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80a0 	beq.w	8008f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10f      	bne.n	8008e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e54:	6413      	str	r3, [r2, #64]	; 0x40
 8008e56:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <HAL_RCC_OscConfig+0x2ac>)
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <HAL_RCC_OscConfig+0x2b8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d121      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e72:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <HAL_RCC_OscConfig+0x2b8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a07      	ldr	r2, [pc, #28]	; (8008e94 <HAL_RCC_OscConfig+0x2b8>)
 8008e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e7e:	f7fd fb9d 	bl	80065bc <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e84:	e011      	b.n	8008eaa <HAL_RCC_OscConfig+0x2ce>
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	42470000 	.word	0x42470000
 8008e90:	42470e80 	.word	0x42470e80
 8008e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e98:	f7fd fb90 	bl	80065bc <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e0fd      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eaa:	4b81      	ldr	r3, [pc, #516]	; (80090b0 <HAL_RCC_OscConfig+0x4d4>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f0      	beq.n	8008e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d106      	bne.n	8008ecc <HAL_RCC_OscConfig+0x2f0>
 8008ebe:	4b7d      	ldr	r3, [pc, #500]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	4a7c      	ldr	r2, [pc, #496]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8008eca:	e01c      	b.n	8008f06 <HAL_RCC_OscConfig+0x32a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d10c      	bne.n	8008eee <HAL_RCC_OscConfig+0x312>
 8008ed4:	4b77      	ldr	r3, [pc, #476]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed8:	4a76      	ldr	r2, [pc, #472]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008eda:	f043 0304 	orr.w	r3, r3, #4
 8008ede:	6713      	str	r3, [r2, #112]	; 0x70
 8008ee0:	4b74      	ldr	r3, [pc, #464]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	4a73      	ldr	r2, [pc, #460]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6713      	str	r3, [r2, #112]	; 0x70
 8008eec:	e00b      	b.n	8008f06 <HAL_RCC_OscConfig+0x32a>
 8008eee:	4b71      	ldr	r3, [pc, #452]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	4a70      	ldr	r2, [pc, #448]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8008efa:	4b6e      	ldr	r3, [pc, #440]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	4a6d      	ldr	r2, [pc, #436]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f00:	f023 0304 	bic.w	r3, r3, #4
 8008f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d015      	beq.n	8008f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0e:	f7fd fb55 	bl	80065bc <HAL_GetTick>
 8008f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f14:	e00a      	b.n	8008f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f16:	f7fd fb51 	bl	80065bc <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d901      	bls.n	8008f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e0bc      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2c:	4b61      	ldr	r3, [pc, #388]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0ee      	beq.n	8008f16 <HAL_RCC_OscConfig+0x33a>
 8008f38:	e014      	b.n	8008f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f3a:	f7fd fb3f 	bl	80065bc <HAL_GetTick>
 8008f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f40:	e00a      	b.n	8008f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f42:	f7fd fb3b 	bl	80065bc <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e0a6      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f58:	4b56      	ldr	r3, [pc, #344]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1ee      	bne.n	8008f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d105      	bne.n	8008f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f6a:	4b52      	ldr	r3, [pc, #328]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	4a51      	ldr	r2, [pc, #324]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8092 	beq.w	80090a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f80:	4b4c      	ldr	r3, [pc, #304]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 030c 	and.w	r3, r3, #12
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d05c      	beq.n	8009046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d141      	bne.n	8009018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f94:	4b48      	ldr	r3, [pc, #288]	; (80090b8 <HAL_RCC_OscConfig+0x4dc>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f9a:	f7fd fb0f 	bl	80065bc <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa2:	f7fd fb0b 	bl	80065bc <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e078      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb4:	4b3f      	ldr	r3, [pc, #252]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f0      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	019b      	lsls	r3, r3, #6
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	041b      	lsls	r3, r3, #16
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	061b      	lsls	r3, r3, #24
 8008fe4:	4933      	ldr	r1, [pc, #204]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fea:	4b33      	ldr	r3, [pc, #204]	; (80090b8 <HAL_RCC_OscConfig+0x4dc>)
 8008fec:	2201      	movs	r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff0:	f7fd fae4 	bl	80065bc <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ff8:	f7fd fae0 	bl	80065bc <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e04d      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800900a:	4b2a      	ldr	r3, [pc, #168]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x41c>
 8009016:	e045      	b.n	80090a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009018:	4b27      	ldr	r3, [pc, #156]	; (80090b8 <HAL_RCC_OscConfig+0x4dc>)
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800901e:	f7fd facd 	bl	80065bc <HAL_GetTick>
 8009022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009024:	e008      	b.n	8009038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009026:	f7fd fac9 	bl	80065bc <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e036      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009038:	4b1e      	ldr	r3, [pc, #120]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f0      	bne.n	8009026 <HAL_RCC_OscConfig+0x44a>
 8009044:	e02e      	b.n	80090a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e029      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <HAL_RCC_OscConfig+0x4d8>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	429a      	cmp	r2, r3
 8009064:	d11c      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009070:	429a      	cmp	r2, r3
 8009072:	d115      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800907a:	4013      	ands	r3, r2
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009080:	4293      	cmp	r3, r2
 8009082:	d10d      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800908e:	429a      	cmp	r2, r3
 8009090:	d106      	bne.n	80090a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40007000 	.word	0x40007000
 80090b4:	40023800 	.word	0x40023800
 80090b8:	42470060 	.word	0x42470060

080090bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0cc      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090d0:	4b68      	ldr	r3, [pc, #416]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d90c      	bls.n	80090f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090de:	4b65      	ldr	r3, [pc, #404]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e6:	4b63      	ldr	r3, [pc, #396]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d001      	beq.n	80090f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0b8      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d020      	beq.n	8009146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009110:	4b59      	ldr	r3, [pc, #356]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4a58      	ldr	r2, [pc, #352]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800911a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009128:	4b53      	ldr	r3, [pc, #332]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4a52      	ldr	r2, [pc, #328]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009134:	4b50      	ldr	r3, [pc, #320]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	494d      	ldr	r1, [pc, #308]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009142:	4313      	orrs	r3, r2
 8009144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d044      	beq.n	80091dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d107      	bne.n	800916a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800915a:	4b47      	ldr	r3, [pc, #284]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d119      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e07f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d003      	beq.n	800917a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009176:	2b03      	cmp	r3, #3
 8009178:	d107      	bne.n	800918a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800917a:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d109      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e06f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800918a:	4b3b      	ldr	r3, [pc, #236]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e067      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800919a:	4b37      	ldr	r3, [pc, #220]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f023 0203 	bic.w	r2, r3, #3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	4934      	ldr	r1, [pc, #208]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091ac:	f7fd fa06 	bl	80065bc <HAL_GetTick>
 80091b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091b4:	f7fd fa02 	bl	80065bc <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e04f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ca:	4b2b      	ldr	r3, [pc, #172]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 020c 	and.w	r2, r3, #12
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	429a      	cmp	r2, r3
 80091da:	d1eb      	bne.n	80091b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d20c      	bcs.n	8009204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ea:	4b22      	ldr	r3, [pc, #136]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f2:	4b20      	ldr	r3, [pc, #128]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d001      	beq.n	8009204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e032      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	4916      	ldr	r1, [pc, #88]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800921e:	4313      	orrs	r3, r2
 8009220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800922e:	4b12      	ldr	r3, [pc, #72]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	490e      	ldr	r1, [pc, #56]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800923e:	4313      	orrs	r3, r2
 8009240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009242:	f000 f821 	bl	8009288 <HAL_RCC_GetSysClockFreq>
 8009246:	4601      	mov	r1, r0
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	091b      	lsrs	r3, r3, #4
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	4a0a      	ldr	r2, [pc, #40]	; (800927c <HAL_RCC_ClockConfig+0x1c0>)
 8009254:	5cd3      	ldrb	r3, [r2, r3]
 8009256:	fa21 f303 	lsr.w	r3, r1, r3
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <HAL_RCC_ClockConfig+0x1c4>)
 800925c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800925e:	4b09      	ldr	r3, [pc, #36]	; (8009284 <HAL_RCC_ClockConfig+0x1c8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f7fb ff32 	bl	80050cc <HAL_InitTick>

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40023c00 	.word	0x40023c00
 8009278:	40023800 	.word	0x40023800
 800927c:	08020978 	.word	0x08020978
 8009280:	2000005c 	.word	0x2000005c
 8009284:	20000060 	.word	0x20000060

08009288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	2300      	movs	r3, #0
 8009298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800929e:	4b63      	ldr	r3, [pc, #396]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d007      	beq.n	80092ba <HAL_RCC_GetSysClockFreq+0x32>
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d008      	beq.n	80092c0 <HAL_RCC_GetSysClockFreq+0x38>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f040 80b4 	bne.w	800941c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092b4:	4b5e      	ldr	r3, [pc, #376]	; (8009430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80092b6:	60bb      	str	r3, [r7, #8]
       break;
 80092b8:	e0b3      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092ba:	4b5e      	ldr	r3, [pc, #376]	; (8009434 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80092bc:	60bb      	str	r3, [r7, #8]
      break;
 80092be:	e0b0      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092c0:	4b5a      	ldr	r3, [pc, #360]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ca:	4b58      	ldr	r3, [pc, #352]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04a      	beq.n	800936c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092d6:	4b55      	ldr	r3, [pc, #340]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	f04f 0400 	mov.w	r4, #0
 80092e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	ea03 0501 	and.w	r5, r3, r1
 80092ec:	ea04 0602 	and.w	r6, r4, r2
 80092f0:	4629      	mov	r1, r5
 80092f2:	4632      	mov	r2, r6
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	f04f 0400 	mov.w	r4, #0
 80092fc:	0154      	lsls	r4, r2, #5
 80092fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009302:	014b      	lsls	r3, r1, #5
 8009304:	4619      	mov	r1, r3
 8009306:	4622      	mov	r2, r4
 8009308:	1b49      	subs	r1, r1, r5
 800930a:	eb62 0206 	sbc.w	r2, r2, r6
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	f04f 0400 	mov.w	r4, #0
 8009316:	0194      	lsls	r4, r2, #6
 8009318:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800931c:	018b      	lsls	r3, r1, #6
 800931e:	1a5b      	subs	r3, r3, r1
 8009320:	eb64 0402 	sbc.w	r4, r4, r2
 8009324:	f04f 0100 	mov.w	r1, #0
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	00e2      	lsls	r2, r4, #3
 800932e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009332:	00d9      	lsls	r1, r3, #3
 8009334:	460b      	mov	r3, r1
 8009336:	4614      	mov	r4, r2
 8009338:	195b      	adds	r3, r3, r5
 800933a:	eb44 0406 	adc.w	r4, r4, r6
 800933e:	f04f 0100 	mov.w	r1, #0
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	0262      	lsls	r2, r4, #9
 8009348:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800934c:	0259      	lsls	r1, r3, #9
 800934e:	460b      	mov	r3, r1
 8009350:	4614      	mov	r4, r2
 8009352:	4618      	mov	r0, r3
 8009354:	4621      	mov	r1, r4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f04f 0400 	mov.w	r4, #0
 800935c:	461a      	mov	r2, r3
 800935e:	4623      	mov	r3, r4
 8009360:	f7f7 fc52 	bl	8000c08 <__aeabi_uldivmod>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	e049      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	099b      	lsrs	r3, r3, #6
 8009372:	f04f 0400 	mov.w	r4, #0
 8009376:	f240 11ff 	movw	r1, #511	; 0x1ff
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	ea03 0501 	and.w	r5, r3, r1
 8009382:	ea04 0602 	and.w	r6, r4, r2
 8009386:	4629      	mov	r1, r5
 8009388:	4632      	mov	r2, r6
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	f04f 0400 	mov.w	r4, #0
 8009392:	0154      	lsls	r4, r2, #5
 8009394:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009398:	014b      	lsls	r3, r1, #5
 800939a:	4619      	mov	r1, r3
 800939c:	4622      	mov	r2, r4
 800939e:	1b49      	subs	r1, r1, r5
 80093a0:	eb62 0206 	sbc.w	r2, r2, r6
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	f04f 0400 	mov.w	r4, #0
 80093ac:	0194      	lsls	r4, r2, #6
 80093ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80093b2:	018b      	lsls	r3, r1, #6
 80093b4:	1a5b      	subs	r3, r3, r1
 80093b6:	eb64 0402 	sbc.w	r4, r4, r2
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	00e2      	lsls	r2, r4, #3
 80093c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80093c8:	00d9      	lsls	r1, r3, #3
 80093ca:	460b      	mov	r3, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	195b      	adds	r3, r3, r5
 80093d0:	eb44 0406 	adc.w	r4, r4, r6
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	02a2      	lsls	r2, r4, #10
 80093de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80093e2:	0299      	lsls	r1, r3, #10
 80093e4:	460b      	mov	r3, r1
 80093e6:	4614      	mov	r4, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	4621      	mov	r1, r4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 0400 	mov.w	r4, #0
 80093f2:	461a      	mov	r2, r3
 80093f4:	4623      	mov	r3, r4
 80093f6:	f7f7 fc07 	bl	8000c08 <__aeabi_uldivmod>
 80093fa:	4603      	mov	r3, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	3301      	adds	r3, #1
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	fbb2 f3f3 	udiv	r3, r2, r3
 8009418:	60bb      	str	r3, [r7, #8]
      break;
 800941a:	e002      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800941e:	60bb      	str	r3, [r7, #8]
      break;
 8009420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009422:	68bb      	ldr	r3, [r7, #8]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	40023800 	.word	0x40023800
 8009430:	00f42400 	.word	0x00f42400
 8009434:	007a1200 	.word	0x007a1200

08009438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <HAL_RCC_GetHCLKFreq+0x14>)
 800943e:	681b      	ldr	r3, [r3, #0]
}
 8009440:	4618      	mov	r0, r3
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	2000005c 	.word	0x2000005c

08009450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009454:	f7ff fff0 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009458:	4601      	mov	r1, r0
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	0a9b      	lsrs	r3, r3, #10
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	4a03      	ldr	r2, [pc, #12]	; (8009474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009466:	5cd3      	ldrb	r3, [r2, r3]
 8009468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40023800 	.word	0x40023800
 8009474:	08020988 	.word	0x08020988

08009478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800947c:	f7ff ffdc 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009480:	4601      	mov	r1, r0
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	0b5b      	lsrs	r3, r3, #13
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	4a03      	ldr	r2, [pc, #12]	; (800949c <HAL_RCC_GetPCLK2Freq+0x24>)
 800948e:	5cd3      	ldrb	r3, [r2, r3]
 8009490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009494:	4618      	mov	r0, r3
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40023800 	.word	0x40023800
 800949c:	08020988 	.word	0x08020988

080094a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220f      	movs	r2, #15
 80094ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094b0:	4b12      	ldr	r3, [pc, #72]	; (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0203 	and.w	r2, r3, #3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80094c8:	4b0c      	ldr	r3, [pc, #48]	; (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80094d4:	4b09      	ldr	r3, [pc, #36]	; (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	08db      	lsrs	r3, r3, #3
 80094da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <HAL_RCC_GetClockConfig+0x60>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 020f 	and.w	r2, r3, #15
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40023800 	.word	0x40023800
 8009500:	40023c00 	.word	0x40023c00

08009504 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d105      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009528:	2b00      	cmp	r3, #0
 800952a:	d035      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800952c:	4b62      	ldr	r3, [pc, #392]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009532:	f7fd f843 	bl	80065bc <HAL_GetTick>
 8009536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009538:	e008      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800953a:	f7fd f83f 	bl	80065bc <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e0b0      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800954c:	4b5b      	ldr	r3, [pc, #364]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f0      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	019a      	lsls	r2, r3, #6
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	071b      	lsls	r3, r3, #28
 8009564:	4955      	ldr	r1, [pc, #340]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800956c:	4b52      	ldr	r3, [pc, #328]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800956e:	2201      	movs	r2, #1
 8009570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009572:	f7fd f823 	bl	80065bc <HAL_GetTick>
 8009576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009578:	e008      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800957a:	f7fd f81f 	bl	80065bc <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e090      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800958c:	4b4b      	ldr	r3, [pc, #300]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0f0      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8083 	beq.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	4b44      	ldr	r3, [pc, #272]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	4a43      	ldr	r2, [pc, #268]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b4:	6413      	str	r3, [r2, #64]	; 0x40
 80095b6:	4b41      	ldr	r3, [pc, #260]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80095c2:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a3e      	ldr	r2, [pc, #248]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80095c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095ce:	f7fc fff5 	bl	80065bc <HAL_GetTick>
 80095d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80095d4:	e008      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80095d6:	f7fc fff1 	bl	80065bc <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e062      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80095e8:	4b35      	ldr	r3, [pc, #212]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80095f4:	4b31      	ldr	r3, [pc, #196]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d02f      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	429a      	cmp	r2, r3
 8009610:	d028      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009612:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800961c:	4b29      	ldr	r3, [pc, #164]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009622:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009628:	4a24      	ldr	r2, [pc, #144]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800962e:	4b23      	ldr	r3, [pc, #140]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d114      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800963a:	f7fc ffbf 	bl	80065bc <HAL_GetTick>
 800963e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009640:	e00a      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009642:	f7fc ffbb 	bl	80065bc <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009650:	4293      	cmp	r3, r2
 8009652:	d901      	bls.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e02a      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009658:	4b18      	ldr	r3, [pc, #96]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800965a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0ee      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800966c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009670:	d10d      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009672:	4b12      	ldr	r3, [pc, #72]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009686:	490d      	ldr	r1, [pc, #52]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009688:	4313      	orrs	r3, r2
 800968a:	608b      	str	r3, [r1, #8]
 800968c:	e005      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800968e:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009694:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009698:	6093      	str	r3, [r2, #8]
 800969a:	4b08      	ldr	r3, [pc, #32]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800969c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a6:	4905      	ldr	r1, [pc, #20]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	42470068 	.word	0x42470068
 80096bc:	40023800 	.word	0x40023800
 80096c0:	40007000 	.word	0x40007000
 80096c4:	42470e40 	.word	0x42470e40

080096c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e083      	b.n	80097e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7f5b      	ldrb	r3, [r3, #29]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7fa fe94 	bl	8004418 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	22ca      	movs	r2, #202	; 0xca
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2253      	movs	r2, #83	; 0x53
 8009704:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9fb 	bl	8009b02 <RTC_EnterInitMode>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	22ff      	movs	r2, #255	; 0xff
 8009718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2204      	movs	r2, #4
 800971e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e05e      	b.n	80097e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009736:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6899      	ldr	r1, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	68d2      	ldr	r2, [r2, #12]
 800975e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6919      	ldr	r1, [r3, #16]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	041a      	lsls	r2, r3, #16
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68da      	ldr	r2, [r3, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009782:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10e      	bne.n	80097b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f98d 	bl	8009ab2 <HAL_RTC_WaitForSynchro>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d008      	beq.n	80097b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	22ff      	movs	r2, #255	; 0xff
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2204      	movs	r2, #4
 80097aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e018      	b.n	80097e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	22ff      	movs	r2, #255	; 0xff
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80097e0:	2300      	movs	r3, #0
  }
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b087      	sub	sp, #28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	7f1b      	ldrb	r3, [r3, #28]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_RTC_SetTime+0x1c>
 8009802:	2302      	movs	r3, #2
 8009804:	e0aa      	b.n	800995c <HAL_RTC_SetTime+0x172>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2202      	movs	r2, #2
 8009810:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d126      	bne.n	8009866 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2200      	movs	r2, #0
 800982a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 f992 	bl	8009b5a <RTC_ByteToBcd2>
 8009836:	4603      	mov	r3, r0
 8009838:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	785b      	ldrb	r3, [r3, #1]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f98b 	bl	8009b5a <RTC_ByteToBcd2>
 8009844:	4603      	mov	r3, r0
 8009846:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009848:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	789b      	ldrb	r3, [r3, #2]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f983 	bl	8009b5a <RTC_ByteToBcd2>
 8009854:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009856:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	78db      	ldrb	r3, [r3, #3]
 800985e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009860:	4313      	orrs	r3, r2
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e018      	b.n	8009898 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d102      	bne.n	800987a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009886:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800988c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	78db      	ldrb	r3, [r3, #3]
 8009892:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	22ca      	movs	r2, #202	; 0xca
 800989e:	625a      	str	r2, [r3, #36]	; 0x24
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2253      	movs	r2, #83	; 0x53
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f92a 	bl	8009b02 <RTC_EnterInitMode>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	22ff      	movs	r2, #255	; 0xff
 80098ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2204      	movs	r2, #4
 80098c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e047      	b.n	800995c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80098d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80098da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6899      	ldr	r1, [r3, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009912:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d111      	bne.n	8009946 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f8c5 	bl	8009ab2 <HAL_RTC_WaitForSynchro>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	22ff      	movs	r2, #255	; 0xff
 8009934:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2204      	movs	r2, #4
 800993a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e00a      	b.n	800995c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800995a:	2300      	movs	r3, #0
  }
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	bd90      	pop	{r4, r7, pc}

08009964 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	7f1b      	ldrb	r3, [r3, #28]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_RTC_SetDate+0x1c>
 800997c:	2302      	movs	r3, #2
 800997e:	e094      	b.n	8009aaa <HAL_RTC_SetDate+0x146>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2202      	movs	r2, #2
 800998a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10e      	bne.n	80099b0 <HAL_RTC_SetDate+0x4c>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	f003 0310 	and.w	r3, r3, #16
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	f023 0310 	bic.w	r3, r3, #16
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	330a      	adds	r3, #10
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d11c      	bne.n	80099f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	78db      	ldrb	r3, [r3, #3]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f8cd 	bl	8009b5a <RTC_ByteToBcd2>
 80099c0:	4603      	mov	r3, r0
 80099c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 f8c6 	bl	8009b5a <RTC_ByteToBcd2>
 80099ce:	4603      	mov	r3, r0
 80099d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80099d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	789b      	ldrb	r3, [r3, #2]
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 f8be 	bl	8009b5a <RTC_ByteToBcd2>
 80099de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80099e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80099ea:	4313      	orrs	r3, r2
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	e00e      	b.n	8009a0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	78db      	ldrb	r3, [r3, #3]
 80099f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80099fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009a02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	22ca      	movs	r2, #202	; 0xca
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2253      	movs	r2, #83	; 0x53
 8009a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f86f 	bl	8009b02 <RTC_EnterInitMode>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	22ff      	movs	r2, #255	; 0xff
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2204      	movs	r2, #4
 8009a36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e033      	b.n	8009aaa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a60:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d111      	bne.n	8009a94 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f81e 	bl	8009ab2 <HAL_RTC_WaitForSynchro>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	22ff      	movs	r2, #255	; 0xff
 8009a82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2204      	movs	r2, #4
 8009a88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e00a      	b.n	8009aaa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	22ff      	movs	r2, #255	; 0xff
 8009a9a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
  }
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd90      	pop	{r4, r7, pc}

08009ab2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009acc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ace:	f7fc fd75 	bl	80065bc <HAL_GetTick>
 8009ad2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ad4:	e009      	b.n	8009aea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ad6:	f7fc fd71 	bl	80065bc <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ae4:	d901      	bls.n	8009aea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e007      	b.n	8009afa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0ee      	beq.n	8009ad6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d119      	bne.n	8009b50 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b26:	f7fc fd49 	bl	80065bc <HAL_GetTick>
 8009b2a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009b2c:	e009      	b.n	8009b42 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b2e:	f7fc fd45 	bl	80065bc <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b3c:	d901      	bls.n	8009b42 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e007      	b.n	8009b52 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0ee      	beq.n	8009b2e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	4603      	mov	r3, r0
 8009b62:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009b68:	e005      	b.n	8009b76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	3b0a      	subs	r3, #10
 8009b74:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	d8f6      	bhi.n	8009b6a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	b2db      	uxtb	r3, r3
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e056      	b.n	8009c56 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fa fca6 	bl	8004514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	ea42 0103 	orr.w	r1, r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	f003 0104 	and.w	r1, r3, #4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_SPI_TransmitReceive_IT+0x20>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e075      	b.n	8009d6c <HAL_SPI_TransmitReceive_IT+0x10c>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c96:	7dbb      	ldrb	r3, [r7, #22]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d00d      	beq.n	8009cb8 <HAL_SPI_TransmitReceive_IT+0x58>
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ca2:	d106      	bne.n	8009cb2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <HAL_SPI_TransmitReceive_IT+0x52>
 8009cac:	7dbb      	ldrb	r3, [r7, #22]
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d002      	beq.n	8009cb8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009cb6:	e054      	b.n	8009d62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_SPI_TransmitReceive_IT+0x6a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_SPI_TransmitReceive_IT+0x6a>
 8009cc4:	887b      	ldrh	r3, [r7, #2]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009cce:	e048      	b.n	8009d62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d003      	beq.n	8009ce4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2205      	movs	r2, #5
 8009ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	887a      	ldrh	r2, [r7, #2]
 8009cf4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	887a      	ldrh	r2, [r7, #2]
 8009cfa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	887a      	ldrh	r2, [r7, #2]
 8009d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4a17      	ldr	r2, [pc, #92]	; (8009d78 <HAL_SPI_TransmitReceive_IT+0x118>)
 8009d1a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4a17      	ldr	r2, [pc, #92]	; (8009d7c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8009d20:	645a      	str	r2, [r3, #68]	; 0x44
 8009d22:	e005      	b.n	8009d30 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4a16      	ldr	r2, [pc, #88]	; (8009d80 <HAL_SPI_TransmitReceive_IT+0x120>)
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a15      	ldr	r2, [pc, #84]	; (8009d84 <HAL_SPI_TransmitReceive_IT+0x124>)
 8009d2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009d3e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4a:	2b40      	cmp	r3, #64	; 0x40
 8009d4c:	d008      	beq.n	8009d60 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	e000      	b.n	8009d62 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8009d60:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	0800a09d 	.word	0x0800a09d
 8009d7c:	0800a0fd 	.word	0x0800a0fd
 8009d80:	08009fd9 	.word	0x08009fd9
 8009d84:	0800a03d 	.word	0x0800a03d

08009d88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	099b      	lsrs	r3, r3, #6
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10f      	bne.n	8009dcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	099b      	lsrs	r3, r3, #6
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	4798      	blx	r3
    return;
 8009dca:	e0d8      	b.n	8009f7e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	085b      	lsrs	r3, r3, #1
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00a      	beq.n	8009dee <HAL_SPI_IRQHandler+0x66>
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	09db      	lsrs	r3, r3, #7
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
    return;
 8009dec:	e0c7      	b.n	8009f7e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10c      	bne.n	8009e14 <HAL_SPI_IRQHandler+0x8c>
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	099b      	lsrs	r3, r3, #6
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	0a1b      	lsrs	r3, r3, #8
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 80b5 	beq.w	8009f7e <HAL_SPI_IRQHandler+0x1f6>
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	095b      	lsrs	r3, r3, #5
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80ae 	beq.w	8009f7e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	099b      	lsrs	r3, r3, #6
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d023      	beq.n	8009e76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d011      	beq.n	8009e5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	f043 0204 	orr.w	r2, r3, #4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	e00b      	b.n	8009e76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	613b      	str	r3, [r7, #16]
 8009e72:	693b      	ldr	r3, [r7, #16]
        return;
 8009e74:	e083      	b.n	8009f7e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	095b      	lsrs	r3, r3, #5
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d014      	beq.n	8009eac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e86:	f043 0201 	orr.w	r2, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00c      	beq.n	8009ed2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ebc:	f043 0208 	orr.w	r2, r3, #8
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60bb      	str	r3, [r7, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d050      	beq.n	8009f7c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ee8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <HAL_SPI_IRQHandler+0x17e>
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d034      	beq.n	8009f70 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f022 0203 	bic.w	r2, r2, #3
 8009f14:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d011      	beq.n	8009f42 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f22:	4a18      	ldr	r2, [pc, #96]	; (8009f84 <HAL_SPI_IRQHandler+0x1fc>)
 8009f24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fd f946 	bl	80071bc <HAL_DMA_Abort_IT>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4e:	4a0d      	ldr	r2, [pc, #52]	; (8009f84 <HAL_SPI_IRQHandler+0x1fc>)
 8009f50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fd f930 	bl	80071bc <HAL_DMA_Abort_IT>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009f6e:	e003      	b.n	8009f78 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f813 	bl	8009f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009f76:	e000      	b.n	8009f7a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009f78:	bf00      	nop
    return;
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
  }
}
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	08009fb1 	.word	0x08009fb1

08009f88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff ffe6 	bl	8009f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f103 020c 	add.w	r2, r3, #12
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a000:	b29b      	uxth	r3, r3
 800a002:	3b01      	subs	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00e:	b29b      	uxth	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10f      	bne.n	800a034 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a022:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d102      	bne.n	800a034 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f940 	bl	800a2b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	330c      	adds	r3, #12
 800a04e:	7812      	ldrb	r2, [r2, #0]
 800a050:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a060:	b29b      	uxth	r3, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a06e:	b29b      	uxth	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10f      	bne.n	800a094 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a082:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f910 	bl	800a2b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	b292      	uxth	r2, r2
 800a0b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	1c9a      	adds	r2, r3, #2
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10f      	bne.n	800a0f4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d102      	bne.n	800a0f4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f8e0 	bl	800a2b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a108:	881a      	ldrh	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	1c9a      	adds	r2, r3, #2
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a11e:	b29b      	uxth	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a140:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a146:	b29b      	uxth	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f8b1 	bl	800a2b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a16a:	e04c      	b.n	800a206 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a172:	d048      	beq.n	800a206 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a174:	f7fc fa22 	bl	80065bc <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d902      	bls.n	800a18a <SPI_WaitFlagStateUntilTimeout+0x30>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d13d      	bne.n	800a206 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a2:	d111      	bne.n	800a1c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ac:	d004      	beq.n	800a1b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1b6:	d107      	bne.n	800a1c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1d0:	d10f      	bne.n	800a1f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e00f      	b.n	800a226 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4013      	ands	r3, r2
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	bf0c      	ite	eq
 800a216:	2301      	moveq	r3, #1
 800a218:	2300      	movne	r3, #0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	429a      	cmp	r2, r3
 800a222:	d1a3      	bne.n	800a16c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <SPI_EndRxTxTransaction+0x7c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1b      	ldr	r2, [pc, #108]	; (800a2b0 <SPI_EndRxTxTransaction+0x80>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	0d5b      	lsrs	r3, r3, #21
 800a248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a24c:	fb02 f303 	mul.w	r3, r2, r3
 800a250:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a25a:	d112      	bne.n	800a282 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2200      	movs	r2, #0
 800a264:	2180      	movs	r1, #128	; 0x80
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff ff77 	bl	800a15a <SPI_WaitFlagStateUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d016      	beq.n	800a2a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a276:	f043 0220 	orr.w	r2, r3, #32
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e00f      	b.n	800a2a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00a      	beq.n	800a29e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a298:	2b80      	cmp	r3, #128	; 0x80
 800a29a:	d0f2      	beq.n	800a282 <SPI_EndRxTxTransaction+0x52>
 800a29c:	e000      	b.n	800a2a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a29e:	bf00      	nop
  }

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000005c 	.word	0x2000005c
 800a2b0:	165e9f81 	.word	0x165e9f81

0800a2b4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a2bc:	4b35      	ldr	r3, [pc, #212]	; (800a394 <SPI_CloseRxTx_ISR+0xe0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a35      	ldr	r2, [pc, #212]	; (800a398 <SPI_CloseRxTx_ISR+0xe4>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	0a5b      	lsrs	r3, r3, #9
 800a2c8:	2264      	movs	r2, #100	; 0x64
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
 800a2ce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a2d0:	f7fc f974 	bl	80065bc <HAL_GetTick>
 800a2d4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0220 	bic.w	r2, r2, #32
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f0:	f043 0220 	orr.w	r2, r3, #32
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a2f8:	e009      	b.n	800a30e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0eb      	beq.n	800a2e6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	2164      	movs	r1, #100	; 0x64
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff ff8c 	bl	800a230 <SPI_EndRxTxTransaction>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a322:	f043 0220 	orr.w	r2, r3, #32
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d115      	bne.n	800a37c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d107      	bne.n	800a36c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fe0f 	bl	8009f88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a36a:	e00e      	b.n	800a38a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7f9 ff47 	bl	8004208 <HAL_SPI_TxRxCpltCallback>
}
 800a37a:	e006      	b.n	800a38a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff fe09 	bl	8009f9c <HAL_SPI_ErrorCallback>
}
 800a38a:	bf00      	nop
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	2000005c 	.word	0x2000005c
 800a398:	057619f1 	.word	0x057619f1

0800a39c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e01d      	b.n	800a3ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fb fe80 	bl	80060c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f000 fcc0 	bl	800ad60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68da      	ldr	r2, [r3, #12]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f042 0201 	orr.w	r2, r2, #1
 800a408:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b06      	cmp	r3, #6
 800a41a:	d007      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0201 	orr.w	r2, r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e01d      	b.n	800a488 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7fb fe0f 	bl	8006084 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2202      	movs	r2, #2
 800a46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3304      	adds	r3, #4
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f000 fc71 	bl	800ad60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 feac 	bl	800b200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a15      	ldr	r2, [pc, #84]	; (800a504 <HAL_TIM_OC_Start+0x74>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d004      	beq.n	800a4bc <HAL_TIM_OC_Start+0x2c>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a14      	ldr	r2, [pc, #80]	; (800a508 <HAL_TIM_OC_Start+0x78>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d101      	bne.n	800a4c0 <HAL_TIM_OC_Start+0x30>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e000      	b.n	800a4c2 <HAL_TIM_OC_Start+0x32>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b06      	cmp	r3, #6
 800a4e6:	d007      	beq.n	800a4f8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f042 0201 	orr.w	r2, r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40010000 	.word	0x40010000
 800a508:	40010400 	.word	0x40010400

0800a50c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e01d      	b.n	800a55a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7fb fca6 	bl	8005e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f000 fc08 	bl	800ad60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d101      	bne.n	800a582 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800a57e:	2302      	movs	r3, #2
 800a580:	e0f3      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d10b      	bne.n	800a5a6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d104      	bne.n	800a59e <HAL_TIM_PWM_Start_DMA+0x3a>
 800a594:	887b      	ldrh	r3, [r7, #2]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e0e5      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2b0c      	cmp	r3, #12
 800a5aa:	f200 80ad 	bhi.w	800a708 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_TIM_PWM_Start_DMA+0x50>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5e9 	.word	0x0800a5e9
 800a5b8:	0800a709 	.word	0x0800a709
 800a5bc:	0800a709 	.word	0x0800a709
 800a5c0:	0800a709 	.word	0x0800a709
 800a5c4:	0800a631 	.word	0x0800a631
 800a5c8:	0800a709 	.word	0x0800a709
 800a5cc:	0800a709 	.word	0x0800a709
 800a5d0:	0800a709 	.word	0x0800a709
 800a5d4:	0800a679 	.word	0x0800a679
 800a5d8:	0800a709 	.word	0x0800a709
 800a5dc:	0800a709 	.word	0x0800a709
 800a5e0:	0800a709 	.word	0x0800a709
 800a5e4:	0800a6c1 	.word	0x0800a6c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	4a61      	ldr	r2, [pc, #388]	; (800a774 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a5ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	4a60      	ldr	r2, [pc, #384]	; (800a778 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a5f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	4a5f      	ldr	r2, [pc, #380]	; (800a77c <HAL_TIM_PWM_Start_DMA+0x218>)
 800a5fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3334      	adds	r3, #52	; 0x34
 800a60c:	461a      	mov	r2, r3
 800a60e:	887b      	ldrh	r3, [r7, #2]
 800a610:	f7fc fd7c 	bl	800710c <HAL_DMA_Start_IT>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e0a5      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68da      	ldr	r2, [r3, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a62c:	60da      	str	r2, [r3, #12]
      break;
 800a62e:	e06c      	b.n	800a70a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	4a4f      	ldr	r2, [pc, #316]	; (800a774 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a636:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63c:	4a4e      	ldr	r2, [pc, #312]	; (800a778 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	4a4d      	ldr	r2, [pc, #308]	; (800a77c <HAL_TIM_PWM_Start_DMA+0x218>)
 800a646:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3338      	adds	r3, #56	; 0x38
 800a654:	461a      	mov	r2, r3
 800a656:	887b      	ldrh	r3, [r7, #2]
 800a658:	f7fc fd58 	bl	800710c <HAL_DMA_Start_IT>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e081      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a674:	60da      	str	r2, [r3, #12]
      break;
 800a676:	e048      	b.n	800a70a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	4a3d      	ldr	r2, [pc, #244]	; (800a774 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a67e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a3c      	ldr	r2, [pc, #240]	; (800a778 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	4a3b      	ldr	r2, [pc, #236]	; (800a77c <HAL_TIM_PWM_Start_DMA+0x218>)
 800a68e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	333c      	adds	r3, #60	; 0x3c
 800a69c:	461a      	mov	r2, r3
 800a69e:	887b      	ldrh	r3, [r7, #2]
 800a6a0:	f7fc fd34 	bl	800710c <HAL_DMA_Start_IT>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e05d      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6bc:	60da      	str	r2, [r3, #12]
      break;
 800a6be:	e024      	b.n	800a70a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c4:	4a2b      	ldr	r2, [pc, #172]	; (800a774 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	4a2a      	ldr	r2, [pc, #168]	; (800a778 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a6ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	4a29      	ldr	r2, [pc, #164]	; (800a77c <HAL_TIM_PWM_Start_DMA+0x218>)
 800a6d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3340      	adds	r3, #64	; 0x40
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	887b      	ldrh	r3, [r7, #2]
 800a6e8:	f7fc fd10 	bl	800710c <HAL_DMA_Start_IT>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e039      	b.n	800a76a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a704:	60da      	str	r2, [r3, #12]
      break;
 800a706:	e000      	b.n	800a70a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800a708:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2201      	movs	r2, #1
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fd74 	bl	800b200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a18      	ldr	r2, [pc, #96]	; (800a780 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d004      	beq.n	800a72c <HAL_TIM_PWM_Start_DMA+0x1c8>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a17      	ldr	r2, [pc, #92]	; (800a784 <HAL_TIM_PWM_Start_DMA+0x220>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d101      	bne.n	800a730 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <HAL_TIM_PWM_Start_DMA+0x1ce>
 800a730:	2300      	movs	r3, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b06      	cmp	r3, #6
 800a756:	d007      	beq.n	800a768 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f042 0201 	orr.w	r2, r2, #1
 800a766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	0800ac81 	.word	0x0800ac81
 800a778:	0800acf1 	.word	0x0800acf1
 800a77c:	0800ac5d 	.word	0x0800ac5d
 800a780:	40010000 	.word	0x40010000
 800a784:	40010400 	.word	0x40010400

0800a788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d122      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0202 	mvn.w	r2, #2
 800a7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa14 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa06 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa17 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d122      	bne.n	800a838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d11b      	bne.n	800a838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0204 	mvn.w	r2, #4
 800a808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9ea 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800a824:	e005      	b.n	800a832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f9dc 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f9ed 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b08      	cmp	r3, #8
 800a844:	d122      	bne.n	800a88c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0308 	and.w	r3, r3, #8
 800a850:	2b08      	cmp	r3, #8
 800a852:	d11b      	bne.n	800a88c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0208 	mvn.w	r2, #8
 800a85c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2204      	movs	r2, #4
 800a862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d003      	beq.n	800a87a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9c0 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800a878:	e005      	b.n	800a886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f9b2 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f9c3 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0310 	and.w	r3, r3, #16
 800a896:	2b10      	cmp	r3, #16
 800a898:	d122      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f003 0310 	and.w	r3, r3, #16
 800a8a4:	2b10      	cmp	r3, #16
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0210 	mvn.w	r2, #16
 800a8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f996 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800a8cc:	e005      	b.n	800a8da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f988 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f999 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d10e      	bne.n	800a90c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d107      	bne.n	800a90c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0201 	mvn.w	r2, #1
 800a904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7f9 fce4 	bl	80042d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a916:	2b80      	cmp	r3, #128	; 0x80
 800a918:	d10e      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a924:	2b80      	cmp	r3, #128	; 0x80
 800a926:	d107      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fd10 	bl	800b358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d10e      	bne.n	800a964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a950:	2b40      	cmp	r3, #64	; 0x40
 800a952:	d107      	bne.n	800a964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a95c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f968 	bl	800ac34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b20      	cmp	r3, #32
 800a970:	d10e      	bne.n	800a990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d107      	bne.n	800a990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0220 	mvn.w	r2, #32
 800a988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fcda 	bl	800b344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e04e      	b.n	800aa50 <HAL_TIM_OC_ConfigChannel+0xb8>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b0c      	cmp	r3, #12
 800a9c6:	d839      	bhi.n	800aa3c <HAL_TIM_OC_ConfigChannel+0xa4>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800aa05 	.word	0x0800aa05
 800a9d4:	0800aa3d 	.word	0x0800aa3d
 800a9d8:	0800aa3d 	.word	0x0800aa3d
 800a9dc:	0800aa3d 	.word	0x0800aa3d
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa3d 	.word	0x0800aa3d
 800a9e8:	0800aa3d 	.word	0x0800aa3d
 800a9ec:	0800aa3d 	.word	0x0800aa3d
 800a9f0:	0800aa21 	.word	0x0800aa21
 800a9f4:	0800aa3d 	.word	0x0800aa3d
 800a9f8:	0800aa3d 	.word	0x0800aa3d
 800a9fc:	0800aa3d 	.word	0x0800aa3d
 800aa00:	0800aa2f 	.word	0x0800aa2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fa48 	bl	800aea0 <TIM_OC1_SetConfig>
      break;
 800aa10:	e015      	b.n	800aa3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fab1 	bl	800af80 <TIM_OC2_SetConfig>
      break;
 800aa1e:	e00e      	b.n	800aa3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fb20 	bl	800b06c <TIM_OC3_SetConfig>
      break;
 800aa2c:	e007      	b.n	800aa3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fb8d 	bl	800b154 <TIM_OC4_SetConfig>
      break;
 800aa3a:	e000      	b.n	800aa3e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800aa3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d101      	bne.n	800aa72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e0b4      	b.n	800abdc <HAL_TIM_PWM_ConfigChannel+0x184>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b0c      	cmp	r3, #12
 800aa86:	f200 809f 	bhi.w	800abc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aac5 	.word	0x0800aac5
 800aa94:	0800abc9 	.word	0x0800abc9
 800aa98:	0800abc9 	.word	0x0800abc9
 800aa9c:	0800abc9 	.word	0x0800abc9
 800aaa0:	0800ab05 	.word	0x0800ab05
 800aaa4:	0800abc9 	.word	0x0800abc9
 800aaa8:	0800abc9 	.word	0x0800abc9
 800aaac:	0800abc9 	.word	0x0800abc9
 800aab0:	0800ab47 	.word	0x0800ab47
 800aab4:	0800abc9 	.word	0x0800abc9
 800aab8:	0800abc9 	.word	0x0800abc9
 800aabc:	0800abc9 	.word	0x0800abc9
 800aac0:	0800ab87 	.word	0x0800ab87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 f9e8 	bl	800aea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0208 	orr.w	r2, r2, #8
 800aade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f022 0204 	bic.w	r2, r2, #4
 800aaee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6999      	ldr	r1, [r3, #24]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	691a      	ldr	r2, [r3, #16]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	619a      	str	r2, [r3, #24]
      break;
 800ab02:	e062      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fa38 	bl	800af80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699a      	ldr	r2, [r3, #24]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6999      	ldr	r1, [r3, #24]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	021a      	lsls	r2, r3, #8
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	619a      	str	r2, [r3, #24]
      break;
 800ab44:	e041      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fa8d 	bl	800b06c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69da      	ldr	r2, [r3, #28]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f042 0208 	orr.w	r2, r2, #8
 800ab60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69da      	ldr	r2, [r3, #28]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0204 	bic.w	r2, r2, #4
 800ab70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69d9      	ldr	r1, [r3, #28]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	430a      	orrs	r2, r1
 800ab82:	61da      	str	r2, [r3, #28]
      break;
 800ab84:	e021      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 fae1 	bl	800b154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69da      	ldr	r2, [r3, #28]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69da      	ldr	r2, [r3, #28]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69d9      	ldr	r1, [r3, #28]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	021a      	lsls	r2, r3, #8
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	61da      	str	r2, [r3, #28]
      break;
 800abc6:	e000      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800abc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff ffe8 	bl	800ac48 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d103      	bne.n	800aca8 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	771a      	strb	r2, [r3, #28]
 800aca6:	e019      	b.n	800acdc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d103      	bne.n	800acba <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2202      	movs	r2, #2
 800acb6:	771a      	strb	r2, [r3, #28]
 800acb8:	e010      	b.n	800acdc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d103      	bne.n	800accc <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2204      	movs	r2, #4
 800acc8:	771a      	strb	r2, [r3, #28]
 800acca:	e007      	b.n	800acdc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d102      	bne.n	800acdc <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2208      	movs	r2, #8
 800acda:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ff95 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	771a      	strb	r2, [r3, #28]
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d103      	bne.n	800ad18 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2201      	movs	r2, #1
 800ad14:	771a      	strb	r2, [r3, #28]
 800ad16:	e019      	b.n	800ad4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d103      	bne.n	800ad2a <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2202      	movs	r2, #2
 800ad26:	771a      	strb	r2, [r3, #28]
 800ad28:	e010      	b.n	800ad4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d103      	bne.n	800ad3c <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2204      	movs	r2, #4
 800ad38:	771a      	strb	r2, [r3, #28]
 800ad3a:	e007      	b.n	800ad4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d102      	bne.n	800ad4c <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2208      	movs	r2, #8
 800ad4a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff ff67 	bl	800ac20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	771a      	strb	r2, [r3, #28]
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a40      	ldr	r2, [pc, #256]	; (800ae74 <TIM_Base_SetConfig+0x114>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d013      	beq.n	800ada0 <TIM_Base_SetConfig+0x40>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad7e:	d00f      	beq.n	800ada0 <TIM_Base_SetConfig+0x40>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a3d      	ldr	r2, [pc, #244]	; (800ae78 <TIM_Base_SetConfig+0x118>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00b      	beq.n	800ada0 <TIM_Base_SetConfig+0x40>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a3c      	ldr	r2, [pc, #240]	; (800ae7c <TIM_Base_SetConfig+0x11c>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d007      	beq.n	800ada0 <TIM_Base_SetConfig+0x40>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a3b      	ldr	r2, [pc, #236]	; (800ae80 <TIM_Base_SetConfig+0x120>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d003      	beq.n	800ada0 <TIM_Base_SetConfig+0x40>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a3a      	ldr	r2, [pc, #232]	; (800ae84 <TIM_Base_SetConfig+0x124>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d108      	bne.n	800adb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a2f      	ldr	r2, [pc, #188]	; (800ae74 <TIM_Base_SetConfig+0x114>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02b      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc0:	d027      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a2c      	ldr	r2, [pc, #176]	; (800ae78 <TIM_Base_SetConfig+0x118>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d023      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a2b      	ldr	r2, [pc, #172]	; (800ae7c <TIM_Base_SetConfig+0x11c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d01f      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a2a      	ldr	r2, [pc, #168]	; (800ae80 <TIM_Base_SetConfig+0x120>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d01b      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a29      	ldr	r2, [pc, #164]	; (800ae84 <TIM_Base_SetConfig+0x124>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d017      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a28      	ldr	r2, [pc, #160]	; (800ae88 <TIM_Base_SetConfig+0x128>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d013      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a27      	ldr	r2, [pc, #156]	; (800ae8c <TIM_Base_SetConfig+0x12c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d00f      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a26      	ldr	r2, [pc, #152]	; (800ae90 <TIM_Base_SetConfig+0x130>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00b      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a25      	ldr	r2, [pc, #148]	; (800ae94 <TIM_Base_SetConfig+0x134>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d007      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a24      	ldr	r2, [pc, #144]	; (800ae98 <TIM_Base_SetConfig+0x138>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d003      	beq.n	800ae12 <TIM_Base_SetConfig+0xb2>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a23      	ldr	r2, [pc, #140]	; (800ae9c <TIM_Base_SetConfig+0x13c>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d108      	bne.n	800ae24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a0a      	ldr	r2, [pc, #40]	; (800ae74 <TIM_Base_SetConfig+0x114>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d003      	beq.n	800ae58 <TIM_Base_SetConfig+0xf8>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a0c      	ldr	r2, [pc, #48]	; (800ae84 <TIM_Base_SetConfig+0x124>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d103      	bne.n	800ae60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	691a      	ldr	r2, [r3, #16]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	615a      	str	r2, [r3, #20]
}
 800ae66:	bf00      	nop
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40000400 	.word	0x40000400
 800ae7c:	40000800 	.word	0x40000800
 800ae80:	40000c00 	.word	0x40000c00
 800ae84:	40010400 	.word	0x40010400
 800ae88:	40014000 	.word	0x40014000
 800ae8c:	40014400 	.word	0x40014400
 800ae90:	40014800 	.word	0x40014800
 800ae94:	40001800 	.word	0x40001800
 800ae98:	40001c00 	.word	0x40001c00
 800ae9c:	40002000 	.word	0x40002000

0800aea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f023 0302 	bic.w	r3, r3, #2
 800aee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a20      	ldr	r2, [pc, #128]	; (800af78 <TIM_OC1_SetConfig+0xd8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC1_SetConfig+0x64>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <TIM_OC1_SetConfig+0xdc>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d10c      	bne.n	800af1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f023 0308 	bic.w	r3, r3, #8
 800af0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f023 0304 	bic.w	r3, r3, #4
 800af1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a15      	ldr	r2, [pc, #84]	; (800af78 <TIM_OC1_SetConfig+0xd8>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d003      	beq.n	800af2e <TIM_OC1_SetConfig+0x8e>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a14      	ldr	r2, [pc, #80]	; (800af7c <TIM_OC1_SetConfig+0xdc>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d111      	bne.n	800af52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	4313      	orrs	r3, r2
 800af46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	621a      	str	r2, [r3, #32]
}
 800af6c:	bf00      	nop
 800af6e:	371c      	adds	r7, #28
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	40010000 	.word	0x40010000
 800af7c:	40010400 	.word	0x40010400

0800af80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f023 0210 	bic.w	r2, r3, #16
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f023 0320 	bic.w	r3, r3, #32
 800afca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a22      	ldr	r2, [pc, #136]	; (800b064 <TIM_OC2_SetConfig+0xe4>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_OC2_SetConfig+0x68>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a21      	ldr	r2, [pc, #132]	; (800b068 <TIM_OC2_SetConfig+0xe8>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d10d      	bne.n	800b004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	011b      	lsls	r3, r3, #4
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	4313      	orrs	r3, r2
 800affa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a17      	ldr	r2, [pc, #92]	; (800b064 <TIM_OC2_SetConfig+0xe4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d003      	beq.n	800b014 <TIM_OC2_SetConfig+0x94>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <TIM_OC2_SetConfig+0xe8>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d113      	bne.n	800b03c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b01a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	4313      	orrs	r3, r2
 800b03a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	621a      	str	r2, [r3, #32]
}
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40010000 	.word	0x40010000
 800b068:	40010400 	.word	0x40010400

0800b06c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a21      	ldr	r2, [pc, #132]	; (800b14c <TIM_OC3_SetConfig+0xe0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d003      	beq.n	800b0d2 <TIM_OC3_SetConfig+0x66>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a20      	ldr	r2, [pc, #128]	; (800b150 <TIM_OC3_SetConfig+0xe4>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d10d      	bne.n	800b0ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a16      	ldr	r2, [pc, #88]	; (800b14c <TIM_OC3_SetConfig+0xe0>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d003      	beq.n	800b0fe <TIM_OC3_SetConfig+0x92>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a15      	ldr	r2, [pc, #84]	; (800b150 <TIM_OC3_SetConfig+0xe4>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d113      	bne.n	800b126 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	621a      	str	r2, [r3, #32]
}
 800b140:	bf00      	nop
 800b142:	371c      	adds	r7, #28
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	40010000 	.word	0x40010000
 800b150:	40010400 	.word	0x40010400

0800b154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4313      	orrs	r3, r2
 800b196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b19e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	031b      	lsls	r3, r3, #12
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a12      	ldr	r2, [pc, #72]	; (800b1f8 <TIM_OC4_SetConfig+0xa4>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <TIM_OC4_SetConfig+0x68>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a11      	ldr	r2, [pc, #68]	; (800b1fc <TIM_OC4_SetConfig+0xa8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d109      	bne.n	800b1d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	019b      	lsls	r3, r3, #6
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	621a      	str	r2, [r3, #32]
}
 800b1ea:	bf00      	nop
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40010000 	.word	0x40010000
 800b1fc:	40010400 	.word	0x40010400

0800b200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f003 031f 	and.w	r3, r3, #31
 800b212:	2201      	movs	r2, #1
 800b214:	fa02 f303 	lsl.w	r3, r2, r3
 800b218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a1a      	ldr	r2, [r3, #32]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6a1a      	ldr	r2, [r3, #32]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f003 031f 	and.w	r3, r3, #31
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	fa01 f303 	lsl.w	r3, r1, r3
 800b238:	431a      	orrs	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d101      	bne.n	800b264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b260:	2302      	movs	r3, #2
 800b262:	e05a      	b.n	800b31a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a21      	ldr	r2, [pc, #132]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d022      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b0:	d01d      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a1d      	ldr	r2, [pc, #116]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d018      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d013      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d00e      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a18      	ldr	r2, [pc, #96]	; (800b338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d009      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a17      	ldr	r2, [pc, #92]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d004      	beq.n	800b2ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a15      	ldr	r2, [pc, #84]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d10c      	bne.n	800b308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	40010000 	.word	0x40010000
 800b32c:	40000400 	.word	0x40000400
 800b330:	40000800 	.word	0x40000800
 800b334:	40000c00 	.word	0x40000c00
 800b338:	40010400 	.word	0x40010400
 800b33c:	40014000 	.word	0x40014000
 800b340:	40001800 	.word	0x40001800

0800b344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e03f      	b.n	800b3fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fa ff78 	bl	8006288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2224      	movs	r2, #36	; 0x24
 800b39c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f90b 	bl	800b5cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	695a      	ldr	r2, [r3, #20]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b088      	sub	sp, #32
 800b40a:	af02      	add	r7, sp, #8
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b20      	cmp	r3, #32
 800b424:	f040 8083 	bne.w	800b52e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <HAL_UART_Transmit+0x2e>
 800b42e:	88fb      	ldrh	r3, [r7, #6]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e07b      	b.n	800b530 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d101      	bne.n	800b446 <HAL_UART_Transmit+0x40>
 800b442:	2302      	movs	r3, #2
 800b444:	e074      	b.n	800b530 <HAL_UART_Transmit+0x12a>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2221      	movs	r2, #33	; 0x21
 800b458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b45c:	f7fb f8ae 	bl	80065bc <HAL_GetTick>
 800b460:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	88fa      	ldrh	r2, [r7, #6]
 800b466:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	88fa      	ldrh	r2, [r7, #6]
 800b46c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b476:	e042      	b.n	800b4fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b48e:	d122      	bne.n	800b4d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2200      	movs	r2, #0
 800b498:	2180      	movs	r1, #128	; 0x80
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 f84c 	bl	800b538 <UART_WaitOnFlagUntilTimeout>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e042      	b.n	800b530 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d103      	bne.n	800b4ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	60bb      	str	r3, [r7, #8]
 800b4cc:	e017      	b.n	800b4fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60bb      	str	r3, [r7, #8]
 800b4d4:	e013      	b.n	800b4fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2180      	movs	r1, #128	; 0x80
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f829 	bl	800b538 <UART_WaitOnFlagUntilTimeout>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e01f      	b.n	800b530 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	60ba      	str	r2, [r7, #8]
 800b4f6:	781a      	ldrb	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b502:	b29b      	uxth	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1b7      	bne.n	800b478 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2200      	movs	r2, #0
 800b510:	2140      	movs	r1, #64	; 0x40
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f810 	bl	800b538 <UART_WaitOnFlagUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e006      	b.n	800b530 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e000      	b.n	800b530 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b52e:	2302      	movs	r3, #2
  }
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b548:	e02c      	b.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b550:	d028      	beq.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <UART_WaitOnFlagUntilTimeout+0x30>
 800b558:	f7fb f830 	bl	80065bc <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	429a      	cmp	r2, r3
 800b566:	d21d      	bcs.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68da      	ldr	r2, [r3, #12]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b576:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	695a      	ldr	r2, [r3, #20]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0201 	bic.w	r2, r2, #1
 800b586:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2220      	movs	r2, #32
 800b594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e00f      	b.n	800b5c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	bf0c      	ite	eq
 800b5b4:	2301      	moveq	r3, #1
 800b5b6:	2300      	movne	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	79fb      	ldrb	r3, [r7, #7]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d0c3      	beq.n	800b54a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68da      	ldr	r2, [r3, #12]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b60e:	f023 030c 	bic.w	r3, r3, #12
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	430b      	orrs	r3, r1
 800b61a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699a      	ldr	r2, [r3, #24]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	430a      	orrs	r2, r1
 800b630:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b63a:	f040 818b 	bne.w	800b954 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4ac1      	ldr	r2, [pc, #772]	; (800b948 <UART_SetConfig+0x37c>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d005      	beq.n	800b654 <UART_SetConfig+0x88>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4abf      	ldr	r2, [pc, #764]	; (800b94c <UART_SetConfig+0x380>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	f040 80bd 	bne.w	800b7ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b654:	f7fd ff10 	bl	8009478 <HAL_RCC_GetPCLK2Freq>
 800b658:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	461d      	mov	r5, r3
 800b65e:	f04f 0600 	mov.w	r6, #0
 800b662:	46a8      	mov	r8, r5
 800b664:	46b1      	mov	r9, r6
 800b666:	eb18 0308 	adds.w	r3, r8, r8
 800b66a:	eb49 0409 	adc.w	r4, r9, r9
 800b66e:	4698      	mov	r8, r3
 800b670:	46a1      	mov	r9, r4
 800b672:	eb18 0805 	adds.w	r8, r8, r5
 800b676:	eb49 0906 	adc.w	r9, r9, r6
 800b67a:	f04f 0100 	mov.w	r1, #0
 800b67e:	f04f 0200 	mov.w	r2, #0
 800b682:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b686:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b68a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b68e:	4688      	mov	r8, r1
 800b690:	4691      	mov	r9, r2
 800b692:	eb18 0005 	adds.w	r0, r8, r5
 800b696:	eb49 0106 	adc.w	r1, r9, r6
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	461d      	mov	r5, r3
 800b6a0:	f04f 0600 	mov.w	r6, #0
 800b6a4:	196b      	adds	r3, r5, r5
 800b6a6:	eb46 0406 	adc.w	r4, r6, r6
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4623      	mov	r3, r4
 800b6ae:	f7f5 faab 	bl	8000c08 <__aeabi_uldivmod>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	4ba5      	ldr	r3, [pc, #660]	; (800b950 <UART_SetConfig+0x384>)
 800b6ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	f04f 0600 	mov.w	r6, #0
 800b6cc:	46a9      	mov	r9, r5
 800b6ce:	46b2      	mov	sl, r6
 800b6d0:	eb19 0309 	adds.w	r3, r9, r9
 800b6d4:	eb4a 040a 	adc.w	r4, sl, sl
 800b6d8:	4699      	mov	r9, r3
 800b6da:	46a2      	mov	sl, r4
 800b6dc:	eb19 0905 	adds.w	r9, r9, r5
 800b6e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800b6e4:	f04f 0100 	mov.w	r1, #0
 800b6e8:	f04f 0200 	mov.w	r2, #0
 800b6ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6f8:	4689      	mov	r9, r1
 800b6fa:	4692      	mov	sl, r2
 800b6fc:	eb19 0005 	adds.w	r0, r9, r5
 800b700:	eb4a 0106 	adc.w	r1, sl, r6
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	461d      	mov	r5, r3
 800b70a:	f04f 0600 	mov.w	r6, #0
 800b70e:	196b      	adds	r3, r5, r5
 800b710:	eb46 0406 	adc.w	r4, r6, r6
 800b714:	461a      	mov	r2, r3
 800b716:	4623      	mov	r3, r4
 800b718:	f7f5 fa76 	bl	8000c08 <__aeabi_uldivmod>
 800b71c:	4603      	mov	r3, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	461a      	mov	r2, r3
 800b722:	4b8b      	ldr	r3, [pc, #556]	; (800b950 <UART_SetConfig+0x384>)
 800b724:	fba3 1302 	umull	r1, r3, r3, r2
 800b728:	095b      	lsrs	r3, r3, #5
 800b72a:	2164      	movs	r1, #100	; 0x64
 800b72c:	fb01 f303 	mul.w	r3, r1, r3
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	3332      	adds	r3, #50	; 0x32
 800b736:	4a86      	ldr	r2, [pc, #536]	; (800b950 <UART_SetConfig+0x384>)
 800b738:	fba2 2303 	umull	r2, r3, r2, r3
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b744:	4498      	add	r8, r3
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	461d      	mov	r5, r3
 800b74a:	f04f 0600 	mov.w	r6, #0
 800b74e:	46a9      	mov	r9, r5
 800b750:	46b2      	mov	sl, r6
 800b752:	eb19 0309 	adds.w	r3, r9, r9
 800b756:	eb4a 040a 	adc.w	r4, sl, sl
 800b75a:	4699      	mov	r9, r3
 800b75c:	46a2      	mov	sl, r4
 800b75e:	eb19 0905 	adds.w	r9, r9, r5
 800b762:	eb4a 0a06 	adc.w	sl, sl, r6
 800b766:	f04f 0100 	mov.w	r1, #0
 800b76a:	f04f 0200 	mov.w	r2, #0
 800b76e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b77a:	4689      	mov	r9, r1
 800b77c:	4692      	mov	sl, r2
 800b77e:	eb19 0005 	adds.w	r0, r9, r5
 800b782:	eb4a 0106 	adc.w	r1, sl, r6
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	461d      	mov	r5, r3
 800b78c:	f04f 0600 	mov.w	r6, #0
 800b790:	196b      	adds	r3, r5, r5
 800b792:	eb46 0406 	adc.w	r4, r6, r6
 800b796:	461a      	mov	r2, r3
 800b798:	4623      	mov	r3, r4
 800b79a:	f7f5 fa35 	bl	8000c08 <__aeabi_uldivmod>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b6a      	ldr	r3, [pc, #424]	; (800b950 <UART_SetConfig+0x384>)
 800b7a6:	fba3 1302 	umull	r1, r3, r3, r2
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	2164      	movs	r1, #100	; 0x64
 800b7ae:	fb01 f303 	mul.w	r3, r1, r3
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	3332      	adds	r3, #50	; 0x32
 800b7b8:	4a65      	ldr	r2, [pc, #404]	; (800b950 <UART_SetConfig+0x384>)
 800b7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b7be:	095b      	lsrs	r3, r3, #5
 800b7c0:	f003 0207 	and.w	r2, r3, #7
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4442      	add	r2, r8
 800b7ca:	609a      	str	r2, [r3, #8]
 800b7cc:	e26f      	b.n	800bcae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b7ce:	f7fd fe3f 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 800b7d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	f04f 0600 	mov.w	r6, #0
 800b7dc:	46a8      	mov	r8, r5
 800b7de:	46b1      	mov	r9, r6
 800b7e0:	eb18 0308 	adds.w	r3, r8, r8
 800b7e4:	eb49 0409 	adc.w	r4, r9, r9
 800b7e8:	4698      	mov	r8, r3
 800b7ea:	46a1      	mov	r9, r4
 800b7ec:	eb18 0805 	adds.w	r8, r8, r5
 800b7f0:	eb49 0906 	adc.w	r9, r9, r6
 800b7f4:	f04f 0100 	mov.w	r1, #0
 800b7f8:	f04f 0200 	mov.w	r2, #0
 800b7fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b800:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b804:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b808:	4688      	mov	r8, r1
 800b80a:	4691      	mov	r9, r2
 800b80c:	eb18 0005 	adds.w	r0, r8, r5
 800b810:	eb49 0106 	adc.w	r1, r9, r6
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	461d      	mov	r5, r3
 800b81a:	f04f 0600 	mov.w	r6, #0
 800b81e:	196b      	adds	r3, r5, r5
 800b820:	eb46 0406 	adc.w	r4, r6, r6
 800b824:	461a      	mov	r2, r3
 800b826:	4623      	mov	r3, r4
 800b828:	f7f5 f9ee 	bl	8000c08 <__aeabi_uldivmod>
 800b82c:	4603      	mov	r3, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	461a      	mov	r2, r3
 800b832:	4b47      	ldr	r3, [pc, #284]	; (800b950 <UART_SetConfig+0x384>)
 800b834:	fba3 2302 	umull	r2, r3, r3, r2
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	461d      	mov	r5, r3
 800b842:	f04f 0600 	mov.w	r6, #0
 800b846:	46a9      	mov	r9, r5
 800b848:	46b2      	mov	sl, r6
 800b84a:	eb19 0309 	adds.w	r3, r9, r9
 800b84e:	eb4a 040a 	adc.w	r4, sl, sl
 800b852:	4699      	mov	r9, r3
 800b854:	46a2      	mov	sl, r4
 800b856:	eb19 0905 	adds.w	r9, r9, r5
 800b85a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b85e:	f04f 0100 	mov.w	r1, #0
 800b862:	f04f 0200 	mov.w	r2, #0
 800b866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b86a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b86e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b872:	4689      	mov	r9, r1
 800b874:	4692      	mov	sl, r2
 800b876:	eb19 0005 	adds.w	r0, r9, r5
 800b87a:	eb4a 0106 	adc.w	r1, sl, r6
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	461d      	mov	r5, r3
 800b884:	f04f 0600 	mov.w	r6, #0
 800b888:	196b      	adds	r3, r5, r5
 800b88a:	eb46 0406 	adc.w	r4, r6, r6
 800b88e:	461a      	mov	r2, r3
 800b890:	4623      	mov	r3, r4
 800b892:	f7f5 f9b9 	bl	8000c08 <__aeabi_uldivmod>
 800b896:	4603      	mov	r3, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b2c      	ldr	r3, [pc, #176]	; (800b950 <UART_SetConfig+0x384>)
 800b89e:	fba3 1302 	umull	r1, r3, r3, r2
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	2164      	movs	r1, #100	; 0x64
 800b8a6:	fb01 f303 	mul.w	r3, r1, r3
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	3332      	adds	r3, #50	; 0x32
 800b8b0:	4a27      	ldr	r2, [pc, #156]	; (800b950 <UART_SetConfig+0x384>)
 800b8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b6:	095b      	lsrs	r3, r3, #5
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8be:	4498      	add	r8, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	461d      	mov	r5, r3
 800b8c4:	f04f 0600 	mov.w	r6, #0
 800b8c8:	46a9      	mov	r9, r5
 800b8ca:	46b2      	mov	sl, r6
 800b8cc:	eb19 0309 	adds.w	r3, r9, r9
 800b8d0:	eb4a 040a 	adc.w	r4, sl, sl
 800b8d4:	4699      	mov	r9, r3
 800b8d6:	46a2      	mov	sl, r4
 800b8d8:	eb19 0905 	adds.w	r9, r9, r5
 800b8dc:	eb4a 0a06 	adc.w	sl, sl, r6
 800b8e0:	f04f 0100 	mov.w	r1, #0
 800b8e4:	f04f 0200 	mov.w	r2, #0
 800b8e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8f4:	4689      	mov	r9, r1
 800b8f6:	4692      	mov	sl, r2
 800b8f8:	eb19 0005 	adds.w	r0, r9, r5
 800b8fc:	eb4a 0106 	adc.w	r1, sl, r6
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	461d      	mov	r5, r3
 800b906:	f04f 0600 	mov.w	r6, #0
 800b90a:	196b      	adds	r3, r5, r5
 800b90c:	eb46 0406 	adc.w	r4, r6, r6
 800b910:	461a      	mov	r2, r3
 800b912:	4623      	mov	r3, r4
 800b914:	f7f5 f978 	bl	8000c08 <__aeabi_uldivmod>
 800b918:	4603      	mov	r3, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	461a      	mov	r2, r3
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <UART_SetConfig+0x384>)
 800b920:	fba3 1302 	umull	r1, r3, r3, r2
 800b924:	095b      	lsrs	r3, r3, #5
 800b926:	2164      	movs	r1, #100	; 0x64
 800b928:	fb01 f303 	mul.w	r3, r1, r3
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	3332      	adds	r3, #50	; 0x32
 800b932:	4a07      	ldr	r2, [pc, #28]	; (800b950 <UART_SetConfig+0x384>)
 800b934:	fba2 2303 	umull	r2, r3, r2, r3
 800b938:	095b      	lsrs	r3, r3, #5
 800b93a:	f003 0207 	and.w	r2, r3, #7
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4442      	add	r2, r8
 800b944:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b946:	e1b2      	b.n	800bcae <UART_SetConfig+0x6e2>
 800b948:	40011000 	.word	0x40011000
 800b94c:	40011400 	.word	0x40011400
 800b950:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4ad7      	ldr	r2, [pc, #860]	; (800bcb8 <UART_SetConfig+0x6ec>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d005      	beq.n	800b96a <UART_SetConfig+0x39e>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4ad6      	ldr	r2, [pc, #856]	; (800bcbc <UART_SetConfig+0x6f0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	f040 80d1 	bne.w	800bb0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b96a:	f7fd fd85 	bl	8009478 <HAL_RCC_GetPCLK2Freq>
 800b96e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	469a      	mov	sl, r3
 800b974:	f04f 0b00 	mov.w	fp, #0
 800b978:	46d0      	mov	r8, sl
 800b97a:	46d9      	mov	r9, fp
 800b97c:	eb18 0308 	adds.w	r3, r8, r8
 800b980:	eb49 0409 	adc.w	r4, r9, r9
 800b984:	4698      	mov	r8, r3
 800b986:	46a1      	mov	r9, r4
 800b988:	eb18 080a 	adds.w	r8, r8, sl
 800b98c:	eb49 090b 	adc.w	r9, r9, fp
 800b990:	f04f 0100 	mov.w	r1, #0
 800b994:	f04f 0200 	mov.w	r2, #0
 800b998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b99c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b9a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b9a4:	4688      	mov	r8, r1
 800b9a6:	4691      	mov	r9, r2
 800b9a8:	eb1a 0508 	adds.w	r5, sl, r8
 800b9ac:	eb4b 0609 	adc.w	r6, fp, r9
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f04f 0200 	mov.w	r2, #0
 800b9ba:	f04f 0300 	mov.w	r3, #0
 800b9be:	f04f 0400 	mov.w	r4, #0
 800b9c2:	0094      	lsls	r4, r2, #2
 800b9c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9c8:	008b      	lsls	r3, r1, #2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	f7f5 f919 	bl	8000c08 <__aeabi_uldivmod>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	461a      	mov	r2, r3
 800b9dc:	4bb8      	ldr	r3, [pc, #736]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800b9de:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	469b      	mov	fp, r3
 800b9ec:	f04f 0c00 	mov.w	ip, #0
 800b9f0:	46d9      	mov	r9, fp
 800b9f2:	46e2      	mov	sl, ip
 800b9f4:	eb19 0309 	adds.w	r3, r9, r9
 800b9f8:	eb4a 040a 	adc.w	r4, sl, sl
 800b9fc:	4699      	mov	r9, r3
 800b9fe:	46a2      	mov	sl, r4
 800ba00:	eb19 090b 	adds.w	r9, r9, fp
 800ba04:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba08:	f04f 0100 	mov.w	r1, #0
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba1c:	4689      	mov	r9, r1
 800ba1e:	4692      	mov	sl, r2
 800ba20:	eb1b 0509 	adds.w	r5, fp, r9
 800ba24:	eb4c 060a 	adc.w	r6, ip, sl
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f04f 0200 	mov.w	r2, #0
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	f04f 0400 	mov.w	r4, #0
 800ba3a:	0094      	lsls	r4, r2, #2
 800ba3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ba40:	008b      	lsls	r3, r1, #2
 800ba42:	461a      	mov	r2, r3
 800ba44:	4623      	mov	r3, r4
 800ba46:	4628      	mov	r0, r5
 800ba48:	4631      	mov	r1, r6
 800ba4a:	f7f5 f8dd 	bl	8000c08 <__aeabi_uldivmod>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	460c      	mov	r4, r1
 800ba52:	461a      	mov	r2, r3
 800ba54:	4b9a      	ldr	r3, [pc, #616]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800ba56:	fba3 1302 	umull	r1, r3, r3, r2
 800ba5a:	095b      	lsrs	r3, r3, #5
 800ba5c:	2164      	movs	r1, #100	; 0x64
 800ba5e:	fb01 f303 	mul.w	r3, r1, r3
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	3332      	adds	r3, #50	; 0x32
 800ba68:	4a95      	ldr	r2, [pc, #596]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800ba6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6e:	095b      	lsrs	r3, r3, #5
 800ba70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba74:	4498      	add	r8, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	469b      	mov	fp, r3
 800ba7a:	f04f 0c00 	mov.w	ip, #0
 800ba7e:	46d9      	mov	r9, fp
 800ba80:	46e2      	mov	sl, ip
 800ba82:	eb19 0309 	adds.w	r3, r9, r9
 800ba86:	eb4a 040a 	adc.w	r4, sl, sl
 800ba8a:	4699      	mov	r9, r3
 800ba8c:	46a2      	mov	sl, r4
 800ba8e:	eb19 090b 	adds.w	r9, r9, fp
 800ba92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba96:	f04f 0100 	mov.w	r1, #0
 800ba9a:	f04f 0200 	mov.w	r2, #0
 800ba9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800baa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800baaa:	4689      	mov	r9, r1
 800baac:	4692      	mov	sl, r2
 800baae:	eb1b 0509 	adds.w	r5, fp, r9
 800bab2:	eb4c 060a 	adc.w	r6, ip, sl
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	4619      	mov	r1, r3
 800babc:	f04f 0200 	mov.w	r2, #0
 800bac0:	f04f 0300 	mov.w	r3, #0
 800bac4:	f04f 0400 	mov.w	r4, #0
 800bac8:	0094      	lsls	r4, r2, #2
 800baca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bace:	008b      	lsls	r3, r1, #2
 800bad0:	461a      	mov	r2, r3
 800bad2:	4623      	mov	r3, r4
 800bad4:	4628      	mov	r0, r5
 800bad6:	4631      	mov	r1, r6
 800bad8:	f7f5 f896 	bl	8000c08 <__aeabi_uldivmod>
 800badc:	4603      	mov	r3, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	461a      	mov	r2, r3
 800bae2:	4b77      	ldr	r3, [pc, #476]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bae4:	fba3 1302 	umull	r1, r3, r3, r2
 800bae8:	095b      	lsrs	r3, r3, #5
 800baea:	2164      	movs	r1, #100	; 0x64
 800baec:	fb01 f303 	mul.w	r3, r1, r3
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	3332      	adds	r3, #50	; 0x32
 800baf6:	4a72      	ldr	r2, [pc, #456]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800baf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bafc:	095b      	lsrs	r3, r3, #5
 800bafe:	f003 020f 	and.w	r2, r3, #15
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4442      	add	r2, r8
 800bb08:	609a      	str	r2, [r3, #8]
 800bb0a:	e0d0      	b.n	800bcae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb0c:	f7fd fca0 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 800bb10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	469a      	mov	sl, r3
 800bb16:	f04f 0b00 	mov.w	fp, #0
 800bb1a:	46d0      	mov	r8, sl
 800bb1c:	46d9      	mov	r9, fp
 800bb1e:	eb18 0308 	adds.w	r3, r8, r8
 800bb22:	eb49 0409 	adc.w	r4, r9, r9
 800bb26:	4698      	mov	r8, r3
 800bb28:	46a1      	mov	r9, r4
 800bb2a:	eb18 080a 	adds.w	r8, r8, sl
 800bb2e:	eb49 090b 	adc.w	r9, r9, fp
 800bb32:	f04f 0100 	mov.w	r1, #0
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bb3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bb42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bb46:	4688      	mov	r8, r1
 800bb48:	4691      	mov	r9, r2
 800bb4a:	eb1a 0508 	adds.w	r5, sl, r8
 800bb4e:	eb4b 0609 	adc.w	r6, fp, r9
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	4619      	mov	r1, r3
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	f04f 0400 	mov.w	r4, #0
 800bb64:	0094      	lsls	r4, r2, #2
 800bb66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bb6a:	008b      	lsls	r3, r1, #2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4623      	mov	r3, r4
 800bb70:	4628      	mov	r0, r5
 800bb72:	4631      	mov	r1, r6
 800bb74:	f7f5 f848 	bl	8000c08 <__aeabi_uldivmod>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b50      	ldr	r3, [pc, #320]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bb80:	fba3 2302 	umull	r2, r3, r3, r2
 800bb84:	095b      	lsrs	r3, r3, #5
 800bb86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	469b      	mov	fp, r3
 800bb8e:	f04f 0c00 	mov.w	ip, #0
 800bb92:	46d9      	mov	r9, fp
 800bb94:	46e2      	mov	sl, ip
 800bb96:	eb19 0309 	adds.w	r3, r9, r9
 800bb9a:	eb4a 040a 	adc.w	r4, sl, sl
 800bb9e:	4699      	mov	r9, r3
 800bba0:	46a2      	mov	sl, r4
 800bba2:	eb19 090b 	adds.w	r9, r9, fp
 800bba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bbaa:	f04f 0100 	mov.w	r1, #0
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbbe:	4689      	mov	r9, r1
 800bbc0:	4692      	mov	sl, r2
 800bbc2:	eb1b 0509 	adds.w	r5, fp, r9
 800bbc6:	eb4c 060a 	adc.w	r6, ip, sl
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f04f 0200 	mov.w	r2, #0
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	f04f 0400 	mov.w	r4, #0
 800bbdc:	0094      	lsls	r4, r2, #2
 800bbde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bbe2:	008b      	lsls	r3, r1, #2
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	4631      	mov	r1, r6
 800bbec:	f7f5 f80c 	bl	8000c08 <__aeabi_uldivmod>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b32      	ldr	r3, [pc, #200]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bbf8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbfc:	095b      	lsrs	r3, r3, #5
 800bbfe:	2164      	movs	r1, #100	; 0x64
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	3332      	adds	r3, #50	; 0x32
 800bc0a:	4a2d      	ldr	r2, [pc, #180]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc10:	095b      	lsrs	r3, r3, #5
 800bc12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc16:	4498      	add	r8, r3
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	469b      	mov	fp, r3
 800bc1c:	f04f 0c00 	mov.w	ip, #0
 800bc20:	46d9      	mov	r9, fp
 800bc22:	46e2      	mov	sl, ip
 800bc24:	eb19 0309 	adds.w	r3, r9, r9
 800bc28:	eb4a 040a 	adc.w	r4, sl, sl
 800bc2c:	4699      	mov	r9, r3
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	eb19 090b 	adds.w	r9, r9, fp
 800bc34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bc38:	f04f 0100 	mov.w	r1, #0
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc4c:	4689      	mov	r9, r1
 800bc4e:	4692      	mov	sl, r2
 800bc50:	eb1b 0509 	adds.w	r5, fp, r9
 800bc54:	eb4c 060a 	adc.w	r6, ip, sl
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f04f 0200 	mov.w	r2, #0
 800bc62:	f04f 0300 	mov.w	r3, #0
 800bc66:	f04f 0400 	mov.w	r4, #0
 800bc6a:	0094      	lsls	r4, r2, #2
 800bc6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc70:	008b      	lsls	r3, r1, #2
 800bc72:	461a      	mov	r2, r3
 800bc74:	4623      	mov	r3, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	4631      	mov	r1, r6
 800bc7a:	f7f4 ffc5 	bl	8000c08 <__aeabi_uldivmod>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bc86:	fba3 1302 	umull	r1, r3, r3, r2
 800bc8a:	095b      	lsrs	r3, r3, #5
 800bc8c:	2164      	movs	r1, #100	; 0x64
 800bc8e:	fb01 f303 	mul.w	r3, r1, r3
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	3332      	adds	r3, #50	; 0x32
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <UART_SetConfig+0x6f4>)
 800bc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9e:	095b      	lsrs	r3, r3, #5
 800bca0:	f003 020f 	and.w	r2, r3, #15
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4442      	add	r2, r8
 800bcaa:	609a      	str	r2, [r3, #8]
}
 800bcac:	e7ff      	b.n	800bcae <UART_SetConfig+0x6e2>
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb8:	40011000 	.word	0x40011000
 800bcbc:	40011400 	.word	0x40011400
 800bcc0:	51eb851f 	.word	0x51eb851f

0800bcc4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bcca:	f000 fb1f 	bl	800c30c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bcce:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <MX_LWIP_Init+0x70>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bcd4:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <MX_LWIP_Init+0x74>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bcda:	4b18      	ldr	r3, [pc, #96]	; (800bd3c <MX_LWIP_Init+0x78>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bce0:	4b17      	ldr	r3, [pc, #92]	; (800bd40 <MX_LWIP_Init+0x7c>)
 800bce2:	9302      	str	r3, [sp, #8]
 800bce4:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <MX_LWIP_Init+0x80>)
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	2300      	movs	r3, #0
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4b13      	ldr	r3, [pc, #76]	; (800bd3c <MX_LWIP_Init+0x78>)
 800bcee:	4a12      	ldr	r2, [pc, #72]	; (800bd38 <MX_LWIP_Init+0x74>)
 800bcf0:	4910      	ldr	r1, [pc, #64]	; (800bd34 <MX_LWIP_Init+0x70>)
 800bcf2:	4815      	ldr	r0, [pc, #84]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bcf4:	f000 ffb0 	bl	800cc58 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bcf8:	4813      	ldr	r0, [pc, #76]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bcfa:	f001 f967 	bl	800cfcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bcfe:	4b12      	ldr	r3, [pc, #72]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bd00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd04:	089b      	lsrs	r3, r3, #2
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bd10:	480d      	ldr	r0, [pc, #52]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bd12:	f001 f96b 	bl	800cfec <netif_set_up>
 800bd16:	e002      	b.n	800bd1e <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bd18:	480b      	ldr	r0, [pc, #44]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bd1a:	f001 f9d3 	bl	800d0c4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800bd1e:	490b      	ldr	r1, [pc, #44]	; (800bd4c <MX_LWIP_Init+0x88>)
 800bd20:	4809      	ldr	r0, [pc, #36]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bd22:	f001 fa01 	bl	800d128 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bd26:	4808      	ldr	r0, [pc, #32]	; (800bd48 <MX_LWIP_Init+0x84>)
 800bd28:	f008 fa8e 	bl	8014248 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bd2c:	bf00      	nop
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20001168 	.word	0x20001168
 800bd38:	2000116c 	.word	0x2000116c
 800bd3c:	20001170 	.word	0x20001170
 800bd40:	08017c05 	.word	0x08017c05
 800bd44:	0800c139 	.word	0x0800c139
 800bd48:	20001130 	.word	0x20001130
 800bd4c:	0800c1a5 	.word	0x0800c1a5

0800bd50 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	; 0x38
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	605a      	str	r2, [r3, #4]
 800bd62:	609a      	str	r2, [r3, #8]
 800bd64:	60da      	str	r2, [r3, #12]
 800bd66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a46      	ldr	r2, [pc, #280]	; (800be88 <HAL_ETH_MspInit+0x138>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	f040 8085 	bne.w	800be7e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bd74:	2300      	movs	r3, #0
 800bd76:	623b      	str	r3, [r7, #32]
 800bd78:	4b44      	ldr	r3, [pc, #272]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7c:	4a43      	ldr	r2, [pc, #268]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bd7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bd82:	6313      	str	r3, [r2, #48]	; 0x30
 800bd84:	4b41      	ldr	r3, [pc, #260]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8c:	623b      	str	r3, [r7, #32]
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	2300      	movs	r3, #0
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	4b3d      	ldr	r3, [pc, #244]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd98:	4a3c      	ldr	r2, [pc, #240]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bd9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd9e:	6313      	str	r3, [r2, #48]	; 0x30
 800bda0:	4b3a      	ldr	r3, [pc, #232]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bda8:	61fb      	str	r3, [r7, #28]
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	2300      	movs	r3, #0
 800bdae:	61bb      	str	r3, [r7, #24]
 800bdb0:	4b36      	ldr	r3, [pc, #216]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb4:	4a35      	ldr	r2, [pc, #212]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdba:	6313      	str	r3, [r2, #48]	; 0x30
 800bdbc:	4b33      	ldr	r3, [pc, #204]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	4b2f      	ldr	r3, [pc, #188]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd0:	4a2e      	ldr	r2, [pc, #184]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdd2:	f043 0304 	orr.w	r3, r3, #4
 800bdd6:	6313      	str	r3, [r2, #48]	; 0x30
 800bdd8:	4b2c      	ldr	r3, [pc, #176]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bde4:	2300      	movs	r3, #0
 800bde6:	613b      	str	r3, [r7, #16]
 800bde8:	4b28      	ldr	r3, [pc, #160]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	4a27      	ldr	r2, [pc, #156]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	6313      	str	r3, [r2, #48]	; 0x30
 800bdf4:	4b25      	ldr	r3, [pc, #148]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	4b21      	ldr	r3, [pc, #132]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800be06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be08:	4a20      	ldr	r2, [pc, #128]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800be0a:	f043 0302 	orr.w	r3, r3, #2
 800be0e:	6313      	str	r3, [r2, #48]	; 0x30
 800be10:	4b1e      	ldr	r3, [pc, #120]	; (800be8c <HAL_ETH_MspInit+0x13c>)
 800be12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800be1c:	2332      	movs	r3, #50	; 0x32
 800be1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be20:	2302      	movs	r3, #2
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be24:	2300      	movs	r3, #0
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be28:	2303      	movs	r3, #3
 800be2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be2c:	230b      	movs	r3, #11
 800be2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be34:	4619      	mov	r1, r3
 800be36:	4816      	ldr	r0, [pc, #88]	; (800be90 <HAL_ETH_MspInit+0x140>)
 800be38:	f7fc fcec 	bl	8008814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800be3c:	2386      	movs	r3, #134	; 0x86
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be40:	2302      	movs	r3, #2
 800be42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be44:	2300      	movs	r3, #0
 800be46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be48:	2303      	movs	r3, #3
 800be4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be4c:	230b      	movs	r3, #11
 800be4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be54:	4619      	mov	r1, r3
 800be56:	480f      	ldr	r0, [pc, #60]	; (800be94 <HAL_ETH_MspInit+0x144>)
 800be58:	f7fc fcdc 	bl	8008814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800be5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be62:	2302      	movs	r3, #2
 800be64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be66:	2300      	movs	r3, #0
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be6a:	2303      	movs	r3, #3
 800be6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be6e:	230b      	movs	r3, #11
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be76:	4619      	mov	r1, r3
 800be78:	4807      	ldr	r0, [pc, #28]	; (800be98 <HAL_ETH_MspInit+0x148>)
 800be7a:	f7fc fccb 	bl	8008814 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800be7e:	bf00      	nop
 800be80:	3738      	adds	r7, #56	; 0x38
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	40028000 	.word	0x40028000
 800be8c:	40023800 	.word	0x40023800
 800be90:	40020800 	.word	0x40020800
 800be94:	40020000 	.word	0x40020000
 800be98:	40020400 	.word	0x40020400

0800be9c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bea8:	4b4e      	ldr	r3, [pc, #312]	; (800bfe4 <low_level_init+0x148>)
 800beaa:	4a4f      	ldr	r2, [pc, #316]	; (800bfe8 <low_level_init+0x14c>)
 800beac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800beae:	4b4d      	ldr	r3, [pc, #308]	; (800bfe4 <low_level_init+0x148>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800beb4:	4b4b      	ldr	r3, [pc, #300]	; (800bfe4 <low_level_init+0x148>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800beba:	2302      	movs	r3, #2
 800bebc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800bebe:	2300      	movs	r3, #0
 800bec0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800bec2:	2300      	movs	r3, #0
 800bec4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bec6:	2300      	movs	r3, #0
 800bec8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800beca:	2300      	movs	r3, #0
 800becc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bece:	2300      	movs	r3, #0
 800bed0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bed2:	4a44      	ldr	r2, [pc, #272]	; (800bfe4 <low_level_init+0x148>)
 800bed4:	f107 0308 	add.w	r3, r7, #8
 800bed8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800beda:	4b42      	ldr	r3, [pc, #264]	; (800bfe4 <low_level_init+0x148>)
 800bedc:	2200      	movs	r2, #0
 800bede:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bee0:	4b40      	ldr	r3, [pc, #256]	; (800bfe4 <low_level_init+0x148>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bee6:	4b3f      	ldr	r3, [pc, #252]	; (800bfe4 <low_level_init+0x148>)
 800bee8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800beec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800beee:	483d      	ldr	r0, [pc, #244]	; (800bfe4 <low_level_init+0x148>)
 800bef0:	f7fb fbee 	bl	80076d0 <HAL_ETH_Init>
 800bef4:	4603      	mov	r3, r0
 800bef6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d108      	bne.n	800bf10 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf04:	f043 0304 	orr.w	r3, r3, #4
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bf10:	2304      	movs	r3, #4
 800bf12:	4a36      	ldr	r2, [pc, #216]	; (800bfec <low_level_init+0x150>)
 800bf14:	4936      	ldr	r1, [pc, #216]	; (800bff0 <low_level_init+0x154>)
 800bf16:	4833      	ldr	r0, [pc, #204]	; (800bfe4 <low_level_init+0x148>)
 800bf18:	f7fb fd78 	bl	8007a0c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	4a35      	ldr	r2, [pc, #212]	; (800bff4 <low_level_init+0x158>)
 800bf20:	4935      	ldr	r1, [pc, #212]	; (800bff8 <low_level_init+0x15c>)
 800bf22:	4830      	ldr	r0, [pc, #192]	; (800bfe4 <low_level_init+0x148>)
 800bf24:	f7fb fddb 	bl	8007ade <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2206      	movs	r2, #6
 800bf2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bf30:	4b2c      	ldr	r3, [pc, #176]	; (800bfe4 <low_level_init+0x148>)
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	781a      	ldrb	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bf3c:	4b29      	ldr	r3, [pc, #164]	; (800bfe4 <low_level_init+0x148>)
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	785a      	ldrb	r2, [r3, #1]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bf48:	4b26      	ldr	r3, [pc, #152]	; (800bfe4 <low_level_init+0x148>)
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	789a      	ldrb	r2, [r3, #2]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bf54:	4b23      	ldr	r3, [pc, #140]	; (800bfe4 <low_level_init+0x148>)
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	78da      	ldrb	r2, [r3, #3]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf60:	4b20      	ldr	r3, [pc, #128]	; (800bfe4 <low_level_init+0x148>)
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	791a      	ldrb	r2, [r3, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf6c:	4b1d      	ldr	r3, [pc, #116]	; (800bfe4 <low_level_init+0x148>)
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	795a      	ldrb	r2, [r3, #5]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bf7e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf86:	f043 030a 	orr.w	r3, r3, #10
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800bf92:	4814      	ldr	r0, [pc, #80]	; (800bfe4 <low_level_init+0x148>)
 800bf94:	f7fb ffc8 	bl	8007f28 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800bf98:	f107 0310 	add.w	r3, r7, #16
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	2111      	movs	r1, #17
 800bfa0:	4810      	ldr	r0, [pc, #64]	; (800bfe4 <low_level_init+0x148>)
 800bfa2:	f7fb fef3 	bl	8007d8c <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f043 0303 	orr.w	r3, r3, #3
 800bfac:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	2111      	movs	r1, #17
 800bfb4:	480b      	ldr	r0, [pc, #44]	; (800bfe4 <low_level_init+0x148>)
 800bfb6:	f7fb ff51 	bl	8007e5c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800bfba:	f107 0310 	add.w	r3, r7, #16
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	2112      	movs	r1, #18
 800bfc2:	4808      	ldr	r0, [pc, #32]	; (800bfe4 <low_level_init+0x148>)
 800bfc4:	f7fb fee2 	bl	8007d8c <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f043 0320 	orr.w	r3, r3, #32
 800bfce:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	2112      	movs	r1, #18
 800bfd6:	4803      	ldr	r0, [pc, #12]	; (800bfe4 <low_level_init+0x148>)
 800bfd8:	f7fb ff40 	bl	8007e5c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bfdc:	bf00      	nop
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20002a44 	.word	0x20002a44
 800bfe8:	40028000 	.word	0x40028000
 800bfec:	20002a8c 	.word	0x20002a8c
 800bff0:	20001174 	.word	0x20001174
 800bff4:	200011f4 	.word	0x200011f4
 800bff8:	200029c4 	.word	0x200029c4

0800bffc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08a      	sub	sp, #40	; 0x28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c006:	4b4b      	ldr	r3, [pc, #300]	; (800c134 <low_level_output+0x138>)
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c01e:	4b45      	ldr	r3, [pc, #276]	; (800c134 <low_level_output+0x138>)
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	623b      	str	r3, [r7, #32]
 800c02c:	e05a      	b.n	800c0e4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	da03      	bge.n	800c03e <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c036:	23f8      	movs	r3, #248	; 0xf8
 800c038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c03c:	e05c      	b.n	800c0f8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	895b      	ldrh	r3, [r3, #10]
 800c042:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c048:	e02f      	b.n	800c0aa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	18d0      	adds	r0, r2, r3
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	18d1      	adds	r1, r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c05e:	3304      	adds	r3, #4
 800c060:	461a      	mov	r2, r3
 800c062:	f00b ff14 	bl	8017e8e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	da03      	bge.n	800c07c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c074:	23f8      	movs	r3, #248	; 0xf8
 800c076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c07a:	e03d      	b.n	800c0f8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c08c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c098:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c0a4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d8c8      	bhi.n	800c04a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c0b8:	69fa      	ldr	r2, [r7, #28]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	18d0      	adds	r0, r2, r3
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f00b fee0 	bl	8017e8e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4413      	add	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	623b      	str	r3, [r7, #32]
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1a1      	bne.n	800c02e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c0ea:	6979      	ldr	r1, [r7, #20]
 800c0ec:	4811      	ldr	r0, [pc, #68]	; (800c134 <low_level_output+0x138>)
 800c0ee:	f7fb fd63 	bl	8007bb8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c0f8:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <low_level_output+0x138>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c100:	3314      	adds	r3, #20
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0320 	and.w	r3, r3, #32
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00d      	beq.n	800c128 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <low_level_output+0x138>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c114:	3314      	adds	r3, #20
 800c116:	2220      	movs	r2, #32
 800c118:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <low_level_output+0x138>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c122:	3304      	adds	r3, #4
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800c128:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3728      	adds	r7, #40	; 0x28
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20002a44 	.word	0x20002a44

0800c138 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d106      	bne.n	800c154 <ethernetif_init+0x1c>
 800c146:	4b0e      	ldr	r3, [pc, #56]	; (800c180 <ethernetif_init+0x48>)
 800c148:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c14c:	490d      	ldr	r1, [pc, #52]	; (800c184 <ethernetif_init+0x4c>)
 800c14e:	480e      	ldr	r0, [pc, #56]	; (800c188 <ethernetif_init+0x50>)
 800c150:	f00c fbce 	bl	80188f0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2273      	movs	r2, #115	; 0x73
 800c158:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2274      	movs	r2, #116	; 0x74
 800c160:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a09      	ldr	r2, [pc, #36]	; (800c18c <ethernetif_init+0x54>)
 800c168:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a08      	ldr	r2, [pc, #32]	; (800c190 <ethernetif_init+0x58>)
 800c16e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff fe93 	bl	800be9c <low_level_init>

  return ERR_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	0801dbf0 	.word	0x0801dbf0
 800c184:	0801dc0c 	.word	0x0801dc0c
 800c188:	0801dc1c 	.word	0x0801dc1c
 800c18c:	08016099 	.word	0x08016099
 800c190:	0800bffd 	.word	0x0800bffd

0800c194 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c198:	f7fa fa10 	bl	80065bc <HAL_GetTick>
 800c19c:	4603      	mov	r3, r0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c1ba:	089b      	lsrs	r3, r3, #2
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d05d      	beq.n	800c282 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c1c6:	4b34      	ldr	r3, [pc, #208]	; (800c298 <ethernetif_update_config+0xf4>)
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d03f      	beq.n	800c24e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c1ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4830      	ldr	r0, [pc, #192]	; (800c298 <ethernetif_update_config+0xf4>)
 800c1d6:	f7fb fe41 	bl	8007e5c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c1da:	f7fa f9ef 	bl	80065bc <HAL_GetTick>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	482b      	ldr	r0, [pc, #172]	; (800c298 <ethernetif_update_config+0xf4>)
 800c1ec:	f7fb fdce 	bl	8007d8c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c1f0:	f7fa f9e4 	bl	80065bc <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1fe:	d828      	bhi.n	800c252 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f003 0320 	and.w	r3, r3, #32
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0eb      	beq.n	800c1e2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	461a      	mov	r2, r3
 800c210:	211f      	movs	r1, #31
 800c212:	4821      	ldr	r0, [pc, #132]	; (800c298 <ethernetif_update_config+0xf4>)
 800c214:	f7fb fdba 	bl	8007d8c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d004      	beq.n	800c22c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c222:	4b1d      	ldr	r3, [pc, #116]	; (800c298 <ethernetif_update_config+0xf4>)
 800c224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c228:	60da      	str	r2, [r3, #12]
 800c22a:	e002      	b.n	800c232 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c22c:	4b1a      	ldr	r3, [pc, #104]	; (800c298 <ethernetif_update_config+0xf4>)
 800c22e:	2200      	movs	r2, #0
 800c230:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c23c:	4b16      	ldr	r3, [pc, #88]	; (800c298 <ethernetif_update_config+0xf4>)
 800c23e:	2200      	movs	r2, #0
 800c240:	609a      	str	r2, [r3, #8]
 800c242:	e016      	b.n	800c272 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c244:	4b14      	ldr	r3, [pc, #80]	; (800c298 <ethernetif_update_config+0xf4>)
 800c246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c24a:	609a      	str	r2, [r3, #8]
 800c24c:	e011      	b.n	800c272 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c24e:	bf00      	nop
 800c250:	e000      	b.n	800c254 <ethernetif_update_config+0xb0>
          goto error;
 800c252:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c254:	4b10      	ldr	r3, [pc, #64]	; (800c298 <ethernetif_update_config+0xf4>)
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	08db      	lsrs	r3, r3, #3
 800c25a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c25c:	4b0e      	ldr	r3, [pc, #56]	; (800c298 <ethernetif_update_config+0xf4>)
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	085b      	lsrs	r3, r3, #1
 800c262:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c264:	4313      	orrs	r3, r2
 800c266:	b29b      	uxth	r3, r3
 800c268:	461a      	mov	r2, r3
 800c26a:	2100      	movs	r1, #0
 800c26c:	480a      	ldr	r0, [pc, #40]	; (800c298 <ethernetif_update_config+0xf4>)
 800c26e:	f7fb fdf5 	bl	8007e5c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c272:	2100      	movs	r1, #0
 800c274:	4808      	ldr	r0, [pc, #32]	; (800c298 <ethernetif_update_config+0xf4>)
 800c276:	f7fb feb5 	bl	8007fe4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c27a:	4807      	ldr	r0, [pc, #28]	; (800c298 <ethernetif_update_config+0xf4>)
 800c27c:	f7fb fe54 	bl	8007f28 <HAL_ETH_Start>
 800c280:	e002      	b.n	800c288 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c282:	4805      	ldr	r0, [pc, #20]	; (800c298 <ethernetif_update_config+0xf4>)
 800c284:	f7fb fe7f 	bl	8007f86 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f807 	bl	800c29c <ethernetif_notify_conn_changed>
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002a44 	.word	0x20002a44

0800c29c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c2ba:	88fb      	ldrh	r3, [r7, #6]
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	b21a      	sxth	r2, r3
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	0a1b      	lsrs	r3, r3, #8
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	b21b      	sxth	r3, r3
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	b21b      	sxth	r3, r3
 800c2cc:	b29b      	uxth	r3, r3
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b083      	sub	sp, #12
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	061a      	lsls	r2, r3, #24
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	021b      	lsls	r3, r3, #8
 800c2ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	0a1b      	lsrs	r3, r3, #8
 800c2f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	0e1b      	lsrs	r3, r3, #24
 800c2fe:	4313      	orrs	r3, r2
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c316:	f000 f8d5 	bl	800c4c4 <mem_init>
  memp_init();
 800c31a:	f000 fbdb 	bl	800cad4 <memp_init>
  pbuf_init();
  netif_init();
 800c31e:	f000 fc93 	bl	800cc48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c322:	f006 ff59 	bl	80131d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c326:	f001 fcf9 	bl	800dd1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c32a:	f006 ff0f 	bl	801314c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c342:	4b05      	ldr	r3, [pc, #20]	; (800c358 <ptr_to_mem+0x20>)
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	4413      	add	r3, r2
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	20000460 	.word	0x20000460

0800c35c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a05      	ldr	r2, [pc, #20]	; (800c37c <mem_to_ptr+0x20>)
 800c368:	6812      	ldr	r2, [r2, #0]
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	b29b      	uxth	r3, r3
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	20000460 	.word	0x20000460

0800c380 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c388:	4b45      	ldr	r3, [pc, #276]	; (800c4a0 <plug_holes+0x120>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d206      	bcs.n	800c3a0 <plug_holes+0x20>
 800c392:	4b44      	ldr	r3, [pc, #272]	; (800c4a4 <plug_holes+0x124>)
 800c394:	f240 12df 	movw	r2, #479	; 0x1df
 800c398:	4943      	ldr	r1, [pc, #268]	; (800c4a8 <plug_holes+0x128>)
 800c39a:	4844      	ldr	r0, [pc, #272]	; (800c4ac <plug_holes+0x12c>)
 800c39c:	f00c faa8 	bl	80188f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c3a0:	4b43      	ldr	r3, [pc, #268]	; (800c4b0 <plug_holes+0x130>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d306      	bcc.n	800c3b8 <plug_holes+0x38>
 800c3aa:	4b3e      	ldr	r3, [pc, #248]	; (800c4a4 <plug_holes+0x124>)
 800c3ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c3b0:	4940      	ldr	r1, [pc, #256]	; (800c4b4 <plug_holes+0x134>)
 800c3b2:	483e      	ldr	r0, [pc, #248]	; (800c4ac <plug_holes+0x12c>)
 800c3b4:	f00c fa9c 	bl	80188f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	791b      	ldrb	r3, [r3, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <plug_holes+0x4e>
 800c3c0:	4b38      	ldr	r3, [pc, #224]	; (800c4a4 <plug_holes+0x124>)
 800c3c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c3c6:	493c      	ldr	r1, [pc, #240]	; (800c4b8 <plug_holes+0x138>)
 800c3c8:	4838      	ldr	r0, [pc, #224]	; (800c4ac <plug_holes+0x12c>)
 800c3ca:	f00c fa91 	bl	80188f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3d6:	d906      	bls.n	800c3e6 <plug_holes+0x66>
 800c3d8:	4b32      	ldr	r3, [pc, #200]	; (800c4a4 <plug_holes+0x124>)
 800c3da:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c3de:	4937      	ldr	r1, [pc, #220]	; (800c4bc <plug_holes+0x13c>)
 800c3e0:	4832      	ldr	r0, [pc, #200]	; (800c4ac <plug_holes+0x12c>)
 800c3e2:	f00c fa85 	bl	80188f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff ffa4 	bl	800c338 <ptr_to_mem>
 800c3f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d024      	beq.n	800c444 <plug_holes+0xc4>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	791b      	ldrb	r3, [r3, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d120      	bne.n	800c444 <plug_holes+0xc4>
 800c402:	4b2b      	ldr	r3, [pc, #172]	; (800c4b0 <plug_holes+0x130>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d01b      	beq.n	800c444 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c40c:	4b2c      	ldr	r3, [pc, #176]	; (800c4c0 <plug_holes+0x140>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	429a      	cmp	r2, r3
 800c414:	d102      	bne.n	800c41c <plug_holes+0x9c>
      lfree = mem;
 800c416:	4a2a      	ldr	r2, [pc, #168]	; (800c4c0 <plug_holes+0x140>)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	881a      	ldrh	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c42c:	d00a      	beq.n	800c444 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff ff80 	bl	800c338 <ptr_to_mem>
 800c438:	4604      	mov	r4, r0
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff ff8e 	bl	800c35c <mem_to_ptr>
 800c440:	4603      	mov	r3, r0
 800c442:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	885b      	ldrh	r3, [r3, #2]
 800c448:	4618      	mov	r0, r3
 800c44a:	f7ff ff75 	bl	800c338 <ptr_to_mem>
 800c44e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	429a      	cmp	r2, r3
 800c456:	d01f      	beq.n	800c498 <plug_holes+0x118>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	791b      	ldrb	r3, [r3, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d11b      	bne.n	800c498 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c460:	4b17      	ldr	r3, [pc, #92]	; (800c4c0 <plug_holes+0x140>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d102      	bne.n	800c470 <plug_holes+0xf0>
      lfree = pmem;
 800c46a:	4a15      	ldr	r2, [pc, #84]	; (800c4c0 <plug_holes+0x140>)
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	881a      	ldrh	r2, [r3, #0]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c480:	d00a      	beq.n	800c498 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff ff56 	bl	800c338 <ptr_to_mem>
 800c48c:	4604      	mov	r4, r0
 800c48e:	68b8      	ldr	r0, [r7, #8]
 800c490:	f7ff ff64 	bl	800c35c <mem_to_ptr>
 800c494:	4603      	mov	r3, r0
 800c496:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c498:	bf00      	nop
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd90      	pop	{r4, r7, pc}
 800c4a0:	20000460 	.word	0x20000460
 800c4a4:	0801dc44 	.word	0x0801dc44
 800c4a8:	0801dc74 	.word	0x0801dc74
 800c4ac:	0801dc8c 	.word	0x0801dc8c
 800c4b0:	20000464 	.word	0x20000464
 800c4b4:	0801dcb4 	.word	0x0801dcb4
 800c4b8:	0801dcd0 	.word	0x0801dcd0
 800c4bc:	0801dcec 	.word	0x0801dcec
 800c4c0:	20000468 	.word	0x20000468

0800c4c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c4ca:	4b18      	ldr	r3, [pc, #96]	; (800c52c <mem_init+0x68>)
 800c4cc:	3303      	adds	r3, #3
 800c4ce:	f023 0303 	bic.w	r3, r3, #3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4b16      	ldr	r3, [pc, #88]	; (800c530 <mem_init+0x6c>)
 800c4d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c4d8:	4b15      	ldr	r3, [pc, #84]	; (800c530 <mem_init+0x6c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c4f2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c4f6:	f7ff ff1f 	bl	800c338 <ptr_to_mem>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <mem_init+0x70>)
 800c4fe:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c500:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <mem_init+0x70>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2201      	movs	r2, #1
 800c506:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c508:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <mem_init+0x70>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c510:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c512:	4b08      	ldr	r3, [pc, #32]	; (800c534 <mem_init+0x70>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c51a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c51c:	4b04      	ldr	r3, [pc, #16]	; (800c530 <mem_init+0x6c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a05      	ldr	r2, [pc, #20]	; (800c538 <mem_init+0x74>)
 800c522:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20004274 	.word	0x20004274
 800c530:	20000460 	.word	0x20000460
 800c534:	20000464 	.word	0x20000464
 800c538:	20000468 	.word	0x20000468

0800c53c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ff09 	bl	800c35c <mem_to_ptr>
 800c54a:	4603      	mov	r3, r0
 800c54c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff fef0 	bl	800c338 <ptr_to_mem>
 800c558:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	885b      	ldrh	r3, [r3, #2]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff feea 	bl	800c338 <ptr_to_mem>
 800c564:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c56e:	d818      	bhi.n	800c5a2 <mem_link_valid+0x66>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	885b      	ldrh	r3, [r3, #2]
 800c574:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c578:	d813      	bhi.n	800c5a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c57e:	8afa      	ldrh	r2, [r7, #22]
 800c580:	429a      	cmp	r2, r3
 800c582:	d004      	beq.n	800c58e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	8afa      	ldrh	r2, [r7, #22]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d109      	bne.n	800c5a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c58e:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <mem_link_valid+0x74>)
 800c590:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	429a      	cmp	r2, r3
 800c596:	d006      	beq.n	800c5a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	885b      	ldrh	r3, [r3, #2]
 800c59c:	8afa      	ldrh	r2, [r7, #22]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d001      	beq.n	800c5a6 <mem_link_valid+0x6a>
    return 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e000      	b.n	800c5a8 <mem_link_valid+0x6c>
  }
  return 1;
 800c5a6:	2301      	movs	r3, #1
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20000464 	.word	0x20000464

0800c5b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d04c      	beq.n	800c65c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f003 0303 	and.w	r3, r3, #3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d007      	beq.n	800c5dc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c5cc:	4b25      	ldr	r3, [pc, #148]	; (800c664 <mem_free+0xb0>)
 800c5ce:	f240 2273 	movw	r2, #627	; 0x273
 800c5d2:	4925      	ldr	r1, [pc, #148]	; (800c668 <mem_free+0xb4>)
 800c5d4:	4825      	ldr	r0, [pc, #148]	; (800c66c <mem_free+0xb8>)
 800c5d6:	f00c f98b 	bl	80188f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5da:	e040      	b.n	800c65e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3b08      	subs	r3, #8
 800c5e0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5e2:	4b23      	ldr	r3, [pc, #140]	; (800c670 <mem_free+0xbc>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d306      	bcc.n	800c5fa <mem_free+0x46>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f103 020c 	add.w	r2, r3, #12
 800c5f2:	4b20      	ldr	r3, [pc, #128]	; (800c674 <mem_free+0xc0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d907      	bls.n	800c60a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c5fa:	4b1a      	ldr	r3, [pc, #104]	; (800c664 <mem_free+0xb0>)
 800c5fc:	f240 227f 	movw	r2, #639	; 0x27f
 800c600:	491d      	ldr	r1, [pc, #116]	; (800c678 <mem_free+0xc4>)
 800c602:	481a      	ldr	r0, [pc, #104]	; (800c66c <mem_free+0xb8>)
 800c604:	f00c f974 	bl	80188f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c608:	e029      	b.n	800c65e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	791b      	ldrb	r3, [r3, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d107      	bne.n	800c622 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c612:	4b14      	ldr	r3, [pc, #80]	; (800c664 <mem_free+0xb0>)
 800c614:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c618:	4918      	ldr	r1, [pc, #96]	; (800c67c <mem_free+0xc8>)
 800c61a:	4814      	ldr	r0, [pc, #80]	; (800c66c <mem_free+0xb8>)
 800c61c:	f00c f968 	bl	80188f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c620:	e01d      	b.n	800c65e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f7ff ff8a 	bl	800c53c <mem_link_valid>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d107      	bne.n	800c63e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c62e:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <mem_free+0xb0>)
 800c630:	f240 2295 	movw	r2, #661	; 0x295
 800c634:	4912      	ldr	r1, [pc, #72]	; (800c680 <mem_free+0xcc>)
 800c636:	480d      	ldr	r0, [pc, #52]	; (800c66c <mem_free+0xb8>)
 800c638:	f00c f95a 	bl	80188f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c63c:	e00f      	b.n	800c65e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c644:	4b0f      	ldr	r3, [pc, #60]	; (800c684 <mem_free+0xd0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d202      	bcs.n	800c654 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c64e:	4a0d      	ldr	r2, [pc, #52]	; (800c684 <mem_free+0xd0>)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff fe93 	bl	800c380 <plug_holes>
 800c65a:	e000      	b.n	800c65e <mem_free+0xaa>
    return;
 800c65c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	0801dc44 	.word	0x0801dc44
 800c668:	0801dd18 	.word	0x0801dd18
 800c66c:	0801dc8c 	.word	0x0801dc8c
 800c670:	20000460 	.word	0x20000460
 800c674:	20000464 	.word	0x20000464
 800c678:	0801dd3c 	.word	0x0801dd3c
 800c67c:	0801dd58 	.word	0x0801dd58
 800c680:	0801dd80 	.word	0x0801dd80
 800c684:	20000468 	.word	0x20000468

0800c688 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b088      	sub	sp, #32
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c694:	887b      	ldrh	r3, [r7, #2]
 800c696:	3303      	adds	r3, #3
 800c698:	b29b      	uxth	r3, r3
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c6a0:	8bfb      	ldrh	r3, [r7, #30]
 800c6a2:	2b0b      	cmp	r3, #11
 800c6a4:	d801      	bhi.n	800c6aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c6aa:	8bfb      	ldrh	r3, [r7, #30]
 800c6ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6b0:	d803      	bhi.n	800c6ba <mem_trim+0x32>
 800c6b2:	8bfa      	ldrh	r2, [r7, #30]
 800c6b4:	887b      	ldrh	r3, [r7, #2]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d201      	bcs.n	800c6be <mem_trim+0x36>
    return NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e0cc      	b.n	800c858 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c6be:	4b68      	ldr	r3, [pc, #416]	; (800c860 <mem_trim+0x1d8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d304      	bcc.n	800c6d2 <mem_trim+0x4a>
 800c6c8:	4b66      	ldr	r3, [pc, #408]	; (800c864 <mem_trim+0x1dc>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d306      	bcc.n	800c6e0 <mem_trim+0x58>
 800c6d2:	4b65      	ldr	r3, [pc, #404]	; (800c868 <mem_trim+0x1e0>)
 800c6d4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c6d8:	4964      	ldr	r1, [pc, #400]	; (800c86c <mem_trim+0x1e4>)
 800c6da:	4865      	ldr	r0, [pc, #404]	; (800c870 <mem_trim+0x1e8>)
 800c6dc:	f00c f908 	bl	80188f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c6e0:	4b5f      	ldr	r3, [pc, #380]	; (800c860 <mem_trim+0x1d8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d304      	bcc.n	800c6f4 <mem_trim+0x6c>
 800c6ea:	4b5e      	ldr	r3, [pc, #376]	; (800c864 <mem_trim+0x1dc>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d301      	bcc.n	800c6f8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	e0af      	b.n	800c858 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3b08      	subs	r3, #8
 800c6fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c6fe:	69b8      	ldr	r0, [r7, #24]
 800c700:	f7ff fe2c 	bl	800c35c <mem_to_ptr>
 800c704:	4603      	mov	r3, r0
 800c706:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	881a      	ldrh	r2, [r3, #0]
 800c70c:	8afb      	ldrh	r3, [r7, #22]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	b29b      	uxth	r3, r3
 800c712:	3b08      	subs	r3, #8
 800c714:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c716:	8bfa      	ldrh	r2, [r7, #30]
 800c718:	8abb      	ldrh	r3, [r7, #20]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d906      	bls.n	800c72c <mem_trim+0xa4>
 800c71e:	4b52      	ldr	r3, [pc, #328]	; (800c868 <mem_trim+0x1e0>)
 800c720:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c724:	4953      	ldr	r1, [pc, #332]	; (800c874 <mem_trim+0x1ec>)
 800c726:	4852      	ldr	r0, [pc, #328]	; (800c870 <mem_trim+0x1e8>)
 800c728:	f00c f8e2 	bl	80188f0 <iprintf>
  if (newsize > size) {
 800c72c:	8bfa      	ldrh	r2, [r7, #30]
 800c72e:	8abb      	ldrh	r3, [r7, #20]
 800c730:	429a      	cmp	r2, r3
 800c732:	d901      	bls.n	800c738 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	e08f      	b.n	800c858 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c738:	8bfa      	ldrh	r2, [r7, #30]
 800c73a:	8abb      	ldrh	r3, [r7, #20]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d101      	bne.n	800c744 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	e089      	b.n	800c858 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff fdf5 	bl	800c338 <ptr_to_mem>
 800c74e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	791b      	ldrb	r3, [r3, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d13f      	bne.n	800c7d8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c760:	d106      	bne.n	800c770 <mem_trim+0xe8>
 800c762:	4b41      	ldr	r3, [pc, #260]	; (800c868 <mem_trim+0x1e0>)
 800c764:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c768:	4943      	ldr	r1, [pc, #268]	; (800c878 <mem_trim+0x1f0>)
 800c76a:	4841      	ldr	r0, [pc, #260]	; (800c870 <mem_trim+0x1e8>)
 800c76c:	f00c f8c0 	bl	80188f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c776:	8afa      	ldrh	r2, [r7, #22]
 800c778:	8bfb      	ldrh	r3, [r7, #30]
 800c77a:	4413      	add	r3, r2
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3308      	adds	r3, #8
 800c780:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c782:	4b3e      	ldr	r3, [pc, #248]	; (800c87c <mem_trim+0x1f4>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d106      	bne.n	800c79a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff fdd2 	bl	800c338 <ptr_to_mem>
 800c794:	4602      	mov	r2, r0
 800c796:	4b39      	ldr	r3, [pc, #228]	; (800c87c <mem_trim+0x1f4>)
 800c798:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c79a:	89fb      	ldrh	r3, [r7, #14]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff fdcb 	bl	800c338 <ptr_to_mem>
 800c7a2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	89ba      	ldrh	r2, [r7, #12]
 800c7ae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	8afa      	ldrh	r2, [r7, #22]
 800c7b4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	89fa      	ldrh	r2, [r7, #14]
 800c7ba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7c4:	d047      	beq.n	800c856 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff fdb4 	bl	800c338 <ptr_to_mem>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	89fb      	ldrh	r3, [r7, #14]
 800c7d4:	8053      	strh	r3, [r2, #2]
 800c7d6:	e03e      	b.n	800c856 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c7d8:	8bfb      	ldrh	r3, [r7, #30]
 800c7da:	f103 0214 	add.w	r2, r3, #20
 800c7de:	8abb      	ldrh	r3, [r7, #20]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d838      	bhi.n	800c856 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7e4:	8afa      	ldrh	r2, [r7, #22]
 800c7e6:	8bfb      	ldrh	r3, [r7, #30]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7f8:	d106      	bne.n	800c808 <mem_trim+0x180>
 800c7fa:	4b1b      	ldr	r3, [pc, #108]	; (800c868 <mem_trim+0x1e0>)
 800c7fc:	f240 3216 	movw	r2, #790	; 0x316
 800c800:	491d      	ldr	r1, [pc, #116]	; (800c878 <mem_trim+0x1f0>)
 800c802:	481b      	ldr	r0, [pc, #108]	; (800c870 <mem_trim+0x1e8>)
 800c804:	f00c f874 	bl	80188f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c808:	89fb      	ldrh	r3, [r7, #14]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff fd94 	bl	800c338 <ptr_to_mem>
 800c810:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c812:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <mem_trim+0x1f4>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d202      	bcs.n	800c822 <mem_trim+0x19a>
      lfree = mem2;
 800c81c:	4a17      	ldr	r2, [pc, #92]	; (800c87c <mem_trim+0x1f4>)
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2200      	movs	r2, #0
 800c826:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	881a      	ldrh	r2, [r3, #0]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	8afa      	ldrh	r2, [r7, #22]
 800c834:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	89fa      	ldrh	r2, [r7, #14]
 800c83a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c844:	d007      	beq.n	800c856 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fd74 	bl	800c338 <ptr_to_mem>
 800c850:	4602      	mov	r2, r0
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c856:	687b      	ldr	r3, [r7, #4]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	20000460 	.word	0x20000460
 800c864:	20000464 	.word	0x20000464
 800c868:	0801dc44 	.word	0x0801dc44
 800c86c:	0801ddb4 	.word	0x0801ddb4
 800c870:	0801dc8c 	.word	0x0801dc8c
 800c874:	0801ddcc 	.word	0x0801ddcc
 800c878:	0801ddec 	.word	0x0801ddec
 800c87c:	20000468 	.word	0x20000468

0800c880 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <mem_malloc+0x14>
    return NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	e0d9      	b.n	800ca48 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c894:	88fb      	ldrh	r3, [r7, #6]
 800c896:	3303      	adds	r3, #3
 800c898:	b29b      	uxth	r3, r3
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c8a0:	8bbb      	ldrh	r3, [r7, #28]
 800c8a2:	2b0b      	cmp	r3, #11
 800c8a4:	d801      	bhi.n	800c8aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c8a6:	230c      	movs	r3, #12
 800c8a8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c8aa:	8bbb      	ldrh	r3, [r7, #28]
 800c8ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8b0:	d803      	bhi.n	800c8ba <mem_malloc+0x3a>
 800c8b2:	8bba      	ldrh	r2, [r7, #28]
 800c8b4:	88fb      	ldrh	r3, [r7, #6]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d201      	bcs.n	800c8be <mem_malloc+0x3e>
    return NULL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e0c4      	b.n	800ca48 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c8be:	4b64      	ldr	r3, [pc, #400]	; (800ca50 <mem_malloc+0x1d0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff fd4a 	bl	800c35c <mem_to_ptr>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	83fb      	strh	r3, [r7, #30]
 800c8cc:	e0b4      	b.n	800ca38 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c8ce:	8bfb      	ldrh	r3, [r7, #30]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7ff fd31 	bl	800c338 <ptr_to_mem>
 800c8d6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	791b      	ldrb	r3, [r3, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 80a4 	bne.w	800ca2a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	f1a3 0208 	sub.w	r2, r3, #8
 800c8f0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	f0c0 8099 	bcc.w	800ca2a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	8bfb      	ldrh	r3, [r7, #30]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	f1a3 0208 	sub.w	r2, r3, #8
 800c906:	8bbb      	ldrh	r3, [r7, #28]
 800c908:	3314      	adds	r3, #20
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d333      	bcc.n	800c976 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c90e:	8bfa      	ldrh	r2, [r7, #30]
 800c910:	8bbb      	ldrh	r3, [r7, #28]
 800c912:	4413      	add	r3, r2
 800c914:	b29b      	uxth	r3, r3
 800c916:	3308      	adds	r3, #8
 800c918:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c91a:	8a7b      	ldrh	r3, [r7, #18]
 800c91c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c920:	d106      	bne.n	800c930 <mem_malloc+0xb0>
 800c922:	4b4c      	ldr	r3, [pc, #304]	; (800ca54 <mem_malloc+0x1d4>)
 800c924:	f240 3287 	movw	r2, #903	; 0x387
 800c928:	494b      	ldr	r1, [pc, #300]	; (800ca58 <mem_malloc+0x1d8>)
 800c92a:	484c      	ldr	r0, [pc, #304]	; (800ca5c <mem_malloc+0x1dc>)
 800c92c:	f00b ffe0 	bl	80188f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c930:	8a7b      	ldrh	r3, [r7, #18]
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fd00 	bl	800c338 <ptr_to_mem>
 800c938:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	881a      	ldrh	r2, [r3, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8bfa      	ldrh	r2, [r7, #30]
 800c94c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	8a7a      	ldrh	r2, [r7, #18]
 800c952:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	2201      	movs	r2, #1
 800c958:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c962:	d00b      	beq.n	800c97c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff fce5 	bl	800c338 <ptr_to_mem>
 800c96e:	4602      	mov	r2, r0
 800c970:	8a7b      	ldrh	r3, [r7, #18]
 800c972:	8053      	strh	r3, [r2, #2]
 800c974:	e002      	b.n	800c97c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2201      	movs	r2, #1
 800c97a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c97c:	4b34      	ldr	r3, [pc, #208]	; (800ca50 <mem_malloc+0x1d0>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	429a      	cmp	r2, r3
 800c984:	d127      	bne.n	800c9d6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c986:	4b32      	ldr	r3, [pc, #200]	; (800ca50 <mem_malloc+0x1d0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c98c:	e005      	b.n	800c99a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff fcd0 	bl	800c338 <ptr_to_mem>
 800c998:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	791b      	ldrb	r3, [r3, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d004      	beq.n	800c9ac <mem_malloc+0x12c>
 800c9a2:	4b2f      	ldr	r3, [pc, #188]	; (800ca60 <mem_malloc+0x1e0>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	69ba      	ldr	r2, [r7, #24]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d1f0      	bne.n	800c98e <mem_malloc+0x10e>
          }
          lfree = cur;
 800c9ac:	4a28      	ldr	r2, [pc, #160]	; (800ca50 <mem_malloc+0x1d0>)
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c9b2:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <mem_malloc+0x1d0>)
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ca60 <mem_malloc+0x1e0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d00b      	beq.n	800c9d6 <mem_malloc+0x156>
 800c9be:	4b24      	ldr	r3, [pc, #144]	; (800ca50 <mem_malloc+0x1d0>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	791b      	ldrb	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d006      	beq.n	800c9d6 <mem_malloc+0x156>
 800c9c8:	4b22      	ldr	r3, [pc, #136]	; (800ca54 <mem_malloc+0x1d4>)
 800c9ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c9ce:	4925      	ldr	r1, [pc, #148]	; (800ca64 <mem_malloc+0x1e4>)
 800c9d0:	4822      	ldr	r0, [pc, #136]	; (800ca5c <mem_malloc+0x1dc>)
 800c9d2:	f00b ff8d 	bl	80188f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c9d6:	8bba      	ldrh	r2, [r7, #28]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	4413      	add	r3, r2
 800c9dc:	3308      	adds	r3, #8
 800c9de:	4a20      	ldr	r2, [pc, #128]	; (800ca60 <mem_malloc+0x1e0>)
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d906      	bls.n	800c9f4 <mem_malloc+0x174>
 800c9e6:	4b1b      	ldr	r3, [pc, #108]	; (800ca54 <mem_malloc+0x1d4>)
 800c9e8:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c9ec:	491e      	ldr	r1, [pc, #120]	; (800ca68 <mem_malloc+0x1e8>)
 800c9ee:	481b      	ldr	r0, [pc, #108]	; (800ca5c <mem_malloc+0x1dc>)
 800c9f0:	f00b ff7e 	bl	80188f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f003 0303 	and.w	r3, r3, #3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d006      	beq.n	800ca0c <mem_malloc+0x18c>
 800c9fe:	4b15      	ldr	r3, [pc, #84]	; (800ca54 <mem_malloc+0x1d4>)
 800ca00:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ca04:	4919      	ldr	r1, [pc, #100]	; (800ca6c <mem_malloc+0x1ec>)
 800ca06:	4815      	ldr	r0, [pc, #84]	; (800ca5c <mem_malloc+0x1dc>)
 800ca08:	f00b ff72 	bl	80188f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f003 0303 	and.w	r3, r3, #3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <mem_malloc+0x1a4>
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <mem_malloc+0x1d4>)
 800ca18:	f240 32be 	movw	r2, #958	; 0x3be
 800ca1c:	4914      	ldr	r1, [pc, #80]	; (800ca70 <mem_malloc+0x1f0>)
 800ca1e:	480f      	ldr	r0, [pc, #60]	; (800ca5c <mem_malloc+0x1dc>)
 800ca20:	f00b ff66 	bl	80188f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	3308      	adds	r3, #8
 800ca28:	e00e      	b.n	800ca48 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ca2a:	8bfb      	ldrh	r3, [r7, #30]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff fc83 	bl	800c338 <ptr_to_mem>
 800ca32:	4603      	mov	r3, r0
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca38:	8bfa      	ldrh	r2, [r7, #30]
 800ca3a:	8bbb      	ldrh	r3, [r7, #28]
 800ca3c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ca40:	429a      	cmp	r2, r3
 800ca42:	f4ff af44 	bcc.w	800c8ce <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3720      	adds	r7, #32
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20000468 	.word	0x20000468
 800ca54:	0801dc44 	.word	0x0801dc44
 800ca58:	0801ddec 	.word	0x0801ddec
 800ca5c:	0801dc8c 	.word	0x0801dc8c
 800ca60:	20000464 	.word	0x20000464
 800ca64:	0801de00 	.word	0x0801de00
 800ca68:	0801de1c 	.word	0x0801de1c
 800ca6c:	0801de4c 	.word	0x0801de4c
 800ca70:	0801de7c 	.word	0x0801de7c

0800ca74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	3303      	adds	r3, #3
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e011      	b.n	800caba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	461a      	mov	r2, r3
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3301      	adds	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	885b      	ldrh	r3, [r3, #2]
 800cabe:	461a      	mov	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	dbe7      	blt.n	800ca96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cac6:	bf00      	nop
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
	...

0800cad4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cada:	2300      	movs	r3, #0
 800cadc:	80fb      	strh	r3, [r7, #6]
 800cade:	e009      	b.n	800caf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cae0:	88fb      	ldrh	r3, [r7, #6]
 800cae2:	4a08      	ldr	r2, [pc, #32]	; (800cb04 <memp_init+0x30>)
 800cae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff ffc3 	bl	800ca74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800caee:	88fb      	ldrh	r3, [r7, #6]
 800caf0:	3301      	adds	r3, #1
 800caf2:	80fb      	strh	r3, [r7, #6]
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	2b08      	cmp	r3, #8
 800caf8:	d9f2      	bls.n	800cae0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	08020a04 	.word	0x08020a04

0800cb08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d012      	beq.n	800cb44 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	6812      	ldr	r2, [r2, #0]
 800cb26:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <do_memp_malloc_pool+0x38>
 800cb32:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <do_memp_malloc_pool+0x48>)
 800cb34:	f240 1219 	movw	r2, #281	; 0x119
 800cb38:	4906      	ldr	r1, [pc, #24]	; (800cb54 <do_memp_malloc_pool+0x4c>)
 800cb3a:	4807      	ldr	r0, [pc, #28]	; (800cb58 <do_memp_malloc_pool+0x50>)
 800cb3c:	f00b fed8 	bl	80188f0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	e000      	b.n	800cb46 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	0801dea0 	.word	0x0801dea0
 800cb54:	0801ded0 	.word	0x0801ded0
 800cb58:	0801def4 	.word	0x0801def4

0800cb5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	2b08      	cmp	r3, #8
 800cb6a:	d908      	bls.n	800cb7e <memp_malloc+0x22>
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <memp_malloc+0x3c>)
 800cb6e:	f240 1257 	movw	r2, #343	; 0x157
 800cb72:	490a      	ldr	r1, [pc, #40]	; (800cb9c <memp_malloc+0x40>)
 800cb74:	480a      	ldr	r0, [pc, #40]	; (800cba0 <memp_malloc+0x44>)
 800cb76:	f00b febb 	bl	80188f0 <iprintf>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e008      	b.n	800cb90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	4a08      	ldr	r2, [pc, #32]	; (800cba4 <memp_malloc+0x48>)
 800cb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff ffbe 	bl	800cb08 <do_memp_malloc_pool>
 800cb8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	0801dea0 	.word	0x0801dea0
 800cb9c:	0801df30 	.word	0x0801df30
 800cba0:	0801def4 	.word	0x0801def4
 800cba4:	08020a04 	.word	0x08020a04

0800cba8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d006      	beq.n	800cbca <do_memp_free_pool+0x22>
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <do_memp_free_pool+0x40>)
 800cbbe:	f240 126d 	movw	r2, #365	; 0x16d
 800cbc2:	490a      	ldr	r1, [pc, #40]	; (800cbec <do_memp_free_pool+0x44>)
 800cbc4:	480a      	ldr	r0, [pc, #40]	; (800cbf0 <do_memp_free_pool+0x48>)
 800cbc6:	f00b fe93 	bl	80188f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cbe0:	bf00      	nop
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	0801dea0 	.word	0x0801dea0
 800cbec:	0801df50 	.word	0x0801df50
 800cbf0:	0801def4 	.word	0x0801def4

0800cbf4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b08      	cmp	r3, #8
 800cc04:	d907      	bls.n	800cc16 <memp_free+0x22>
 800cc06:	4b0c      	ldr	r3, [pc, #48]	; (800cc38 <memp_free+0x44>)
 800cc08:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cc0c:	490b      	ldr	r1, [pc, #44]	; (800cc3c <memp_free+0x48>)
 800cc0e:	480c      	ldr	r0, [pc, #48]	; (800cc40 <memp_free+0x4c>)
 800cc10:	f00b fe6e 	bl	80188f0 <iprintf>
 800cc14:	e00c      	b.n	800cc30 <memp_free+0x3c>

  if (mem == NULL) {
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d008      	beq.n	800cc2e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	4a09      	ldr	r2, [pc, #36]	; (800cc44 <memp_free+0x50>)
 800cc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff ffbe 	bl	800cba8 <do_memp_free_pool>
 800cc2c:	e000      	b.n	800cc30 <memp_free+0x3c>
    return;
 800cc2e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801dea0 	.word	0x0801dea0
 800cc3c:	0801df70 	.word	0x0801df70
 800cc40:	0801def4 	.word	0x0801def4
 800cc44:	08020a04 	.word	0x08020a04

0800cc48 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cc4c:	bf00      	nop
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d108      	bne.n	800cc7e <netif_add+0x26>
 800cc6c:	4b5b      	ldr	r3, [pc, #364]	; (800cddc <netif_add+0x184>)
 800cc6e:	f240 1227 	movw	r2, #295	; 0x127
 800cc72:	495b      	ldr	r1, [pc, #364]	; (800cde0 <netif_add+0x188>)
 800cc74:	485b      	ldr	r0, [pc, #364]	; (800cde4 <netif_add+0x18c>)
 800cc76:	f00b fe3b 	bl	80188f0 <iprintf>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e0a9      	b.n	800cdd2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d108      	bne.n	800cc96 <netif_add+0x3e>
 800cc84:	4b55      	ldr	r3, [pc, #340]	; (800cddc <netif_add+0x184>)
 800cc86:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cc8a:	4957      	ldr	r1, [pc, #348]	; (800cde8 <netif_add+0x190>)
 800cc8c:	4855      	ldr	r0, [pc, #340]	; (800cde4 <netif_add+0x18c>)
 800cc8e:	f00b fe2f 	bl	80188f0 <iprintf>
 800cc92:	2300      	movs	r3, #0
 800cc94:	e09d      	b.n	800cdd2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d101      	bne.n	800cca0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cc9c:	4b53      	ldr	r3, [pc, #332]	; (800cdec <netif_add+0x194>)
 800cc9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cca6:	4b51      	ldr	r3, [pc, #324]	; (800cdec <netif_add+0x194>)
 800cca8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d101      	bne.n	800ccb4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ccb0:	4b4e      	ldr	r3, [pc, #312]	; (800cdec <netif_add+0x194>)
 800ccb2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a49      	ldr	r2, [pc, #292]	; (800cdf0 <netif_add+0x198>)
 800ccca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3324      	adds	r3, #36	; 0x24
 800ccde:	2204      	movs	r2, #4
 800cce0:	2100      	movs	r1, #0
 800cce2:	4618      	mov	r0, r3
 800cce4:	f00b f8f7 	bl	8017ed6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6a3a      	ldr	r2, [r7, #32]
 800ccf2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ccf4:	4b3f      	ldr	r3, [pc, #252]	; (800cdf4 <netif_add+0x19c>)
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd02:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	68b9      	ldr	r1, [r7, #8]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f914 	bl	800cf38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	4798      	blx	r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <netif_add+0xc8>
    return NULL;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	e058      	b.n	800cdd2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd26:	2bff      	cmp	r3, #255	; 0xff
 800cd28:	d103      	bne.n	800cd32 <netif_add+0xda>
        netif->num = 0;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd36:	4b30      	ldr	r3, [pc, #192]	; (800cdf8 <netif_add+0x1a0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	e02b      	b.n	800cd96 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d106      	bne.n	800cd54 <netif_add+0xfc>
 800cd46:	4b25      	ldr	r3, [pc, #148]	; (800cddc <netif_add+0x184>)
 800cd48:	f240 128b 	movw	r2, #395	; 0x18b
 800cd4c:	492b      	ldr	r1, [pc, #172]	; (800cdfc <netif_add+0x1a4>)
 800cd4e:	4825      	ldr	r0, [pc, #148]	; (800cde4 <netif_add+0x18c>)
 800cd50:	f00b fdce 	bl	80188f0 <iprintf>
        num_netifs++;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	3301      	adds	r3, #1
 800cd58:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	2bff      	cmp	r3, #255	; 0xff
 800cd5e:	dd06      	ble.n	800cd6e <netif_add+0x116>
 800cd60:	4b1e      	ldr	r3, [pc, #120]	; (800cddc <netif_add+0x184>)
 800cd62:	f240 128d 	movw	r2, #397	; 0x18d
 800cd66:	4926      	ldr	r1, [pc, #152]	; (800ce00 <netif_add+0x1a8>)
 800cd68:	481e      	ldr	r0, [pc, #120]	; (800cde4 <netif_add+0x18c>)
 800cd6a:	f00b fdc1 	bl	80188f0 <iprintf>
        if (netif2->num == netif->num) {
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d108      	bne.n	800cd90 <netif_add+0x138>
          netif->num++;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd84:	3301      	adds	r3, #1
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cd8e:	e005      	b.n	800cd9c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1d0      	bne.n	800cd3e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1be      	bne.n	800cd20 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cda8:	2bfe      	cmp	r3, #254	; 0xfe
 800cdaa:	d103      	bne.n	800cdb4 <netif_add+0x15c>
    netif_num = 0;
 800cdac:	4b11      	ldr	r3, [pc, #68]	; (800cdf4 <netif_add+0x19c>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	701a      	strb	r2, [r3, #0]
 800cdb2:	e006      	b.n	800cdc2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdba:	3301      	adds	r3, #1
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <netif_add+0x19c>)
 800cdc0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cdc2:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <netif_add+0x1a0>)
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cdca:	4a0b      	ldr	r2, [pc, #44]	; (800cdf8 <netif_add+0x1a0>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	0801df8c 	.word	0x0801df8c
 800cde0:	0801e020 	.word	0x0801e020
 800cde4:	0801dfdc 	.word	0x0801dfdc
 800cde8:	0801e03c 	.word	0x0801e03c
 800cdec:	08020a78 	.word	0x08020a78
 800cdf0:	0800d14b 	.word	0x0800d14b
 800cdf4:	20000490 	.word	0x20000490
 800cdf8:	20007370 	.word	0x20007370
 800cdfc:	0801e060 	.word	0x0801e060
 800ce00:	0801e074 	.word	0x0801e074

0800ce04 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f002 fabf 	bl	800f394 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f006 fe69 	bl	8013af0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <netif_do_set_ipaddr+0x20>
 800ce3a:	4b1d      	ldr	r3, [pc, #116]	; (800ceb0 <netif_do_set_ipaddr+0x88>)
 800ce3c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ce40:	491c      	ldr	r1, [pc, #112]	; (800ceb4 <netif_do_set_ipaddr+0x8c>)
 800ce42:	481d      	ldr	r0, [pc, #116]	; (800ceb8 <netif_do_set_ipaddr+0x90>)
 800ce44:	f00b fd54 	bl	80188f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <netif_do_set_ipaddr+0x34>
 800ce4e:	4b18      	ldr	r3, [pc, #96]	; (800ceb0 <netif_do_set_ipaddr+0x88>)
 800ce50:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ce54:	4917      	ldr	r1, [pc, #92]	; (800ceb4 <netif_do_set_ipaddr+0x8c>)
 800ce56:	4818      	ldr	r0, [pc, #96]	; (800ceb8 <netif_do_set_ipaddr+0x90>)
 800ce58:	f00b fd4a 	bl	80188f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3304      	adds	r3, #4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d01c      	beq.n	800cea4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3304      	adds	r3, #4
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ce7a:	f107 0314 	add.w	r3, r7, #20
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ffbf 	bl	800ce04 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <netif_do_set_ipaddr+0x6a>
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	e000      	b.n	800ce94 <netif_do_set_ipaddr+0x6c>
 800ce92:	2300      	movs	r3, #0
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ce98:	2101      	movs	r1, #1
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f8d2 	bl	800d044 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	0801df8c 	.word	0x0801df8c
 800ceb4:	0801e0a4 	.word	0x0801e0a4
 800ceb8:	0801dfdc 	.word	0x0801dfdc

0800cebc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3308      	adds	r3, #8
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d00a      	beq.n	800ceec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <netif_do_set_netmask+0x26>
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	e000      	b.n	800cee4 <netif_do_set_netmask+0x28>
 800cee2:	2300      	movs	r3, #0
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cee8:	2301      	movs	r3, #1
 800ceea:	e000      	b.n	800ceee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	60f8      	str	r0, [r7, #12]
 800cf02:	60b9      	str	r1, [r7, #8]
 800cf04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	330c      	adds	r3, #12
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d00a      	beq.n	800cf2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <netif_do_set_gw+0x26>
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	e000      	b.n	800cf22 <netif_do_set_gw+0x28>
 800cf20:	2300      	movs	r3, #0
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf26:	2301      	movs	r3, #1
 800cf28:	e000      	b.n	800cf2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d101      	bne.n	800cf58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cf54:	4b1c      	ldr	r3, [pc, #112]	; (800cfc8 <netif_set_addr+0x90>)
 800cf56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cf5e:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <netif_set_addr+0x90>)
 800cf60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cf68:	4b17      	ldr	r3, [pc, #92]	; (800cfc8 <netif_set_addr+0x90>)
 800cf6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <netif_set_addr+0x42>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <netif_set_addr+0x46>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e000      	b.n	800cf80 <netif_set_addr+0x48>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d006      	beq.n	800cf96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf88:	f107 0310 	add.w	r3, r7, #16
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	68b9      	ldr	r1, [r7, #8]
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff ff49 	bl	800ce28 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cf96:	69fa      	ldr	r2, [r7, #28]
 800cf98:	6879      	ldr	r1, [r7, #4]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f7ff ff8e 	bl	800cebc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cfa0:	69ba      	ldr	r2, [r7, #24]
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7ff ffa8 	bl	800cefa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cfb0:	f107 0310 	add.w	r3, r7, #16
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	68b9      	ldr	r1, [r7, #8]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff ff35 	bl	800ce28 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cfbe:	bf00      	nop
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	08020a78 	.word	0x08020a78

0800cfcc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cfd4:	4a04      	ldr	r2, [pc, #16]	; (800cfe8 <netif_set_default+0x1c>)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cfda:	bf00      	nop
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	20007374 	.word	0x20007374

0800cfec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d107      	bne.n	800d00a <netif_set_up+0x1e>
 800cffa:	4b0f      	ldr	r3, [pc, #60]	; (800d038 <netif_set_up+0x4c>)
 800cffc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d000:	490e      	ldr	r1, [pc, #56]	; (800d03c <netif_set_up+0x50>)
 800d002:	480f      	ldr	r0, [pc, #60]	; (800d040 <netif_set_up+0x54>)
 800d004:	f00b fc74 	bl	80188f0 <iprintf>
 800d008:	e013      	b.n	800d032 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10c      	bne.n	800d032 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d01e:	f043 0301 	orr.w	r3, r3, #1
 800d022:	b2da      	uxtb	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d02a:	2103      	movs	r1, #3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f809 	bl	800d044 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	0801df8c 	.word	0x0801df8c
 800d03c:	0801e114 	.word	0x0801e114
 800d040:	0801dfdc 	.word	0x0801dfdc

0800d044 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <netif_issue_reports+0x20>
 800d056:	4b18      	ldr	r3, [pc, #96]	; (800d0b8 <netif_issue_reports+0x74>)
 800d058:	f240 326d 	movw	r2, #877	; 0x36d
 800d05c:	4917      	ldr	r1, [pc, #92]	; (800d0bc <netif_issue_reports+0x78>)
 800d05e:	4818      	ldr	r0, [pc, #96]	; (800d0c0 <netif_issue_reports+0x7c>)
 800d060:	f00b fc46 	bl	80188f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d06a:	f003 0304 	and.w	r3, r3, #4
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d01e      	beq.n	800d0b0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d078:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d017      	beq.n	800d0b0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d013      	beq.n	800d0b2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3304      	adds	r3, #4
 800d08e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00e      	beq.n	800d0b2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d09a:	f003 0308 	and.w	r3, r3, #8
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f009 fae3 	bl	8016674 <etharp_request>
 800d0ae:	e000      	b.n	800d0b2 <netif_issue_reports+0x6e>
    return;
 800d0b0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	0801df8c 	.word	0x0801df8c
 800d0bc:	0801e130 	.word	0x0801e130
 800d0c0:	0801dfdc 	.word	0x0801dfdc

0800d0c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d107      	bne.n	800d0e2 <netif_set_down+0x1e>
 800d0d2:	4b12      	ldr	r3, [pc, #72]	; (800d11c <netif_set_down+0x58>)
 800d0d4:	f240 329b 	movw	r2, #923	; 0x39b
 800d0d8:	4911      	ldr	r1, [pc, #68]	; (800d120 <netif_set_down+0x5c>)
 800d0da:	4812      	ldr	r0, [pc, #72]	; (800d124 <netif_set_down+0x60>)
 800d0dc:	f00b fc08 	bl	80188f0 <iprintf>
 800d0e0:	e019      	b.n	800d116 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d012      	beq.n	800d116 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0f6:	f023 0301 	bic.w	r3, r3, #1
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d108:	f003 0308 	and.w	r3, r3, #8
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f008 fe69 	bl	8015de8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	0801df8c 	.word	0x0801df8c
 800d120:	0801e154 	.word	0x0801e154
 800d124:	0801dfdc 	.word	0x0801dfdc

0800d128 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	61da      	str	r2, [r3, #28]
  }
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b085      	sub	sp, #20
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d156:	f06f 030b 	mvn.w	r3, #11
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
	...

0800d168 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d013      	beq.n	800d1a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d178:	4b0d      	ldr	r3, [pc, #52]	; (800d1b0 <netif_get_by_index+0x48>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e00c      	b.n	800d19a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d186:	3301      	adds	r3, #1
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	79fa      	ldrb	r2, [r7, #7]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d101      	bne.n	800d194 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	e006      	b.n	800d1a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ef      	bne.n	800d180 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	20007370 	.word	0x20007370

0800d1b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d1b8:	4b03      	ldr	r3, [pc, #12]	; (800d1c8 <pbuf_pool_is_empty+0x14>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d1be:	bf00      	nop
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	20007378 	.word	0x20007378

0800d1cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	461a      	mov	r2, r3
 800d1da:	460b      	mov	r3, r1
 800d1dc:	80fb      	strh	r3, [r7, #6]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	88fa      	ldrh	r2, [r7, #6]
 800d1f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	88ba      	ldrh	r2, [r7, #4]
 800d1f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d1fa:	8b3b      	ldrh	r3, [r7, #24]
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	7f3a      	ldrb	r2, [r7, #28]
 800d206:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2201      	movs	r2, #1
 800d20c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	73da      	strb	r2, [r3, #15]
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	; 0x30
 800d224:	af02      	add	r7, sp, #8
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
 800d22a:	460b      	mov	r3, r1
 800d22c:	80bb      	strh	r3, [r7, #4]
 800d22e:	4613      	mov	r3, r2
 800d230:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d236:	887b      	ldrh	r3, [r7, #2]
 800d238:	2b41      	cmp	r3, #65	; 0x41
 800d23a:	d00b      	beq.n	800d254 <pbuf_alloc+0x34>
 800d23c:	2b41      	cmp	r3, #65	; 0x41
 800d23e:	dc02      	bgt.n	800d246 <pbuf_alloc+0x26>
 800d240:	2b01      	cmp	r3, #1
 800d242:	d007      	beq.n	800d254 <pbuf_alloc+0x34>
 800d244:	e0c2      	b.n	800d3cc <pbuf_alloc+0x1ac>
 800d246:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d24a:	d00b      	beq.n	800d264 <pbuf_alloc+0x44>
 800d24c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d250:	d070      	beq.n	800d334 <pbuf_alloc+0x114>
 800d252:	e0bb      	b.n	800d3cc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d254:	887a      	ldrh	r2, [r7, #2]
 800d256:	88bb      	ldrh	r3, [r7, #4]
 800d258:	4619      	mov	r1, r3
 800d25a:	2000      	movs	r0, #0
 800d25c:	f000 f8d2 	bl	800d404 <pbuf_alloc_reference>
 800d260:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d262:	e0bd      	b.n	800d3e0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d26c:	88bb      	ldrh	r3, [r7, #4]
 800d26e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d270:	2008      	movs	r0, #8
 800d272:	f7ff fc73 	bl	800cb5c <memp_malloc>
 800d276:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d109      	bne.n	800d292 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d27e:	f7ff ff99 	bl	800d1b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d28a:	f000 faa9 	bl	800d7e0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	e0a7      	b.n	800d3e2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d294:	3303      	adds	r3, #3
 800d296:	b29b      	uxth	r3, r3
 800d298:	f023 0303 	bic.w	r3, r3, #3
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8b7a      	ldrh	r2, [r7, #26]
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	bf28      	it	cs
 800d2aa:	4613      	movcs	r3, r2
 800d2ac:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d2ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2b0:	3310      	adds	r3, #16
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	3303      	adds	r3, #3
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	4618      	mov	r0, r3
 800d2be:	89f9      	ldrh	r1, [r7, #14]
 800d2c0:	8b7a      	ldrh	r2, [r7, #26]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	887b      	ldrh	r3, [r7, #2]
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	6938      	ldr	r0, [r7, #16]
 800d2d0:	f7ff ff7c 	bl	800d1cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d006      	beq.n	800d2ee <pbuf_alloc+0xce>
 800d2e0:	4b42      	ldr	r3, [pc, #264]	; (800d3ec <pbuf_alloc+0x1cc>)
 800d2e2:	f240 1201 	movw	r2, #257	; 0x101
 800d2e6:	4942      	ldr	r1, [pc, #264]	; (800d3f0 <pbuf_alloc+0x1d0>)
 800d2e8:	4842      	ldr	r0, [pc, #264]	; (800d3f4 <pbuf_alloc+0x1d4>)
 800d2ea:	f00b fb01 	bl	80188f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d2ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2f0:	3303      	adds	r3, #3
 800d2f2:	f023 0303 	bic.w	r3, r3, #3
 800d2f6:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800d2fa:	d106      	bne.n	800d30a <pbuf_alloc+0xea>
 800d2fc:	4b3b      	ldr	r3, [pc, #236]	; (800d3ec <pbuf_alloc+0x1cc>)
 800d2fe:	f240 1203 	movw	r2, #259	; 0x103
 800d302:	493d      	ldr	r1, [pc, #244]	; (800d3f8 <pbuf_alloc+0x1d8>)
 800d304:	483b      	ldr	r0, [pc, #236]	; (800d3f4 <pbuf_alloc+0x1d4>)
 800d306:	f00b faf3 	bl	80188f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d102      	bne.n	800d316 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	627b      	str	r3, [r7, #36]	; 0x24
 800d314:	e002      	b.n	800d31c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d320:	8b7a      	ldrh	r2, [r7, #26]
 800d322:	89fb      	ldrh	r3, [r7, #14]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d32c:	8b7b      	ldrh	r3, [r7, #26]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d19e      	bne.n	800d270 <pbuf_alloc+0x50>
      break;
 800d332:	e055      	b.n	800d3e0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d336:	3303      	adds	r3, #3
 800d338:	b29b      	uxth	r3, r3
 800d33a:	f023 0303 	bic.w	r3, r3, #3
 800d33e:	b29a      	uxth	r2, r3
 800d340:	88bb      	ldrh	r3, [r7, #4]
 800d342:	3303      	adds	r3, #3
 800d344:	b29b      	uxth	r3, r3
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	4413      	add	r3, r2
 800d34e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d350:	8b3b      	ldrh	r3, [r7, #24]
 800d352:	3310      	adds	r3, #16
 800d354:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d356:	8b3a      	ldrh	r2, [r7, #24]
 800d358:	88bb      	ldrh	r3, [r7, #4]
 800d35a:	3303      	adds	r3, #3
 800d35c:	f023 0303 	bic.w	r3, r3, #3
 800d360:	429a      	cmp	r2, r3
 800d362:	d306      	bcc.n	800d372 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d364:	8afa      	ldrh	r2, [r7, #22]
 800d366:	88bb      	ldrh	r3, [r7, #4]
 800d368:	3303      	adds	r3, #3
 800d36a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d36e:	429a      	cmp	r2, r3
 800d370:	d201      	bcs.n	800d376 <pbuf_alloc+0x156>
        return NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	e035      	b.n	800d3e2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d376:	8afb      	ldrh	r3, [r7, #22]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fa81 	bl	800c880 <mem_malloc>
 800d37e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	2b00      	cmp	r3, #0
 800d384:	d101      	bne.n	800d38a <pbuf_alloc+0x16a>
        return NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	e02b      	b.n	800d3e2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d38a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d38c:	3310      	adds	r3, #16
 800d38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d390:	4413      	add	r3, r2
 800d392:	3303      	adds	r3, #3
 800d394:	f023 0303 	bic.w	r3, r3, #3
 800d398:	4618      	mov	r0, r3
 800d39a:	88b9      	ldrh	r1, [r7, #4]
 800d39c:	88ba      	ldrh	r2, [r7, #4]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	887b      	ldrh	r3, [r7, #2]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ac:	f7ff ff0e 	bl	800d1cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	f003 0303 	and.w	r3, r3, #3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d010      	beq.n	800d3de <pbuf_alloc+0x1be>
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <pbuf_alloc+0x1cc>)
 800d3be:	f240 1223 	movw	r2, #291	; 0x123
 800d3c2:	490e      	ldr	r1, [pc, #56]	; (800d3fc <pbuf_alloc+0x1dc>)
 800d3c4:	480b      	ldr	r0, [pc, #44]	; (800d3f4 <pbuf_alloc+0x1d4>)
 800d3c6:	f00b fa93 	bl	80188f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d3ca:	e008      	b.n	800d3de <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d3cc:	4b07      	ldr	r3, [pc, #28]	; (800d3ec <pbuf_alloc+0x1cc>)
 800d3ce:	f240 1227 	movw	r2, #295	; 0x127
 800d3d2:	490b      	ldr	r1, [pc, #44]	; (800d400 <pbuf_alloc+0x1e0>)
 800d3d4:	4807      	ldr	r0, [pc, #28]	; (800d3f4 <pbuf_alloc+0x1d4>)
 800d3d6:	f00b fa8b 	bl	80188f0 <iprintf>
      return NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e001      	b.n	800d3e2 <pbuf_alloc+0x1c2>
      break;
 800d3de:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3728      	adds	r7, #40	; 0x28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0801e1bc 	.word	0x0801e1bc
 800d3f0:	0801e1ec 	.word	0x0801e1ec
 800d3f4:	0801e21c 	.word	0x0801e21c
 800d3f8:	0801e244 	.word	0x0801e244
 800d3fc:	0801e278 	.word	0x0801e278
 800d400:	0801e2a4 	.word	0x0801e2a4

0800d404 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af02      	add	r7, sp, #8
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	807b      	strh	r3, [r7, #2]
 800d410:	4613      	mov	r3, r2
 800d412:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d414:	883b      	ldrh	r3, [r7, #0]
 800d416:	2b41      	cmp	r3, #65	; 0x41
 800d418:	d009      	beq.n	800d42e <pbuf_alloc_reference+0x2a>
 800d41a:	883b      	ldrh	r3, [r7, #0]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d006      	beq.n	800d42e <pbuf_alloc_reference+0x2a>
 800d420:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <pbuf_alloc_reference+0x5c>)
 800d422:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d426:	490f      	ldr	r1, [pc, #60]	; (800d464 <pbuf_alloc_reference+0x60>)
 800d428:	480f      	ldr	r0, [pc, #60]	; (800d468 <pbuf_alloc_reference+0x64>)
 800d42a:	f00b fa61 	bl	80188f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d42e:	2007      	movs	r0, #7
 800d430:	f7ff fb94 	bl	800cb5c <memp_malloc>
 800d434:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d43c:	2300      	movs	r3, #0
 800d43e:	e00b      	b.n	800d458 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d440:	8879      	ldrh	r1, [r7, #2]
 800d442:	887a      	ldrh	r2, [r7, #2]
 800d444:	2300      	movs	r3, #0
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	883b      	ldrh	r3, [r7, #0]
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	460b      	mov	r3, r1
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff febb 	bl	800d1cc <pbuf_init_alloced_pbuf>
  return p;
 800d456:	68fb      	ldr	r3, [r7, #12]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801e1bc 	.word	0x0801e1bc
 800d464:	0801e2c0 	.word	0x0801e2c0
 800d468:	0801e21c 	.word	0x0801e21c

0800d46c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af02      	add	r7, sp, #8
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]
 800d478:	460b      	mov	r3, r1
 800d47a:	81bb      	strh	r3, [r7, #12]
 800d47c:	4613      	mov	r3, r2
 800d47e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d480:	7bfb      	ldrb	r3, [r7, #15]
 800d482:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d484:	8a7b      	ldrh	r3, [r7, #18]
 800d486:	3303      	adds	r3, #3
 800d488:	f023 0203 	bic.w	r2, r3, #3
 800d48c:	89bb      	ldrh	r3, [r7, #12]
 800d48e:	441a      	add	r2, r3
 800d490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d492:	429a      	cmp	r2, r3
 800d494:	d901      	bls.n	800d49a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d496:	2300      	movs	r3, #0
 800d498:	e018      	b.n	800d4cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d007      	beq.n	800d4b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d4a0:	8a7b      	ldrh	r3, [r7, #18]
 800d4a2:	3303      	adds	r3, #3
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	6a3a      	ldr	r2, [r7, #32]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	e001      	b.n	800d4b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	89b9      	ldrh	r1, [r7, #12]
 800d4b8:	89ba      	ldrh	r2, [r7, #12]
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	897b      	ldrh	r3, [r7, #10]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	6979      	ldr	r1, [r7, #20]
 800d4c6:	f7ff fe81 	bl	800d1cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d4ca:	687b      	ldr	r3, [r7, #4]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <pbuf_realloc+0x20>
 800d4e6:	4b3a      	ldr	r3, [pc, #232]	; (800d5d0 <pbuf_realloc+0xfc>)
 800d4e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d4ec:	4939      	ldr	r1, [pc, #228]	; (800d5d4 <pbuf_realloc+0x100>)
 800d4ee:	483a      	ldr	r0, [pc, #232]	; (800d5d8 <pbuf_realloc+0x104>)
 800d4f0:	f00b f9fe 	bl	80188f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	891b      	ldrh	r3, [r3, #8]
 800d4f8:	887a      	ldrh	r2, [r7, #2]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d264      	bcs.n	800d5c8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	891a      	ldrh	r2, [r3, #8]
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d508:	887b      	ldrh	r3, [r7, #2]
 800d50a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d510:	e018      	b.n	800d544 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	895b      	ldrh	r3, [r3, #10]
 800d516:	897a      	ldrh	r2, [r7, #10]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	891a      	ldrh	r2, [r3, #8]
 800d520:	893b      	ldrh	r3, [r7, #8]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	b29a      	uxth	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d106      	bne.n	800d544 <pbuf_realloc+0x70>
 800d536:	4b26      	ldr	r3, [pc, #152]	; (800d5d0 <pbuf_realloc+0xfc>)
 800d538:	f240 12af 	movw	r2, #431	; 0x1af
 800d53c:	4927      	ldr	r1, [pc, #156]	; (800d5dc <pbuf_realloc+0x108>)
 800d53e:	4826      	ldr	r0, [pc, #152]	; (800d5d8 <pbuf_realloc+0x104>)
 800d540:	f00b f9d6 	bl	80188f0 <iprintf>
  while (rem_len > q->len) {
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	895b      	ldrh	r3, [r3, #10]
 800d548:	897a      	ldrh	r2, [r7, #10]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d8e1      	bhi.n	800d512 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	7b1b      	ldrb	r3, [r3, #12]
 800d552:	f003 030f 	and.w	r3, r3, #15
 800d556:	2b00      	cmp	r3, #0
 800d558:	d122      	bne.n	800d5a0 <pbuf_realloc+0xcc>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	895b      	ldrh	r3, [r3, #10]
 800d55e:	897a      	ldrh	r2, [r7, #10]
 800d560:	429a      	cmp	r2, r3
 800d562:	d01d      	beq.n	800d5a0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	7b5b      	ldrb	r3, [r3, #13]
 800d568:	f003 0302 	and.w	r3, r3, #2
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d117      	bne.n	800d5a0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	461a      	mov	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	897b      	ldrh	r3, [r7, #10]
 800d57e:	4413      	add	r3, r2
 800d580:	b29b      	uxth	r3, r3
 800d582:	4619      	mov	r1, r3
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff f87f 	bl	800c688 <mem_trim>
 800d58a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <pbuf_realloc+0xcc>
 800d592:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <pbuf_realloc+0xfc>)
 800d594:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d598:	4911      	ldr	r1, [pc, #68]	; (800d5e0 <pbuf_realloc+0x10c>)
 800d59a:	480f      	ldr	r0, [pc, #60]	; (800d5d8 <pbuf_realloc+0x104>)
 800d59c:	f00b f9a8 	bl	80188f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	897a      	ldrh	r2, [r7, #10]
 800d5a4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	895a      	ldrh	r2, [r3, #10]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d004      	beq.n	800d5c0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 f910 	bl	800d7e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	e000      	b.n	800d5ca <pbuf_realloc+0xf6>
    return;
 800d5c8:	bf00      	nop

}
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	0801e1bc 	.word	0x0801e1bc
 800d5d4:	0801e2d4 	.word	0x0801e2d4
 800d5d8:	0801e21c 	.word	0x0801e21c
 800d5dc:	0801e2ec 	.word	0x0801e2ec
 800d5e0:	0801e304 	.word	0x0801e304

0800d5e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <pbuf_add_header_impl+0x22>
 800d5f8:	4b2b      	ldr	r3, [pc, #172]	; (800d6a8 <pbuf_add_header_impl+0xc4>)
 800d5fa:	f240 12df 	movw	r2, #479	; 0x1df
 800d5fe:	492b      	ldr	r1, [pc, #172]	; (800d6ac <pbuf_add_header_impl+0xc8>)
 800d600:	482b      	ldr	r0, [pc, #172]	; (800d6b0 <pbuf_add_header_impl+0xcc>)
 800d602:	f00b f975 	bl	80188f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <pbuf_add_header_impl+0x30>
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d612:	d301      	bcc.n	800d618 <pbuf_add_header_impl+0x34>
    return 1;
 800d614:	2301      	movs	r3, #1
 800d616:	e043      	b.n	800d6a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <pbuf_add_header_impl+0x3e>
    return 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	e03e      	b.n	800d6a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	891a      	ldrh	r2, [r3, #8]
 800d62a:	8a7b      	ldrh	r3, [r7, #18]
 800d62c:	4413      	add	r3, r2
 800d62e:	b29b      	uxth	r3, r3
 800d630:	8a7a      	ldrh	r2, [r7, #18]
 800d632:	429a      	cmp	r2, r3
 800d634:	d901      	bls.n	800d63a <pbuf_add_header_impl+0x56>
    return 1;
 800d636:	2301      	movs	r3, #1
 800d638:	e032      	b.n	800d6a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	7b1b      	ldrb	r3, [r3, #12]
 800d63e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d640:	8a3b      	ldrh	r3, [r7, #16]
 800d642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00c      	beq.n	800d664 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	685a      	ldr	r2, [r3, #4]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	425b      	negs	r3, r3
 800d652:	4413      	add	r3, r2
 800d654:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3310      	adds	r3, #16
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d20d      	bcs.n	800d67c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d660:	2301      	movs	r3, #1
 800d662:	e01d      	b.n	800d6a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d006      	beq.n	800d678 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	425b      	negs	r3, r3
 800d672:	4413      	add	r3, r2
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	e001      	b.n	800d67c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d678:	2301      	movs	r3, #1
 800d67a:	e011      	b.n	800d6a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	895a      	ldrh	r2, [r3, #10]
 800d686:	8a7b      	ldrh	r3, [r7, #18]
 800d688:	4413      	add	r3, r2
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	891a      	ldrh	r2, [r3, #8]
 800d694:	8a7b      	ldrh	r3, [r7, #18]
 800d696:	4413      	add	r3, r2
 800d698:	b29a      	uxth	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	0801e1bc 	.word	0x0801e1bc
 800d6ac:	0801e320 	.word	0x0801e320
 800d6b0:	0801e21c 	.word	0x0801e21c

0800d6b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d6be:	2200      	movs	r2, #0
 800d6c0:	6839      	ldr	r1, [r7, #0]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff ff8e 	bl	800d5e4 <pbuf_add_header_impl>
 800d6c8:	4603      	mov	r3, r0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <pbuf_remove_header+0x1e>
 800d6e4:	4b20      	ldr	r3, [pc, #128]	; (800d768 <pbuf_remove_header+0x94>)
 800d6e6:	f240 224b 	movw	r2, #587	; 0x24b
 800d6ea:	4920      	ldr	r1, [pc, #128]	; (800d76c <pbuf_remove_header+0x98>)
 800d6ec:	4820      	ldr	r0, [pc, #128]	; (800d770 <pbuf_remove_header+0x9c>)
 800d6ee:	f00b f8ff 	bl	80188f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d003      	beq.n	800d700 <pbuf_remove_header+0x2c>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6fe:	d301      	bcc.n	800d704 <pbuf_remove_header+0x30>
    return 1;
 800d700:	2301      	movs	r3, #1
 800d702:	e02c      	b.n	800d75e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <pbuf_remove_header+0x3a>
    return 0;
 800d70a:	2300      	movs	r3, #0
 800d70c:	e027      	b.n	800d75e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	895b      	ldrh	r3, [r3, #10]
 800d716:	89fa      	ldrh	r2, [r7, #14]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d908      	bls.n	800d72e <pbuf_remove_header+0x5a>
 800d71c:	4b12      	ldr	r3, [pc, #72]	; (800d768 <pbuf_remove_header+0x94>)
 800d71e:	f240 2255 	movw	r2, #597	; 0x255
 800d722:	4914      	ldr	r1, [pc, #80]	; (800d774 <pbuf_remove_header+0xa0>)
 800d724:	4812      	ldr	r0, [pc, #72]	; (800d770 <pbuf_remove_header+0x9c>)
 800d726:	f00b f8e3 	bl	80188f0 <iprintf>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e017      	b.n	800d75e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	441a      	add	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	895a      	ldrh	r2, [r3, #10]
 800d744:	89fb      	ldrh	r3, [r7, #14]
 800d746:	1ad3      	subs	r3, r2, r3
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	891a      	ldrh	r2, [r3, #8]
 800d752:	89fb      	ldrh	r3, [r7, #14]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	0801e1bc 	.word	0x0801e1bc
 800d76c:	0801e320 	.word	0x0801e320
 800d770:	0801e21c 	.word	0x0801e21c
 800d774:	0801e32c 	.word	0x0801e32c

0800d778 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	460b      	mov	r3, r1
 800d782:	807b      	strh	r3, [r7, #2]
 800d784:	4613      	mov	r3, r2
 800d786:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	da08      	bge.n	800d7a2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d794:	425b      	negs	r3, r3
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff ff9b 	bl	800d6d4 <pbuf_remove_header>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	e007      	b.n	800d7b2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d7a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d7a6:	787a      	ldrb	r2, [r7, #1]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff ff1a 	bl	800d5e4 <pbuf_add_header_impl>
 800d7b0:	4603      	mov	r3, r0
  }
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d7c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff ffd2 	bl	800d778 <pbuf_header_impl>
 800d7d4:	4603      	mov	r3, r0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10b      	bne.n	800d806 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d106      	bne.n	800d802 <pbuf_free+0x22>
 800d7f4:	4b38      	ldr	r3, [pc, #224]	; (800d8d8 <pbuf_free+0xf8>)
 800d7f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d7fa:	4938      	ldr	r1, [pc, #224]	; (800d8dc <pbuf_free+0xfc>)
 800d7fc:	4838      	ldr	r0, [pc, #224]	; (800d8e0 <pbuf_free+0x100>)
 800d7fe:	f00b f877 	bl	80188f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d802:	2300      	movs	r3, #0
 800d804:	e063      	b.n	800d8ce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d80a:	e05c      	b.n	800d8c6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7b9b      	ldrb	r3, [r3, #14]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <pbuf_free+0x42>
 800d814:	4b30      	ldr	r3, [pc, #192]	; (800d8d8 <pbuf_free+0xf8>)
 800d816:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d81a:	4932      	ldr	r1, [pc, #200]	; (800d8e4 <pbuf_free+0x104>)
 800d81c:	4830      	ldr	r0, [pc, #192]	; (800d8e0 <pbuf_free+0x100>)
 800d81e:	f00b f867 	bl	80188f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7b9b      	ldrb	r3, [r3, #14]
 800d826:	3b01      	subs	r3, #1
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	739a      	strb	r2, [r3, #14]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	7b9b      	ldrb	r3, [r3, #14]
 800d832:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d834:	7dbb      	ldrb	r3, [r7, #22]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d143      	bne.n	800d8c2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7b1b      	ldrb	r3, [r3, #12]
 800d844:	f003 030f 	and.w	r3, r3, #15
 800d848:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	7b5b      	ldrb	r3, [r3, #13]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d011      	beq.n	800d87a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <pbuf_free+0x90>
 800d862:	4b1d      	ldr	r3, [pc, #116]	; (800d8d8 <pbuf_free+0xf8>)
 800d864:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d868:	491f      	ldr	r1, [pc, #124]	; (800d8e8 <pbuf_free+0x108>)
 800d86a:	481d      	ldr	r0, [pc, #116]	; (800d8e0 <pbuf_free+0x100>)
 800d86c:	f00b f840 	bl	80188f0 <iprintf>
        pc->custom_free_function(p);
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	4798      	blx	r3
 800d878:	e01d      	b.n	800d8b6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d104      	bne.n	800d88a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d880:	6879      	ldr	r1, [r7, #4]
 800d882:	2008      	movs	r0, #8
 800d884:	f7ff f9b6 	bl	800cbf4 <memp_free>
 800d888:	e015      	b.n	800d8b6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d104      	bne.n	800d89a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	2007      	movs	r0, #7
 800d894:	f7ff f9ae 	bl	800cbf4 <memp_free>
 800d898:	e00d      	b.n	800d8b6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d103      	bne.n	800d8a8 <pbuf_free+0xc8>
          mem_free(p);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7fe fe87 	bl	800c5b4 <mem_free>
 800d8a6:	e006      	b.n	800d8b6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d8a8:	4b0b      	ldr	r3, [pc, #44]	; (800d8d8 <pbuf_free+0xf8>)
 800d8aa:	f240 320f 	movw	r2, #783	; 0x30f
 800d8ae:	490f      	ldr	r1, [pc, #60]	; (800d8ec <pbuf_free+0x10c>)
 800d8b0:	480b      	ldr	r0, [pc, #44]	; (800d8e0 <pbuf_free+0x100>)
 800d8b2:	f00b f81d 	bl	80188f0 <iprintf>
        }
      }
      count++;
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	e001      	b.n	800d8c6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d19f      	bne.n	800d80c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	0801e1bc 	.word	0x0801e1bc
 800d8dc:	0801e320 	.word	0x0801e320
 800d8e0:	0801e21c 	.word	0x0801e21c
 800d8e4:	0801e34c 	.word	0x0801e34c
 800d8e8:	0801e364 	.word	0x0801e364
 800d8ec:	0801e388 	.word	0x0801e388

0800d8f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d8fc:	e005      	b.n	800d90a <pbuf_clen+0x1a>
    ++len;
 800d8fe:	89fb      	ldrh	r3, [r7, #14]
 800d900:	3301      	adds	r3, #1
 800d902:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f6      	bne.n	800d8fe <pbuf_clen+0xe>
  }
  return len;
 800d910:	89fb      	ldrh	r3, [r7, #14]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3714      	adds	r7, #20
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
	...

0800d920 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d010      	beq.n	800d950 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7b9b      	ldrb	r3, [r3, #14]
 800d932:	3301      	adds	r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	7b9b      	ldrb	r3, [r3, #14]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <pbuf_ref+0x30>
 800d942:	4b05      	ldr	r3, [pc, #20]	; (800d958 <pbuf_ref+0x38>)
 800d944:	f240 3242 	movw	r2, #834	; 0x342
 800d948:	4904      	ldr	r1, [pc, #16]	; (800d95c <pbuf_ref+0x3c>)
 800d94a:	4805      	ldr	r0, [pc, #20]	; (800d960 <pbuf_ref+0x40>)
 800d94c:	f00a ffd0 	bl	80188f0 <iprintf>
  }
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	0801e1bc 	.word	0x0801e1bc
 800d95c:	0801e39c 	.word	0x0801e39c
 800d960:	0801e21c 	.word	0x0801e21c

0800d964 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <pbuf_cat+0x16>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d107      	bne.n	800d98a <pbuf_cat+0x26>
 800d97a:	4b20      	ldr	r3, [pc, #128]	; (800d9fc <pbuf_cat+0x98>)
 800d97c:	f240 325a 	movw	r2, #858	; 0x35a
 800d980:	491f      	ldr	r1, [pc, #124]	; (800da00 <pbuf_cat+0x9c>)
 800d982:	4820      	ldr	r0, [pc, #128]	; (800da04 <pbuf_cat+0xa0>)
 800d984:	f00a ffb4 	bl	80188f0 <iprintf>
 800d988:	e034      	b.n	800d9f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60fb      	str	r3, [r7, #12]
 800d98e:	e00a      	b.n	800d9a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	891a      	ldrh	r2, [r3, #8]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	891b      	ldrh	r3, [r3, #8]
 800d998:	4413      	add	r3, r2
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1f0      	bne.n	800d990 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	891a      	ldrh	r2, [r3, #8]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	895b      	ldrh	r3, [r3, #10]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d006      	beq.n	800d9c8 <pbuf_cat+0x64>
 800d9ba:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <pbuf_cat+0x98>)
 800d9bc:	f240 3262 	movw	r2, #866	; 0x362
 800d9c0:	4911      	ldr	r1, [pc, #68]	; (800da08 <pbuf_cat+0xa4>)
 800d9c2:	4810      	ldr	r0, [pc, #64]	; (800da04 <pbuf_cat+0xa0>)
 800d9c4:	f00a ff94 	bl	80188f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d006      	beq.n	800d9de <pbuf_cat+0x7a>
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <pbuf_cat+0x98>)
 800d9d2:	f240 3263 	movw	r2, #867	; 0x363
 800d9d6:	490d      	ldr	r1, [pc, #52]	; (800da0c <pbuf_cat+0xa8>)
 800d9d8:	480a      	ldr	r0, [pc, #40]	; (800da04 <pbuf_cat+0xa0>)
 800d9da:	f00a ff89 	bl	80188f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	891a      	ldrh	r2, [r3, #8]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	891b      	ldrh	r3, [r3, #8]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0801e1bc 	.word	0x0801e1bc
 800da00:	0801e3b0 	.word	0x0801e3b0
 800da04:	0801e21c 	.word	0x0801e21c
 800da08:	0801e3e8 	.word	0x0801e3e8
 800da0c:	0801e418 	.word	0x0801e418

0800da10 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7ff ffa1 	bl	800d964 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800da22:	6838      	ldr	r0, [r7, #0]
 800da24:	f7ff ff7c 	bl	800d920 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800da28:	bf00      	nop
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800da3a:	2300      	movs	r3, #0
 800da3c:	617b      	str	r3, [r7, #20]
 800da3e:	2300      	movs	r3, #0
 800da40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d008      	beq.n	800da5a <pbuf_copy+0x2a>
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d005      	beq.n	800da5a <pbuf_copy+0x2a>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	891a      	ldrh	r2, [r3, #8]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	891b      	ldrh	r3, [r3, #8]
 800da56:	429a      	cmp	r2, r3
 800da58:	d209      	bcs.n	800da6e <pbuf_copy+0x3e>
 800da5a:	4b57      	ldr	r3, [pc, #348]	; (800dbb8 <pbuf_copy+0x188>)
 800da5c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800da60:	4956      	ldr	r1, [pc, #344]	; (800dbbc <pbuf_copy+0x18c>)
 800da62:	4857      	ldr	r0, [pc, #348]	; (800dbc0 <pbuf_copy+0x190>)
 800da64:	f00a ff44 	bl	80188f0 <iprintf>
 800da68:	f06f 030f 	mvn.w	r3, #15
 800da6c:	e09f      	b.n	800dbae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	895b      	ldrh	r3, [r3, #10]
 800da72:	461a      	mov	r2, r3
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	1ad2      	subs	r2, r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	895b      	ldrh	r3, [r3, #10]
 800da7c:	4619      	mov	r1, r3
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	1acb      	subs	r3, r1, r3
 800da82:	429a      	cmp	r2, r3
 800da84:	d306      	bcc.n	800da94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	895b      	ldrh	r3, [r3, #10]
 800da8a:	461a      	mov	r2, r3
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e005      	b.n	800daa0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	895b      	ldrh	r3, [r3, #10]
 800da98:	461a      	mov	r2, r3
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	18d0      	adds	r0, r2, r3
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	4413      	add	r3, r2
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4619      	mov	r1, r3
 800dab4:	f00a f9eb 	bl	8017e8e <memcpy>
    offset_to += len;
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	4413      	add	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4413      	add	r3, r2
 800dac6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	895b      	ldrh	r3, [r3, #10]
 800dacc:	461a      	mov	r2, r3
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d906      	bls.n	800dae2 <pbuf_copy+0xb2>
 800dad4:	4b38      	ldr	r3, [pc, #224]	; (800dbb8 <pbuf_copy+0x188>)
 800dad6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dada:	493a      	ldr	r1, [pc, #232]	; (800dbc4 <pbuf_copy+0x194>)
 800dadc:	4838      	ldr	r0, [pc, #224]	; (800dbc0 <pbuf_copy+0x190>)
 800dade:	f00a ff07 	bl	80188f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	895b      	ldrh	r3, [r3, #10]
 800dae6:	461a      	mov	r2, r3
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	4293      	cmp	r3, r2
 800daec:	d906      	bls.n	800dafc <pbuf_copy+0xcc>
 800daee:	4b32      	ldr	r3, [pc, #200]	; (800dbb8 <pbuf_copy+0x188>)
 800daf0:	f240 32da 	movw	r2, #986	; 0x3da
 800daf4:	4934      	ldr	r1, [pc, #208]	; (800dbc8 <pbuf_copy+0x198>)
 800daf6:	4832      	ldr	r0, [pc, #200]	; (800dbc0 <pbuf_copy+0x190>)
 800daf8:	f00a fefa 	bl	80188f0 <iprintf>
    if (offset_from >= p_from->len) {
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	895b      	ldrh	r3, [r3, #10]
 800db00:	461a      	mov	r2, r3
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	4293      	cmp	r3, r2
 800db06:	d304      	bcc.n	800db12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	895b      	ldrh	r3, [r3, #10]
 800db16:	461a      	mov	r2, r3
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d114      	bne.n	800db48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10c      	bne.n	800db48 <pbuf_copy+0x118>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <pbuf_copy+0x118>
 800db34:	4b20      	ldr	r3, [pc, #128]	; (800dbb8 <pbuf_copy+0x188>)
 800db36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800db3a:	4924      	ldr	r1, [pc, #144]	; (800dbcc <pbuf_copy+0x19c>)
 800db3c:	4820      	ldr	r0, [pc, #128]	; (800dbc0 <pbuf_copy+0x190>)
 800db3e:	f00a fed7 	bl	80188f0 <iprintf>
 800db42:	f06f 030f 	mvn.w	r3, #15
 800db46:	e032      	b.n	800dbae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d013      	beq.n	800db76 <pbuf_copy+0x146>
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	895a      	ldrh	r2, [r3, #10]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	891b      	ldrh	r3, [r3, #8]
 800db56:	429a      	cmp	r2, r3
 800db58:	d10d      	bne.n	800db76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <pbuf_copy+0x146>
 800db62:	4b15      	ldr	r3, [pc, #84]	; (800dbb8 <pbuf_copy+0x188>)
 800db64:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800db68:	4919      	ldr	r1, [pc, #100]	; (800dbd0 <pbuf_copy+0x1a0>)
 800db6a:	4815      	ldr	r0, [pc, #84]	; (800dbc0 <pbuf_copy+0x190>)
 800db6c:	f00a fec0 	bl	80188f0 <iprintf>
 800db70:	f06f 0305 	mvn.w	r3, #5
 800db74:	e01b      	b.n	800dbae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d013      	beq.n	800dba4 <pbuf_copy+0x174>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	895a      	ldrh	r2, [r3, #10]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	891b      	ldrh	r3, [r3, #8]
 800db84:	429a      	cmp	r2, r3
 800db86:	d10d      	bne.n	800dba4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d009      	beq.n	800dba4 <pbuf_copy+0x174>
 800db90:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <pbuf_copy+0x188>)
 800db92:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800db96:	490e      	ldr	r1, [pc, #56]	; (800dbd0 <pbuf_copy+0x1a0>)
 800db98:	4809      	ldr	r0, [pc, #36]	; (800dbc0 <pbuf_copy+0x190>)
 800db9a:	f00a fea9 	bl	80188f0 <iprintf>
 800db9e:	f06f 0305 	mvn.w	r3, #5
 800dba2:	e004      	b.n	800dbae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f47f af61 	bne.w	800da6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	0801e1bc 	.word	0x0801e1bc
 800dbbc:	0801e464 	.word	0x0801e464
 800dbc0:	0801e21c 	.word	0x0801e21c
 800dbc4:	0801e494 	.word	0x0801e494
 800dbc8:	0801e4ac 	.word	0x0801e4ac
 800dbcc:	0801e4c8 	.word	0x0801e4c8
 800dbd0:	0801e4d8 	.word	0x0801e4d8

0800dbd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	80fb      	strh	r3, [r7, #6]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d108      	bne.n	800dc0a <pbuf_copy_partial+0x36>
 800dbf8:	4b2b      	ldr	r3, [pc, #172]	; (800dca8 <pbuf_copy_partial+0xd4>)
 800dbfa:	f240 420a 	movw	r2, #1034	; 0x40a
 800dbfe:	492b      	ldr	r1, [pc, #172]	; (800dcac <pbuf_copy_partial+0xd8>)
 800dc00:	482b      	ldr	r0, [pc, #172]	; (800dcb0 <pbuf_copy_partial+0xdc>)
 800dc02:	f00a fe75 	bl	80188f0 <iprintf>
 800dc06:	2300      	movs	r3, #0
 800dc08:	e04a      	b.n	800dca0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d108      	bne.n	800dc22 <pbuf_copy_partial+0x4e>
 800dc10:	4b25      	ldr	r3, [pc, #148]	; (800dca8 <pbuf_copy_partial+0xd4>)
 800dc12:	f240 420b 	movw	r2, #1035	; 0x40b
 800dc16:	4927      	ldr	r1, [pc, #156]	; (800dcb4 <pbuf_copy_partial+0xe0>)
 800dc18:	4825      	ldr	r0, [pc, #148]	; (800dcb0 <pbuf_copy_partial+0xdc>)
 800dc1a:	f00a fe69 	bl	80188f0 <iprintf>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e03e      	b.n	800dca0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	61fb      	str	r3, [r7, #28]
 800dc26:	e034      	b.n	800dc92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dc28:	88bb      	ldrh	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <pbuf_copy_partial+0x70>
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	895b      	ldrh	r3, [r3, #10]
 800dc32:	88ba      	ldrh	r2, [r7, #4]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d305      	bcc.n	800dc44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	895b      	ldrh	r3, [r3, #10]
 800dc3c:	88ba      	ldrh	r2, [r7, #4]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	80bb      	strh	r3, [r7, #4]
 800dc42:	e023      	b.n	800dc8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	895a      	ldrh	r2, [r3, #10]
 800dc48:	88bb      	ldrh	r3, [r7, #4]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dc4e:	8b3a      	ldrh	r2, [r7, #24]
 800dc50:	88fb      	ldrh	r3, [r7, #6]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d901      	bls.n	800dc5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dc56:	88fb      	ldrh	r3, [r7, #6]
 800dc58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dc5a:	8b7b      	ldrh	r3, [r7, #26]
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	18d0      	adds	r0, r2, r3
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	88bb      	ldrh	r3, [r7, #4]
 800dc66:	4413      	add	r3, r2
 800dc68:	8b3a      	ldrh	r2, [r7, #24]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	f00a f90f 	bl	8017e8e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dc70:	8afa      	ldrh	r2, [r7, #22]
 800dc72:	8b3b      	ldrh	r3, [r7, #24]
 800dc74:	4413      	add	r3, r2
 800dc76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dc78:	8b7a      	ldrh	r2, [r7, #26]
 800dc7a:	8b3b      	ldrh	r3, [r7, #24]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc80:	88fa      	ldrh	r2, [r7, #6]
 800dc82:	8b3b      	ldrh	r3, [r7, #24]
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	61fb      	str	r3, [r7, #28]
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <pbuf_copy_partial+0xca>
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1c4      	bne.n	800dc28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc9e:	8afb      	ldrh	r3, [r7, #22]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3720      	adds	r7, #32
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	0801e1bc 	.word	0x0801e1bc
 800dcac:	0801e504 	.word	0x0801e504
 800dcb0:	0801e21c 	.word	0x0801e21c
 800dcb4:	0801e524 	.word	0x0801e524

0800dcb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	603a      	str	r2, [r7, #0]
 800dcc2:	71fb      	strb	r3, [r7, #7]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	8919      	ldrh	r1, [r3, #8]
 800dccc:	88ba      	ldrh	r2, [r7, #4]
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff faa5 	bl	800d220 <pbuf_alloc>
 800dcd6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <pbuf_clone+0x2a>
    return NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e011      	b.n	800dd06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff fea3 	bl	800da30 <pbuf_copy>
 800dcea:	4603      	mov	r3, r0
 800dcec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dcee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <pbuf_clone+0x4c>
 800dcf6:	4b06      	ldr	r3, [pc, #24]	; (800dd10 <pbuf_clone+0x58>)
 800dcf8:	f240 5224 	movw	r2, #1316	; 0x524
 800dcfc:	4905      	ldr	r1, [pc, #20]	; (800dd14 <pbuf_clone+0x5c>)
 800dcfe:	4806      	ldr	r0, [pc, #24]	; (800dd18 <pbuf_clone+0x60>)
 800dd00:	f00a fdf6 	bl	80188f0 <iprintf>
  return q;
 800dd04:	68fb      	ldr	r3, [r7, #12]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	0801e1bc 	.word	0x0801e1bc
 800dd14:	0801e630 	.word	0x0801e630
 800dd18:	0801e21c 	.word	0x0801e21c

0800dd1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd20:	f00a fdfe 	bl	8018920 <rand>
 800dd24:	4603      	mov	r3, r0
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	4b01      	ldr	r3, [pc, #4]	; (800dd3c <tcp_init+0x20>)
 800dd36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dd38:	bf00      	nop
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20000066 	.word	0x20000066

0800dd40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d105      	bne.n	800dd5c <tcp_free+0x1c>
 800dd50:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <tcp_free+0x2c>)
 800dd52:	22d4      	movs	r2, #212	; 0xd4
 800dd54:	4906      	ldr	r1, [pc, #24]	; (800dd70 <tcp_free+0x30>)
 800dd56:	4807      	ldr	r0, [pc, #28]	; (800dd74 <tcp_free+0x34>)
 800dd58:	f00a fdca 	bl	80188f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	2001      	movs	r0, #1
 800dd60:	f7fe ff48 	bl	800cbf4 <memp_free>
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	0801e6bc 	.word	0x0801e6bc
 800dd70:	0801e6ec 	.word	0x0801e6ec
 800dd74:	0801e700 	.word	0x0801e700

0800dd78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7d1b      	ldrb	r3, [r3, #20]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d105      	bne.n	800dd94 <tcp_free_listen+0x1c>
 800dd88:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <tcp_free_listen+0x2c>)
 800dd8a:	22df      	movs	r2, #223	; 0xdf
 800dd8c:	4906      	ldr	r1, [pc, #24]	; (800dda8 <tcp_free_listen+0x30>)
 800dd8e:	4807      	ldr	r0, [pc, #28]	; (800ddac <tcp_free_listen+0x34>)
 800dd90:	f00a fdae 	bl	80188f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	2002      	movs	r0, #2
 800dd98:	f7fe ff2c 	bl	800cbf4 <memp_free>
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	0801e6bc 	.word	0x0801e6bc
 800dda8:	0801e728 	.word	0x0801e728
 800ddac:	0801e700 	.word	0x0801e700

0800ddb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ddb4:	f000 fe98 	bl	800eae8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ddb8:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <tcp_tmr+0x28>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	4b05      	ldr	r3, [pc, #20]	; (800ddd8 <tcp_tmr+0x28>)
 800ddc2:	701a      	strb	r2, [r3, #0]
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <tcp_tmr+0x28>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ddd0:	f000 fb4c 	bl	800e46c <tcp_slowtmr>
  }
}
 800ddd4:	bf00      	nop
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20000491 	.word	0x20000491

0800dddc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d105      	bne.n	800ddf8 <tcp_remove_listener+0x1c>
 800ddec:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <tcp_remove_listener+0x48>)
 800ddee:	22ff      	movs	r2, #255	; 0xff
 800ddf0:	490d      	ldr	r1, [pc, #52]	; (800de28 <tcp_remove_listener+0x4c>)
 800ddf2:	480e      	ldr	r0, [pc, #56]	; (800de2c <tcp_remove_listener+0x50>)
 800ddf4:	f00a fd7c 	bl	80188f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	e00a      	b.n	800de14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d102      	bne.n	800de0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1f1      	bne.n	800ddfe <tcp_remove_listener+0x22>
    }
  }
}
 800de1a:	bf00      	nop
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	0801e6bc 	.word	0x0801e6bc
 800de28:	0801e744 	.word	0x0801e744
 800de2c:	0801e700 	.word	0x0801e700

0800de30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d106      	bne.n	800de4c <tcp_listen_closed+0x1c>
 800de3e:	4b14      	ldr	r3, [pc, #80]	; (800de90 <tcp_listen_closed+0x60>)
 800de40:	f240 1211 	movw	r2, #273	; 0x111
 800de44:	4913      	ldr	r1, [pc, #76]	; (800de94 <tcp_listen_closed+0x64>)
 800de46:	4814      	ldr	r0, [pc, #80]	; (800de98 <tcp_listen_closed+0x68>)
 800de48:	f00a fd52 	bl	80188f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7d1b      	ldrb	r3, [r3, #20]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d006      	beq.n	800de62 <tcp_listen_closed+0x32>
 800de54:	4b0e      	ldr	r3, [pc, #56]	; (800de90 <tcp_listen_closed+0x60>)
 800de56:	f44f 7289 	mov.w	r2, #274	; 0x112
 800de5a:	4910      	ldr	r1, [pc, #64]	; (800de9c <tcp_listen_closed+0x6c>)
 800de5c:	480e      	ldr	r0, [pc, #56]	; (800de98 <tcp_listen_closed+0x68>)
 800de5e:	f00a fd47 	bl	80188f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de62:	2301      	movs	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e00b      	b.n	800de80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800de68:	4a0d      	ldr	r2, [pc, #52]	; (800dea0 <tcp_listen_closed+0x70>)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	f7ff ffb1 	bl	800dddc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3301      	adds	r3, #1
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b03      	cmp	r3, #3
 800de84:	d9f0      	bls.n	800de68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de86:	bf00      	nop
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	0801e6bc 	.word	0x0801e6bc
 800de94:	0801e76c 	.word	0x0801e76c
 800de98:	0801e700 	.word	0x0801e700
 800de9c:	0801e778 	.word	0x0801e778
 800dea0:	08020a40 	.word	0x08020a40

0800dea4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dea4:	b5b0      	push	{r4, r5, r7, lr}
 800dea6:	b088      	sub	sp, #32
 800dea8:	af04      	add	r7, sp, #16
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <tcp_close_shutdown+0x20>
 800deb6:	4b61      	ldr	r3, [pc, #388]	; (800e03c <tcp_close_shutdown+0x198>)
 800deb8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800debc:	4960      	ldr	r1, [pc, #384]	; (800e040 <tcp_close_shutdown+0x19c>)
 800debe:	4861      	ldr	r0, [pc, #388]	; (800e044 <tcp_close_shutdown+0x1a0>)
 800dec0:	f00a fd16 	bl	80188f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dec4:	78fb      	ldrb	r3, [r7, #3]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d066      	beq.n	800df98 <tcp_close_shutdown+0xf4>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7d1b      	ldrb	r3, [r3, #20]
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d003      	beq.n	800deda <tcp_close_shutdown+0x36>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	7d1b      	ldrb	r3, [r3, #20]
 800ded6:	2b07      	cmp	r3, #7
 800ded8:	d15e      	bne.n	800df98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d104      	bne.n	800deec <tcp_close_shutdown+0x48>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deea:	d055      	beq.n	800df98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	8b5b      	ldrh	r3, [r3, #26]
 800def0:	f003 0310 	and.w	r3, r3, #16
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <tcp_close_shutdown+0x62>
 800def8:	4b50      	ldr	r3, [pc, #320]	; (800e03c <tcp_close_shutdown+0x198>)
 800defa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800defe:	4952      	ldr	r1, [pc, #328]	; (800e048 <tcp_close_shutdown+0x1a4>)
 800df00:	4850      	ldr	r0, [pc, #320]	; (800e044 <tcp_close_shutdown+0x1a0>)
 800df02:	f00a fcf5 	bl	80188f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df0e:	687d      	ldr	r5, [r7, #4]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3304      	adds	r3, #4
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	8ad2      	ldrh	r2, [r2, #22]
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	8b09      	ldrh	r1, [r1, #24]
 800df1c:	9102      	str	r1, [sp, #8]
 800df1e:	9201      	str	r2, [sp, #4]
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	462b      	mov	r3, r5
 800df24:	4622      	mov	r2, r4
 800df26:	4601      	mov	r1, r0
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f004 fe8f 	bl	8012c4c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f001 f8ba 	bl	800f0a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800df34:	4b45      	ldr	r3, [pc, #276]	; (800e04c <tcp_close_shutdown+0x1a8>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d105      	bne.n	800df4a <tcp_close_shutdown+0xa6>
 800df3e:	4b43      	ldr	r3, [pc, #268]	; (800e04c <tcp_close_shutdown+0x1a8>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	4a41      	ldr	r2, [pc, #260]	; (800e04c <tcp_close_shutdown+0x1a8>)
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	e013      	b.n	800df72 <tcp_close_shutdown+0xce>
 800df4a:	4b40      	ldr	r3, [pc, #256]	; (800e04c <tcp_close_shutdown+0x1a8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	e00c      	b.n	800df6c <tcp_close_shutdown+0xc8>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d104      	bne.n	800df66 <tcp_close_shutdown+0xc2>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68da      	ldr	r2, [r3, #12]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	60da      	str	r2, [r3, #12]
 800df64:	e005      	b.n	800df72 <tcp_close_shutdown+0xce>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1ef      	bne.n	800df52 <tcp_close_shutdown+0xae>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	60da      	str	r2, [r3, #12]
 800df78:	4b35      	ldr	r3, [pc, #212]	; (800e050 <tcp_close_shutdown+0x1ac>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800df7e:	4b35      	ldr	r3, [pc, #212]	; (800e054 <tcp_close_shutdown+0x1b0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	d102      	bne.n	800df8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df88:	f003 fd4c 	bl	8011a24 <tcp_trigger_input_pcb_close>
 800df8c:	e002      	b.n	800df94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff fed6 	bl	800dd40 <tcp_free>
      }
      return ERR_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	e04d      	b.n	800e034 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	7d1b      	ldrb	r3, [r3, #20]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d02d      	beq.n	800dffc <tcp_close_shutdown+0x158>
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d036      	beq.n	800e012 <tcp_close_shutdown+0x16e>
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d13f      	bne.n	800e028 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	8adb      	ldrh	r3, [r3, #22]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d021      	beq.n	800dff4 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfb0:	4b29      	ldr	r3, [pc, #164]	; (800e058 <tcp_close_shutdown+0x1b4>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d105      	bne.n	800dfc6 <tcp_close_shutdown+0x122>
 800dfba:	4b27      	ldr	r3, [pc, #156]	; (800e058 <tcp_close_shutdown+0x1b4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	4a25      	ldr	r2, [pc, #148]	; (800e058 <tcp_close_shutdown+0x1b4>)
 800dfc2:	6013      	str	r3, [r2, #0]
 800dfc4:	e013      	b.n	800dfee <tcp_close_shutdown+0x14a>
 800dfc6:	4b24      	ldr	r3, [pc, #144]	; (800e058 <tcp_close_shutdown+0x1b4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60bb      	str	r3, [r7, #8]
 800dfcc:	e00c      	b.n	800dfe8 <tcp_close_shutdown+0x144>
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d104      	bne.n	800dfe2 <tcp_close_shutdown+0x13e>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	60da      	str	r2, [r3, #12]
 800dfe0:	e005      	b.n	800dfee <tcp_close_shutdown+0x14a>
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	60bb      	str	r3, [r7, #8]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1ef      	bne.n	800dfce <tcp_close_shutdown+0x12a>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff fea3 	bl	800dd40 <tcp_free>
      break;
 800dffa:	e01a      	b.n	800e032 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff17 	bl	800de30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	4815      	ldr	r0, [pc, #84]	; (800e05c <tcp_close_shutdown+0x1b8>)
 800e006:	f001 f89f 	bl	800f148 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff feb4 	bl	800dd78 <tcp_free_listen>
      break;
 800e010:	e00f      	b.n	800e032 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	480d      	ldr	r0, [pc, #52]	; (800e04c <tcp_close_shutdown+0x1a8>)
 800e016:	f001 f897 	bl	800f148 <tcp_pcb_remove>
 800e01a:	4b0d      	ldr	r3, [pc, #52]	; (800e050 <tcp_close_shutdown+0x1ac>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff fe8d 	bl	800dd40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e026:	e004      	b.n	800e032 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 f819 	bl	800e060 <tcp_close_shutdown_fin>
 800e02e:	4603      	mov	r3, r0
 800e030:	e000      	b.n	800e034 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bdb0      	pop	{r4, r5, r7, pc}
 800e03c:	0801e6bc 	.word	0x0801e6bc
 800e040:	0801e790 	.word	0x0801e790
 800e044:	0801e700 	.word	0x0801e700
 800e048:	0801e7b0 	.word	0x0801e7b0
 800e04c:	20007380 	.word	0x20007380
 800e050:	2000737c 	.word	0x2000737c
 800e054:	20007394 	.word	0x20007394
 800e058:	2000738c 	.word	0x2000738c
 800e05c:	20007388 	.word	0x20007388

0800e060 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d106      	bne.n	800e07c <tcp_close_shutdown_fin+0x1c>
 800e06e:	4b2c      	ldr	r3, [pc, #176]	; (800e120 <tcp_close_shutdown_fin+0xc0>)
 800e070:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e074:	492b      	ldr	r1, [pc, #172]	; (800e124 <tcp_close_shutdown_fin+0xc4>)
 800e076:	482c      	ldr	r0, [pc, #176]	; (800e128 <tcp_close_shutdown_fin+0xc8>)
 800e078:	f00a fc3a 	bl	80188f0 <iprintf>

  switch (pcb->state) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7d1b      	ldrb	r3, [r3, #20]
 800e080:	2b04      	cmp	r3, #4
 800e082:	d010      	beq.n	800e0a6 <tcp_close_shutdown_fin+0x46>
 800e084:	2b07      	cmp	r3, #7
 800e086:	d01b      	beq.n	800e0c0 <tcp_close_shutdown_fin+0x60>
 800e088:	2b03      	cmp	r3, #3
 800e08a:	d126      	bne.n	800e0da <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f003 fedb 	bl	8011e48 <tcp_send_fin>
 800e092:	4603      	mov	r3, r0
 800e094:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d11f      	bne.n	800e0de <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2205      	movs	r2, #5
 800e0a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0a4:	e01b      	b.n	800e0de <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f003 fece 	bl	8011e48 <tcp_send_fin>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d114      	bne.n	800e0e2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2205      	movs	r2, #5
 800e0bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0be:	e010      	b.n	800e0e2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f003 fec1 	bl	8011e48 <tcp_send_fin>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d109      	bne.n	800e0e6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2209      	movs	r2, #9
 800e0d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0d8:	e005      	b.n	800e0e6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e01c      	b.n	800e118 <tcp_close_shutdown_fin+0xb8>
      break;
 800e0de:	bf00      	nop
 800e0e0:	e002      	b.n	800e0e8 <tcp_close_shutdown_fin+0x88>
      break;
 800e0e2:	bf00      	nop
 800e0e4:	e000      	b.n	800e0e8 <tcp_close_shutdown_fin+0x88>
      break;
 800e0e6:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d103      	bne.n	800e0f8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f003 ffe7 	bl	80120c4 <tcp_output>
 800e0f6:	e00d      	b.n	800e114 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e100:	d108      	bne.n	800e114 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	8b5b      	ldrh	r3, [r3, #26]
 800e106:	f043 0308 	orr.w	r3, r3, #8
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	e001      	b.n	800e118 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	0801e6bc 	.word	0x0801e6bc
 800e124:	0801e76c 	.word	0x0801e76c
 800e128:	0801e700 	.word	0x0801e700

0800e12c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d109      	bne.n	800e14e <tcp_close+0x22>
 800e13a:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <tcp_close+0x4c>)
 800e13c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e140:	490e      	ldr	r1, [pc, #56]	; (800e17c <tcp_close+0x50>)
 800e142:	480f      	ldr	r0, [pc, #60]	; (800e180 <tcp_close+0x54>)
 800e144:	f00a fbd4 	bl	80188f0 <iprintf>
 800e148:	f06f 030f 	mvn.w	r3, #15
 800e14c:	e00f      	b.n	800e16e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	7d1b      	ldrb	r3, [r3, #20]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d006      	beq.n	800e164 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	8b5b      	ldrh	r3, [r3, #26]
 800e15a:	f043 0310 	orr.w	r3, r3, #16
 800e15e:	b29a      	uxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e164:	2101      	movs	r1, #1
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff fe9c 	bl	800dea4 <tcp_close_shutdown>
 800e16c:	4603      	mov	r3, r0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	0801e6bc 	.word	0x0801e6bc
 800e17c:	0801e7cc 	.word	0x0801e7cc
 800e180:	0801e700 	.word	0x0801e700

0800e184 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	; 0x38
 800e188:	af04      	add	r7, sp, #16
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d107      	bne.n	800e1a4 <tcp_abandon+0x20>
 800e194:	4b52      	ldr	r3, [pc, #328]	; (800e2e0 <tcp_abandon+0x15c>)
 800e196:	f240 223d 	movw	r2, #573	; 0x23d
 800e19a:	4952      	ldr	r1, [pc, #328]	; (800e2e4 <tcp_abandon+0x160>)
 800e19c:	4852      	ldr	r0, [pc, #328]	; (800e2e8 <tcp_abandon+0x164>)
 800e19e:	f00a fba7 	bl	80188f0 <iprintf>
 800e1a2:	e099      	b.n	800e2d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	7d1b      	ldrb	r3, [r3, #20]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d106      	bne.n	800e1ba <tcp_abandon+0x36>
 800e1ac:	4b4c      	ldr	r3, [pc, #304]	; (800e2e0 <tcp_abandon+0x15c>)
 800e1ae:	f240 2241 	movw	r2, #577	; 0x241
 800e1b2:	494e      	ldr	r1, [pc, #312]	; (800e2ec <tcp_abandon+0x168>)
 800e1b4:	484c      	ldr	r0, [pc, #304]	; (800e2e8 <tcp_abandon+0x164>)
 800e1b6:	f00a fb9b 	bl	80188f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7d1b      	ldrb	r3, [r3, #20]
 800e1be:	2b0a      	cmp	r3, #10
 800e1c0:	d107      	bne.n	800e1d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	484a      	ldr	r0, [pc, #296]	; (800e2f0 <tcp_abandon+0x16c>)
 800e1c6:	f000 ffbf 	bl	800f148 <tcp_pcb_remove>
    tcp_free(pcb);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff fdb8 	bl	800dd40 <tcp_free>
 800e1d0:	e082      	b.n	800e2d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7d1b      	ldrb	r3, [r3, #20]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d126      	bne.n	800e24a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8adb      	ldrh	r3, [r3, #22]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d02e      	beq.n	800e262 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e204:	4b3b      	ldr	r3, [pc, #236]	; (800e2f4 <tcp_abandon+0x170>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d105      	bne.n	800e21a <tcp_abandon+0x96>
 800e20e:	4b39      	ldr	r3, [pc, #228]	; (800e2f4 <tcp_abandon+0x170>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	4a37      	ldr	r2, [pc, #220]	; (800e2f4 <tcp_abandon+0x170>)
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	e013      	b.n	800e242 <tcp_abandon+0xbe>
 800e21a:	4b36      	ldr	r3, [pc, #216]	; (800e2f4 <tcp_abandon+0x170>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	61fb      	str	r3, [r7, #28]
 800e220:	e00c      	b.n	800e23c <tcp_abandon+0xb8>
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d104      	bne.n	800e236 <tcp_abandon+0xb2>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68da      	ldr	r2, [r3, #12]
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	60da      	str	r2, [r3, #12]
 800e234:	e005      	b.n	800e242 <tcp_abandon+0xbe>
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1ef      	bne.n	800e222 <tcp_abandon+0x9e>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	60da      	str	r2, [r3, #12]
 800e248:	e00b      	b.n	800e262 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	8adb      	ldrh	r3, [r3, #22]
 800e252:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e254:	6879      	ldr	r1, [r7, #4]
 800e256:	4828      	ldr	r0, [pc, #160]	; (800e2f8 <tcp_abandon+0x174>)
 800e258:	f000 ff76 	bl	800f148 <tcp_pcb_remove>
 800e25c:	4b27      	ldr	r3, [pc, #156]	; (800e2fc <tcp_abandon+0x178>)
 800e25e:	2201      	movs	r2, #1
 800e260:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e26e:	4618      	mov	r0, r3
 800e270:	f000 fd1a 	bl	800eca8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d004      	beq.n	800e286 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e280:	4618      	mov	r0, r3
 800e282:	f000 fd11 	bl	800eca8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d004      	beq.n	800e298 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e292:	4618      	mov	r0, r3
 800e294:	f000 fd08 	bl	800eca8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00e      	beq.n	800e2bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	3304      	adds	r3, #4
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	8b12      	ldrh	r2, [r2, #24]
 800e2a8:	9202      	str	r2, [sp, #8]
 800e2aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e2ac:	9201      	str	r2, [sp, #4]
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	69b9      	ldr	r1, [r7, #24]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f004 fcc8 	bl	8012c4c <tcp_rst>
    }
    last_state = pcb->state;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7d1b      	ldrb	r3, [r3, #20]
 800e2c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff fd3c 	bl	800dd40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d004      	beq.n	800e2d8 <tcp_abandon+0x154>
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f06f 010c 	mvn.w	r1, #12
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	4798      	blx	r3
  }
}
 800e2d8:	3728      	adds	r7, #40	; 0x28
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	0801e6bc 	.word	0x0801e6bc
 800e2e4:	0801e800 	.word	0x0801e800
 800e2e8:	0801e700 	.word	0x0801e700
 800e2ec:	0801e81c 	.word	0x0801e81c
 800e2f0:	20007390 	.word	0x20007390
 800e2f4:	2000738c 	.word	0x2000738c
 800e2f8:	20007380 	.word	0x20007380
 800e2fc:	2000737c 	.word	0x2000737c

0800e300 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e308:	2101      	movs	r1, #1
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff ff3a 	bl	800e184 <tcp_abandon>
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <tcp_update_rcv_ann_wnd+0x1c>
 800e326:	4b25      	ldr	r3, [pc, #148]	; (800e3bc <tcp_update_rcv_ann_wnd+0xa4>)
 800e328:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e32c:	4924      	ldr	r1, [pc, #144]	; (800e3c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800e32e:	4825      	ldr	r0, [pc, #148]	; (800e3c4 <tcp_update_rcv_ann_wnd+0xac>)
 800e330:	f00a fade 	bl	80188f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e33c:	4413      	add	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e348:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e34c:	bf28      	it	cs
 800e34e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800e352:	b292      	uxth	r2, r2
 800e354:	4413      	add	r3, r2
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	db08      	blt.n	800e370 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	e020      	b.n	800e3b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	dd03      	ble.n	800e386 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e384:	e014      	b.n	800e3b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e398:	d306      	bcc.n	800e3a8 <tcp_update_rcv_ann_wnd+0x90>
 800e39a:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <tcp_update_rcv_ann_wnd+0xa4>)
 800e39c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e3a0:	4909      	ldr	r1, [pc, #36]	; (800e3c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800e3a2:	4808      	ldr	r0, [pc, #32]	; (800e3c4 <tcp_update_rcv_ann_wnd+0xac>)
 800e3a4:	f00a faa4 	bl	80188f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e3b0:	2300      	movs	r3, #0
  }
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	0801e6bc 	.word	0x0801e6bc
 800e3c0:	0801e918 	.word	0x0801e918
 800e3c4:	0801e700 	.word	0x0801e700
 800e3c8:	0801e93c 	.word	0x0801e93c

0800e3cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d107      	bne.n	800e3ee <tcp_recved+0x22>
 800e3de:	4b1f      	ldr	r3, [pc, #124]	; (800e45c <tcp_recved+0x90>)
 800e3e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e3e4:	491e      	ldr	r1, [pc, #120]	; (800e460 <tcp_recved+0x94>)
 800e3e6:	481f      	ldr	r0, [pc, #124]	; (800e464 <tcp_recved+0x98>)
 800e3e8:	f00a fa82 	bl	80188f0 <iprintf>
 800e3ec:	e032      	b.n	800e454 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d106      	bne.n	800e404 <tcp_recved+0x38>
 800e3f6:	4b19      	ldr	r3, [pc, #100]	; (800e45c <tcp_recved+0x90>)
 800e3f8:	f240 32d3 	movw	r2, #979	; 0x3d3
 800e3fc:	491a      	ldr	r1, [pc, #104]	; (800e468 <tcp_recved+0x9c>)
 800e3fe:	4819      	ldr	r0, [pc, #100]	; (800e464 <tcp_recved+0x98>)
 800e400:	f00a fa76 	bl	80188f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e408:	887b      	ldrh	r3, [r7, #2]
 800e40a:	4413      	add	r3, r2
 800e40c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e40e:	89fb      	ldrh	r3, [r7, #14]
 800e410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e414:	d804      	bhi.n	800e420 <tcp_recved+0x54>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e41a:	89fa      	ldrh	r2, [r7, #14]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d204      	bcs.n	800e42a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e426:	851a      	strh	r2, [r3, #40]	; 0x28
 800e428:	e002      	b.n	800e430 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	89fa      	ldrh	r2, [r7, #14]
 800e42e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f7ff ff71 	bl	800e318 <tcp_update_rcv_ann_wnd>
 800e436:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e43e:	d309      	bcc.n	800e454 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	8b5b      	ldrh	r3, [r3, #26]
 800e444:	f043 0302 	orr.w	r3, r3, #2
 800e448:	b29a      	uxth	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f003 fe38 	bl	80120c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	0801e6bc 	.word	0x0801e6bc
 800e460:	0801e958 	.word	0x0801e958
 800e464:	0801e700 	.word	0x0801e700
 800e468:	0801e970 	.word	0x0801e970

0800e46c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e46c:	b5b0      	push	{r4, r5, r7, lr}
 800e46e:	b090      	sub	sp, #64	; 0x40
 800e470:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e478:	4b94      	ldr	r3, [pc, #592]	; (800e6cc <tcp_slowtmr+0x260>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3301      	adds	r3, #1
 800e47e:	4a93      	ldr	r2, [pc, #588]	; (800e6cc <tcp_slowtmr+0x260>)
 800e480:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e482:	4b93      	ldr	r3, [pc, #588]	; (800e6d0 <tcp_slowtmr+0x264>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	3301      	adds	r3, #1
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	4b91      	ldr	r3, [pc, #580]	; (800e6d0 <tcp_slowtmr+0x264>)
 800e48c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e492:	4b90      	ldr	r3, [pc, #576]	; (800e6d4 <tcp_slowtmr+0x268>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e498:	e29f      	b.n	800e9da <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	7d1b      	ldrb	r3, [r3, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <tcp_slowtmr+0x44>
 800e4a2:	4b8d      	ldr	r3, [pc, #564]	; (800e6d8 <tcp_slowtmr+0x26c>)
 800e4a4:	f240 42be 	movw	r2, #1214	; 0x4be
 800e4a8:	498c      	ldr	r1, [pc, #560]	; (800e6dc <tcp_slowtmr+0x270>)
 800e4aa:	488d      	ldr	r0, [pc, #564]	; (800e6e0 <tcp_slowtmr+0x274>)
 800e4ac:	f00a fa20 	bl	80188f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d106      	bne.n	800e4c6 <tcp_slowtmr+0x5a>
 800e4b8:	4b87      	ldr	r3, [pc, #540]	; (800e6d8 <tcp_slowtmr+0x26c>)
 800e4ba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e4be:	4989      	ldr	r1, [pc, #548]	; (800e6e4 <tcp_slowtmr+0x278>)
 800e4c0:	4887      	ldr	r0, [pc, #540]	; (800e6e0 <tcp_slowtmr+0x274>)
 800e4c2:	f00a fa15 	bl	80188f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ca:	2b0a      	cmp	r3, #10
 800e4cc:	d106      	bne.n	800e4dc <tcp_slowtmr+0x70>
 800e4ce:	4b82      	ldr	r3, [pc, #520]	; (800e6d8 <tcp_slowtmr+0x26c>)
 800e4d0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e4d4:	4984      	ldr	r1, [pc, #528]	; (800e6e8 <tcp_slowtmr+0x27c>)
 800e4d6:	4882      	ldr	r0, [pc, #520]	; (800e6e0 <tcp_slowtmr+0x274>)
 800e4d8:	f00a fa0a 	bl	80188f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	7f9a      	ldrb	r2, [r3, #30]
 800e4e0:	4b7b      	ldr	r3, [pc, #492]	; (800e6d0 <tcp_slowtmr+0x264>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d105      	bne.n	800e4f4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e4f2:	e272      	b.n	800e9da <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e4f4:	4b76      	ldr	r3, [pc, #472]	; (800e6d0 <tcp_slowtmr+0x264>)
 800e4f6:	781a      	ldrb	r2, [r3, #0]
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	7d1b      	ldrb	r3, [r3, #20]
 800e50c:	2b02      	cmp	r3, #2
 800e50e:	d10a      	bne.n	800e526 <tcp_slowtmr+0xba>
 800e510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e516:	2b05      	cmp	r3, #5
 800e518:	d905      	bls.n	800e526 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51e:	3301      	adds	r3, #1
 800e520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e524:	e11e      	b.n	800e764 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e52c:	2b0b      	cmp	r3, #11
 800e52e:	d905      	bls.n	800e53c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e534:	3301      	adds	r3, #1
 800e536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e53a:	e113      	b.n	800e764 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e542:	2b00      	cmp	r3, #0
 800e544:	d075      	beq.n	800e632 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d006      	beq.n	800e55c <tcp_slowtmr+0xf0>
 800e54e:	4b62      	ldr	r3, [pc, #392]	; (800e6d8 <tcp_slowtmr+0x26c>)
 800e550:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e554:	4965      	ldr	r1, [pc, #404]	; (800e6ec <tcp_slowtmr+0x280>)
 800e556:	4862      	ldr	r0, [pc, #392]	; (800e6e0 <tcp_slowtmr+0x274>)
 800e558:	f00a f9ca 	bl	80188f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d106      	bne.n	800e572 <tcp_slowtmr+0x106>
 800e564:	4b5c      	ldr	r3, [pc, #368]	; (800e6d8 <tcp_slowtmr+0x26c>)
 800e566:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e56a:	4961      	ldr	r1, [pc, #388]	; (800e6f0 <tcp_slowtmr+0x284>)
 800e56c:	485c      	ldr	r0, [pc, #368]	; (800e6e0 <tcp_slowtmr+0x274>)
 800e56e:	f00a f9bf 	bl	80188f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e578:	2b0b      	cmp	r3, #11
 800e57a:	d905      	bls.n	800e588 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e580:	3301      	adds	r3, #1
 800e582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e586:	e0ed      	b.n	800e764 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e58e:	3b01      	subs	r3, #1
 800e590:	4a58      	ldr	r2, [pc, #352]	; (800e6f4 <tcp_slowtmr+0x288>)
 800e592:	5cd3      	ldrb	r3, [r2, r3]
 800e594:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e59c:	7c7a      	ldrb	r2, [r7, #17]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d907      	bls.n	800e5b2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e5b8:	7c7a      	ldrb	r2, [r7, #17]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	f200 80d2 	bhi.w	800e764 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d108      	bne.n	800e5e0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5d0:	f004 fc2e 	bl	8012e30 <tcp_zero_window_probe>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d014      	beq.n	800e604 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e5da:	2300      	movs	r3, #0
 800e5dc:	623b      	str	r3, [r7, #32]
 800e5de:	e011      	b.n	800e604 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ea:	f003 fae5 	bl	8011bb8 <tcp_split_unsent_seg>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d107      	bne.n	800e604 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f6:	f003 fd65 	bl	80120c4 <tcp_output>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e600:	2300      	movs	r3, #0
 800e602:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 80ac 	beq.w	800e764 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e61a:	2b06      	cmp	r3, #6
 800e61c:	f200 80a2 	bhi.w	800e764 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e626:	3301      	adds	r3, #1
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e630:	e098      	b.n	800e764 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e638:	2b00      	cmp	r3, #0
 800e63a:	db0f      	blt.n	800e65c <tcp_slowtmr+0x1f0>
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e642:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e646:	4293      	cmp	r3, r2
 800e648:	d008      	beq.n	800e65c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e650:	b29b      	uxth	r3, r3
 800e652:	3301      	adds	r3, #1
 800e654:	b29b      	uxth	r3, r3
 800e656:	b21a      	sxth	r2, r3
 800e658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e668:	429a      	cmp	r2, r3
 800e66a:	db7b      	blt.n	800e764 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e66c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e66e:	f004 f821 	bl	80126b4 <tcp_rexmit_rto_prepare>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d007      	beq.n	800e688 <tcp_slowtmr+0x21c>
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d171      	bne.n	800e764 <tcp_slowtmr+0x2f8>
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e684:	2b00      	cmp	r3, #0
 800e686:	d06d      	beq.n	800e764 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	7d1b      	ldrb	r3, [r3, #20]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d03a      	beq.n	800e706 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e696:	2b0c      	cmp	r3, #12
 800e698:	bf28      	it	cs
 800e69a:	230c      	movcs	r3, #12
 800e69c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e6a4:	10db      	asrs	r3, r3, #3
 800e6a6:	b21b      	sxth	r3, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e6b0:	4413      	add	r3, r2
 800e6b2:	7efa      	ldrb	r2, [r7, #27]
 800e6b4:	4910      	ldr	r1, [pc, #64]	; (800e6f8 <tcp_slowtmr+0x28c>)
 800e6b6:	5c8a      	ldrb	r2, [r1, r2]
 800e6b8:	4093      	lsls	r3, r2
 800e6ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	dc1a      	bgt.n	800e6fc <tcp_slowtmr+0x290>
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	b21a      	sxth	r2, r3
 800e6ca:	e019      	b.n	800e700 <tcp_slowtmr+0x294>
 800e6cc:	20007384 	.word	0x20007384
 800e6d0:	20000492 	.word	0x20000492
 800e6d4:	20007380 	.word	0x20007380
 800e6d8:	0801e6bc 	.word	0x0801e6bc
 800e6dc:	0801ea00 	.word	0x0801ea00
 800e6e0:	0801e700 	.word	0x0801e700
 800e6e4:	0801ea2c 	.word	0x0801ea2c
 800e6e8:	0801ea58 	.word	0x0801ea58
 800e6ec:	0801ea88 	.word	0x0801ea88
 800e6f0:	0801eabc 	.word	0x0801eabc
 800e6f4:	08020a38 	.word	0x08020a38
 800e6f8:	08020a28 	.word	0x08020a28
 800e6fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	2200      	movs	r2, #0
 800e70a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e718:	4293      	cmp	r3, r2
 800e71a:	bf28      	it	cs
 800e71c:	4613      	movcs	r3, r2
 800e71e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e720:	8a7b      	ldrh	r3, [r7, #18]
 800e722:	085b      	lsrs	r3, r3, #1
 800e724:	b29a      	uxth	r2, r3
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	b29b      	uxth	r3, r3
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d206      	bcs.n	800e74c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	b29a      	uxth	r2, r3
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e758:	2200      	movs	r2, #0
 800e75a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e760:	f004 f818 	bl	8012794 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	2b06      	cmp	r3, #6
 800e76a:	d111      	bne.n	800e790 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	8b5b      	ldrh	r3, [r3, #26]
 800e770:	f003 0310 	and.w	r3, r3, #16
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e778:	4b9d      	ldr	r3, [pc, #628]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	6a1b      	ldr	r3, [r3, #32]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	2b28      	cmp	r3, #40	; 0x28
 800e784:	d904      	bls.n	800e790 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78a:	3301      	adds	r3, #1
 800e78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	7a5b      	ldrb	r3, [r3, #9]
 800e794:	f003 0308 	and.w	r3, r3, #8
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d04c      	beq.n	800e836 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d003      	beq.n	800e7ac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e7a8:	2b07      	cmp	r3, #7
 800e7aa:	d144      	bne.n	800e836 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ac:	4b90      	ldr	r3, [pc, #576]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e7bc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e7c0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e7c4:	498b      	ldr	r1, [pc, #556]	; (800e9f4 <tcp_slowtmr+0x588>)
 800e7c6:	fba1 1303 	umull	r1, r3, r1, r3
 800e7ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d90a      	bls.n	800e7e6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e7da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7de:	3301      	adds	r3, #1
 800e7e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7e4:	e027      	b.n	800e836 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7e6:	4b82      	ldr	r3, [pc, #520]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	4b7e      	ldr	r3, [pc, #504]	; (800e9f8 <tcp_slowtmr+0x58c>)
 800e800:	fb03 f300 	mul.w	r3, r3, r0
 800e804:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e806:	497b      	ldr	r1, [pc, #492]	; (800e9f4 <tcp_slowtmr+0x588>)
 800e808:	fba1 1303 	umull	r1, r3, r1, r3
 800e80c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e80e:	429a      	cmp	r2, r3
 800e810:	d911      	bls.n	800e836 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e814:	f004 facc 	bl	8012db0 <tcp_keepalive>
 800e818:	4603      	mov	r3, r0
 800e81a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e81e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e822:	2b00      	cmp	r3, #0
 800e824:	d107      	bne.n	800e836 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e82c:	3301      	adds	r3, #1
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d011      	beq.n	800e862 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e83e:	4b6c      	ldr	r3, [pc, #432]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	1ad2      	subs	r2, r2, r3
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e84e:	4619      	mov	r1, r3
 800e850:	460b      	mov	r3, r1
 800e852:	005b      	lsls	r3, r3, #1
 800e854:	440b      	add	r3, r1
 800e856:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e858:	429a      	cmp	r2, r3
 800e85a:	d302      	bcc.n	800e862 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e85c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e85e:	f000 fdd7 	bl	800f410 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	7d1b      	ldrb	r3, [r3, #20]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d10b      	bne.n	800e882 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e86a:	4b61      	ldr	r3, [pc, #388]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	2b28      	cmp	r3, #40	; 0x28
 800e876:	d904      	bls.n	800e882 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e87c:	3301      	adds	r3, #1
 800e87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	7d1b      	ldrb	r3, [r3, #20]
 800e886:	2b09      	cmp	r3, #9
 800e888:	d10b      	bne.n	800e8a2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e88a:	4b59      	ldr	r3, [pc, #356]	; (800e9f0 <tcp_slowtmr+0x584>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	2bf0      	cmp	r3, #240	; 0xf0
 800e896:	d904      	bls.n	800e8a2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e89c:	3301      	adds	r3, #1
 800e89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d060      	beq.n	800e96c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e8b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b4:	f000 fbf8 	bl	800f0a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d010      	beq.n	800e8e0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e8be:	4b4f      	ldr	r3, [pc, #316]	; (800e9fc <tcp_slowtmr+0x590>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d106      	bne.n	800e8d6 <tcp_slowtmr+0x46a>
 800e8c8:	4b4d      	ldr	r3, [pc, #308]	; (800ea00 <tcp_slowtmr+0x594>)
 800e8ca:	f240 526d 	movw	r2, #1389	; 0x56d
 800e8ce:	494d      	ldr	r1, [pc, #308]	; (800ea04 <tcp_slowtmr+0x598>)
 800e8d0:	484d      	ldr	r0, [pc, #308]	; (800ea08 <tcp_slowtmr+0x59c>)
 800e8d2:	f00a f80d 	bl	80188f0 <iprintf>
        prev->next = pcb->next;
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	68da      	ldr	r2, [r3, #12]
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	60da      	str	r2, [r3, #12]
 800e8de:	e00f      	b.n	800e900 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e8e0:	4b46      	ldr	r3, [pc, #280]	; (800e9fc <tcp_slowtmr+0x590>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d006      	beq.n	800e8f8 <tcp_slowtmr+0x48c>
 800e8ea:	4b45      	ldr	r3, [pc, #276]	; (800ea00 <tcp_slowtmr+0x594>)
 800e8ec:	f240 5271 	movw	r2, #1393	; 0x571
 800e8f0:	4946      	ldr	r1, [pc, #280]	; (800ea0c <tcp_slowtmr+0x5a0>)
 800e8f2:	4845      	ldr	r0, [pc, #276]	; (800ea08 <tcp_slowtmr+0x59c>)
 800e8f4:	f009 fffc 	bl	80188f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	4a3f      	ldr	r2, [pc, #252]	; (800e9fc <tcp_slowtmr+0x590>)
 800e8fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e904:	2b00      	cmp	r3, #0
 800e906:	d013      	beq.n	800e930 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e910:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	3304      	adds	r3, #4
 800e916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e918:	8ad2      	ldrh	r2, [r2, #22]
 800e91a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e91c:	8b09      	ldrh	r1, [r1, #24]
 800e91e:	9102      	str	r1, [sp, #8]
 800e920:	9201      	str	r2, [sp, #4]
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	462b      	mov	r3, r5
 800e926:	4622      	mov	r2, r4
 800e928:	4601      	mov	r1, r0
 800e92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e92c:	f004 f98e 	bl	8012c4c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	7d1b      	ldrb	r3, [r3, #20]
 800e93a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e946:	6838      	ldr	r0, [r7, #0]
 800e948:	f7ff f9fa 	bl	800dd40 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e94c:	4b30      	ldr	r3, [pc, #192]	; (800ea10 <tcp_slowtmr+0x5a4>)
 800e94e:	2200      	movs	r2, #0
 800e950:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <tcp_slowtmr+0x4f6>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f06f 010c 	mvn.w	r1, #12
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e962:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <tcp_slowtmr+0x5a4>)
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d037      	beq.n	800e9da <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e96a:	e590      	b.n	800e48e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e978:	7f1b      	ldrb	r3, [r3, #28]
 800e97a:	3301      	adds	r3, #1
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	7f1a      	ldrb	r2, [r3, #28]
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	7f5b      	ldrb	r3, [r3, #29]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d325      	bcc.n	800e9da <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e990:	2200      	movs	r2, #0
 800e992:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e994:	4b1e      	ldr	r3, [pc, #120]	; (800ea10 <tcp_slowtmr+0x5a4>)
 800e996:	2200      	movs	r2, #0
 800e998:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <tcp_slowtmr+0x550>
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ac:	6912      	ldr	r2, [r2, #16]
 800e9ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	4798      	blx	r3
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e9ba:	e002      	b.n	800e9c2 <tcp_slowtmr+0x556>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e9c2:	4b13      	ldr	r3, [pc, #76]	; (800ea10 <tcp_slowtmr+0x5a4>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d000      	beq.n	800e9cc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e9ca:	e560      	b.n	800e48e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d6:	f003 fb75 	bl	80120c4 <tcp_output>
  while (pcb != NULL) {
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f47f ad5c 	bne.w	800e49a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ea14 <tcp_slowtmr+0x5a8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e9ec:	e067      	b.n	800eabe <tcp_slowtmr+0x652>
 800e9ee:	bf00      	nop
 800e9f0:	20007384 	.word	0x20007384
 800e9f4:	10624dd3 	.word	0x10624dd3
 800e9f8:	000124f8 	.word	0x000124f8
 800e9fc:	20007380 	.word	0x20007380
 800ea00:	0801e6bc 	.word	0x0801e6bc
 800ea04:	0801eaf4 	.word	0x0801eaf4
 800ea08:	0801e700 	.word	0x0801e700
 800ea0c:	0801eb20 	.word	0x0801eb20
 800ea10:	2000737c 	.word	0x2000737c
 800ea14:	20007390 	.word	0x20007390
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b0a      	cmp	r3, #10
 800ea1e:	d006      	beq.n	800ea2e <tcp_slowtmr+0x5c2>
 800ea20:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <tcp_slowtmr+0x660>)
 800ea22:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ea26:	492a      	ldr	r1, [pc, #168]	; (800ead0 <tcp_slowtmr+0x664>)
 800ea28:	482a      	ldr	r0, [pc, #168]	; (800ead4 <tcp_slowtmr+0x668>)
 800ea2a:	f009 ff61 	bl	80188f0 <iprintf>
    pcb_remove = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea34:	4b28      	ldr	r3, [pc, #160]	; (800ead8 <tcp_slowtmr+0x66c>)
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	6a1b      	ldr	r3, [r3, #32]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	2bf0      	cmp	r3, #240	; 0xf0
 800ea40:	d904      	bls.n	800ea4c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ea42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea46:	3301      	adds	r3, #1
 800ea48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d02f      	beq.n	800eab4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea56:	f000 fb27 	bl	800f0a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d010      	beq.n	800ea82 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea60:	4b1e      	ldr	r3, [pc, #120]	; (800eadc <tcp_slowtmr+0x670>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d106      	bne.n	800ea78 <tcp_slowtmr+0x60c>
 800ea6a:	4b18      	ldr	r3, [pc, #96]	; (800eacc <tcp_slowtmr+0x660>)
 800ea6c:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea70:	491b      	ldr	r1, [pc, #108]	; (800eae0 <tcp_slowtmr+0x674>)
 800ea72:	4818      	ldr	r0, [pc, #96]	; (800ead4 <tcp_slowtmr+0x668>)
 800ea74:	f009 ff3c 	bl	80188f0 <iprintf>
        prev->next = pcb->next;
 800ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7a:	68da      	ldr	r2, [r3, #12]
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	60da      	str	r2, [r3, #12]
 800ea80:	e00f      	b.n	800eaa2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea82:	4b16      	ldr	r3, [pc, #88]	; (800eadc <tcp_slowtmr+0x670>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d006      	beq.n	800ea9a <tcp_slowtmr+0x62e>
 800ea8c:	4b0f      	ldr	r3, [pc, #60]	; (800eacc <tcp_slowtmr+0x660>)
 800ea8e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea92:	4914      	ldr	r1, [pc, #80]	; (800eae4 <tcp_slowtmr+0x678>)
 800ea94:	480f      	ldr	r0, [pc, #60]	; (800ead4 <tcp_slowtmr+0x668>)
 800ea96:	f009 ff2b 	bl	80188f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	4a0f      	ldr	r2, [pc, #60]	; (800eadc <tcp_slowtmr+0x670>)
 800eaa0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eaac:	69f8      	ldr	r0, [r7, #28]
 800eaae:	f7ff f947 	bl	800dd40 <tcp_free>
 800eab2:	e004      	b.n	800eabe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1a9      	bne.n	800ea18 <tcp_slowtmr+0x5ac>
    }
  }
}
 800eac4:	bf00      	nop
 800eac6:	3730      	adds	r7, #48	; 0x30
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bdb0      	pop	{r4, r5, r7, pc}
 800eacc:	0801e6bc 	.word	0x0801e6bc
 800ead0:	0801eb4c 	.word	0x0801eb4c
 800ead4:	0801e700 	.word	0x0801e700
 800ead8:	20007384 	.word	0x20007384
 800eadc:	20007390 	.word	0x20007390
 800eae0:	0801eb7c 	.word	0x0801eb7c
 800eae4:	0801eba4 	.word	0x0801eba4

0800eae8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eaee:	4b2d      	ldr	r3, [pc, #180]	; (800eba4 <tcp_fasttmr+0xbc>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	4b2b      	ldr	r3, [pc, #172]	; (800eba4 <tcp_fasttmr+0xbc>)
 800eaf8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eafa:	4b2b      	ldr	r3, [pc, #172]	; (800eba8 <tcp_fasttmr+0xc0>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb00:	e048      	b.n	800eb94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	7f9a      	ldrb	r2, [r3, #30]
 800eb06:	4b27      	ldr	r3, [pc, #156]	; (800eba4 <tcp_fasttmr+0xbc>)
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d03f      	beq.n	800eb8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eb0e:	4b25      	ldr	r3, [pc, #148]	; (800eba4 <tcp_fasttmr+0xbc>)
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	8b5b      	ldrh	r3, [r3, #26]
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d010      	beq.n	800eb44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8b5b      	ldrh	r3, [r3, #26]
 800eb26:	f043 0302 	orr.w	r3, r3, #2
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f003 fac7 	bl	80120c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8b5b      	ldrh	r3, [r3, #26]
 800eb3a:	f023 0303 	bic.w	r3, r3, #3
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	8b5b      	ldrh	r3, [r3, #26]
 800eb48:	f003 0308 	and.w	r3, r3, #8
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d009      	beq.n	800eb64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	8b5b      	ldrh	r3, [r3, #26]
 800eb54:	f023 0308 	bic.w	r3, r3, #8
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff fa7e 	bl	800e060 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00a      	beq.n	800eb88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb72:	4b0e      	ldr	r3, [pc, #56]	; (800ebac <tcp_fasttmr+0xc4>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f819 	bl	800ebb0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb7e:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <tcp_fasttmr+0xc4>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d000      	beq.n	800eb88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb86:	e7b8      	b.n	800eafa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	e002      	b.n	800eb94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1b3      	bne.n	800eb02 <tcp_fasttmr+0x1a>
    }
  }
}
 800eb9a:	bf00      	nop
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20000492 	.word	0x20000492
 800eba8:	20007380 	.word	0x20007380
 800ebac:	2000737c 	.word	0x2000737c

0800ebb0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ebb0:	b590      	push	{r4, r7, lr}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d109      	bne.n	800ebd2 <tcp_process_refused_data+0x22>
 800ebbe:	4b37      	ldr	r3, [pc, #220]	; (800ec9c <tcp_process_refused_data+0xec>)
 800ebc0:	f240 6209 	movw	r2, #1545	; 0x609
 800ebc4:	4936      	ldr	r1, [pc, #216]	; (800eca0 <tcp_process_refused_data+0xf0>)
 800ebc6:	4837      	ldr	r0, [pc, #220]	; (800eca4 <tcp_process_refused_data+0xf4>)
 800ebc8:	f009 fe92 	bl	80188f0 <iprintf>
 800ebcc:	f06f 030f 	mvn.w	r3, #15
 800ebd0:	e060      	b.n	800ec94 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebd6:	7b5b      	ldrb	r3, [r3, #13]
 800ebd8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebde:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00b      	beq.n	800ec08 <tcp_process_refused_data+0x58>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6918      	ldr	r0, [r3, #16]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	47a0      	blx	r4
 800ec02:	4603      	mov	r3, r0
 800ec04:	73fb      	strb	r3, [r7, #15]
 800ec06:	e007      	b.n	800ec18 <tcp_process_refused_data+0x68>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	2000      	movs	r0, #0
 800ec10:	f000 f8a2 	bl	800ed58 <tcp_recv_null>
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d12a      	bne.n	800ec76 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec20:	7bbb      	ldrb	r3, [r7, #14]
 800ec22:	f003 0320 	and.w	r3, r3, #32
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d033      	beq.n	800ec92 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec32:	d005      	beq.n	800ec40 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00b      	beq.n	800ec62 <tcp_process_refused_data+0xb2>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6918      	ldr	r0, [r3, #16]
 800ec54:	2300      	movs	r3, #0
 800ec56:	2200      	movs	r2, #0
 800ec58:	6879      	ldr	r1, [r7, #4]
 800ec5a:	47a0      	blx	r4
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73fb      	strb	r3, [r7, #15]
 800ec60:	e001      	b.n	800ec66 <tcp_process_refused_data+0xb6>
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec6a:	f113 0f0d 	cmn.w	r3, #13
 800ec6e:	d110      	bne.n	800ec92 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec70:	f06f 030c 	mvn.w	r3, #12
 800ec74:	e00e      	b.n	800ec94 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec7a:	f113 0f0d 	cmn.w	r3, #13
 800ec7e:	d102      	bne.n	800ec86 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec80:	f06f 030c 	mvn.w	r3, #12
 800ec84:	e006      	b.n	800ec94 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec8c:	f06f 0304 	mvn.w	r3, #4
 800ec90:	e000      	b.n	800ec94 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd90      	pop	{r4, r7, pc}
 800ec9c:	0801e6bc 	.word	0x0801e6bc
 800eca0:	0801ebcc 	.word	0x0801ebcc
 800eca4:	0801e700 	.word	0x0801e700

0800eca8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ecb0:	e007      	b.n	800ecc2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 f809 	bl	800ecd0 <tcp_seg_free>
    seg = next;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1f4      	bne.n	800ecb2 <tcp_segs_free+0xa>
  }
}
 800ecc8:	bf00      	nop
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00c      	beq.n	800ecf8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d004      	beq.n	800ecf0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe fd78 	bl	800d7e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ecf0:	6879      	ldr	r1, [r7, #4]
 800ecf2:	2003      	movs	r0, #3
 800ecf4:	f7fd ff7e 	bl	800cbf4 <memp_free>
  }
}
 800ecf8:	bf00      	nop
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d106      	bne.n	800ed1c <tcp_seg_copy+0x1c>
 800ed0e:	4b0f      	ldr	r3, [pc, #60]	; (800ed4c <tcp_seg_copy+0x4c>)
 800ed10:	f240 6282 	movw	r2, #1666	; 0x682
 800ed14:	490e      	ldr	r1, [pc, #56]	; (800ed50 <tcp_seg_copy+0x50>)
 800ed16:	480f      	ldr	r0, [pc, #60]	; (800ed54 <tcp_seg_copy+0x54>)
 800ed18:	f009 fdea 	bl	80188f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed1c:	2003      	movs	r0, #3
 800ed1e:	f7fd ff1d 	bl	800cb5c <memp_malloc>
 800ed22:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <tcp_seg_copy+0x2e>
    return NULL;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	e00a      	b.n	800ed44 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed2e:	2210      	movs	r2, #16
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f009 f8ab 	bl	8017e8e <memcpy>
  pbuf_ref(cseg->p);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fe fdef 	bl	800d920 <pbuf_ref>
  return cseg;
 800ed42:	68fb      	ldr	r3, [r7, #12]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	0801e6bc 	.word	0x0801e6bc
 800ed50:	0801ec10 	.word	0x0801ec10
 800ed54:	0801e700 	.word	0x0801e700

0800ed58 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d109      	bne.n	800ed80 <tcp_recv_null+0x28>
 800ed6c:	4b12      	ldr	r3, [pc, #72]	; (800edb8 <tcp_recv_null+0x60>)
 800ed6e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed72:	4912      	ldr	r1, [pc, #72]	; (800edbc <tcp_recv_null+0x64>)
 800ed74:	4812      	ldr	r0, [pc, #72]	; (800edc0 <tcp_recv_null+0x68>)
 800ed76:	f009 fdbb 	bl	80188f0 <iprintf>
 800ed7a:	f06f 030f 	mvn.w	r3, #15
 800ed7e:	e016      	b.n	800edae <tcp_recv_null+0x56>

  if (p != NULL) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d009      	beq.n	800ed9a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	891b      	ldrh	r3, [r3, #8]
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	68b8      	ldr	r0, [r7, #8]
 800ed8e:	f7ff fb1d 	bl	800e3cc <tcp_recved>
    pbuf_free(p);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7fe fd24 	bl	800d7e0 <pbuf_free>
 800ed98:	e008      	b.n	800edac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d104      	bne.n	800edac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eda2:	68b8      	ldr	r0, [r7, #8]
 800eda4:	f7ff f9c2 	bl	800e12c <tcp_close>
 800eda8:	4603      	mov	r3, r0
 800edaa:	e000      	b.n	800edae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	0801e6bc 	.word	0x0801e6bc
 800edbc:	0801ec2c 	.word	0x0801ec2c
 800edc0:	0801e700 	.word	0x0801e700

0800edc4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	4603      	mov	r3, r0
 800edcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800edce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	db01      	blt.n	800edda <tcp_kill_prio+0x16>
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	e000      	b.n	800eddc <tcp_kill_prio+0x18>
 800edda:	237f      	movs	r3, #127	; 0x7f
 800eddc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800edde:	7afb      	ldrb	r3, [r7, #11]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d034      	beq.n	800ee4e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ede4:	7afb      	ldrb	r3, [r7, #11]
 800ede6:	3b01      	subs	r3, #1
 800ede8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edf2:	4b19      	ldr	r3, [pc, #100]	; (800ee58 <tcp_kill_prio+0x94>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	617b      	str	r3, [r7, #20]
 800edf8:	e01f      	b.n	800ee3a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	7d5b      	ldrb	r3, [r3, #21]
 800edfe:	7afa      	ldrb	r2, [r7, #11]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d80c      	bhi.n	800ee1e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ee08:	7afa      	ldrb	r2, [r7, #11]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d112      	bne.n	800ee34 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee0e:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <tcp_kill_prio+0x98>)
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d80a      	bhi.n	800ee34 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee1e:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <tcp_kill_prio+0x98>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	7d5b      	ldrb	r3, [r3, #21]
 800ee32:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	617b      	str	r3, [r7, #20]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1dc      	bne.n	800edfa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d004      	beq.n	800ee50 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee46:	6938      	ldr	r0, [r7, #16]
 800ee48:	f7ff fa5a 	bl	800e300 <tcp_abort>
 800ee4c:	e000      	b.n	800ee50 <tcp_kill_prio+0x8c>
    return;
 800ee4e:	bf00      	nop
  }
}
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20007380 	.word	0x20007380
 800ee5c:	20007384 	.word	0x20007384

0800ee60 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d009      	beq.n	800ee84 <tcp_kill_state+0x24>
 800ee70:	79fb      	ldrb	r3, [r7, #7]
 800ee72:	2b09      	cmp	r3, #9
 800ee74:	d006      	beq.n	800ee84 <tcp_kill_state+0x24>
 800ee76:	4b1a      	ldr	r3, [pc, #104]	; (800eee0 <tcp_kill_state+0x80>)
 800ee78:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ee7c:	4919      	ldr	r1, [pc, #100]	; (800eee4 <tcp_kill_state+0x84>)
 800ee7e:	481a      	ldr	r0, [pc, #104]	; (800eee8 <tcp_kill_state+0x88>)
 800ee80:	f009 fd36 	bl	80188f0 <iprintf>

  inactivity = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee8c:	4b17      	ldr	r3, [pc, #92]	; (800eeec <tcp_kill_state+0x8c>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	617b      	str	r3, [r7, #20]
 800ee92:	e017      	b.n	800eec4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	7d1b      	ldrb	r3, [r3, #20]
 800ee98:	79fa      	ldrb	r2, [r7, #7]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d10f      	bne.n	800eebe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee9e:	4b14      	ldr	r3, [pc, #80]	; (800eef0 <tcp_kill_state+0x90>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d807      	bhi.n	800eebe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eeae:	4b10      	ldr	r3, [pc, #64]	; (800eef0 <tcp_kill_state+0x90>)
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1e4      	bne.n	800ee94 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d003      	beq.n	800eed8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eed0:	2100      	movs	r1, #0
 800eed2:	6938      	ldr	r0, [r7, #16]
 800eed4:	f7ff f956 	bl	800e184 <tcp_abandon>
  }
}
 800eed8:	bf00      	nop
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	0801e6bc 	.word	0x0801e6bc
 800eee4:	0801ec48 	.word	0x0801ec48
 800eee8:	0801e700 	.word	0x0801e700
 800eeec:	20007380 	.word	0x20007380
 800eef0:	20007384 	.word	0x20007384

0800eef4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef02:	4b12      	ldr	r3, [pc, #72]	; (800ef4c <tcp_kill_timewait+0x58>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	e012      	b.n	800ef30 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef0a:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <tcp_kill_timewait+0x5c>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6a1b      	ldr	r3, [r3, #32]
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d807      	bhi.n	800ef2a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef1a:	4b0d      	ldr	r3, [pc, #52]	; (800ef50 <tcp_kill_timewait+0x5c>)
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6a1b      	ldr	r3, [r3, #32]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1e9      	bne.n	800ef0a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef3c:	68b8      	ldr	r0, [r7, #8]
 800ef3e:	f7ff f9df 	bl	800e300 <tcp_abort>
  }
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20007390 	.word	0x20007390
 800ef50:	20007384 	.word	0x20007384

0800ef54 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef5a:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <tcp_handle_closepend+0x48>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef60:	e014      	b.n	800ef8c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	8b5b      	ldrh	r3, [r3, #26]
 800ef6c:	f003 0308 	and.w	r3, r3, #8
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	8b5b      	ldrh	r3, [r3, #26]
 800ef78:	f023 0308 	bic.w	r3, r3, #8
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff f86c 	bl	800e060 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1e7      	bne.n	800ef62 <tcp_handle_closepend+0xe>
  }
}
 800ef92:	bf00      	nop
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20007380 	.word	0x20007380

0800efa0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	4603      	mov	r3, r0
 800efa8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efaa:	2001      	movs	r0, #1
 800efac:	f7fd fdd6 	bl	800cb5c <memp_malloc>
 800efb0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d126      	bne.n	800f006 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800efb8:	f7ff ffcc 	bl	800ef54 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800efbc:	f7ff ff9a 	bl	800eef4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efc0:	2001      	movs	r0, #1
 800efc2:	f7fd fdcb 	bl	800cb5c <memp_malloc>
 800efc6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d11b      	bne.n	800f006 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800efce:	2009      	movs	r0, #9
 800efd0:	f7ff ff46 	bl	800ee60 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efd4:	2001      	movs	r0, #1
 800efd6:	f7fd fdc1 	bl	800cb5c <memp_malloc>
 800efda:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d111      	bne.n	800f006 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800efe2:	2008      	movs	r0, #8
 800efe4:	f7ff ff3c 	bl	800ee60 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efe8:	2001      	movs	r0, #1
 800efea:	f7fd fdb7 	bl	800cb5c <memp_malloc>
 800efee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d107      	bne.n	800f006 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff fee3 	bl	800edc4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800effe:	2001      	movs	r0, #1
 800f000:	f7fd fdac 	bl	800cb5c <memp_malloc>
 800f004:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d03f      	beq.n	800f08c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f00c:	229c      	movs	r2, #156	; 0x9c
 800f00e:	2100      	movs	r1, #0
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f008 ff60 	bl	8017ed6 <memset>
    pcb->prio = prio;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	79fa      	ldrb	r2, [r7, #7]
 800f01a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800f022:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f02c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	22ff      	movs	r2, #255	; 0xff
 800f03a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f042:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2206      	movs	r2, #6
 800f048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2206      	movs	r2, #6
 800f050:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f058:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f062:	4b0d      	ldr	r3, [pc, #52]	; (800f098 <tcp_alloc+0xf8>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f06a:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <tcp_alloc+0xfc>)
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800f078:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4a08      	ldr	r2, [pc, #32]	; (800f0a0 <tcp_alloc+0x100>)
 800f080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	4a07      	ldr	r2, [pc, #28]	; (800f0a4 <tcp_alloc+0x104>)
 800f088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f08c:	68fb      	ldr	r3, [r7, #12]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20007384 	.word	0x20007384
 800f09c:	20000492 	.word	0x20000492
 800f0a0:	0800ed59 	.word	0x0800ed59
 800f0a4:	006ddd00 	.word	0x006ddd00

0800f0a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d107      	bne.n	800f0c6 <tcp_pcb_purge+0x1e>
 800f0b6:	4b21      	ldr	r3, [pc, #132]	; (800f13c <tcp_pcb_purge+0x94>)
 800f0b8:	f640 0251 	movw	r2, #2129	; 0x851
 800f0bc:	4920      	ldr	r1, [pc, #128]	; (800f140 <tcp_pcb_purge+0x98>)
 800f0be:	4821      	ldr	r0, [pc, #132]	; (800f144 <tcp_pcb_purge+0x9c>)
 800f0c0:	f009 fc16 	bl	80188f0 <iprintf>
 800f0c4:	e037      	b.n	800f136 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d033      	beq.n	800f136 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f0d2:	2b0a      	cmp	r3, #10
 800f0d4:	d02f      	beq.n	800f136 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d02b      	beq.n	800f136 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fe fb78 	bl	800d7e0 <pbuf_free>
      pcb->refused_data = NULL;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d002      	beq.n	800f104 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f986 	bl	800f410 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f10a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff fdc9 	bl	800eca8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fdc4 	bl	800eca8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	66da      	str	r2, [r3, #108]	; 0x6c
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	0801e6bc 	.word	0x0801e6bc
 800f140:	0801ed08 	.word	0x0801ed08
 800f144:	0801e700 	.word	0x0801e700

0800f148 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d106      	bne.n	800f166 <tcp_pcb_remove+0x1e>
 800f158:	4b3e      	ldr	r3, [pc, #248]	; (800f254 <tcp_pcb_remove+0x10c>)
 800f15a:	f640 0283 	movw	r2, #2179	; 0x883
 800f15e:	493e      	ldr	r1, [pc, #248]	; (800f258 <tcp_pcb_remove+0x110>)
 800f160:	483e      	ldr	r0, [pc, #248]	; (800f25c <tcp_pcb_remove+0x114>)
 800f162:	f009 fbc5 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d106      	bne.n	800f17a <tcp_pcb_remove+0x32>
 800f16c:	4b39      	ldr	r3, [pc, #228]	; (800f254 <tcp_pcb_remove+0x10c>)
 800f16e:	f640 0284 	movw	r2, #2180	; 0x884
 800f172:	493b      	ldr	r1, [pc, #236]	; (800f260 <tcp_pcb_remove+0x118>)
 800f174:	4839      	ldr	r0, [pc, #228]	; (800f25c <tcp_pcb_remove+0x114>)
 800f176:	f009 fbbb 	bl	80188f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	429a      	cmp	r2, r3
 800f182:	d105      	bne.n	800f190 <tcp_pcb_remove+0x48>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	e013      	b.n	800f1b8 <tcp_pcb_remove+0x70>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	e00c      	b.n	800f1b2 <tcp_pcb_remove+0x6a>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d104      	bne.n	800f1ac <tcp_pcb_remove+0x64>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	68da      	ldr	r2, [r3, #12]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	60da      	str	r2, [r3, #12]
 800f1aa:	e005      	b.n	800f1b8 <tcp_pcb_remove+0x70>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	60fb      	str	r3, [r7, #12]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1ef      	bne.n	800f198 <tcp_pcb_remove+0x50>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f1be:	6838      	ldr	r0, [r7, #0]
 800f1c0:	f7ff ff72 	bl	800f0a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
 800f1c8:	2b0a      	cmp	r3, #10
 800f1ca:	d013      	beq.n	800f1f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d00f      	beq.n	800f1f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	8b5b      	ldrh	r3, [r3, #26]
 800f1d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d009      	beq.n	800f1f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	8b5b      	ldrh	r3, [r3, #26]
 800f1e4:	f043 0302 	orr.w	r3, r3, #2
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1ee:	6838      	ldr	r0, [r7, #0]
 800f1f0:	f002 ff68 	bl	80120c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	7d1b      	ldrb	r3, [r3, #20]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d020      	beq.n	800f23e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f200:	2b00      	cmp	r3, #0
 800f202:	d006      	beq.n	800f212 <tcp_pcb_remove+0xca>
 800f204:	4b13      	ldr	r3, [pc, #76]	; (800f254 <tcp_pcb_remove+0x10c>)
 800f206:	f640 0293 	movw	r2, #2195	; 0x893
 800f20a:	4916      	ldr	r1, [pc, #88]	; (800f264 <tcp_pcb_remove+0x11c>)
 800f20c:	4813      	ldr	r0, [pc, #76]	; (800f25c <tcp_pcb_remove+0x114>)
 800f20e:	f009 fb6f 	bl	80188f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f216:	2b00      	cmp	r3, #0
 800f218:	d006      	beq.n	800f228 <tcp_pcb_remove+0xe0>
 800f21a:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <tcp_pcb_remove+0x10c>)
 800f21c:	f640 0294 	movw	r2, #2196	; 0x894
 800f220:	4911      	ldr	r1, [pc, #68]	; (800f268 <tcp_pcb_remove+0x120>)
 800f222:	480e      	ldr	r0, [pc, #56]	; (800f25c <tcp_pcb_remove+0x114>)
 800f224:	f009 fb64 	bl	80188f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d006      	beq.n	800f23e <tcp_pcb_remove+0xf6>
 800f230:	4b08      	ldr	r3, [pc, #32]	; (800f254 <tcp_pcb_remove+0x10c>)
 800f232:	f640 0296 	movw	r2, #2198	; 0x896
 800f236:	490d      	ldr	r1, [pc, #52]	; (800f26c <tcp_pcb_remove+0x124>)
 800f238:	4808      	ldr	r0, [pc, #32]	; (800f25c <tcp_pcb_remove+0x114>)
 800f23a:	f009 fb59 	bl	80188f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2200      	movs	r2, #0
 800f242:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	2200      	movs	r2, #0
 800f248:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f24a:	bf00      	nop
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	0801e6bc 	.word	0x0801e6bc
 800f258:	0801ed24 	.word	0x0801ed24
 800f25c:	0801e700 	.word	0x0801e700
 800f260:	0801ed40 	.word	0x0801ed40
 800f264:	0801ed60 	.word	0x0801ed60
 800f268:	0801ed78 	.word	0x0801ed78
 800f26c:	0801ed94 	.word	0x0801ed94

0800f270 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <tcp_next_iss+0x1c>
 800f27e:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <tcp_next_iss+0x38>)
 800f280:	f640 02af 	movw	r2, #2223	; 0x8af
 800f284:	4909      	ldr	r1, [pc, #36]	; (800f2ac <tcp_next_iss+0x3c>)
 800f286:	480a      	ldr	r0, [pc, #40]	; (800f2b0 <tcp_next_iss+0x40>)
 800f288:	f009 fb32 	bl	80188f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f28c:	4b09      	ldr	r3, [pc, #36]	; (800f2b4 <tcp_next_iss+0x44>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	4b09      	ldr	r3, [pc, #36]	; (800f2b8 <tcp_next_iss+0x48>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4413      	add	r3, r2
 800f296:	4a07      	ldr	r2, [pc, #28]	; (800f2b4 <tcp_next_iss+0x44>)
 800f298:	6013      	str	r3, [r2, #0]
  return iss;
 800f29a:	4b06      	ldr	r3, [pc, #24]	; (800f2b4 <tcp_next_iss+0x44>)
 800f29c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	0801e6bc 	.word	0x0801e6bc
 800f2ac:	0801edac 	.word	0x0801edac
 800f2b0:	0801e700 	.word	0x0801e700
 800f2b4:	20000068 	.word	0x20000068
 800f2b8:	20007384 	.word	0x20007384

0800f2bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d106      	bne.n	800f2de <tcp_eff_send_mss_netif+0x22>
 800f2d0:	4b14      	ldr	r3, [pc, #80]	; (800f324 <tcp_eff_send_mss_netif+0x68>)
 800f2d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f2d6:	4914      	ldr	r1, [pc, #80]	; (800f328 <tcp_eff_send_mss_netif+0x6c>)
 800f2d8:	4814      	ldr	r0, [pc, #80]	; (800f32c <tcp_eff_send_mss_netif+0x70>)
 800f2da:	f009 fb09 	bl	80188f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f2e4:	89fb      	ldrh	r3, [r7, #14]
 800f2e6:	e019      	b.n	800f31c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f2ee:	8afb      	ldrh	r3, [r7, #22]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d012      	beq.n	800f31a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f2f4:	2328      	movs	r3, #40	; 0x28
 800f2f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f2f8:	8afa      	ldrh	r2, [r7, #22]
 800f2fa:	8abb      	ldrh	r3, [r7, #20]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d904      	bls.n	800f30a <tcp_eff_send_mss_netif+0x4e>
 800f300:	8afa      	ldrh	r2, [r7, #22]
 800f302:	8abb      	ldrh	r3, [r7, #20]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	b29b      	uxth	r3, r3
 800f308:	e000      	b.n	800f30c <tcp_eff_send_mss_netif+0x50>
 800f30a:	2300      	movs	r3, #0
 800f30c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f30e:	8a7a      	ldrh	r2, [r7, #18]
 800f310:	89fb      	ldrh	r3, [r7, #14]
 800f312:	4293      	cmp	r3, r2
 800f314:	bf28      	it	cs
 800f316:	4613      	movcs	r3, r2
 800f318:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f31a:	89fb      	ldrh	r3, [r7, #14]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	0801e6bc 	.word	0x0801e6bc
 800f328:	0801edc8 	.word	0x0801edc8
 800f32c:	0801e700 	.word	0x0801e700

0800f330 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d119      	bne.n	800f378 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f344:	4b10      	ldr	r3, [pc, #64]	; (800f388 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f346:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f34a:	4910      	ldr	r1, [pc, #64]	; (800f38c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f34c:	4810      	ldr	r0, [pc, #64]	; (800f390 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f34e:	f009 facf 	bl	80188f0 <iprintf>

  while (pcb != NULL) {
 800f352:	e011      	b.n	800f378 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d108      	bne.n	800f372 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f7fe ffca 	bl	800e300 <tcp_abort>
      pcb = next;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e002      	b.n	800f378 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1ea      	bne.n	800f354 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f37e:	bf00      	nop
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0801e6bc 	.word	0x0801e6bc
 800f38c:	0801edf0 	.word	0x0801edf0
 800f390:	0801e700 	.word	0x0801e700

0800f394 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d02a      	beq.n	800f3fa <tcp_netif_ip_addr_changed+0x66>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d026      	beq.n	800f3fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f3ac:	4b15      	ldr	r3, [pc, #84]	; (800f404 <tcp_netif_ip_addr_changed+0x70>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff ffbc 	bl	800f330 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f3b8:	4b13      	ldr	r3, [pc, #76]	; (800f408 <tcp_netif_ip_addr_changed+0x74>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7ff ffb6 	bl	800f330 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d017      	beq.n	800f3fa <tcp_netif_ip_addr_changed+0x66>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d013      	beq.n	800f3fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <tcp_netif_ip_addr_changed+0x78>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	e00c      	b.n	800f3f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d103      	bne.n	800f3ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d1ef      	bne.n	800f3da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f3fa:	bf00      	nop
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20007380 	.word	0x20007380
 800f408:	2000738c 	.word	0x2000738c
 800f40c:	20007388 	.word	0x20007388

0800f410 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff fc3f 	bl	800eca8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b08d      	sub	sp, #52	; 0x34
 800f43c:	af04      	add	r7, sp, #16
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d105      	bne.n	800f454 <tcp_input+0x1c>
 800f448:	4b9b      	ldr	r3, [pc, #620]	; (800f6b8 <tcp_input+0x280>)
 800f44a:	2283      	movs	r2, #131	; 0x83
 800f44c:	499b      	ldr	r1, [pc, #620]	; (800f6bc <tcp_input+0x284>)
 800f44e:	489c      	ldr	r0, [pc, #624]	; (800f6c0 <tcp_input+0x288>)
 800f450:	f009 fa4e 	bl	80188f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	4a9a      	ldr	r2, [pc, #616]	; (800f6c4 <tcp_input+0x28c>)
 800f45a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	895b      	ldrh	r3, [r3, #10]
 800f460:	2b13      	cmp	r3, #19
 800f462:	f240 83c4 	bls.w	800fbee <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f466:	4b98      	ldr	r3, [pc, #608]	; (800f6c8 <tcp_input+0x290>)
 800f468:	695a      	ldr	r2, [r3, #20]
 800f46a:	4b97      	ldr	r3, [pc, #604]	; (800f6c8 <tcp_input+0x290>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4619      	mov	r1, r3
 800f470:	4610      	mov	r0, r2
 800f472:	f007 fd51 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f040 83ba 	bne.w	800fbf2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f47e:	4b92      	ldr	r3, [pc, #584]	; (800f6c8 <tcp_input+0x290>)
 800f480:	695b      	ldr	r3, [r3, #20]
 800f482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f486:	2be0      	cmp	r3, #224	; 0xe0
 800f488:	f000 83b3 	beq.w	800fbf2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f48c:	4b8d      	ldr	r3, [pc, #564]	; (800f6c4 <tcp_input+0x28c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	899b      	ldrh	r3, [r3, #12]
 800f492:	b29b      	uxth	r3, r3
 800f494:	4618      	mov	r0, r3
 800f496:	f7fc ff0b 	bl	800c2b0 <lwip_htons>
 800f49a:	4603      	mov	r3, r0
 800f49c:	0b1b      	lsrs	r3, r3, #12
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f4a6:	7cbb      	ldrb	r3, [r7, #18]
 800f4a8:	2b13      	cmp	r3, #19
 800f4aa:	f240 83a2 	bls.w	800fbf2 <tcp_input+0x7ba>
 800f4ae:	7cbb      	ldrb	r3, [r7, #18]
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	891b      	ldrh	r3, [r3, #8]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	f200 839b 	bhi.w	800fbf2 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f4bc:	7cbb      	ldrb	r3, [r7, #18]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	3b14      	subs	r3, #20
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	4b81      	ldr	r3, [pc, #516]	; (800f6cc <tcp_input+0x294>)
 800f4c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f4c8:	4b81      	ldr	r3, [pc, #516]	; (800f6d0 <tcp_input+0x298>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	895a      	ldrh	r2, [r3, #10]
 800f4d2:	7cbb      	ldrb	r3, [r7, #18]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d309      	bcc.n	800f4ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f4da:	4b7c      	ldr	r3, [pc, #496]	; (800f6cc <tcp_input+0x294>)
 800f4dc:	881a      	ldrh	r2, [r3, #0]
 800f4de:	4b7d      	ldr	r3, [pc, #500]	; (800f6d4 <tcp_input+0x29c>)
 800f4e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f4e2:	7cbb      	ldrb	r3, [r7, #18]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fe f8f4 	bl	800d6d4 <pbuf_remove_header>
 800f4ec:	e04e      	b.n	800f58c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d105      	bne.n	800f502 <tcp_input+0xca>
 800f4f6:	4b70      	ldr	r3, [pc, #448]	; (800f6b8 <tcp_input+0x280>)
 800f4f8:	22c2      	movs	r2, #194	; 0xc2
 800f4fa:	4977      	ldr	r1, [pc, #476]	; (800f6d8 <tcp_input+0x2a0>)
 800f4fc:	4870      	ldr	r0, [pc, #448]	; (800f6c0 <tcp_input+0x288>)
 800f4fe:	f009 f9f7 	bl	80188f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f502:	2114      	movs	r1, #20
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7fe f8e5 	bl	800d6d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	895a      	ldrh	r2, [r3, #10]
 800f50e:	4b71      	ldr	r3, [pc, #452]	; (800f6d4 <tcp_input+0x29c>)
 800f510:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f512:	4b6e      	ldr	r3, [pc, #440]	; (800f6cc <tcp_input+0x294>)
 800f514:	881a      	ldrh	r2, [r3, #0]
 800f516:	4b6f      	ldr	r3, [pc, #444]	; (800f6d4 <tcp_input+0x29c>)
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f51e:	4b6d      	ldr	r3, [pc, #436]	; (800f6d4 <tcp_input+0x29c>)
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	4619      	mov	r1, r3
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7fe f8d5 	bl	800d6d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	895b      	ldrh	r3, [r3, #10]
 800f530:	8a3a      	ldrh	r2, [r7, #16]
 800f532:	429a      	cmp	r2, r3
 800f534:	f200 835f 	bhi.w	800fbf6 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	4a64      	ldr	r2, [pc, #400]	; (800f6d0 <tcp_input+0x298>)
 800f540:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	8a3a      	ldrh	r2, [r7, #16]
 800f548:	4611      	mov	r1, r2
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fe f8c2 	bl	800d6d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	891a      	ldrh	r2, [r3, #8]
 800f554:	8a3b      	ldrh	r3, [r7, #16]
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	b29a      	uxth	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	895b      	ldrh	r3, [r3, #10]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d005      	beq.n	800f572 <tcp_input+0x13a>
 800f566:	4b54      	ldr	r3, [pc, #336]	; (800f6b8 <tcp_input+0x280>)
 800f568:	22df      	movs	r2, #223	; 0xdf
 800f56a:	495c      	ldr	r1, [pc, #368]	; (800f6dc <tcp_input+0x2a4>)
 800f56c:	4854      	ldr	r0, [pc, #336]	; (800f6c0 <tcp_input+0x288>)
 800f56e:	f009 f9bf 	bl	80188f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	891a      	ldrh	r2, [r3, #8]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	891b      	ldrh	r3, [r3, #8]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d005      	beq.n	800f58c <tcp_input+0x154>
 800f580:	4b4d      	ldr	r3, [pc, #308]	; (800f6b8 <tcp_input+0x280>)
 800f582:	22e0      	movs	r2, #224	; 0xe0
 800f584:	4956      	ldr	r1, [pc, #344]	; (800f6e0 <tcp_input+0x2a8>)
 800f586:	484e      	ldr	r0, [pc, #312]	; (800f6c0 <tcp_input+0x288>)
 800f588:	f009 f9b2 	bl	80188f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f58c:	4b4d      	ldr	r3, [pc, #308]	; (800f6c4 <tcp_input+0x28c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	b29a      	uxth	r2, r3
 800f594:	4b4b      	ldr	r3, [pc, #300]	; (800f6c4 <tcp_input+0x28c>)
 800f596:	681c      	ldr	r4, [r3, #0]
 800f598:	4610      	mov	r0, r2
 800f59a:	f7fc fe89 	bl	800c2b0 <lwip_htons>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f5a2:	4b48      	ldr	r3, [pc, #288]	; (800f6c4 <tcp_input+0x28c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	885b      	ldrh	r3, [r3, #2]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	4b46      	ldr	r3, [pc, #280]	; (800f6c4 <tcp_input+0x28c>)
 800f5ac:	681c      	ldr	r4, [r3, #0]
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	f7fc fe7e 	bl	800c2b0 <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f5b8:	4b42      	ldr	r3, [pc, #264]	; (800f6c4 <tcp_input+0x28c>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	4b41      	ldr	r3, [pc, #260]	; (800f6c4 <tcp_input+0x28c>)
 800f5c0:	681c      	ldr	r4, [r3, #0]
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	f7fc fe89 	bl	800c2da <lwip_htonl>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	6063      	str	r3, [r4, #4]
 800f5cc:	6863      	ldr	r3, [r4, #4]
 800f5ce:	4a45      	ldr	r2, [pc, #276]	; (800f6e4 <tcp_input+0x2ac>)
 800f5d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f5d2:	4b3c      	ldr	r3, [pc, #240]	; (800f6c4 <tcp_input+0x28c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	4b3a      	ldr	r3, [pc, #232]	; (800f6c4 <tcp_input+0x28c>)
 800f5da:	681c      	ldr	r4, [r3, #0]
 800f5dc:	4610      	mov	r0, r2
 800f5de:	f7fc fe7c 	bl	800c2da <lwip_htonl>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	60a3      	str	r3, [r4, #8]
 800f5e6:	68a3      	ldr	r3, [r4, #8]
 800f5e8:	4a3f      	ldr	r2, [pc, #252]	; (800f6e8 <tcp_input+0x2b0>)
 800f5ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f5ec:	4b35      	ldr	r3, [pc, #212]	; (800f6c4 <tcp_input+0x28c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	89db      	ldrh	r3, [r3, #14]
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	4b33      	ldr	r3, [pc, #204]	; (800f6c4 <tcp_input+0x28c>)
 800f5f6:	681c      	ldr	r4, [r3, #0]
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	f7fc fe59 	bl	800c2b0 <lwip_htons>
 800f5fe:	4603      	mov	r3, r0
 800f600:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f602:	4b30      	ldr	r3, [pc, #192]	; (800f6c4 <tcp_input+0x28c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fc fe50 	bl	800c2b0 <lwip_htons>
 800f610:	4603      	mov	r3, r0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	4b34      	ldr	r3, [pc, #208]	; (800f6ec <tcp_input+0x2b4>)
 800f61c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	891a      	ldrh	r2, [r3, #8]
 800f622:	4b33      	ldr	r3, [pc, #204]	; (800f6f0 <tcp_input+0x2b8>)
 800f624:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f626:	4b31      	ldr	r3, [pc, #196]	; (800f6ec <tcp_input+0x2b4>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	f003 0303 	and.w	r3, r3, #3
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00c      	beq.n	800f64c <tcp_input+0x214>
    tcplen++;
 800f632:	4b2f      	ldr	r3, [pc, #188]	; (800f6f0 <tcp_input+0x2b8>)
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	3301      	adds	r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	4b2d      	ldr	r3, [pc, #180]	; (800f6f0 <tcp_input+0x2b8>)
 800f63c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	891a      	ldrh	r2, [r3, #8]
 800f642:	4b2b      	ldr	r3, [pc, #172]	; (800f6f0 <tcp_input+0x2b8>)
 800f644:	881b      	ldrh	r3, [r3, #0]
 800f646:	429a      	cmp	r2, r3
 800f648:	f200 82d7 	bhi.w	800fbfa <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f64c:	2300      	movs	r3, #0
 800f64e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f650:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <tcp_input+0x2bc>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	61fb      	str	r3, [r7, #28]
 800f656:	e09d      	b.n	800f794 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d105      	bne.n	800f66c <tcp_input+0x234>
 800f660:	4b15      	ldr	r3, [pc, #84]	; (800f6b8 <tcp_input+0x280>)
 800f662:	22fb      	movs	r2, #251	; 0xfb
 800f664:	4924      	ldr	r1, [pc, #144]	; (800f6f8 <tcp_input+0x2c0>)
 800f666:	4816      	ldr	r0, [pc, #88]	; (800f6c0 <tcp_input+0x288>)
 800f668:	f009 f942 	bl	80188f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	7d1b      	ldrb	r3, [r3, #20]
 800f670:	2b0a      	cmp	r3, #10
 800f672:	d105      	bne.n	800f680 <tcp_input+0x248>
 800f674:	4b10      	ldr	r3, [pc, #64]	; (800f6b8 <tcp_input+0x280>)
 800f676:	22fc      	movs	r2, #252	; 0xfc
 800f678:	4920      	ldr	r1, [pc, #128]	; (800f6fc <tcp_input+0x2c4>)
 800f67a:	4811      	ldr	r0, [pc, #68]	; (800f6c0 <tcp_input+0x288>)
 800f67c:	f009 f938 	bl	80188f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	7d1b      	ldrb	r3, [r3, #20]
 800f684:	2b01      	cmp	r3, #1
 800f686:	d105      	bne.n	800f694 <tcp_input+0x25c>
 800f688:	4b0b      	ldr	r3, [pc, #44]	; (800f6b8 <tcp_input+0x280>)
 800f68a:	22fd      	movs	r2, #253	; 0xfd
 800f68c:	491c      	ldr	r1, [pc, #112]	; (800f700 <tcp_input+0x2c8>)
 800f68e:	480c      	ldr	r0, [pc, #48]	; (800f6c0 <tcp_input+0x288>)
 800f690:	f009 f92e 	bl	80188f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	7a1b      	ldrb	r3, [r3, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d033      	beq.n	800f704 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	7a1a      	ldrb	r2, [r3, #8]
 800f6a0:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <tcp_input+0x290>)
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d029      	beq.n	800f704 <tcp_input+0x2cc>
      prev = pcb;
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	61bb      	str	r3, [r7, #24]
      continue;
 800f6b4:	e06b      	b.n	800f78e <tcp_input+0x356>
 800f6b6:	bf00      	nop
 800f6b8:	0801ee24 	.word	0x0801ee24
 800f6bc:	0801ee58 	.word	0x0801ee58
 800f6c0:	0801ee70 	.word	0x0801ee70
 800f6c4:	200004a4 	.word	0x200004a4
 800f6c8:	2000425c 	.word	0x2000425c
 800f6cc:	200004a8 	.word	0x200004a8
 800f6d0:	200004ac 	.word	0x200004ac
 800f6d4:	200004aa 	.word	0x200004aa
 800f6d8:	0801ee98 	.word	0x0801ee98
 800f6dc:	0801eea8 	.word	0x0801eea8
 800f6e0:	0801eeb4 	.word	0x0801eeb4
 800f6e4:	200004b4 	.word	0x200004b4
 800f6e8:	200004b8 	.word	0x200004b8
 800f6ec:	200004c0 	.word	0x200004c0
 800f6f0:	200004be 	.word	0x200004be
 800f6f4:	20007380 	.word	0x20007380
 800f6f8:	0801eed4 	.word	0x0801eed4
 800f6fc:	0801eefc 	.word	0x0801eefc
 800f700:	0801ef28 	.word	0x0801ef28
    }

    if (pcb->remote_port == tcphdr->src &&
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	8b1a      	ldrh	r2, [r3, #24]
 800f708:	4b94      	ldr	r3, [pc, #592]	; (800f95c <tcp_input+0x524>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	429a      	cmp	r2, r3
 800f712:	d13a      	bne.n	800f78a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	8ada      	ldrh	r2, [r3, #22]
 800f718:	4b90      	ldr	r3, [pc, #576]	; (800f95c <tcp_input+0x524>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	885b      	ldrh	r3, [r3, #2]
 800f71e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f720:	429a      	cmp	r2, r3
 800f722:	d132      	bne.n	800f78a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	4b8d      	ldr	r3, [pc, #564]	; (800f960 <tcp_input+0x528>)
 800f72a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d12c      	bne.n	800f78a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	4b8a      	ldr	r3, [pc, #552]	; (800f960 <tcp_input+0x528>)
 800f736:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f738:	429a      	cmp	r2, r3
 800f73a:	d126      	bne.n	800f78a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	69fa      	ldr	r2, [r7, #28]
 800f742:	429a      	cmp	r2, r3
 800f744:	d106      	bne.n	800f754 <tcp_input+0x31c>
 800f746:	4b87      	ldr	r3, [pc, #540]	; (800f964 <tcp_input+0x52c>)
 800f748:	f240 120d 	movw	r2, #269	; 0x10d
 800f74c:	4986      	ldr	r1, [pc, #536]	; (800f968 <tcp_input+0x530>)
 800f74e:	4887      	ldr	r0, [pc, #540]	; (800f96c <tcp_input+0x534>)
 800f750:	f009 f8ce 	bl	80188f0 <iprintf>
      if (prev != NULL) {
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00a      	beq.n	800f770 <tcp_input+0x338>
        prev->next = pcb->next;
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	68da      	ldr	r2, [r3, #12]
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f762:	4b83      	ldr	r3, [pc, #524]	; (800f970 <tcp_input+0x538>)
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f76a:	4a81      	ldr	r2, [pc, #516]	; (800f970 <tcp_input+0x538>)
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	69fa      	ldr	r2, [r7, #28]
 800f776:	429a      	cmp	r2, r3
 800f778:	d111      	bne.n	800f79e <tcp_input+0x366>
 800f77a:	4b7a      	ldr	r3, [pc, #488]	; (800f964 <tcp_input+0x52c>)
 800f77c:	f240 1215 	movw	r2, #277	; 0x115
 800f780:	497c      	ldr	r1, [pc, #496]	; (800f974 <tcp_input+0x53c>)
 800f782:	487a      	ldr	r0, [pc, #488]	; (800f96c <tcp_input+0x534>)
 800f784:	f009 f8b4 	bl	80188f0 <iprintf>
      break;
 800f788:	e009      	b.n	800f79e <tcp_input+0x366>
    }
    prev = pcb;
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	61fb      	str	r3, [r7, #28]
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	2b00      	cmp	r3, #0
 800f798:	f47f af5e 	bne.w	800f658 <tcp_input+0x220>
 800f79c:	e000      	b.n	800f7a0 <tcp_input+0x368>
      break;
 800f79e:	bf00      	nop
  }

  if (pcb == NULL) {
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f040 8095 	bne.w	800f8d2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7a8:	4b73      	ldr	r3, [pc, #460]	; (800f978 <tcp_input+0x540>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	61fb      	str	r3, [r7, #28]
 800f7ae:	e03f      	b.n	800f830 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	7d1b      	ldrb	r3, [r3, #20]
 800f7b4:	2b0a      	cmp	r3, #10
 800f7b6:	d006      	beq.n	800f7c6 <tcp_input+0x38e>
 800f7b8:	4b6a      	ldr	r3, [pc, #424]	; (800f964 <tcp_input+0x52c>)
 800f7ba:	f240 121f 	movw	r2, #287	; 0x11f
 800f7be:	496f      	ldr	r1, [pc, #444]	; (800f97c <tcp_input+0x544>)
 800f7c0:	486a      	ldr	r0, [pc, #424]	; (800f96c <tcp_input+0x534>)
 800f7c2:	f009 f895 	bl	80188f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	7a1b      	ldrb	r3, [r3, #8]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d009      	beq.n	800f7e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	7a1a      	ldrb	r2, [r3, #8]
 800f7d2:	4b63      	ldr	r3, [pc, #396]	; (800f960 <tcp_input+0x528>)
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7da:	3301      	adds	r3, #1
 800f7dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d122      	bne.n	800f828 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	8b1a      	ldrh	r2, [r3, #24]
 800f7e6:	4b5d      	ldr	r3, [pc, #372]	; (800f95c <tcp_input+0x524>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d11b      	bne.n	800f82a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	8ada      	ldrh	r2, [r3, #22]
 800f7f6:	4b59      	ldr	r3, [pc, #356]	; (800f95c <tcp_input+0x524>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	885b      	ldrh	r3, [r3, #2]
 800f7fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d113      	bne.n	800f82a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	4b56      	ldr	r3, [pc, #344]	; (800f960 <tcp_input+0x528>)
 800f808:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d10d      	bne.n	800f82a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	4b53      	ldr	r3, [pc, #332]	; (800f960 <tcp_input+0x528>)
 800f814:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f816:	429a      	cmp	r2, r3
 800f818:	d107      	bne.n	800f82a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f81a:	69f8      	ldr	r0, [r7, #28]
 800f81c:	f000 fb52 	bl	800fec4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fd ffdd 	bl	800d7e0 <pbuf_free>
        return;
 800f826:	e1ee      	b.n	800fc06 <tcp_input+0x7ce>
        continue;
 800f828:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	61fb      	str	r3, [r7, #28]
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1bc      	bne.n	800f7b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f836:	2300      	movs	r3, #0
 800f838:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f83a:	4b51      	ldr	r3, [pc, #324]	; (800f980 <tcp_input+0x548>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	617b      	str	r3, [r7, #20]
 800f840:	e02a      	b.n	800f898 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	7a1b      	ldrb	r3, [r3, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00c      	beq.n	800f864 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	7a1a      	ldrb	r2, [r3, #8]
 800f84e:	4b44      	ldr	r3, [pc, #272]	; (800f960 <tcp_input+0x528>)
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f856:	3301      	adds	r3, #1
 800f858:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d002      	beq.n	800f864 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	61bb      	str	r3, [r7, #24]
        continue;
 800f862:	e016      	b.n	800f892 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	8ada      	ldrh	r2, [r3, #22]
 800f868:	4b3c      	ldr	r3, [pc, #240]	; (800f95c <tcp_input+0x524>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	429a      	cmp	r2, r3
 800f872:	d10c      	bne.n	800f88e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	4b39      	ldr	r3, [pc, #228]	; (800f960 <tcp_input+0x528>)
 800f87a:	695b      	ldr	r3, [r3, #20]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d00f      	beq.n	800f8a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00d      	beq.n	800f8a2 <tcp_input+0x46a>
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d009      	beq.n	800f8a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1d1      	bne.n	800f842 <tcp_input+0x40a>
 800f89e:	e000      	b.n	800f8a2 <tcp_input+0x46a>
            break;
 800f8a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d014      	beq.n	800f8d2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00a      	beq.n	800f8c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f8b6:	4b32      	ldr	r3, [pc, #200]	; (800f980 <tcp_input+0x548>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f8be:	4a30      	ldr	r2, [pc, #192]	; (800f980 <tcp_input+0x548>)
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f8c4:	6978      	ldr	r0, [r7, #20]
 800f8c6:	f000 f9ff 	bl	800fcc8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7fd ff88 	bl	800d7e0 <pbuf_free>
      return;
 800f8d0:	e199      	b.n	800fc06 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 8160 	beq.w	800fb9a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f8da:	4b2a      	ldr	r3, [pc, #168]	; (800f984 <tcp_input+0x54c>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	891a      	ldrh	r2, [r3, #8]
 800f8e4:	4b27      	ldr	r3, [pc, #156]	; (800f984 <tcp_input+0x54c>)
 800f8e6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8e8:	4a26      	ldr	r2, [pc, #152]	; (800f984 <tcp_input+0x54c>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f8ee:	4b1b      	ldr	r3, [pc, #108]	; (800f95c <tcp_input+0x524>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a24      	ldr	r2, [pc, #144]	; (800f984 <tcp_input+0x54c>)
 800f8f4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f8f6:	4b24      	ldr	r3, [pc, #144]	; (800f988 <tcp_input+0x550>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f8fc:	4b23      	ldr	r3, [pc, #140]	; (800f98c <tcp_input+0x554>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f902:	4b23      	ldr	r3, [pc, #140]	; (800f990 <tcp_input+0x558>)
 800f904:	2200      	movs	r2, #0
 800f906:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f908:	4b22      	ldr	r3, [pc, #136]	; (800f994 <tcp_input+0x55c>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b00      	cmp	r3, #0
 800f912:	d006      	beq.n	800f922 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7b5b      	ldrb	r3, [r3, #13]
 800f918:	f043 0301 	orr.w	r3, r3, #1
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f926:	2b00      	cmp	r3, #0
 800f928:	d038      	beq.n	800f99c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f92a:	69f8      	ldr	r0, [r7, #28]
 800f92c:	f7ff f940 	bl	800ebb0 <tcp_process_refused_data>
 800f930:	4603      	mov	r3, r0
 800f932:	f113 0f0d 	cmn.w	r3, #13
 800f936:	d007      	beq.n	800f948 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d02d      	beq.n	800f99c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f940:	4b15      	ldr	r3, [pc, #84]	; (800f998 <tcp_input+0x560>)
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d029      	beq.n	800f99c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f040 8104 	bne.w	800fb5a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f952:	69f8      	ldr	r0, [r7, #28]
 800f954:	f003 f9ca 	bl	8012cec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f958:	e0ff      	b.n	800fb5a <tcp_input+0x722>
 800f95a:	bf00      	nop
 800f95c:	200004a4 	.word	0x200004a4
 800f960:	2000425c 	.word	0x2000425c
 800f964:	0801ee24 	.word	0x0801ee24
 800f968:	0801ef50 	.word	0x0801ef50
 800f96c:	0801ee70 	.word	0x0801ee70
 800f970:	20007380 	.word	0x20007380
 800f974:	0801ef7c 	.word	0x0801ef7c
 800f978:	20007390 	.word	0x20007390
 800f97c:	0801efa8 	.word	0x0801efa8
 800f980:	20007388 	.word	0x20007388
 800f984:	20000494 	.word	0x20000494
 800f988:	200004c4 	.word	0x200004c4
 800f98c:	200004c1 	.word	0x200004c1
 800f990:	200004bc 	.word	0x200004bc
 800f994:	200004c0 	.word	0x200004c0
 800f998:	200004be 	.word	0x200004be
      }
    }
    tcp_input_pcb = pcb;
 800f99c:	4a9b      	ldr	r2, [pc, #620]	; (800fc0c <tcp_input+0x7d4>)
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f9a2:	69f8      	ldr	r0, [r7, #28]
 800f9a4:	f000 fb0a 	bl	800ffbc <tcp_process>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f9ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9b0:	f113 0f0d 	cmn.w	r3, #13
 800f9b4:	f000 80d3 	beq.w	800fb5e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f9b8:	4b95      	ldr	r3, [pc, #596]	; (800fc10 <tcp_input+0x7d8>)
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	f003 0308 	and.w	r3, r3, #8
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d015      	beq.n	800f9f0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d008      	beq.n	800f9e0 <tcp_input+0x5a8>
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9d4:	69fa      	ldr	r2, [r7, #28]
 800f9d6:	6912      	ldr	r2, [r2, #16]
 800f9d8:	f06f 010d 	mvn.w	r1, #13
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f9e0:	69f9      	ldr	r1, [r7, #28]
 800f9e2:	488c      	ldr	r0, [pc, #560]	; (800fc14 <tcp_input+0x7dc>)
 800f9e4:	f7ff fbb0 	bl	800f148 <tcp_pcb_remove>
        tcp_free(pcb);
 800f9e8:	69f8      	ldr	r0, [r7, #28]
 800f9ea:	f7fe f9a9 	bl	800dd40 <tcp_free>
 800f9ee:	e0c1      	b.n	800fb74 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f9f4:	4b88      	ldr	r3, [pc, #544]	; (800fc18 <tcp_input+0x7e0>)
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d01d      	beq.n	800fa38 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f9fc:	4b86      	ldr	r3, [pc, #536]	; (800fc18 <tcp_input+0x7e0>)
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00a      	beq.n	800fa22 <tcp_input+0x5ea>
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa12:	69fa      	ldr	r2, [r7, #28]
 800fa14:	6910      	ldr	r0, [r2, #16]
 800fa16:	89fa      	ldrh	r2, [r7, #14]
 800fa18:	69f9      	ldr	r1, [r7, #28]
 800fa1a:	4798      	blx	r3
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	74fb      	strb	r3, [r7, #19]
 800fa20:	e001      	b.n	800fa26 <tcp_input+0x5ee>
 800fa22:	2300      	movs	r3, #0
 800fa24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa2a:	f113 0f0d 	cmn.w	r3, #13
 800fa2e:	f000 8098 	beq.w	800fb62 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fa32:	4b79      	ldr	r3, [pc, #484]	; (800fc18 <tcp_input+0x7e0>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fa38:	69f8      	ldr	r0, [r7, #28]
 800fa3a:	f000 f905 	bl	800fc48 <tcp_input_delayed_close>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f040 8090 	bne.w	800fb66 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa46:	4b75      	ldr	r3, [pc, #468]	; (800fc1c <tcp_input+0x7e4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d041      	beq.n	800fad2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d006      	beq.n	800fa64 <tcp_input+0x62c>
 800fa56:	4b72      	ldr	r3, [pc, #456]	; (800fc20 <tcp_input+0x7e8>)
 800fa58:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fa5c:	4971      	ldr	r1, [pc, #452]	; (800fc24 <tcp_input+0x7ec>)
 800fa5e:	4872      	ldr	r0, [pc, #456]	; (800fc28 <tcp_input+0x7f0>)
 800fa60:	f008 ff46 	bl	80188f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	8b5b      	ldrh	r3, [r3, #26]
 800fa68:	f003 0310 	and.w	r3, r3, #16
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d008      	beq.n	800fa82 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa70:	4b6a      	ldr	r3, [pc, #424]	; (800fc1c <tcp_input+0x7e4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd feb3 	bl	800d7e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	f7fe fc40 	bl	800e300 <tcp_abort>
            goto aborted;
 800fa80:	e078      	b.n	800fb74 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00c      	beq.n	800faa6 <tcp_input+0x66e>
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	6918      	ldr	r0, [r3, #16]
 800fa96:	4b61      	ldr	r3, [pc, #388]	; (800fc1c <tcp_input+0x7e4>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	69f9      	ldr	r1, [r7, #28]
 800fa9e:	47a0      	blx	r4
 800faa0:	4603      	mov	r3, r0
 800faa2:	74fb      	strb	r3, [r7, #19]
 800faa4:	e008      	b.n	800fab8 <tcp_input+0x680>
 800faa6:	4b5d      	ldr	r3, [pc, #372]	; (800fc1c <tcp_input+0x7e4>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	2300      	movs	r3, #0
 800faac:	69f9      	ldr	r1, [r7, #28]
 800faae:	2000      	movs	r0, #0
 800fab0:	f7ff f952 	bl	800ed58 <tcp_recv_null>
 800fab4:	4603      	mov	r3, r0
 800fab6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fabc:	f113 0f0d 	cmn.w	r3, #13
 800fac0:	d053      	beq.n	800fb6a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fac2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800faca:	4b54      	ldr	r3, [pc, #336]	; (800fc1c <tcp_input+0x7e4>)
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fad2:	4b4f      	ldr	r3, [pc, #316]	; (800fc10 <tcp_input+0x7d8>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	f003 0320 	and.w	r3, r3, #32
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d030      	beq.n	800fb40 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d009      	beq.n	800fafa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faea:	7b5a      	ldrb	r2, [r3, #13]
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faf0:	f042 0220 	orr.w	r2, r2, #32
 800faf4:	b2d2      	uxtb	r2, r2
 800faf6:	735a      	strb	r2, [r3, #13]
 800faf8:	e022      	b.n	800fb40 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fafe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb02:	d005      	beq.n	800fb10 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb08:	3301      	adds	r3, #1
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00b      	beq.n	800fb32 <tcp_input+0x6fa>
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	6918      	ldr	r0, [r3, #16]
 800fb24:	2300      	movs	r3, #0
 800fb26:	2200      	movs	r2, #0
 800fb28:	69f9      	ldr	r1, [r7, #28]
 800fb2a:	47a0      	blx	r4
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	74fb      	strb	r3, [r7, #19]
 800fb30:	e001      	b.n	800fb36 <tcp_input+0x6fe>
 800fb32:	2300      	movs	r3, #0
 800fb34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb3a:	f113 0f0d 	cmn.w	r3, #13
 800fb3e:	d016      	beq.n	800fb6e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb40:	4b32      	ldr	r3, [pc, #200]	; (800fc0c <tcp_input+0x7d4>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb46:	69f8      	ldr	r0, [r7, #28]
 800fb48:	f000 f87e 	bl	800fc48 <tcp_input_delayed_close>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d10f      	bne.n	800fb72 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb52:	69f8      	ldr	r0, [r7, #28]
 800fb54:	f002 fab6 	bl	80120c4 <tcp_output>
 800fb58:	e00c      	b.n	800fb74 <tcp_input+0x73c>
        goto aborted;
 800fb5a:	bf00      	nop
 800fb5c:	e00a      	b.n	800fb74 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fb5e:	bf00      	nop
 800fb60:	e008      	b.n	800fb74 <tcp_input+0x73c>
              goto aborted;
 800fb62:	bf00      	nop
 800fb64:	e006      	b.n	800fb74 <tcp_input+0x73c>
          goto aborted;
 800fb66:	bf00      	nop
 800fb68:	e004      	b.n	800fb74 <tcp_input+0x73c>
            goto aborted;
 800fb6a:	bf00      	nop
 800fb6c:	e002      	b.n	800fb74 <tcp_input+0x73c>
              goto aborted;
 800fb6e:	bf00      	nop
 800fb70:	e000      	b.n	800fb74 <tcp_input+0x73c>
          goto aborted;
 800fb72:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb74:	4b25      	ldr	r3, [pc, #148]	; (800fc0c <tcp_input+0x7d4>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb7a:	4b28      	ldr	r3, [pc, #160]	; (800fc1c <tcp_input+0x7e4>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb80:	4b2a      	ldr	r3, [pc, #168]	; (800fc2c <tcp_input+0x7f4>)
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d03d      	beq.n	800fc04 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800fb88:	4b28      	ldr	r3, [pc, #160]	; (800fc2c <tcp_input+0x7f4>)
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fd fe27 	bl	800d7e0 <pbuf_free>
      inseg.p = NULL;
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <tcp_input+0x7f4>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb98:	e034      	b.n	800fc04 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb9a:	4b25      	ldr	r3, [pc, #148]	; (800fc30 <tcp_input+0x7f8>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	899b      	ldrh	r3, [r3, #12]
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fc fb84 	bl	800c2b0 <lwip_htons>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	f003 0304 	and.w	r3, r3, #4
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d118      	bne.n	800fbe6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbb4:	4b1f      	ldr	r3, [pc, #124]	; (800fc34 <tcp_input+0x7fc>)
 800fbb6:	6819      	ldr	r1, [r3, #0]
 800fbb8:	4b1f      	ldr	r3, [pc, #124]	; (800fc38 <tcp_input+0x800>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b1f      	ldr	r3, [pc, #124]	; (800fc3c <tcp_input+0x804>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbc4:	4b1a      	ldr	r3, [pc, #104]	; (800fc30 <tcp_input+0x7f8>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc8:	885b      	ldrh	r3, [r3, #2]
 800fbca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbcc:	4a18      	ldr	r2, [pc, #96]	; (800fc30 <tcp_input+0x7f8>)
 800fbce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbd0:	8812      	ldrh	r2, [r2, #0]
 800fbd2:	b292      	uxth	r2, r2
 800fbd4:	9202      	str	r2, [sp, #8]
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	4b19      	ldr	r3, [pc, #100]	; (800fc40 <tcp_input+0x808>)
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	4b19      	ldr	r3, [pc, #100]	; (800fc44 <tcp_input+0x80c>)
 800fbde:	4602      	mov	r2, r0
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	f003 f833 	bl	8012c4c <tcp_rst>
    pbuf_free(p);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f7fd fdfa 	bl	800d7e0 <pbuf_free>
  return;
 800fbec:	e00a      	b.n	800fc04 <tcp_input+0x7cc>
    goto dropped;
 800fbee:	bf00      	nop
 800fbf0:	e004      	b.n	800fbfc <tcp_input+0x7c4>
dropped:
 800fbf2:	bf00      	nop
 800fbf4:	e002      	b.n	800fbfc <tcp_input+0x7c4>
      goto dropped;
 800fbf6:	bf00      	nop
 800fbf8:	e000      	b.n	800fbfc <tcp_input+0x7c4>
      goto dropped;
 800fbfa:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7fd fdef 	bl	800d7e0 <pbuf_free>
 800fc02:	e000      	b.n	800fc06 <tcp_input+0x7ce>
  return;
 800fc04:	bf00      	nop
}
 800fc06:	3724      	adds	r7, #36	; 0x24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd90      	pop	{r4, r7, pc}
 800fc0c:	20007394 	.word	0x20007394
 800fc10:	200004c1 	.word	0x200004c1
 800fc14:	20007380 	.word	0x20007380
 800fc18:	200004bc 	.word	0x200004bc
 800fc1c:	200004c4 	.word	0x200004c4
 800fc20:	0801ee24 	.word	0x0801ee24
 800fc24:	0801efd8 	.word	0x0801efd8
 800fc28:	0801ee70 	.word	0x0801ee70
 800fc2c:	20000494 	.word	0x20000494
 800fc30:	200004a4 	.word	0x200004a4
 800fc34:	200004b8 	.word	0x200004b8
 800fc38:	200004be 	.word	0x200004be
 800fc3c:	200004b4 	.word	0x200004b4
 800fc40:	2000426c 	.word	0x2000426c
 800fc44:	20004270 	.word	0x20004270

0800fc48 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <tcp_input_delayed_close+0x1c>
 800fc56:	4b17      	ldr	r3, [pc, #92]	; (800fcb4 <tcp_input_delayed_close+0x6c>)
 800fc58:	f240 225a 	movw	r2, #602	; 0x25a
 800fc5c:	4916      	ldr	r1, [pc, #88]	; (800fcb8 <tcp_input_delayed_close+0x70>)
 800fc5e:	4817      	ldr	r0, [pc, #92]	; (800fcbc <tcp_input_delayed_close+0x74>)
 800fc60:	f008 fe46 	bl	80188f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc64:	4b16      	ldr	r3, [pc, #88]	; (800fcc0 <tcp_input_delayed_close+0x78>)
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	f003 0310 	and.w	r3, r3, #16
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d01c      	beq.n	800fcaa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8b5b      	ldrh	r3, [r3, #26]
 800fc74:	f003 0310 	and.w	r3, r3, #16
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d10d      	bne.n	800fc98 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d008      	beq.n	800fc98 <tcp_input_delayed_close+0x50>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	6912      	ldr	r2, [r2, #16]
 800fc90:	f06f 010e 	mvn.w	r1, #14
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc98:	6879      	ldr	r1, [r7, #4]
 800fc9a:	480a      	ldr	r0, [pc, #40]	; (800fcc4 <tcp_input_delayed_close+0x7c>)
 800fc9c:	f7ff fa54 	bl	800f148 <tcp_pcb_remove>
    tcp_free(pcb);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7fe f84d 	bl	800dd40 <tcp_free>
    return 1;
 800fca6:	2301      	movs	r3, #1
 800fca8:	e000      	b.n	800fcac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	0801ee24 	.word	0x0801ee24
 800fcb8:	0801eff4 	.word	0x0801eff4
 800fcbc:	0801ee70 	.word	0x0801ee70
 800fcc0:	200004c1 	.word	0x200004c1
 800fcc4:	20007380 	.word	0x20007380

0800fcc8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fcc8:	b590      	push	{r4, r7, lr}
 800fcca:	b08b      	sub	sp, #44	; 0x2c
 800fccc:	af04      	add	r7, sp, #16
 800fcce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fcd0:	4b6f      	ldr	r3, [pc, #444]	; (800fe90 <tcp_listen_input+0x1c8>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 0304 	and.w	r3, r3, #4
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f040 80d3 	bne.w	800fe84 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d106      	bne.n	800fcf2 <tcp_listen_input+0x2a>
 800fce4:	4b6b      	ldr	r3, [pc, #428]	; (800fe94 <tcp_listen_input+0x1cc>)
 800fce6:	f240 2281 	movw	r2, #641	; 0x281
 800fcea:	496b      	ldr	r1, [pc, #428]	; (800fe98 <tcp_listen_input+0x1d0>)
 800fcec:	486b      	ldr	r0, [pc, #428]	; (800fe9c <tcp_listen_input+0x1d4>)
 800fcee:	f008 fdff 	bl	80188f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fcf2:	4b67      	ldr	r3, [pc, #412]	; (800fe90 <tcp_listen_input+0x1c8>)
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	f003 0310 	and.w	r3, r3, #16
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d019      	beq.n	800fd32 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcfe:	4b68      	ldr	r3, [pc, #416]	; (800fea0 <tcp_listen_input+0x1d8>)
 800fd00:	6819      	ldr	r1, [r3, #0]
 800fd02:	4b68      	ldr	r3, [pc, #416]	; (800fea4 <tcp_listen_input+0x1dc>)
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	461a      	mov	r2, r3
 800fd08:	4b67      	ldr	r3, [pc, #412]	; (800fea8 <tcp_listen_input+0x1e0>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd0e:	4b67      	ldr	r3, [pc, #412]	; (800feac <tcp_listen_input+0x1e4>)
 800fd10:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd12:	885b      	ldrh	r3, [r3, #2]
 800fd14:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd16:	4a65      	ldr	r2, [pc, #404]	; (800feac <tcp_listen_input+0x1e4>)
 800fd18:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd1a:	8812      	ldrh	r2, [r2, #0]
 800fd1c:	b292      	uxth	r2, r2
 800fd1e:	9202      	str	r2, [sp, #8]
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	4b63      	ldr	r3, [pc, #396]	; (800feb0 <tcp_listen_input+0x1e8>)
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4b63      	ldr	r3, [pc, #396]	; (800feb4 <tcp_listen_input+0x1ec>)
 800fd28:	4602      	mov	r2, r0
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f002 ff8e 	bl	8012c4c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd30:	e0aa      	b.n	800fe88 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800fd32:	4b57      	ldr	r3, [pc, #348]	; (800fe90 <tcp_listen_input+0x1c8>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 0302 	and.w	r3, r3, #2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 80a4 	beq.w	800fe88 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	7d5b      	ldrb	r3, [r3, #21]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7ff f92b 	bl	800efa0 <tcp_alloc>
 800fd4a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d111      	bne.n	800fd76 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00a      	beq.n	800fd70 <tcp_listen_input+0xa8>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	6910      	ldr	r0, [r2, #16]
 800fd62:	f04f 32ff 	mov.w	r2, #4294967295
 800fd66:	2100      	movs	r1, #0
 800fd68:	4798      	blx	r3
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	73bb      	strb	r3, [r7, #14]
      return;
 800fd6e:	e08c      	b.n	800fe8a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd70:	23f0      	movs	r3, #240	; 0xf0
 800fd72:	73bb      	strb	r3, [r7, #14]
      return;
 800fd74:	e089      	b.n	800fe8a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd76:	4b50      	ldr	r3, [pc, #320]	; (800feb8 <tcp_listen_input+0x1f0>)
 800fd78:	695a      	ldr	r2, [r3, #20]
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd7e:	4b4e      	ldr	r3, [pc, #312]	; (800feb8 <tcp_listen_input+0x1f0>)
 800fd80:	691a      	ldr	r2, [r3, #16]
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	8ada      	ldrh	r2, [r3, #22]
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd8e:	4b47      	ldr	r3, [pc, #284]	; (800feac <tcp_listen_input+0x1e4>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	2203      	movs	r2, #3
 800fd9e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fda0:	4b41      	ldr	r3, [pc, #260]	; (800fea8 <tcp_listen_input+0x1e0>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	1c5a      	adds	r2, r3, #1
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fdb2:	6978      	ldr	r0, [r7, #20]
 800fdb4:	f7ff fa5c 	bl	800f270 <tcp_next_iss>
 800fdb8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	693a      	ldr	r2, [r7, #16]
 800fdbe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	693a      	ldr	r2, [r7, #16]
 800fdca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	693a      	ldr	r2, [r7, #16]
 800fdd0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdd2:	4b35      	ldr	r3, [pc, #212]	; (800fea8 <tcp_listen_input+0x1e0>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	1e5a      	subs	r2, r3, #1
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	691a      	ldr	r2, [r3, #16]
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	7a5b      	ldrb	r3, [r3, #9]
 800fdee:	f003 030c 	and.w	r3, r3, #12
 800fdf2:	b2da      	uxtb	r2, r3
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7a1a      	ldrb	r2, [r3, #8]
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fe00:	4b2e      	ldr	r3, [pc, #184]	; (800febc <tcp_listen_input+0x1f4>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	60da      	str	r2, [r3, #12]
 800fe08:	4a2c      	ldr	r2, [pc, #176]	; (800febc <tcp_listen_input+0x1f4>)
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	6013      	str	r3, [r2, #0]
 800fe0e:	f003 f8dd 	bl	8012fcc <tcp_timer_needed>
 800fe12:	4b2b      	ldr	r3, [pc, #172]	; (800fec0 <tcp_listen_input+0x1f8>)
 800fe14:	2201      	movs	r2, #1
 800fe16:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe18:	6978      	ldr	r0, [r7, #20]
 800fe1a:	f001 fd8f 	bl	801193c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe1e:	4b23      	ldr	r3, [pc, #140]	; (800feac <tcp_listen_input+0x1e4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	89db      	ldrh	r3, [r3, #14]
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	4618      	mov	r0, r3
 800fe42:	f006 fdb7 	bl	80169b4 <ip4_route>
 800fe46:	4601      	mov	r1, r0
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	3304      	adds	r3, #4
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f7ff fa34 	bl	800f2bc <tcp_eff_send_mss_netif>
 800fe54:	4603      	mov	r3, r0
 800fe56:	461a      	mov	r2, r3
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe5c:	2112      	movs	r1, #18
 800fe5e:	6978      	ldr	r0, [r7, #20]
 800fe60:	f002 f842 	bl	8011ee8 <tcp_enqueue_flags>
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d004      	beq.n	800fe7a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe70:	2100      	movs	r1, #0
 800fe72:	6978      	ldr	r0, [r7, #20]
 800fe74:	f7fe f986 	bl	800e184 <tcp_abandon>
      return;
 800fe78:	e007      	b.n	800fe8a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800fe7a:	6978      	ldr	r0, [r7, #20]
 800fe7c:	f002 f922 	bl	80120c4 <tcp_output>
  return;
 800fe80:	bf00      	nop
 800fe82:	e001      	b.n	800fe88 <tcp_listen_input+0x1c0>
    return;
 800fe84:	bf00      	nop
 800fe86:	e000      	b.n	800fe8a <tcp_listen_input+0x1c2>
  return;
 800fe88:	bf00      	nop
}
 800fe8a:	371c      	adds	r7, #28
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd90      	pop	{r4, r7, pc}
 800fe90:	200004c0 	.word	0x200004c0
 800fe94:	0801ee24 	.word	0x0801ee24
 800fe98:	0801f01c 	.word	0x0801f01c
 800fe9c:	0801ee70 	.word	0x0801ee70
 800fea0:	200004b8 	.word	0x200004b8
 800fea4:	200004be 	.word	0x200004be
 800fea8:	200004b4 	.word	0x200004b4
 800feac:	200004a4 	.word	0x200004a4
 800feb0:	2000426c 	.word	0x2000426c
 800feb4:	20004270 	.word	0x20004270
 800feb8:	2000425c 	.word	0x2000425c
 800febc:	20007380 	.word	0x20007380
 800fec0:	2000737c 	.word	0x2000737c

0800fec4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af04      	add	r7, sp, #16
 800feca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fecc:	4b30      	ldr	r3, [pc, #192]	; (800ff90 <tcp_timewait_input+0xcc>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 0304 	and.w	r3, r3, #4
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d154      	bne.n	800ff82 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_timewait_input+0x28>
 800fede:	4b2d      	ldr	r3, [pc, #180]	; (800ff94 <tcp_timewait_input+0xd0>)
 800fee0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fee4:	492c      	ldr	r1, [pc, #176]	; (800ff98 <tcp_timewait_input+0xd4>)
 800fee6:	482d      	ldr	r0, [pc, #180]	; (800ff9c <tcp_timewait_input+0xd8>)
 800fee8:	f008 fd02 	bl	80188f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800feec:	4b28      	ldr	r3, [pc, #160]	; (800ff90 <tcp_timewait_input+0xcc>)
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f003 0302 	and.w	r3, r3, #2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d02a      	beq.n	800ff4e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fef8:	4b29      	ldr	r3, [pc, #164]	; (800ffa0 <tcp_timewait_input+0xdc>)
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	db2d      	blt.n	800ff62 <tcp_timewait_input+0x9e>
 800ff06:	4b26      	ldr	r3, [pc, #152]	; (800ffa0 <tcp_timewait_input+0xdc>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff12:	440b      	add	r3, r1
 800ff14:	1ad3      	subs	r3, r2, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	dc23      	bgt.n	800ff62 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff1a:	4b22      	ldr	r3, [pc, #136]	; (800ffa4 <tcp_timewait_input+0xe0>)
 800ff1c:	6819      	ldr	r1, [r3, #0]
 800ff1e:	4b22      	ldr	r3, [pc, #136]	; (800ffa8 <tcp_timewait_input+0xe4>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	4b1e      	ldr	r3, [pc, #120]	; (800ffa0 <tcp_timewait_input+0xdc>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff2a:	4b20      	ldr	r3, [pc, #128]	; (800ffac <tcp_timewait_input+0xe8>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff2e:	885b      	ldrh	r3, [r3, #2]
 800ff30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff32:	4a1e      	ldr	r2, [pc, #120]	; (800ffac <tcp_timewait_input+0xe8>)
 800ff34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff36:	8812      	ldrh	r2, [r2, #0]
 800ff38:	b292      	uxth	r2, r2
 800ff3a:	9202      	str	r2, [sp, #8]
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	4b1c      	ldr	r3, [pc, #112]	; (800ffb0 <tcp_timewait_input+0xec>)
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	4b1c      	ldr	r3, [pc, #112]	; (800ffb4 <tcp_timewait_input+0xf0>)
 800ff44:	4602      	mov	r2, r0
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f002 fe80 	bl	8012c4c <tcp_rst>
      return;
 800ff4c:	e01c      	b.n	800ff88 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800ff4e:	4b10      	ldr	r3, [pc, #64]	; (800ff90 <tcp_timewait_input+0xcc>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 0301 	and.w	r3, r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff5a:	4b17      	ldr	r3, [pc, #92]	; (800ffb8 <tcp_timewait_input+0xf4>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff62:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <tcp_timewait_input+0xe4>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00d      	beq.n	800ff86 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8b5b      	ldrh	r3, [r3, #26]
 800ff6e:	f043 0302 	orr.w	r3, r3, #2
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f002 f8a3 	bl	80120c4 <tcp_output>
  }
  return;
 800ff7e:	bf00      	nop
 800ff80:	e001      	b.n	800ff86 <tcp_timewait_input+0xc2>
    return;
 800ff82:	bf00      	nop
 800ff84:	e000      	b.n	800ff88 <tcp_timewait_input+0xc4>
  return;
 800ff86:	bf00      	nop
}
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	200004c0 	.word	0x200004c0
 800ff94:	0801ee24 	.word	0x0801ee24
 800ff98:	0801f03c 	.word	0x0801f03c
 800ff9c:	0801ee70 	.word	0x0801ee70
 800ffa0:	200004b4 	.word	0x200004b4
 800ffa4:	200004b8 	.word	0x200004b8
 800ffa8:	200004be 	.word	0x200004be
 800ffac:	200004a4 	.word	0x200004a4
 800ffb0:	2000426c 	.word	0x2000426c
 800ffb4:	20004270 	.word	0x20004270
 800ffb8:	20007384 	.word	0x20007384

0800ffbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b08d      	sub	sp, #52	; 0x34
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <tcp_process+0x24>
 800ffd2:	4ba5      	ldr	r3, [pc, #660]	; (8010268 <tcp_process+0x2ac>)
 800ffd4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ffd8:	49a4      	ldr	r1, [pc, #656]	; (801026c <tcp_process+0x2b0>)
 800ffda:	48a5      	ldr	r0, [pc, #660]	; (8010270 <tcp_process+0x2b4>)
 800ffdc:	f008 fc88 	bl	80188f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ffe0:	4ba4      	ldr	r3, [pc, #656]	; (8010274 <tcp_process+0x2b8>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f003 0304 	and.w	r3, r3, #4
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d04e      	beq.n	801008a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	7d1b      	ldrb	r3, [r3, #20]
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d108      	bne.n	8010006 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fff8:	4b9f      	ldr	r3, [pc, #636]	; (8010278 <tcp_process+0x2bc>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d123      	bne.n	8010048 <tcp_process+0x8c>
        acceptable = 1;
 8010000:	2301      	movs	r3, #1
 8010002:	76fb      	strb	r3, [r7, #27]
 8010004:	e020      	b.n	8010048 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801000a:	4b9c      	ldr	r3, [pc, #624]	; (801027c <tcp_process+0x2c0>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d102      	bne.n	8010018 <tcp_process+0x5c>
        acceptable = 1;
 8010012:	2301      	movs	r3, #1
 8010014:	76fb      	strb	r3, [r7, #27]
 8010016:	e017      	b.n	8010048 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010018:	4b98      	ldr	r3, [pc, #608]	; (801027c <tcp_process+0x2c0>)
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	db10      	blt.n	8010048 <tcp_process+0x8c>
 8010026:	4b95      	ldr	r3, [pc, #596]	; (801027c <tcp_process+0x2c0>)
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002e:	6879      	ldr	r1, [r7, #4]
 8010030:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010032:	440b      	add	r3, r1
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	2b00      	cmp	r3, #0
 8010038:	dc06      	bgt.n	8010048 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	8b5b      	ldrh	r3, [r3, #26]
 801003e:	f043 0302 	orr.w	r3, r3, #2
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010048:	7efb      	ldrb	r3, [r7, #27]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d01b      	beq.n	8010086 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	7d1b      	ldrb	r3, [r3, #20]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d106      	bne.n	8010064 <tcp_process+0xa8>
 8010056:	4b84      	ldr	r3, [pc, #528]	; (8010268 <tcp_process+0x2ac>)
 8010058:	f44f 724e 	mov.w	r2, #824	; 0x338
 801005c:	4988      	ldr	r1, [pc, #544]	; (8010280 <tcp_process+0x2c4>)
 801005e:	4884      	ldr	r0, [pc, #528]	; (8010270 <tcp_process+0x2b4>)
 8010060:	f008 fc46 	bl	80188f0 <iprintf>
      recv_flags |= TF_RESET;
 8010064:	4b87      	ldr	r3, [pc, #540]	; (8010284 <tcp_process+0x2c8>)
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	f043 0308 	orr.w	r3, r3, #8
 801006c:	b2da      	uxtb	r2, r3
 801006e:	4b85      	ldr	r3, [pc, #532]	; (8010284 <tcp_process+0x2c8>)
 8010070:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	8b5b      	ldrh	r3, [r3, #26]
 8010076:	f023 0301 	bic.w	r3, r3, #1
 801007a:	b29a      	uxth	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010080:	f06f 030d 	mvn.w	r3, #13
 8010084:	e37a      	b.n	801077c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010086:	2300      	movs	r3, #0
 8010088:	e378      	b.n	801077c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801008a:	4b7a      	ldr	r3, [pc, #488]	; (8010274 <tcp_process+0x2b8>)
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	f003 0302 	and.w	r3, r3, #2
 8010092:	2b00      	cmp	r3, #0
 8010094:	d010      	beq.n	80100b8 <tcp_process+0xfc>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	7d1b      	ldrb	r3, [r3, #20]
 801009a:	2b02      	cmp	r3, #2
 801009c:	d00c      	beq.n	80100b8 <tcp_process+0xfc>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	7d1b      	ldrb	r3, [r3, #20]
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d008      	beq.n	80100b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8b5b      	ldrh	r3, [r3, #26]
 80100aa:	f043 0302 	orr.w	r3, r3, #2
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e361      	b.n	801077c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	8b5b      	ldrh	r3, [r3, #26]
 80100bc:	f003 0310 	and.w	r3, r3, #16
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d103      	bne.n	80100cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80100c4:	4b70      	ldr	r3, [pc, #448]	; (8010288 <tcp_process+0x2cc>)
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f001 fc2d 	bl	801193c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7d1b      	ldrb	r3, [r3, #20]
 80100e6:	3b02      	subs	r3, #2
 80100e8:	2b07      	cmp	r3, #7
 80100ea:	f200 8337 	bhi.w	801075c <tcp_process+0x7a0>
 80100ee:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <tcp_process+0x138>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010115 	.word	0x08010115
 80100f8:	08010345 	.word	0x08010345
 80100fc:	080104bd 	.word	0x080104bd
 8010100:	080104e7 	.word	0x080104e7
 8010104:	0801060b 	.word	0x0801060b
 8010108:	080104bd 	.word	0x080104bd
 801010c:	08010697 	.word	0x08010697
 8010110:	08010727 	.word	0x08010727
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010114:	4b57      	ldr	r3, [pc, #348]	; (8010274 <tcp_process+0x2b8>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	f003 0310 	and.w	r3, r3, #16
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 80e4 	beq.w	80102ea <tcp_process+0x32e>
 8010122:	4b54      	ldr	r3, [pc, #336]	; (8010274 <tcp_process+0x2b8>)
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	f003 0302 	and.w	r3, r3, #2
 801012a:	2b00      	cmp	r3, #0
 801012c:	f000 80dd 	beq.w	80102ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	4b50      	ldr	r3, [pc, #320]	; (8010278 <tcp_process+0x2bc>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	f040 80d5 	bne.w	80102ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010140:	4b4e      	ldr	r3, [pc, #312]	; (801027c <tcp_process+0x2c0>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010152:	4b49      	ldr	r3, [pc, #292]	; (8010278 <tcp_process+0x2bc>)
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801015a:	4b4c      	ldr	r3, [pc, #304]	; (801028c <tcp_process+0x2d0>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	89db      	ldrh	r3, [r3, #14]
 8010160:	b29a      	uxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010174:	4b41      	ldr	r3, [pc, #260]	; (801027c <tcp_process+0x2c0>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	1e5a      	subs	r2, r3, #1
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2204      	movs	r2, #4
 8010182:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3304      	adds	r3, #4
 801018c:	4618      	mov	r0, r3
 801018e:	f006 fc11 	bl	80169b4 <ip4_route>
 8010192:	4601      	mov	r1, r0
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	3304      	adds	r3, #4
 8010198:	461a      	mov	r2, r3
 801019a:	4620      	mov	r0, r4
 801019c:	f7ff f88e 	bl	800f2bc <tcp_eff_send_mss_netif>
 80101a0:	4603      	mov	r3, r0
 80101a2:	461a      	mov	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ac:	009a      	lsls	r2, r3, #2
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b2:	005b      	lsls	r3, r3, #1
 80101b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80101b8:	428b      	cmp	r3, r1
 80101ba:	bf38      	it	cc
 80101bc:	460b      	movcc	r3, r1
 80101be:	429a      	cmp	r2, r3
 80101c0:	d204      	bcs.n	80101cc <tcp_process+0x210>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	e00d      	b.n	80101e8 <tcp_process+0x22c>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d904      	bls.n	80101e4 <tcp_process+0x228>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	e001      	b.n	80101e8 <tcp_process+0x22c>
 80101e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d106      	bne.n	8010206 <tcp_process+0x24a>
 80101f8:	4b1b      	ldr	r3, [pc, #108]	; (8010268 <tcp_process+0x2ac>)
 80101fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80101fe:	4924      	ldr	r1, [pc, #144]	; (8010290 <tcp_process+0x2d4>)
 8010200:	481b      	ldr	r0, [pc, #108]	; (8010270 <tcp_process+0x2b4>)
 8010202:	f008 fb75 	bl	80188f0 <iprintf>
        --pcb->snd_queuelen;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801020c:	3b01      	subs	r3, #1
 801020e:	b29a      	uxth	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801021a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d111      	bne.n	8010246 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010226:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <tcp_process+0x280>
 801022e:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <tcp_process+0x2ac>)
 8010230:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010234:	4917      	ldr	r1, [pc, #92]	; (8010294 <tcp_process+0x2d8>)
 8010236:	480e      	ldr	r0, [pc, #56]	; (8010270 <tcp_process+0x2b4>)
 8010238:	f008 fb5a 	bl	80188f0 <iprintf>
          pcb->unsent = rseg->next;
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	66da      	str	r2, [r3, #108]	; 0x6c
 8010244:	e003      	b.n	801024e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801024e:	69f8      	ldr	r0, [r7, #28]
 8010250:	f7fe fd3e 	bl	800ecd0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010258:	2b00      	cmp	r3, #0
 801025a:	d11d      	bne.n	8010298 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010262:	861a      	strh	r2, [r3, #48]	; 0x30
 8010264:	e01f      	b.n	80102a6 <tcp_process+0x2ea>
 8010266:	bf00      	nop
 8010268:	0801ee24 	.word	0x0801ee24
 801026c:	0801f05c 	.word	0x0801f05c
 8010270:	0801ee70 	.word	0x0801ee70
 8010274:	200004c0 	.word	0x200004c0
 8010278:	200004b8 	.word	0x200004b8
 801027c:	200004b4 	.word	0x200004b4
 8010280:	0801f078 	.word	0x0801f078
 8010284:	200004c1 	.word	0x200004c1
 8010288:	20007384 	.word	0x20007384
 801028c:	200004a4 	.word	0x200004a4
 8010290:	0801f098 	.word	0x0801f098
 8010294:	0801f0b0 	.word	0x0801f0b0
        } else {
          pcb->rtime = 0;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00a      	beq.n	80102c6 <tcp_process+0x30a>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	6910      	ldr	r0, [r2, #16]
 80102ba:	2200      	movs	r2, #0
 80102bc:	6879      	ldr	r1, [r7, #4]
 80102be:	4798      	blx	r3
 80102c0:	4603      	mov	r3, r0
 80102c2:	76bb      	strb	r3, [r7, #26]
 80102c4:	e001      	b.n	80102ca <tcp_process+0x30e>
 80102c6:	2300      	movs	r3, #0
 80102c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80102ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80102ce:	f113 0f0d 	cmn.w	r3, #13
 80102d2:	d102      	bne.n	80102da <tcp_process+0x31e>
          return ERR_ABRT;
 80102d4:	f06f 030c 	mvn.w	r3, #12
 80102d8:	e250      	b.n	801077c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8b5b      	ldrh	r3, [r3, #26]
 80102de:	f043 0302 	orr.w	r3, r3, #2
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80102e8:	e23a      	b.n	8010760 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80102ea:	4b9d      	ldr	r3, [pc, #628]	; (8010560 <tcp_process+0x5a4>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	f003 0310 	and.w	r3, r3, #16
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 8234 	beq.w	8010760 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f8:	4b9a      	ldr	r3, [pc, #616]	; (8010564 <tcp_process+0x5a8>)
 80102fa:	6819      	ldr	r1, [r3, #0]
 80102fc:	4b9a      	ldr	r3, [pc, #616]	; (8010568 <tcp_process+0x5ac>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	461a      	mov	r2, r3
 8010302:	4b9a      	ldr	r3, [pc, #616]	; (801056c <tcp_process+0x5b0>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010308:	4b99      	ldr	r3, [pc, #612]	; (8010570 <tcp_process+0x5b4>)
 801030a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801030c:	885b      	ldrh	r3, [r3, #2]
 801030e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010310:	4a97      	ldr	r2, [pc, #604]	; (8010570 <tcp_process+0x5b4>)
 8010312:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010314:	8812      	ldrh	r2, [r2, #0]
 8010316:	b292      	uxth	r2, r2
 8010318:	9202      	str	r2, [sp, #8]
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	4b95      	ldr	r3, [pc, #596]	; (8010574 <tcp_process+0x5b8>)
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	4b95      	ldr	r3, [pc, #596]	; (8010578 <tcp_process+0x5bc>)
 8010322:	4602      	mov	r2, r0
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f002 fc91 	bl	8012c4c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010330:	2b05      	cmp	r3, #5
 8010332:	f200 8215 	bhi.w	8010760 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f002 fa51 	bl	80127e4 <tcp_rexmit_rto>
      break;
 8010342:	e20d      	b.n	8010760 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010344:	4b86      	ldr	r3, [pc, #536]	; (8010560 <tcp_process+0x5a4>)
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	f003 0310 	and.w	r3, r3, #16
 801034c:	2b00      	cmp	r3, #0
 801034e:	f000 80a1 	beq.w	8010494 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010352:	4b84      	ldr	r3, [pc, #528]	; (8010564 <tcp_process+0x5a8>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	3b01      	subs	r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	db7e      	blt.n	8010460 <tcp_process+0x4a4>
 8010362:	4b80      	ldr	r3, [pc, #512]	; (8010564 <tcp_process+0x5a8>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	2b00      	cmp	r3, #0
 801036e:	dc77      	bgt.n	8010460 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2204      	movs	r2, #4
 8010374:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801037a:	2b00      	cmp	r3, #0
 801037c:	d102      	bne.n	8010384 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801037e:	23fa      	movs	r3, #250	; 0xfa
 8010380:	76bb      	strb	r3, [r7, #26]
 8010382:	e01d      	b.n	80103c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010388:	699b      	ldr	r3, [r3, #24]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d106      	bne.n	801039c <tcp_process+0x3e0>
 801038e:	4b7b      	ldr	r3, [pc, #492]	; (801057c <tcp_process+0x5c0>)
 8010390:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010394:	497a      	ldr	r1, [pc, #488]	; (8010580 <tcp_process+0x5c4>)
 8010396:	487b      	ldr	r0, [pc, #492]	; (8010584 <tcp_process+0x5c8>)
 8010398:	f008 faaa 	bl	80188f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00a      	beq.n	80103bc <tcp_process+0x400>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103aa:	699b      	ldr	r3, [r3, #24]
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	6910      	ldr	r0, [r2, #16]
 80103b0:	2200      	movs	r2, #0
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	4798      	blx	r3
 80103b6:	4603      	mov	r3, r0
 80103b8:	76bb      	strb	r3, [r7, #26]
 80103ba:	e001      	b.n	80103c0 <tcp_process+0x404>
 80103bc:	23f0      	movs	r3, #240	; 0xf0
 80103be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80103c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00a      	beq.n	80103de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80103c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103cc:	f113 0f0d 	cmn.w	r3, #13
 80103d0:	d002      	beq.n	80103d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7fd ff94 	bl	800e300 <tcp_abort>
            }
            return ERR_ABRT;
 80103d8:	f06f 030c 	mvn.w	r3, #12
 80103dc:	e1ce      	b.n	801077c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 fae0 	bl	80109a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80103e4:	4b68      	ldr	r3, [pc, #416]	; (8010588 <tcp_process+0x5cc>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d005      	beq.n	80103f8 <tcp_process+0x43c>
            recv_acked--;
 80103ec:	4b66      	ldr	r3, [pc, #408]	; (8010588 <tcp_process+0x5cc>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	4b64      	ldr	r3, [pc, #400]	; (8010588 <tcp_process+0x5cc>)
 80103f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103fc:	009a      	lsls	r2, r3, #2
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	f241 111c 	movw	r1, #4380	; 0x111c
 8010408:	428b      	cmp	r3, r1
 801040a:	bf38      	it	cc
 801040c:	460b      	movcc	r3, r1
 801040e:	429a      	cmp	r2, r3
 8010410:	d204      	bcs.n	801041c <tcp_process+0x460>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	b29b      	uxth	r3, r3
 801041a:	e00d      	b.n	8010438 <tcp_process+0x47c>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010420:	005b      	lsls	r3, r3, #1
 8010422:	f241 121c 	movw	r2, #4380	; 0x111c
 8010426:	4293      	cmp	r3, r2
 8010428:	d904      	bls.n	8010434 <tcp_process+0x478>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	b29b      	uxth	r3, r3
 8010432:	e001      	b.n	8010438 <tcp_process+0x47c>
 8010434:	f241 131c 	movw	r3, #4380	; 0x111c
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801043e:	4b53      	ldr	r3, [pc, #332]	; (801058c <tcp_process+0x5d0>)
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	f003 0320 	and.w	r3, r3, #32
 8010446:	2b00      	cmp	r3, #0
 8010448:	d037      	beq.n	80104ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	8b5b      	ldrh	r3, [r3, #26]
 801044e:	f043 0302 	orr.w	r3, r3, #2
 8010452:	b29a      	uxth	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2207      	movs	r2, #7
 801045c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801045e:	e02c      	b.n	80104ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010460:	4b40      	ldr	r3, [pc, #256]	; (8010564 <tcp_process+0x5a8>)
 8010462:	6819      	ldr	r1, [r3, #0]
 8010464:	4b40      	ldr	r3, [pc, #256]	; (8010568 <tcp_process+0x5ac>)
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	461a      	mov	r2, r3
 801046a:	4b40      	ldr	r3, [pc, #256]	; (801056c <tcp_process+0x5b0>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010470:	4b3f      	ldr	r3, [pc, #252]	; (8010570 <tcp_process+0x5b4>)
 8010472:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010474:	885b      	ldrh	r3, [r3, #2]
 8010476:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010478:	4a3d      	ldr	r2, [pc, #244]	; (8010570 <tcp_process+0x5b4>)
 801047a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801047c:	8812      	ldrh	r2, [r2, #0]
 801047e:	b292      	uxth	r2, r2
 8010480:	9202      	str	r2, [sp, #8]
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	4b3b      	ldr	r3, [pc, #236]	; (8010574 <tcp_process+0x5b8>)
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	4b3b      	ldr	r3, [pc, #236]	; (8010578 <tcp_process+0x5bc>)
 801048a:	4602      	mov	r2, r0
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f002 fbdd 	bl	8012c4c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010492:	e167      	b.n	8010764 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010494:	4b32      	ldr	r3, [pc, #200]	; (8010560 <tcp_process+0x5a4>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f003 0302 	and.w	r3, r3, #2
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 8161 	beq.w	8010764 <tcp_process+0x7a8>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a6:	1e5a      	subs	r2, r3, #1
 80104a8:	4b30      	ldr	r3, [pc, #192]	; (801056c <tcp_process+0x5b0>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	f040 8159 	bne.w	8010764 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f002 f9b8 	bl	8012828 <tcp_rexmit>
      break;
 80104b8:	e154      	b.n	8010764 <tcp_process+0x7a8>
 80104ba:	e153      	b.n	8010764 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 fa71 	bl	80109a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80104c2:	4b32      	ldr	r3, [pc, #200]	; (801058c <tcp_process+0x5d0>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	f003 0320 	and.w	r3, r3, #32
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f000 814c 	beq.w	8010768 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	8b5b      	ldrh	r3, [r3, #26]
 80104d4:	f043 0302 	orr.w	r3, r3, #2
 80104d8:	b29a      	uxth	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2207      	movs	r2, #7
 80104e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80104e4:	e140      	b.n	8010768 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 fa5c 	bl	80109a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80104ec:	4b27      	ldr	r3, [pc, #156]	; (801058c <tcp_process+0x5d0>)
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	f003 0320 	and.w	r3, r3, #32
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d071      	beq.n	80105dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104f8:	4b19      	ldr	r3, [pc, #100]	; (8010560 <tcp_process+0x5a4>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 0310 	and.w	r3, r3, #16
 8010500:	2b00      	cmp	r3, #0
 8010502:	d060      	beq.n	80105c6 <tcp_process+0x60a>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010508:	4b16      	ldr	r3, [pc, #88]	; (8010564 <tcp_process+0x5a8>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	429a      	cmp	r2, r3
 801050e:	d15a      	bne.n	80105c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010514:	2b00      	cmp	r3, #0
 8010516:	d156      	bne.n	80105c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	8b5b      	ldrh	r3, [r3, #26]
 801051c:	f043 0302 	orr.w	r3, r3, #2
 8010520:	b29a      	uxth	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fe fdbe 	bl	800f0a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801052c:	4b18      	ldr	r3, [pc, #96]	; (8010590 <tcp_process+0x5d4>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d105      	bne.n	8010542 <tcp_process+0x586>
 8010536:	4b16      	ldr	r3, [pc, #88]	; (8010590 <tcp_process+0x5d4>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	4a14      	ldr	r2, [pc, #80]	; (8010590 <tcp_process+0x5d4>)
 801053e:	6013      	str	r3, [r2, #0]
 8010540:	e02e      	b.n	80105a0 <tcp_process+0x5e4>
 8010542:	4b13      	ldr	r3, [pc, #76]	; (8010590 <tcp_process+0x5d4>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	e027      	b.n	801059a <tcp_process+0x5de>
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	429a      	cmp	r2, r3
 8010552:	d11f      	bne.n	8010594 <tcp_process+0x5d8>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68da      	ldr	r2, [r3, #12]
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	60da      	str	r2, [r3, #12]
 801055c:	e020      	b.n	80105a0 <tcp_process+0x5e4>
 801055e:	bf00      	nop
 8010560:	200004c0 	.word	0x200004c0
 8010564:	200004b8 	.word	0x200004b8
 8010568:	200004be 	.word	0x200004be
 801056c:	200004b4 	.word	0x200004b4
 8010570:	200004a4 	.word	0x200004a4
 8010574:	2000426c 	.word	0x2000426c
 8010578:	20004270 	.word	0x20004270
 801057c:	0801ee24 	.word	0x0801ee24
 8010580:	0801f0c4 	.word	0x0801f0c4
 8010584:	0801ee70 	.word	0x0801ee70
 8010588:	200004bc 	.word	0x200004bc
 801058c:	200004c1 	.word	0x200004c1
 8010590:	20007380 	.word	0x20007380
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	617b      	str	r3, [r7, #20]
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1d4      	bne.n	801054a <tcp_process+0x58e>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	60da      	str	r2, [r3, #12]
 80105a6:	4b77      	ldr	r3, [pc, #476]	; (8010784 <tcp_process+0x7c8>)
 80105a8:	2201      	movs	r2, #1
 80105aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	220a      	movs	r2, #10
 80105b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80105b2:	4b75      	ldr	r3, [pc, #468]	; (8010788 <tcp_process+0x7cc>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	60da      	str	r2, [r3, #12]
 80105ba:	4a73      	ldr	r2, [pc, #460]	; (8010788 <tcp_process+0x7cc>)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	f002 fd04 	bl	8012fcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80105c4:	e0d2      	b.n	801076c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	8b5b      	ldrh	r3, [r3, #26]
 80105ca:	f043 0302 	orr.w	r3, r3, #2
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2208      	movs	r2, #8
 80105d8:	751a      	strb	r2, [r3, #20]
      break;
 80105da:	e0c7      	b.n	801076c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105dc:	4b6b      	ldr	r3, [pc, #428]	; (801078c <tcp_process+0x7d0>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 0310 	and.w	r3, r3, #16
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 80c1 	beq.w	801076c <tcp_process+0x7b0>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ee:	4b68      	ldr	r3, [pc, #416]	; (8010790 <tcp_process+0x7d4>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	f040 80ba 	bne.w	801076c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f040 80b5 	bne.w	801076c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2206      	movs	r2, #6
 8010606:	751a      	strb	r2, [r3, #20]
      break;
 8010608:	e0b0      	b.n	801076c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f9ca 	bl	80109a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010610:	4b60      	ldr	r3, [pc, #384]	; (8010794 <tcp_process+0x7d8>)
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	f003 0320 	and.w	r3, r3, #32
 8010618:	2b00      	cmp	r3, #0
 801061a:	f000 80a9 	beq.w	8010770 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	8b5b      	ldrh	r3, [r3, #26]
 8010622:	f043 0302 	orr.w	r3, r3, #2
 8010626:	b29a      	uxth	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f7fe fd3b 	bl	800f0a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010632:	4b59      	ldr	r3, [pc, #356]	; (8010798 <tcp_process+0x7dc>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	429a      	cmp	r2, r3
 801063a:	d105      	bne.n	8010648 <tcp_process+0x68c>
 801063c:	4b56      	ldr	r3, [pc, #344]	; (8010798 <tcp_process+0x7dc>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	4a55      	ldr	r2, [pc, #340]	; (8010798 <tcp_process+0x7dc>)
 8010644:	6013      	str	r3, [r2, #0]
 8010646:	e013      	b.n	8010670 <tcp_process+0x6b4>
 8010648:	4b53      	ldr	r3, [pc, #332]	; (8010798 <tcp_process+0x7dc>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	613b      	str	r3, [r7, #16]
 801064e:	e00c      	b.n	801066a <tcp_process+0x6ae>
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	429a      	cmp	r2, r3
 8010658:	d104      	bne.n	8010664 <tcp_process+0x6a8>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	68da      	ldr	r2, [r3, #12]
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	60da      	str	r2, [r3, #12]
 8010662:	e005      	b.n	8010670 <tcp_process+0x6b4>
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	613b      	str	r3, [r7, #16]
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1ef      	bne.n	8010650 <tcp_process+0x694>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	4b43      	ldr	r3, [pc, #268]	; (8010784 <tcp_process+0x7c8>)
 8010678:	2201      	movs	r2, #1
 801067a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	220a      	movs	r2, #10
 8010680:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010682:	4b41      	ldr	r3, [pc, #260]	; (8010788 <tcp_process+0x7cc>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	60da      	str	r2, [r3, #12]
 801068a:	4a3f      	ldr	r2, [pc, #252]	; (8010788 <tcp_process+0x7cc>)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	f002 fc9c 	bl	8012fcc <tcp_timer_needed>
      }
      break;
 8010694:	e06c      	b.n	8010770 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 f984 	bl	80109a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801069c:	4b3b      	ldr	r3, [pc, #236]	; (801078c <tcp_process+0x7d0>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 0310 	and.w	r3, r3, #16
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d065      	beq.n	8010774 <tcp_process+0x7b8>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106ac:	4b38      	ldr	r3, [pc, #224]	; (8010790 <tcp_process+0x7d4>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d15f      	bne.n	8010774 <tcp_process+0x7b8>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d15b      	bne.n	8010774 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7fe fcf3 	bl	800f0a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80106c2:	4b35      	ldr	r3, [pc, #212]	; (8010798 <tcp_process+0x7dc>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d105      	bne.n	80106d8 <tcp_process+0x71c>
 80106cc:	4b32      	ldr	r3, [pc, #200]	; (8010798 <tcp_process+0x7dc>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	4a31      	ldr	r2, [pc, #196]	; (8010798 <tcp_process+0x7dc>)
 80106d4:	6013      	str	r3, [r2, #0]
 80106d6:	e013      	b.n	8010700 <tcp_process+0x744>
 80106d8:	4b2f      	ldr	r3, [pc, #188]	; (8010798 <tcp_process+0x7dc>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	e00c      	b.n	80106fa <tcp_process+0x73e>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d104      	bne.n	80106f4 <tcp_process+0x738>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	68da      	ldr	r2, [r3, #12]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	60da      	str	r2, [r3, #12]
 80106f2:	e005      	b.n	8010700 <tcp_process+0x744>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	60fb      	str	r3, [r7, #12]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1ef      	bne.n	80106e0 <tcp_process+0x724>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	60da      	str	r2, [r3, #12]
 8010706:	4b1f      	ldr	r3, [pc, #124]	; (8010784 <tcp_process+0x7c8>)
 8010708:	2201      	movs	r2, #1
 801070a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	220a      	movs	r2, #10
 8010710:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010712:	4b1d      	ldr	r3, [pc, #116]	; (8010788 <tcp_process+0x7cc>)
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	60da      	str	r2, [r3, #12]
 801071a:	4a1b      	ldr	r2, [pc, #108]	; (8010788 <tcp_process+0x7cc>)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6013      	str	r3, [r2, #0]
 8010720:	f002 fc54 	bl	8012fcc <tcp_timer_needed>
      }
      break;
 8010724:	e026      	b.n	8010774 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 f93c 	bl	80109a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801072c:	4b17      	ldr	r3, [pc, #92]	; (801078c <tcp_process+0x7d0>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	f003 0310 	and.w	r3, r3, #16
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01f      	beq.n	8010778 <tcp_process+0x7bc>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801073c:	4b14      	ldr	r3, [pc, #80]	; (8010790 <tcp_process+0x7d4>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	d119      	bne.n	8010778 <tcp_process+0x7bc>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010748:	2b00      	cmp	r3, #0
 801074a:	d115      	bne.n	8010778 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801074c:	4b11      	ldr	r3, [pc, #68]	; (8010794 <tcp_process+0x7d8>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	f043 0310 	orr.w	r3, r3, #16
 8010754:	b2da      	uxtb	r2, r3
 8010756:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <tcp_process+0x7d8>)
 8010758:	701a      	strb	r2, [r3, #0]
      }
      break;
 801075a:	e00d      	b.n	8010778 <tcp_process+0x7bc>
    default:
      break;
 801075c:	bf00      	nop
 801075e:	e00c      	b.n	801077a <tcp_process+0x7be>
      break;
 8010760:	bf00      	nop
 8010762:	e00a      	b.n	801077a <tcp_process+0x7be>
      break;
 8010764:	bf00      	nop
 8010766:	e008      	b.n	801077a <tcp_process+0x7be>
      break;
 8010768:	bf00      	nop
 801076a:	e006      	b.n	801077a <tcp_process+0x7be>
      break;
 801076c:	bf00      	nop
 801076e:	e004      	b.n	801077a <tcp_process+0x7be>
      break;
 8010770:	bf00      	nop
 8010772:	e002      	b.n	801077a <tcp_process+0x7be>
      break;
 8010774:	bf00      	nop
 8010776:	e000      	b.n	801077a <tcp_process+0x7be>
      break;
 8010778:	bf00      	nop
  }
  return ERR_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3724      	adds	r7, #36	; 0x24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd90      	pop	{r4, r7, pc}
 8010784:	2000737c 	.word	0x2000737c
 8010788:	20007390 	.word	0x20007390
 801078c:	200004c0 	.word	0x200004c0
 8010790:	200004b8 	.word	0x200004b8
 8010794:	200004c1 	.word	0x200004c1
 8010798:	20007380 	.word	0x20007380

0801079c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801079c:	b590      	push	{r4, r7, lr}
 801079e:	b085      	sub	sp, #20
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <tcp_oos_insert_segment+0x1e>
 80107ac:	4b3b      	ldr	r3, [pc, #236]	; (801089c <tcp_oos_insert_segment+0x100>)
 80107ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80107b2:	493b      	ldr	r1, [pc, #236]	; (80108a0 <tcp_oos_insert_segment+0x104>)
 80107b4:	483b      	ldr	r0, [pc, #236]	; (80108a4 <tcp_oos_insert_segment+0x108>)
 80107b6:	f008 f89b 	bl	80188f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	899b      	ldrh	r3, [r3, #12]
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fb fd74 	bl	800c2b0 <lwip_htons>
 80107c8:	4603      	mov	r3, r0
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	f003 0301 	and.w	r3, r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d028      	beq.n	8010826 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80107d4:	6838      	ldr	r0, [r7, #0]
 80107d6:	f7fe fa67 	bl	800eca8 <tcp_segs_free>
    next = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	603b      	str	r3, [r7, #0]
 80107de:	e056      	b.n	801088e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	899b      	ldrh	r3, [r3, #12]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fb fd61 	bl	800c2b0 <lwip_htons>
 80107ee:	4603      	mov	r3, r0
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00d      	beq.n	8010816 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	899b      	ldrh	r3, [r3, #12]
 8010800:	b29c      	uxth	r4, r3
 8010802:	2001      	movs	r0, #1
 8010804:	f7fb fd54 	bl	800c2b0 <lwip_htons>
 8010808:	4603      	mov	r3, r0
 801080a:	461a      	mov	r2, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	4322      	orrs	r2, r4
 8010812:	b292      	uxth	r2, r2
 8010814:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f7fe fa55 	bl	800ecd0 <tcp_seg_free>
    while (next &&
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00e      	beq.n	801084a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	891b      	ldrh	r3, [r3, #8]
 8010830:	461a      	mov	r2, r3
 8010832:	4b1d      	ldr	r3, [pc, #116]	; (80108a8 <tcp_oos_insert_segment+0x10c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	441a      	add	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	8909      	ldrh	r1, [r1, #8]
 8010842:	440b      	add	r3, r1
 8010844:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010846:	2b00      	cmp	r3, #0
 8010848:	daca      	bge.n	80107e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d01e      	beq.n	801088e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	891b      	ldrh	r3, [r3, #8]
 8010854:	461a      	mov	r2, r3
 8010856:	4b14      	ldr	r3, [pc, #80]	; (80108a8 <tcp_oos_insert_segment+0x10c>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	441a      	add	r2, r3
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd12      	ble.n	801088e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	b29a      	uxth	r2, r3
 8010870:	4b0d      	ldr	r3, [pc, #52]	; (80108a8 <tcp_oos_insert_segment+0x10c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	b29b      	uxth	r3, r3
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	b29a      	uxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	891b      	ldrh	r3, [r3, #8]
 8010886:	4619      	mov	r1, r3
 8010888:	4610      	mov	r0, r2
 801088a:	f7fc fe23 	bl	800d4d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	601a      	str	r2, [r3, #0]
}
 8010894:	bf00      	nop
 8010896:	3714      	adds	r7, #20
 8010898:	46bd      	mov	sp, r7
 801089a:	bd90      	pop	{r4, r7, pc}
 801089c:	0801ee24 	.word	0x0801ee24
 80108a0:	0801f0e4 	.word	0x0801f0e4
 80108a4:	0801ee70 	.word	0x0801ee70
 80108a8:	200004b4 	.word	0x200004b4

080108ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80108ac:	b5b0      	push	{r4, r5, r7, lr}
 80108ae:	b086      	sub	sp, #24
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
 80108b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80108ba:	e03e      	b.n	801093a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fd f810 	bl	800d8f0 <pbuf_clen>
 80108d0:	4603      	mov	r3, r0
 80108d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108da:	8a7a      	ldrh	r2, [r7, #18]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d906      	bls.n	80108ee <tcp_free_acked_segments+0x42>
 80108e0:	4b2a      	ldr	r3, [pc, #168]	; (801098c <tcp_free_acked_segments+0xe0>)
 80108e2:	f240 4257 	movw	r2, #1111	; 0x457
 80108e6:	492a      	ldr	r1, [pc, #168]	; (8010990 <tcp_free_acked_segments+0xe4>)
 80108e8:	482a      	ldr	r0, [pc, #168]	; (8010994 <tcp_free_acked_segments+0xe8>)
 80108ea:	f008 f801 	bl	80188f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80108f4:	8a7b      	ldrh	r3, [r7, #18]
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	891a      	ldrh	r2, [r3, #8]
 8010904:	4b24      	ldr	r3, [pc, #144]	; (8010998 <tcp_free_acked_segments+0xec>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	4413      	add	r3, r2
 801090a:	b29a      	uxth	r2, r3
 801090c:	4b22      	ldr	r3, [pc, #136]	; (8010998 <tcp_free_acked_segments+0xec>)
 801090e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010910:	6978      	ldr	r0, [r7, #20]
 8010912:	f7fe f9dd 	bl	800ecd0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00c      	beq.n	801093a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d109      	bne.n	801093a <tcp_free_acked_segments+0x8e>
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d106      	bne.n	801093a <tcp_free_acked_segments+0x8e>
 801092c:	4b17      	ldr	r3, [pc, #92]	; (801098c <tcp_free_acked_segments+0xe0>)
 801092e:	f240 4262 	movw	r2, #1122	; 0x462
 8010932:	491a      	ldr	r1, [pc, #104]	; (801099c <tcp_free_acked_segments+0xf0>)
 8010934:	4817      	ldr	r0, [pc, #92]	; (8010994 <tcp_free_acked_segments+0xe8>)
 8010936:	f007 ffdb 	bl	80188f0 <iprintf>
  while (seg_list != NULL &&
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d020      	beq.n	8010982 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	4618      	mov	r0, r3
 8010948:	f7fb fcc7 	bl	800c2da <lwip_htonl>
 801094c:	4604      	mov	r4, r0
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	891b      	ldrh	r3, [r3, #8]
 8010952:	461d      	mov	r5, r3
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	899b      	ldrh	r3, [r3, #12]
 801095a:	b29b      	uxth	r3, r3
 801095c:	4618      	mov	r0, r3
 801095e:	f7fb fca7 	bl	800c2b0 <lwip_htons>
 8010962:	4603      	mov	r3, r0
 8010964:	b2db      	uxtb	r3, r3
 8010966:	f003 0303 	and.w	r3, r3, #3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <tcp_free_acked_segments+0xc6>
 801096e:	2301      	movs	r3, #1
 8010970:	e000      	b.n	8010974 <tcp_free_acked_segments+0xc8>
 8010972:	2300      	movs	r3, #0
 8010974:	442b      	add	r3, r5
 8010976:	18e2      	adds	r2, r4, r3
 8010978:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <tcp_free_acked_segments+0xf4>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd9c      	ble.n	80108bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010982:	68bb      	ldr	r3, [r7, #8]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3718      	adds	r7, #24
 8010988:	46bd      	mov	sp, r7
 801098a:	bdb0      	pop	{r4, r5, r7, pc}
 801098c:	0801ee24 	.word	0x0801ee24
 8010990:	0801f10c 	.word	0x0801f10c
 8010994:	0801ee70 	.word	0x0801ee70
 8010998:	200004bc 	.word	0x200004bc
 801099c:	0801f134 	.word	0x0801f134
 80109a0:	200004b8 	.word	0x200004b8

080109a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80109a4:	b5b0      	push	{r4, r5, r7, lr}
 80109a6:	b094      	sub	sp, #80	; 0x50
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80109ac:	2300      	movs	r3, #0
 80109ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_receive+0x20>
 80109b6:	4ba6      	ldr	r3, [pc, #664]	; (8010c50 <tcp_receive+0x2ac>)
 80109b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80109bc:	49a5      	ldr	r1, [pc, #660]	; (8010c54 <tcp_receive+0x2b0>)
 80109be:	48a6      	ldr	r0, [pc, #664]	; (8010c58 <tcp_receive+0x2b4>)
 80109c0:	f007 ff96 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7d1b      	ldrb	r3, [r3, #20]
 80109c8:	2b03      	cmp	r3, #3
 80109ca:	d806      	bhi.n	80109da <tcp_receive+0x36>
 80109cc:	4ba0      	ldr	r3, [pc, #640]	; (8010c50 <tcp_receive+0x2ac>)
 80109ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80109d2:	49a2      	ldr	r1, [pc, #648]	; (8010c5c <tcp_receive+0x2b8>)
 80109d4:	48a0      	ldr	r0, [pc, #640]	; (8010c58 <tcp_receive+0x2b4>)
 80109d6:	f007 ff8b 	bl	80188f0 <iprintf>

  if (flags & TCP_ACK) {
 80109da:	4ba1      	ldr	r3, [pc, #644]	; (8010c60 <tcp_receive+0x2bc>)
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	f003 0310 	and.w	r3, r3, #16
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f000 8263 	beq.w	8010eae <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109ee:	461a      	mov	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109f4:	4413      	add	r3, r2
 80109f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109fc:	4b99      	ldr	r3, [pc, #612]	; (8010c64 <tcp_receive+0x2c0>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	db1b      	blt.n	8010a3e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a0a:	4b96      	ldr	r3, [pc, #600]	; (8010c64 <tcp_receive+0x2c0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d106      	bne.n	8010a20 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a16:	4b94      	ldr	r3, [pc, #592]	; (8010c68 <tcp_receive+0x2c4>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	db0e      	blt.n	8010a3e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a24:	4b90      	ldr	r3, [pc, #576]	; (8010c68 <tcp_receive+0x2c4>)
 8010a26:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d125      	bne.n	8010a78 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a2c:	4b8f      	ldr	r3, [pc, #572]	; (8010c6c <tcp_receive+0x2c8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	89db      	ldrh	r3, [r3, #14]
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d91c      	bls.n	8010a78 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a3e:	4b8b      	ldr	r3, [pc, #556]	; (8010c6c <tcp_receive+0x2c8>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	89db      	ldrh	r3, [r3, #14]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d205      	bcs.n	8010a68 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a68:	4b7e      	ldr	r3, [pc, #504]	; (8010c64 <tcp_receive+0x2c0>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010a70:	4b7d      	ldr	r3, [pc, #500]	; (8010c68 <tcp_receive+0x2c4>)
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a78:	4b7b      	ldr	r3, [pc, #492]	; (8010c68 <tcp_receive+0x2c4>)
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dc58      	bgt.n	8010b38 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a86:	4b7a      	ldr	r3, [pc, #488]	; (8010c70 <tcp_receive+0x2cc>)
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d14b      	bne.n	8010b26 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a98:	4413      	add	r3, r2
 8010a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d142      	bne.n	8010b26 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	db3d      	blt.n	8010b26 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010aae:	4b6e      	ldr	r3, [pc, #440]	; (8010c68 <tcp_receive+0x2c4>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d137      	bne.n	8010b26 <tcp_receive+0x182>
              found_dupack = 1;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ac0:	2bff      	cmp	r3, #255	; 0xff
 8010ac2:	d007      	beq.n	8010ad4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010aca:	3301      	adds	r3, #1
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d91b      	bls.n	8010b16 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ae8:	4413      	add	r3, r2
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d30a      	bcc.n	8010b0c <tcp_receive+0x168>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b00:	4413      	add	r3, r2
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b0a:	e004      	b.n	8010b16 <tcp_receive+0x172>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b1c:	2b02      	cmp	r3, #2
 8010b1e:	d902      	bls.n	8010b26 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f001 feed 	bl	8012900 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f040 8160 	bne.w	8010dee <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b36:	e15a      	b.n	8010dee <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b38:	4b4b      	ldr	r3, [pc, #300]	; (8010c68 <tcp_receive+0x2c4>)
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	3b01      	subs	r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f2c0 814d 	blt.w	8010de4 <tcp_receive+0x440>
 8010b4a:	4b47      	ldr	r3, [pc, #284]	; (8010c68 <tcp_receive+0x2c4>)
 8010b4c:	681a      	ldr	r2, [r3, #0]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f300 8145 	bgt.w	8010de4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	8b5b      	ldrh	r3, [r3, #26]
 8010b5e:	f003 0304 	and.w	r3, r3, #4
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d010      	beq.n	8010b88 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	8b5b      	ldrh	r3, [r3, #26]
 8010b6a:	f023 0304 	bic.w	r3, r3, #4
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b96:	10db      	asrs	r3, r3, #3
 8010b98:	b21b      	sxth	r3, r3
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	4413      	add	r3, r2
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	b21a      	sxth	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010bb0:	4b2d      	ldr	r3, [pc, #180]	; (8010c68 <tcp_receive+0x2c4>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	1ad3      	subs	r3, r2, r3
 8010bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010bc8:	4b27      	ldr	r3, [pc, #156]	; (8010c68 <tcp_receive+0x2c4>)
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	7d1b      	ldrb	r3, [r3, #20]
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	f240 8096 	bls.w	8010d06 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d244      	bcs.n	8010c74 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	8b5b      	ldrh	r3, [r3, #26]
 8010bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d001      	beq.n	8010bfa <tcp_receive+0x256>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	e000      	b.n	8010bfc <tcp_receive+0x258>
 8010bfa:	2302      	movs	r3, #2
 8010bfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c0a:	fb12 f303 	smulbb	r3, r2, r3
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c12:	4293      	cmp	r3, r2
 8010c14:	bf28      	it	cs
 8010c16:	4613      	movcs	r3, r2
 8010c18:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c22:	4413      	add	r3, r2
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d309      	bcc.n	8010c44 <tcp_receive+0x2a0>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c42:	e060      	b.n	8010d06 <tcp_receive+0x362>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c4e:	e05a      	b.n	8010d06 <tcp_receive+0x362>
 8010c50:	0801ee24 	.word	0x0801ee24
 8010c54:	0801f154 	.word	0x0801f154
 8010c58:	0801ee70 	.word	0x0801ee70
 8010c5c:	0801f170 	.word	0x0801f170
 8010c60:	200004c0 	.word	0x200004c0
 8010c64:	200004b4 	.word	0x200004b4
 8010c68:	200004b8 	.word	0x200004b8
 8010c6c:	200004a4 	.word	0x200004a4
 8010c70:	200004be 	.word	0x200004be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c7c:	4413      	add	r3, r2
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d309      	bcc.n	8010c9e <tcp_receive+0x2fa>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c92:	4413      	add	r3, r2
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c9c:	e004      	b.n	8010ca8 <tcp_receive+0x304>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d326      	bcc.n	8010d06 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cd8:	4413      	add	r3, r2
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d30a      	bcc.n	8010cfc <tcp_receive+0x358>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cf0:	4413      	add	r3, r2
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cfa:	e004      	b.n	8010d06 <tcp_receive+0x362>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d0e:	4a98      	ldr	r2, [pc, #608]	; (8010f70 <tcp_receive+0x5cc>)
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff fdcb 	bl	80108ac <tcp_free_acked_segments>
 8010d16:	4602      	mov	r2, r0
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d24:	4a93      	ldr	r2, [pc, #588]	; (8010f74 <tcp_receive+0x5d0>)
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff fdc0 	bl	80108ac <tcp_free_acked_segments>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d104      	bne.n	8010d44 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d40:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d42:	e002      	b.n	8010d4a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d103      	bne.n	8010d60 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010d66:	4b84      	ldr	r3, [pc, #528]	; (8010f78 <tcp_receive+0x5d4>)
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	8b5b      	ldrh	r3, [r3, #26]
 8010d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d035      	beq.n	8010dec <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d118      	bne.n	8010dba <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00c      	beq.n	8010daa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fb fa9c 	bl	800c2da <lwip_htonl>
 8010da2:	4603      	mov	r3, r0
 8010da4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	dc20      	bgt.n	8010dec <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	8b5b      	ldrh	r3, [r3, #26]
 8010dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010db8:	e018      	b.n	8010dec <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fb fa87 	bl	800c2da <lwip_htonl>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	1ae3      	subs	r3, r4, r3
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dc0b      	bgt.n	8010dec <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8b5b      	ldrh	r3, [r3, #26]
 8010dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010de2:	e003      	b.n	8010dec <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f001 ff81 	bl	8012cec <tcp_send_empty_ack>
 8010dea:	e000      	b.n	8010dee <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d05b      	beq.n	8010eae <tcp_receive+0x50a>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010dfa:	4b60      	ldr	r3, [pc, #384]	; (8010f7c <tcp_receive+0x5d8>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	da54      	bge.n	8010eae <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010e04:	4b5e      	ldr	r3, [pc, #376]	; (8010f80 <tcp_receive+0x5dc>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010e18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e22:	10db      	asrs	r3, r3, #3
 8010e24:	b21b      	sxth	r3, r3
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e3c:	4413      	add	r3, r2
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	b21a      	sxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010e46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	da05      	bge.n	8010e5a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e52:	425b      	negs	r3, r3
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e64:	109b      	asrs	r3, r3, #2
 8010e66:	b21b      	sxth	r3, r3
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e7e:	4413      	add	r3, r2
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	b21a      	sxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e8e:	10db      	asrs	r3, r3, #3
 8010e90:	b21b      	sxth	r3, r3
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4413      	add	r3, r2
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	b21a      	sxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010eae:	4b35      	ldr	r3, [pc, #212]	; (8010f84 <tcp_receive+0x5e0>)
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 84e1 	beq.w	801187a <tcp_receive+0xed6>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	7d1b      	ldrb	r3, [r3, #20]
 8010ebc:	2b06      	cmp	r3, #6
 8010ebe:	f200 84dc 	bhi.w	801187a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec6:	4b30      	ldr	r3, [pc, #192]	; (8010f88 <tcp_receive+0x5e4>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	3b01      	subs	r3, #1
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f2c0 808e 	blt.w	8010ff0 <tcp_receive+0x64c>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ed8:	4b2a      	ldr	r3, [pc, #168]	; (8010f84 <tcp_receive+0x5e0>)
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	4619      	mov	r1, r3
 8010ede:	4b2a      	ldr	r3, [pc, #168]	; (8010f88 <tcp_receive+0x5e4>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	440b      	add	r3, r1
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f300 8081 	bgt.w	8010ff0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010eee:	4b27      	ldr	r3, [pc, #156]	; (8010f8c <tcp_receive+0x5e8>)
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ef8:	4b23      	ldr	r3, [pc, #140]	; (8010f88 <tcp_receive+0x5e4>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010f00:	4b22      	ldr	r3, [pc, #136]	; (8010f8c <tcp_receive+0x5e8>)
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d106      	bne.n	8010f16 <tcp_receive+0x572>
 8010f08:	4b21      	ldr	r3, [pc, #132]	; (8010f90 <tcp_receive+0x5ec>)
 8010f0a:	f240 5294 	movw	r2, #1428	; 0x594
 8010f0e:	4921      	ldr	r1, [pc, #132]	; (8010f94 <tcp_receive+0x5f0>)
 8010f10:	4821      	ldr	r0, [pc, #132]	; (8010f98 <tcp_receive+0x5f4>)
 8010f12:	f007 fced 	bl	80188f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d906      	bls.n	8010f2e <tcp_receive+0x58a>
 8010f20:	4b1b      	ldr	r3, [pc, #108]	; (8010f90 <tcp_receive+0x5ec>)
 8010f22:	f240 5295 	movw	r2, #1429	; 0x595
 8010f26:	491d      	ldr	r1, [pc, #116]	; (8010f9c <tcp_receive+0x5f8>)
 8010f28:	481b      	ldr	r0, [pc, #108]	; (8010f98 <tcp_receive+0x5f4>)
 8010f2a:	f007 fce1 	bl	80188f0 <iprintf>
      off = (u16_t)off32;
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f34:	4b15      	ldr	r3, [pc, #84]	; (8010f8c <tcp_receive+0x5e8>)
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	891b      	ldrh	r3, [r3, #8]
 8010f3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d906      	bls.n	8010f50 <tcp_receive+0x5ac>
 8010f42:	4b13      	ldr	r3, [pc, #76]	; (8010f90 <tcp_receive+0x5ec>)
 8010f44:	f240 5297 	movw	r2, #1431	; 0x597
 8010f48:	4915      	ldr	r1, [pc, #84]	; (8010fa0 <tcp_receive+0x5fc>)
 8010f4a:	4813      	ldr	r0, [pc, #76]	; (8010f98 <tcp_receive+0x5f4>)
 8010f4c:	f007 fcd0 	bl	80188f0 <iprintf>
      inseg.len -= off;
 8010f50:	4b0e      	ldr	r3, [pc, #56]	; (8010f8c <tcp_receive+0x5e8>)
 8010f52:	891a      	ldrh	r2, [r3, #8]
 8010f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	4b0b      	ldr	r3, [pc, #44]	; (8010f8c <tcp_receive+0x5e8>)
 8010f5e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f60:	4b0a      	ldr	r3, [pc, #40]	; (8010f8c <tcp_receive+0x5e8>)
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	891a      	ldrh	r2, [r3, #8]
 8010f66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010f6e:	e029      	b.n	8010fc4 <tcp_receive+0x620>
 8010f70:	0801f18c 	.word	0x0801f18c
 8010f74:	0801f194 	.word	0x0801f194
 8010f78:	200004bc 	.word	0x200004bc
 8010f7c:	200004b8 	.word	0x200004b8
 8010f80:	20007384 	.word	0x20007384
 8010f84:	200004be 	.word	0x200004be
 8010f88:	200004b4 	.word	0x200004b4
 8010f8c:	20000494 	.word	0x20000494
 8010f90:	0801ee24 	.word	0x0801ee24
 8010f94:	0801f19c 	.word	0x0801f19c
 8010f98:	0801ee70 	.word	0x0801ee70
 8010f9c:	0801f1ac 	.word	0x0801f1ac
 8010fa0:	0801f1bc 	.word	0x0801f1bc
        off -= p->len;
 8010fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa6:	895b      	ldrh	r3, [r3, #10]
 8010fa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010fb6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fba:	2200      	movs	r2, #0
 8010fbc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc6:	895b      	ldrh	r3, [r3, #10]
 8010fc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d8e9      	bhi.n	8010fa4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010fd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010fd8:	f7fc fb7c 	bl	800d6d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe0:	4a91      	ldr	r2, [pc, #580]	; (8011228 <tcp_receive+0x884>)
 8010fe2:	6013      	str	r3, [r2, #0]
 8010fe4:	4b91      	ldr	r3, [pc, #580]	; (801122c <tcp_receive+0x888>)
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	4a8f      	ldr	r2, [pc, #572]	; (8011228 <tcp_receive+0x884>)
 8010fea:	6812      	ldr	r2, [r2, #0]
 8010fec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fee:	e00d      	b.n	801100c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010ff0:	4b8d      	ldr	r3, [pc, #564]	; (8011228 <tcp_receive+0x884>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	da06      	bge.n	801100c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	8b5b      	ldrh	r3, [r3, #26]
 8011002:	f043 0302 	orr.w	r3, r3, #2
 8011006:	b29a      	uxth	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801100c:	4b86      	ldr	r3, [pc, #536]	; (8011228 <tcp_receive+0x884>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	2b00      	cmp	r3, #0
 8011018:	f2c0 842a 	blt.w	8011870 <tcp_receive+0xecc>
 801101c:	4b82      	ldr	r3, [pc, #520]	; (8011228 <tcp_receive+0x884>)
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011028:	440b      	add	r3, r1
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	3301      	adds	r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	f300 841e 	bgt.w	8011870 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011038:	4b7b      	ldr	r3, [pc, #492]	; (8011228 <tcp_receive+0x884>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	f040 829a 	bne.w	8011576 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011042:	4b7a      	ldr	r3, [pc, #488]	; (801122c <tcp_receive+0x888>)
 8011044:	891c      	ldrh	r4, [r3, #8]
 8011046:	4b79      	ldr	r3, [pc, #484]	; (801122c <tcp_receive+0x888>)
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	899b      	ldrh	r3, [r3, #12]
 801104c:	b29b      	uxth	r3, r3
 801104e:	4618      	mov	r0, r3
 8011050:	f7fb f92e 	bl	800c2b0 <lwip_htons>
 8011054:	4603      	mov	r3, r0
 8011056:	b2db      	uxtb	r3, r3
 8011058:	f003 0303 	and.w	r3, r3, #3
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <tcp_receive+0x6c0>
 8011060:	2301      	movs	r3, #1
 8011062:	e000      	b.n	8011066 <tcp_receive+0x6c2>
 8011064:	2300      	movs	r3, #0
 8011066:	4423      	add	r3, r4
 8011068:	b29a      	uxth	r2, r3
 801106a:	4b71      	ldr	r3, [pc, #452]	; (8011230 <tcp_receive+0x88c>)
 801106c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011072:	4b6f      	ldr	r3, [pc, #444]	; (8011230 <tcp_receive+0x88c>)
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	429a      	cmp	r2, r3
 8011078:	d275      	bcs.n	8011166 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801107a:	4b6c      	ldr	r3, [pc, #432]	; (801122c <tcp_receive+0x888>)
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	899b      	ldrh	r3, [r3, #12]
 8011080:	b29b      	uxth	r3, r3
 8011082:	4618      	mov	r0, r3
 8011084:	f7fb f914 	bl	800c2b0 <lwip_htons>
 8011088:	4603      	mov	r3, r0
 801108a:	b2db      	uxtb	r3, r3
 801108c:	f003 0301 	and.w	r3, r3, #1
 8011090:	2b00      	cmp	r3, #0
 8011092:	d01f      	beq.n	80110d4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011094:	4b65      	ldr	r3, [pc, #404]	; (801122c <tcp_receive+0x888>)
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	899b      	ldrh	r3, [r3, #12]
 801109a:	b29b      	uxth	r3, r3
 801109c:	b21b      	sxth	r3, r3
 801109e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110a2:	b21c      	sxth	r4, r3
 80110a4:	4b61      	ldr	r3, [pc, #388]	; (801122c <tcp_receive+0x888>)
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fb f8ff 	bl	800c2b0 <lwip_htons>
 80110b2:	4603      	mov	r3, r0
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80110bc:	b29b      	uxth	r3, r3
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fb f8f6 	bl	800c2b0 <lwip_htons>
 80110c4:	4603      	mov	r3, r0
 80110c6:	b21b      	sxth	r3, r3
 80110c8:	4323      	orrs	r3, r4
 80110ca:	b21a      	sxth	r2, r3
 80110cc:	4b57      	ldr	r3, [pc, #348]	; (801122c <tcp_receive+0x888>)
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	b292      	uxth	r2, r2
 80110d2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110d8:	4b54      	ldr	r3, [pc, #336]	; (801122c <tcp_receive+0x888>)
 80110da:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110dc:	4b53      	ldr	r3, [pc, #332]	; (801122c <tcp_receive+0x888>)
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7fb f8e3 	bl	800c2b0 <lwip_htons>
 80110ea:	4603      	mov	r3, r0
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	f003 0302 	and.w	r3, r3, #2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d005      	beq.n	8011102 <tcp_receive+0x75e>
            inseg.len -= 1;
 80110f6:	4b4d      	ldr	r3, [pc, #308]	; (801122c <tcp_receive+0x888>)
 80110f8:	891b      	ldrh	r3, [r3, #8]
 80110fa:	3b01      	subs	r3, #1
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	4b4b      	ldr	r3, [pc, #300]	; (801122c <tcp_receive+0x888>)
 8011100:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011102:	4b4a      	ldr	r3, [pc, #296]	; (801122c <tcp_receive+0x888>)
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	4b49      	ldr	r3, [pc, #292]	; (801122c <tcp_receive+0x888>)
 8011108:	891b      	ldrh	r3, [r3, #8]
 801110a:	4619      	mov	r1, r3
 801110c:	4610      	mov	r0, r2
 801110e:	f7fc f9e1 	bl	800d4d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011112:	4b46      	ldr	r3, [pc, #280]	; (801122c <tcp_receive+0x888>)
 8011114:	891c      	ldrh	r4, [r3, #8]
 8011116:	4b45      	ldr	r3, [pc, #276]	; (801122c <tcp_receive+0x888>)
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	899b      	ldrh	r3, [r3, #12]
 801111c:	b29b      	uxth	r3, r3
 801111e:	4618      	mov	r0, r3
 8011120:	f7fb f8c6 	bl	800c2b0 <lwip_htons>
 8011124:	4603      	mov	r3, r0
 8011126:	b2db      	uxtb	r3, r3
 8011128:	f003 0303 	and.w	r3, r3, #3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <tcp_receive+0x790>
 8011130:	2301      	movs	r3, #1
 8011132:	e000      	b.n	8011136 <tcp_receive+0x792>
 8011134:	2300      	movs	r3, #0
 8011136:	4423      	add	r3, r4
 8011138:	b29a      	uxth	r2, r3
 801113a:	4b3d      	ldr	r3, [pc, #244]	; (8011230 <tcp_receive+0x88c>)
 801113c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801113e:	4b3c      	ldr	r3, [pc, #240]	; (8011230 <tcp_receive+0x88c>)
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	461a      	mov	r2, r3
 8011144:	4b38      	ldr	r3, [pc, #224]	; (8011228 <tcp_receive+0x884>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	441a      	add	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801114e:	6879      	ldr	r1, [r7, #4]
 8011150:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011152:	440b      	add	r3, r1
 8011154:	429a      	cmp	r2, r3
 8011156:	d006      	beq.n	8011166 <tcp_receive+0x7c2>
 8011158:	4b36      	ldr	r3, [pc, #216]	; (8011234 <tcp_receive+0x890>)
 801115a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801115e:	4936      	ldr	r1, [pc, #216]	; (8011238 <tcp_receive+0x894>)
 8011160:	4836      	ldr	r0, [pc, #216]	; (801123c <tcp_receive+0x898>)
 8011162:	f007 fbc5 	bl	80188f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 80e7 	beq.w	801133e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011170:	4b2e      	ldr	r3, [pc, #184]	; (801122c <tcp_receive+0x888>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7fb f899 	bl	800c2b0 <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	f003 0301 	and.w	r3, r3, #1
 8011186:	2b00      	cmp	r3, #0
 8011188:	d010      	beq.n	80111ac <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801118a:	e00a      	b.n	80111a2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011190:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f7fd fd97 	bl	800ecd0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1f0      	bne.n	801118c <tcp_receive+0x7e8>
 80111aa:	e0c8      	b.n	801133e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111b2:	e052      	b.n	801125a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	899b      	ldrh	r3, [r3, #12]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fb f877 	bl	800c2b0 <lwip_htons>
 80111c2:	4603      	mov	r3, r0
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	f003 0301 	and.w	r3, r3, #1
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d03d      	beq.n	801124a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80111ce:	4b17      	ldr	r3, [pc, #92]	; (801122c <tcp_receive+0x888>)
 80111d0:	68db      	ldr	r3, [r3, #12]
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fb f86a 	bl	800c2b0 <lwip_htons>
 80111dc:	4603      	mov	r3, r0
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d130      	bne.n	801124a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80111e8:	4b10      	ldr	r3, [pc, #64]	; (801122c <tcp_receive+0x888>)
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	b29c      	uxth	r4, r3
 80111f0:	2001      	movs	r0, #1
 80111f2:	f7fb f85d 	bl	800c2b0 <lwip_htons>
 80111f6:	4603      	mov	r3, r0
 80111f8:	461a      	mov	r2, r3
 80111fa:	4b0c      	ldr	r3, [pc, #48]	; (801122c <tcp_receive+0x888>)
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	4322      	orrs	r2, r4
 8011200:	b292      	uxth	r2, r2
 8011202:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011204:	4b09      	ldr	r3, [pc, #36]	; (801122c <tcp_receive+0x888>)
 8011206:	891c      	ldrh	r4, [r3, #8]
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <tcp_receive+0x888>)
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	899b      	ldrh	r3, [r3, #12]
 801120e:	b29b      	uxth	r3, r3
 8011210:	4618      	mov	r0, r3
 8011212:	f7fb f84d 	bl	800c2b0 <lwip_htons>
 8011216:	4603      	mov	r3, r0
 8011218:	b2db      	uxtb	r3, r3
 801121a:	f003 0303 	and.w	r3, r3, #3
 801121e:	2b00      	cmp	r3, #0
 8011220:	d00e      	beq.n	8011240 <tcp_receive+0x89c>
 8011222:	2301      	movs	r3, #1
 8011224:	e00d      	b.n	8011242 <tcp_receive+0x89e>
 8011226:	bf00      	nop
 8011228:	200004b4 	.word	0x200004b4
 801122c:	20000494 	.word	0x20000494
 8011230:	200004be 	.word	0x200004be
 8011234:	0801ee24 	.word	0x0801ee24
 8011238:	0801f1cc 	.word	0x0801f1cc
 801123c:	0801ee70 	.word	0x0801ee70
 8011240:	2300      	movs	r3, #0
 8011242:	4423      	add	r3, r4
 8011244:	b29a      	uxth	r2, r3
 8011246:	4b98      	ldr	r3, [pc, #608]	; (80114a8 <tcp_receive+0xb04>)
 8011248:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801124a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801124e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011254:	6938      	ldr	r0, [r7, #16]
 8011256:	f7fd fd3b 	bl	800ecd0 <tcp_seg_free>
            while (next &&
 801125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00e      	beq.n	801127e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011260:	4b91      	ldr	r3, [pc, #580]	; (80114a8 <tcp_receive+0xb04>)
 8011262:	881b      	ldrh	r3, [r3, #0]
 8011264:	461a      	mov	r2, r3
 8011266:	4b91      	ldr	r3, [pc, #580]	; (80114ac <tcp_receive+0xb08>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	441a      	add	r2, r3
 801126c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011274:	8909      	ldrh	r1, [r1, #8]
 8011276:	440b      	add	r3, r1
 8011278:	1ad3      	subs	r3, r2, r3
            while (next &&
 801127a:	2b00      	cmp	r3, #0
 801127c:	da9a      	bge.n	80111b4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801127e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011280:	2b00      	cmp	r3, #0
 8011282:	d059      	beq.n	8011338 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011284:	4b88      	ldr	r3, [pc, #544]	; (80114a8 <tcp_receive+0xb04>)
 8011286:	881b      	ldrh	r3, [r3, #0]
 8011288:	461a      	mov	r2, r3
 801128a:	4b88      	ldr	r3, [pc, #544]	; (80114ac <tcp_receive+0xb08>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	441a      	add	r2, r3
 8011290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011298:	2b00      	cmp	r3, #0
 801129a:	dd4d      	ble.n	8011338 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	4b81      	ldr	r3, [pc, #516]	; (80114ac <tcp_receive+0xb08>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	4b80      	ldr	r3, [pc, #512]	; (80114b0 <tcp_receive+0xb0c>)
 80112b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112b2:	4b7f      	ldr	r3, [pc, #508]	; (80114b0 <tcp_receive+0xb0c>)
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	899b      	ldrh	r3, [r3, #12]
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fa fff8 	bl	800c2b0 <lwip_htons>
 80112c0:	4603      	mov	r3, r0
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	f003 0302 	and.w	r3, r3, #2
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d005      	beq.n	80112d8 <tcp_receive+0x934>
                inseg.len -= 1;
 80112cc:	4b78      	ldr	r3, [pc, #480]	; (80114b0 <tcp_receive+0xb0c>)
 80112ce:	891b      	ldrh	r3, [r3, #8]
 80112d0:	3b01      	subs	r3, #1
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	4b76      	ldr	r3, [pc, #472]	; (80114b0 <tcp_receive+0xb0c>)
 80112d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80112d8:	4b75      	ldr	r3, [pc, #468]	; (80114b0 <tcp_receive+0xb0c>)
 80112da:	685a      	ldr	r2, [r3, #4]
 80112dc:	4b74      	ldr	r3, [pc, #464]	; (80114b0 <tcp_receive+0xb0c>)
 80112de:	891b      	ldrh	r3, [r3, #8]
 80112e0:	4619      	mov	r1, r3
 80112e2:	4610      	mov	r0, r2
 80112e4:	f7fc f8f6 	bl	800d4d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80112e8:	4b71      	ldr	r3, [pc, #452]	; (80114b0 <tcp_receive+0xb0c>)
 80112ea:	891c      	ldrh	r4, [r3, #8]
 80112ec:	4b70      	ldr	r3, [pc, #448]	; (80114b0 <tcp_receive+0xb0c>)
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	899b      	ldrh	r3, [r3, #12]
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fa ffdb 	bl	800c2b0 <lwip_htons>
 80112fa:	4603      	mov	r3, r0
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	f003 0303 	and.w	r3, r3, #3
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <tcp_receive+0x966>
 8011306:	2301      	movs	r3, #1
 8011308:	e000      	b.n	801130c <tcp_receive+0x968>
 801130a:	2300      	movs	r3, #0
 801130c:	4423      	add	r3, r4
 801130e:	b29a      	uxth	r2, r3
 8011310:	4b65      	ldr	r3, [pc, #404]	; (80114a8 <tcp_receive+0xb04>)
 8011312:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011314:	4b64      	ldr	r3, [pc, #400]	; (80114a8 <tcp_receive+0xb04>)
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	461a      	mov	r2, r3
 801131a:	4b64      	ldr	r3, [pc, #400]	; (80114ac <tcp_receive+0xb08>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	441a      	add	r2, r3
 8011320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	429a      	cmp	r2, r3
 8011328:	d006      	beq.n	8011338 <tcp_receive+0x994>
 801132a:	4b62      	ldr	r3, [pc, #392]	; (80114b4 <tcp_receive+0xb10>)
 801132c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011330:	4961      	ldr	r1, [pc, #388]	; (80114b8 <tcp_receive+0xb14>)
 8011332:	4862      	ldr	r0, [pc, #392]	; (80114bc <tcp_receive+0xb18>)
 8011334:	f007 fadc 	bl	80188f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801133c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801133e:	4b5a      	ldr	r3, [pc, #360]	; (80114a8 <tcp_receive+0xb04>)
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	461a      	mov	r2, r3
 8011344:	4b59      	ldr	r3, [pc, #356]	; (80114ac <tcp_receive+0xb08>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	441a      	add	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011352:	4b55      	ldr	r3, [pc, #340]	; (80114a8 <tcp_receive+0xb04>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	429a      	cmp	r2, r3
 8011358:	d206      	bcs.n	8011368 <tcp_receive+0x9c4>
 801135a:	4b56      	ldr	r3, [pc, #344]	; (80114b4 <tcp_receive+0xb10>)
 801135c:	f240 6207 	movw	r2, #1543	; 0x607
 8011360:	4957      	ldr	r1, [pc, #348]	; (80114c0 <tcp_receive+0xb1c>)
 8011362:	4856      	ldr	r0, [pc, #344]	; (80114bc <tcp_receive+0xb18>)
 8011364:	f007 fac4 	bl	80188f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801136c:	4b4e      	ldr	r3, [pc, #312]	; (80114a8 <tcp_receive+0xb04>)
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	b29a      	uxth	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7fc ffcd 	bl	800e318 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801137e:	4b4c      	ldr	r3, [pc, #304]	; (80114b0 <tcp_receive+0xb0c>)
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	891b      	ldrh	r3, [r3, #8]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d006      	beq.n	8011396 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011388:	4b49      	ldr	r3, [pc, #292]	; (80114b0 <tcp_receive+0xb0c>)
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	4a4d      	ldr	r2, [pc, #308]	; (80114c4 <tcp_receive+0xb20>)
 801138e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011390:	4b47      	ldr	r3, [pc, #284]	; (80114b0 <tcp_receive+0xb0c>)
 8011392:	2200      	movs	r2, #0
 8011394:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011396:	4b46      	ldr	r3, [pc, #280]	; (80114b0 <tcp_receive+0xb0c>)
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	899b      	ldrh	r3, [r3, #12]
 801139c:	b29b      	uxth	r3, r3
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fa ff86 	bl	800c2b0 <lwip_htons>
 80113a4:	4603      	mov	r3, r0
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	f003 0301 	and.w	r3, r3, #1
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f000 80b8 	beq.w	8011522 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80113b2:	4b45      	ldr	r3, [pc, #276]	; (80114c8 <tcp_receive+0xb24>)
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	f043 0320 	orr.w	r3, r3, #32
 80113ba:	b2da      	uxtb	r2, r3
 80113bc:	4b42      	ldr	r3, [pc, #264]	; (80114c8 <tcp_receive+0xb24>)
 80113be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80113c0:	e0af      	b.n	8011522 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4a36      	ldr	r2, [pc, #216]	; (80114ac <tcp_receive+0xb08>)
 80113d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	891b      	ldrh	r3, [r3, #8]
 80113d8:	461c      	mov	r4, r3
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	899b      	ldrh	r3, [r3, #12]
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fa ff64 	bl	800c2b0 <lwip_htons>
 80113e8:	4603      	mov	r3, r0
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	f003 0303 	and.w	r3, r3, #3
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <tcp_receive+0xa54>
 80113f4:	2301      	movs	r3, #1
 80113f6:	e000      	b.n	80113fa <tcp_receive+0xa56>
 80113f8:	2300      	movs	r3, #0
 80113fa:	191a      	adds	r2, r3, r4
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011400:	441a      	add	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801140a:	461c      	mov	r4, r3
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	891b      	ldrh	r3, [r3, #8]
 8011410:	461d      	mov	r5, r3
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	899b      	ldrh	r3, [r3, #12]
 8011418:	b29b      	uxth	r3, r3
 801141a:	4618      	mov	r0, r3
 801141c:	f7fa ff48 	bl	800c2b0 <lwip_htons>
 8011420:	4603      	mov	r3, r0
 8011422:	b2db      	uxtb	r3, r3
 8011424:	f003 0303 	and.w	r3, r3, #3
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <tcp_receive+0xa8c>
 801142c:	2301      	movs	r3, #1
 801142e:	e000      	b.n	8011432 <tcp_receive+0xa8e>
 8011430:	2300      	movs	r3, #0
 8011432:	442b      	add	r3, r5
 8011434:	429c      	cmp	r4, r3
 8011436:	d206      	bcs.n	8011446 <tcp_receive+0xaa2>
 8011438:	4b1e      	ldr	r3, [pc, #120]	; (80114b4 <tcp_receive+0xb10>)
 801143a:	f240 622c 	movw	r2, #1580	; 0x62c
 801143e:	4923      	ldr	r1, [pc, #140]	; (80114cc <tcp_receive+0xb28>)
 8011440:	481e      	ldr	r0, [pc, #120]	; (80114bc <tcp_receive+0xb18>)
 8011442:	f007 fa55 	bl	80188f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	891b      	ldrh	r3, [r3, #8]
 801144a:	461c      	mov	r4, r3
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	899b      	ldrh	r3, [r3, #12]
 8011452:	b29b      	uxth	r3, r3
 8011454:	4618      	mov	r0, r3
 8011456:	f7fa ff2b 	bl	800c2b0 <lwip_htons>
 801145a:	4603      	mov	r3, r0
 801145c:	b2db      	uxtb	r3, r3
 801145e:	f003 0303 	and.w	r3, r3, #3
 8011462:	2b00      	cmp	r3, #0
 8011464:	d001      	beq.n	801146a <tcp_receive+0xac6>
 8011466:	2301      	movs	r3, #1
 8011468:	e000      	b.n	801146c <tcp_receive+0xac8>
 801146a:	2300      	movs	r3, #0
 801146c:	1919      	adds	r1, r3, r4
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011472:	b28b      	uxth	r3, r1
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	b29a      	uxth	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fc ff4b 	bl	800e318 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	891b      	ldrh	r3, [r3, #8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d028      	beq.n	80114de <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801148c:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <tcp_receive+0xb20>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d01d      	beq.n	80114d0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011494:	4b0b      	ldr	r3, [pc, #44]	; (80114c4 <tcp_receive+0xb20>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4619      	mov	r1, r3
 801149e:	4610      	mov	r0, r2
 80114a0:	f7fc fa60 	bl	800d964 <pbuf_cat>
 80114a4:	e018      	b.n	80114d8 <tcp_receive+0xb34>
 80114a6:	bf00      	nop
 80114a8:	200004be 	.word	0x200004be
 80114ac:	200004b4 	.word	0x200004b4
 80114b0:	20000494 	.word	0x20000494
 80114b4:	0801ee24 	.word	0x0801ee24
 80114b8:	0801f204 	.word	0x0801f204
 80114bc:	0801ee70 	.word	0x0801ee70
 80114c0:	0801f240 	.word	0x0801f240
 80114c4:	200004c4 	.word	0x200004c4
 80114c8:	200004c1 	.word	0x200004c1
 80114cc:	0801f260 	.word	0x0801f260
            } else {
              recv_data = cseg->p;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	4a70      	ldr	r2, [pc, #448]	; (8011698 <tcp_receive+0xcf4>)
 80114d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	2200      	movs	r2, #0
 80114dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	899b      	ldrh	r3, [r3, #12]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fa fee2 	bl	800c2b0 <lwip_htons>
 80114ec:	4603      	mov	r3, r0
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00d      	beq.n	8011514 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114f8:	4b68      	ldr	r3, [pc, #416]	; (801169c <tcp_receive+0xcf8>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f043 0320 	orr.w	r3, r3, #32
 8011500:	b2da      	uxtb	r2, r3
 8011502:	4b66      	ldr	r3, [pc, #408]	; (801169c <tcp_receive+0xcf8>)
 8011504:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	7d1b      	ldrb	r3, [r3, #20]
 801150a:	2b04      	cmp	r3, #4
 801150c:	d102      	bne.n	8011514 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2207      	movs	r2, #7
 8011512:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801151c:	68b8      	ldr	r0, [r7, #8]
 801151e:	f7fd fbd7 	bl	800ecd0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011526:	2b00      	cmp	r3, #0
 8011528:	d008      	beq.n	801153c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	685a      	ldr	r2, [r3, #4]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011536:	429a      	cmp	r2, r3
 8011538:	f43f af43 	beq.w	80113c2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	8b5b      	ldrh	r3, [r3, #26]
 8011540:	f003 0301 	and.w	r3, r3, #1
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00e      	beq.n	8011566 <tcp_receive+0xbc2>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	8b5b      	ldrh	r3, [r3, #26]
 801154c:	f023 0301 	bic.w	r3, r3, #1
 8011550:	b29a      	uxth	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	835a      	strh	r2, [r3, #26]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	8b5b      	ldrh	r3, [r3, #26]
 801155a:	f043 0302 	orr.w	r3, r3, #2
 801155e:	b29a      	uxth	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011564:	e188      	b.n	8011878 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	8b5b      	ldrh	r3, [r3, #26]
 801156a:	f043 0301 	orr.w	r3, r3, #1
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011574:	e180      	b.n	8011878 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801157a:	2b00      	cmp	r3, #0
 801157c:	d106      	bne.n	801158c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801157e:	4848      	ldr	r0, [pc, #288]	; (80116a0 <tcp_receive+0xcfc>)
 8011580:	f7fd fbbe 	bl	800ed00 <tcp_seg_copy>
 8011584:	4602      	mov	r2, r0
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	675a      	str	r2, [r3, #116]	; 0x74
 801158a:	e16d      	b.n	8011868 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801158c:	2300      	movs	r3, #0
 801158e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011594:	63bb      	str	r3, [r7, #56]	; 0x38
 8011596:	e157      	b.n	8011848 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	4b41      	ldr	r3, [pc, #260]	; (80116a4 <tcp_receive+0xd00>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d11d      	bne.n	80115e2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80115a6:	4b3e      	ldr	r3, [pc, #248]	; (80116a0 <tcp_receive+0xcfc>)
 80115a8:	891a      	ldrh	r2, [r3, #8]
 80115aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ac:	891b      	ldrh	r3, [r3, #8]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	f240 814f 	bls.w	8011852 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115b4:	483a      	ldr	r0, [pc, #232]	; (80116a0 <tcp_receive+0xcfc>)
 80115b6:	f7fd fba3 	bl	800ed00 <tcp_seg_copy>
 80115ba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f000 8149 	beq.w	8011856 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80115c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d003      	beq.n	80115d2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80115ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	601a      	str	r2, [r3, #0]
 80115d0:	e002      	b.n	80115d8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80115d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115da:	6978      	ldr	r0, [r7, #20]
 80115dc:	f7ff f8de 	bl	801079c <tcp_oos_insert_segment>
                }
                break;
 80115e0:	e139      	b.n	8011856 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80115e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d117      	bne.n	8011618 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80115e8:	4b2e      	ldr	r3, [pc, #184]	; (80116a4 <tcp_receive+0xd00>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	da57      	bge.n	80116a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115f8:	4829      	ldr	r0, [pc, #164]	; (80116a0 <tcp_receive+0xcfc>)
 80115fa:	f7fd fb81 	bl	800ed00 <tcp_seg_copy>
 80115fe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	2b00      	cmp	r3, #0
 8011604:	f000 8129 	beq.w	801185a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	69ba      	ldr	r2, [r7, #24]
 801160c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801160e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011610:	69b8      	ldr	r0, [r7, #24]
 8011612:	f7ff f8c3 	bl	801079c <tcp_oos_insert_segment>
                  }
                  break;
 8011616:	e120      	b.n	801185a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011618:	4b22      	ldr	r3, [pc, #136]	; (80116a4 <tcp_receive+0xd00>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	3b01      	subs	r3, #1
 8011626:	2b00      	cmp	r3, #0
 8011628:	db3e      	blt.n	80116a8 <tcp_receive+0xd04>
 801162a:	4b1e      	ldr	r3, [pc, #120]	; (80116a4 <tcp_receive+0xd00>)
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011630:	68db      	ldr	r3, [r3, #12]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	3301      	adds	r3, #1
 8011638:	2b00      	cmp	r3, #0
 801163a:	dc35      	bgt.n	80116a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801163c:	4818      	ldr	r0, [pc, #96]	; (80116a0 <tcp_receive+0xcfc>)
 801163e:	f7fd fb5f 	bl	800ed00 <tcp_seg_copy>
 8011642:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f000 8109 	beq.w	801185e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011654:	8912      	ldrh	r2, [r2, #8]
 8011656:	441a      	add	r2, r3
 8011658:	4b12      	ldr	r3, [pc, #72]	; (80116a4 <tcp_receive+0xd00>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	dd12      	ble.n	8011688 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011662:	4b10      	ldr	r3, [pc, #64]	; (80116a4 <tcp_receive+0xd00>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	b29a      	uxth	r2, r3
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	b29b      	uxth	r3, r3
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	b29a      	uxth	r2, r3
 8011674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011676:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801167e:	891b      	ldrh	r3, [r3, #8]
 8011680:	4619      	mov	r1, r3
 8011682:	4610      	mov	r0, r2
 8011684:	f7fb ff26 	bl	800d4d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801168a:	69fa      	ldr	r2, [r7, #28]
 801168c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801168e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011690:	69f8      	ldr	r0, [r7, #28]
 8011692:	f7ff f883 	bl	801079c <tcp_oos_insert_segment>
                  }
                  break;
 8011696:	e0e2      	b.n	801185e <tcp_receive+0xeba>
 8011698:	200004c4 	.word	0x200004c4
 801169c:	200004c1 	.word	0x200004c1
 80116a0:	20000494 	.word	0x20000494
 80116a4:	200004b4 	.word	0x200004b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80116ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	f040 80c6 	bne.w	8011842 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80116b6:	4b80      	ldr	r3, [pc, #512]	; (80118b8 <tcp_receive+0xf14>)
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f340 80bd 	ble.w	8011842 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80116c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	899b      	ldrh	r3, [r3, #12]
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fa fded 	bl	800c2b0 <lwip_htons>
 80116d6:	4603      	mov	r3, r0
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f040 80bf 	bne.w	8011862 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80116e4:	4875      	ldr	r0, [pc, #468]	; (80118bc <tcp_receive+0xf18>)
 80116e6:	f7fd fb0b 	bl	800ed00 <tcp_seg_copy>
 80116ea:	4602      	mov	r2, r0
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f000 80b6 	beq.w	8011866 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011702:	8912      	ldrh	r2, [r2, #8]
 8011704:	441a      	add	r2, r3
 8011706:	4b6c      	ldr	r3, [pc, #432]	; (80118b8 <tcp_receive+0xf14>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	dd12      	ble.n	8011736 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011710:	4b69      	ldr	r3, [pc, #420]	; (80118b8 <tcp_receive+0xf14>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	b29a      	uxth	r2, r3
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	b29b      	uxth	r3, r3
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	b29a      	uxth	r2, r3
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011728:	685a      	ldr	r2, [r3, #4]
 801172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172c:	891b      	ldrh	r3, [r3, #8]
 801172e:	4619      	mov	r1, r3
 8011730:	4610      	mov	r0, r2
 8011732:	f7fb fecf 	bl	800d4d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011736:	4b62      	ldr	r3, [pc, #392]	; (80118c0 <tcp_receive+0xf1c>)
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	461a      	mov	r2, r3
 801173c:	4b5e      	ldr	r3, [pc, #376]	; (80118b8 <tcp_receive+0xf14>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	441a      	add	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801174a:	440b      	add	r3, r1
 801174c:	1ad3      	subs	r3, r2, r3
 801174e:	2b00      	cmp	r3, #0
 8011750:	f340 8089 	ble.w	8011866 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	68db      	ldr	r3, [r3, #12]
 801175a:	899b      	ldrh	r3, [r3, #12]
 801175c:	b29b      	uxth	r3, r3
 801175e:	4618      	mov	r0, r3
 8011760:	f7fa fda6 	bl	800c2b0 <lwip_htons>
 8011764:	4603      	mov	r3, r0
 8011766:	b2db      	uxtb	r3, r3
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	2b00      	cmp	r3, #0
 801176e:	d022      	beq.n	80117b6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	899b      	ldrh	r3, [r3, #12]
 8011778:	b29b      	uxth	r3, r3
 801177a:	b21b      	sxth	r3, r3
 801177c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011780:	b21c      	sxth	r4, r3
 8011782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	899b      	ldrh	r3, [r3, #12]
 801178a:	b29b      	uxth	r3, r3
 801178c:	4618      	mov	r0, r3
 801178e:	f7fa fd8f 	bl	800c2b0 <lwip_htons>
 8011792:	4603      	mov	r3, r0
 8011794:	b2db      	uxtb	r3, r3
 8011796:	b29b      	uxth	r3, r3
 8011798:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801179c:	b29b      	uxth	r3, r3
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fa fd86 	bl	800c2b0 <lwip_htons>
 80117a4:	4603      	mov	r3, r0
 80117a6:	b21b      	sxth	r3, r3
 80117a8:	4323      	orrs	r3, r4
 80117aa:	b21a      	sxth	r2, r3
 80117ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	b292      	uxth	r2, r2
 80117b4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117c0:	4413      	add	r3, r2
 80117c2:	b299      	uxth	r1, r3
 80117c4:	4b3c      	ldr	r3, [pc, #240]	; (80118b8 <tcp_receive+0xf14>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	1a8a      	subs	r2, r1, r2
 80117d0:	b292      	uxth	r2, r2
 80117d2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80117d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	685a      	ldr	r2, [r3, #4]
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	891b      	ldrh	r3, [r3, #8]
 80117e0:	4619      	mov	r1, r3
 80117e2:	4610      	mov	r0, r2
 80117e4:	f7fb fe76 	bl	800d4d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80117e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	891c      	ldrh	r4, [r3, #8]
 80117ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	899b      	ldrh	r3, [r3, #12]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fa fd59 	bl	800c2b0 <lwip_htons>
 80117fe:	4603      	mov	r3, r0
 8011800:	b2db      	uxtb	r3, r3
 8011802:	f003 0303 	and.w	r3, r3, #3
 8011806:	2b00      	cmp	r3, #0
 8011808:	d001      	beq.n	801180e <tcp_receive+0xe6a>
 801180a:	2301      	movs	r3, #1
 801180c:	e000      	b.n	8011810 <tcp_receive+0xe6c>
 801180e:	2300      	movs	r3, #0
 8011810:	4423      	add	r3, r4
 8011812:	b29a      	uxth	r2, r3
 8011814:	4b2a      	ldr	r3, [pc, #168]	; (80118c0 <tcp_receive+0xf1c>)
 8011816:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011818:	4b29      	ldr	r3, [pc, #164]	; (80118c0 <tcp_receive+0xf1c>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	461a      	mov	r2, r3
 801181e:	4b26      	ldr	r3, [pc, #152]	; (80118b8 <tcp_receive+0xf14>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	441a      	add	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801182c:	440b      	add	r3, r1
 801182e:	429a      	cmp	r2, r3
 8011830:	d019      	beq.n	8011866 <tcp_receive+0xec2>
 8011832:	4b24      	ldr	r3, [pc, #144]	; (80118c4 <tcp_receive+0xf20>)
 8011834:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011838:	4923      	ldr	r1, [pc, #140]	; (80118c8 <tcp_receive+0xf24>)
 801183a:	4824      	ldr	r0, [pc, #144]	; (80118cc <tcp_receive+0xf28>)
 801183c:	f007 f858 	bl	80188f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011840:	e011      	b.n	8011866 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	63bb      	str	r3, [r7, #56]	; 0x38
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	2b00      	cmp	r3, #0
 801184c:	f47f aea4 	bne.w	8011598 <tcp_receive+0xbf4>
 8011850:	e00a      	b.n	8011868 <tcp_receive+0xec4>
                break;
 8011852:	bf00      	nop
 8011854:	e008      	b.n	8011868 <tcp_receive+0xec4>
                break;
 8011856:	bf00      	nop
 8011858:	e006      	b.n	8011868 <tcp_receive+0xec4>
                  break;
 801185a:	bf00      	nop
 801185c:	e004      	b.n	8011868 <tcp_receive+0xec4>
                  break;
 801185e:	bf00      	nop
 8011860:	e002      	b.n	8011868 <tcp_receive+0xec4>
                  break;
 8011862:	bf00      	nop
 8011864:	e000      	b.n	8011868 <tcp_receive+0xec4>
                break;
 8011866:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f001 fa3f 	bl	8012cec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801186e:	e003      	b.n	8011878 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f001 fa3b 	bl	8012cec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011876:	e01a      	b.n	80118ae <tcp_receive+0xf0a>
 8011878:	e019      	b.n	80118ae <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801187a:	4b0f      	ldr	r3, [pc, #60]	; (80118b8 <tcp_receive+0xf14>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	1ad3      	subs	r3, r2, r3
 8011884:	2b00      	cmp	r3, #0
 8011886:	db0a      	blt.n	801189e <tcp_receive+0xefa>
 8011888:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <tcp_receive+0xf14>)
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011890:	6879      	ldr	r1, [r7, #4]
 8011892:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011894:	440b      	add	r3, r1
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	3301      	adds	r3, #1
 801189a:	2b00      	cmp	r3, #0
 801189c:	dd07      	ble.n	80118ae <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8b5b      	ldrh	r3, [r3, #26]
 80118a2:	f043 0302 	orr.w	r3, r3, #2
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80118ac:	e7ff      	b.n	80118ae <tcp_receive+0xf0a>
 80118ae:	bf00      	nop
 80118b0:	3750      	adds	r7, #80	; 0x50
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bdb0      	pop	{r4, r5, r7, pc}
 80118b6:	bf00      	nop
 80118b8:	200004b4 	.word	0x200004b4
 80118bc:	20000494 	.word	0x20000494
 80118c0:	200004be 	.word	0x200004be
 80118c4:	0801ee24 	.word	0x0801ee24
 80118c8:	0801f1cc 	.word	0x0801f1cc
 80118cc:	0801ee70 	.word	0x0801ee70

080118d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80118d6:	4b15      	ldr	r3, [pc, #84]	; (801192c <tcp_get_next_optbyte+0x5c>)
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	1c5a      	adds	r2, r3, #1
 80118dc:	b291      	uxth	r1, r2
 80118de:	4a13      	ldr	r2, [pc, #76]	; (801192c <tcp_get_next_optbyte+0x5c>)
 80118e0:	8011      	strh	r1, [r2, #0]
 80118e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80118e4:	4b12      	ldr	r3, [pc, #72]	; (8011930 <tcp_get_next_optbyte+0x60>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d004      	beq.n	80118f6 <tcp_get_next_optbyte+0x26>
 80118ec:	4b11      	ldr	r3, [pc, #68]	; (8011934 <tcp_get_next_optbyte+0x64>)
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	88fa      	ldrh	r2, [r7, #6]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d208      	bcs.n	8011908 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80118f6:	4b10      	ldr	r3, [pc, #64]	; (8011938 <tcp_get_next_optbyte+0x68>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3314      	adds	r3, #20
 80118fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80118fe:	88fb      	ldrh	r3, [r7, #6]
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	4413      	add	r3, r2
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	e00b      	b.n	8011920 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011908:	88fb      	ldrh	r3, [r7, #6]
 801190a:	b2da      	uxtb	r2, r3
 801190c:	4b09      	ldr	r3, [pc, #36]	; (8011934 <tcp_get_next_optbyte+0x64>)
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	b2db      	uxtb	r3, r3
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011916:	4b06      	ldr	r3, [pc, #24]	; (8011930 <tcp_get_next_optbyte+0x60>)
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	797b      	ldrb	r3, [r7, #5]
 801191c:	4413      	add	r3, r2
 801191e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011920:	4618      	mov	r0, r3
 8011922:	370c      	adds	r7, #12
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr
 801192c:	200004b0 	.word	0x200004b0
 8011930:	200004ac 	.word	0x200004ac
 8011934:	200004aa 	.word	0x200004aa
 8011938:	200004a4 	.word	0x200004a4

0801193c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d106      	bne.n	8011958 <tcp_parseopt+0x1c>
 801194a:	4b31      	ldr	r3, [pc, #196]	; (8011a10 <tcp_parseopt+0xd4>)
 801194c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011950:	4930      	ldr	r1, [pc, #192]	; (8011a14 <tcp_parseopt+0xd8>)
 8011952:	4831      	ldr	r0, [pc, #196]	; (8011a18 <tcp_parseopt+0xdc>)
 8011954:	f006 ffcc 	bl	80188f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011958:	4b30      	ldr	r3, [pc, #192]	; (8011a1c <tcp_parseopt+0xe0>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d053      	beq.n	8011a08 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011960:	4b2f      	ldr	r3, [pc, #188]	; (8011a20 <tcp_parseopt+0xe4>)
 8011962:	2200      	movs	r2, #0
 8011964:	801a      	strh	r2, [r3, #0]
 8011966:	e043      	b.n	80119f0 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8011968:	f7ff ffb2 	bl	80118d0 <tcp_get_next_optbyte>
 801196c:	4603      	mov	r3, r0
 801196e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011970:	7bfb      	ldrb	r3, [r7, #15]
 8011972:	2b01      	cmp	r3, #1
 8011974:	d03c      	beq.n	80119f0 <tcp_parseopt+0xb4>
 8011976:	2b02      	cmp	r3, #2
 8011978:	d002      	beq.n	8011980 <tcp_parseopt+0x44>
 801197a:	2b00      	cmp	r3, #0
 801197c:	d03f      	beq.n	80119fe <tcp_parseopt+0xc2>
 801197e:	e026      	b.n	80119ce <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011980:	f7ff ffa6 	bl	80118d0 <tcp_get_next_optbyte>
 8011984:	4603      	mov	r3, r0
 8011986:	2b04      	cmp	r3, #4
 8011988:	d13b      	bne.n	8011a02 <tcp_parseopt+0xc6>
 801198a:	4b25      	ldr	r3, [pc, #148]	; (8011a20 <tcp_parseopt+0xe4>)
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	3302      	adds	r3, #2
 8011990:	4a22      	ldr	r2, [pc, #136]	; (8011a1c <tcp_parseopt+0xe0>)
 8011992:	8812      	ldrh	r2, [r2, #0]
 8011994:	4293      	cmp	r3, r2
 8011996:	dc34      	bgt.n	8011a02 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011998:	f7ff ff9a 	bl	80118d0 <tcp_get_next_optbyte>
 801199c:	4603      	mov	r3, r0
 801199e:	b29b      	uxth	r3, r3
 80119a0:	021b      	lsls	r3, r3, #8
 80119a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80119a4:	f7ff ff94 	bl	80118d0 <tcp_get_next_optbyte>
 80119a8:	4603      	mov	r3, r0
 80119aa:	b29a      	uxth	r2, r3
 80119ac:	89bb      	ldrh	r3, [r7, #12]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80119b2:	89bb      	ldrh	r3, [r7, #12]
 80119b4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80119b8:	d804      	bhi.n	80119c4 <tcp_parseopt+0x88>
 80119ba:	89bb      	ldrh	r3, [r7, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d001      	beq.n	80119c4 <tcp_parseopt+0x88>
 80119c0:	89ba      	ldrh	r2, [r7, #12]
 80119c2:	e001      	b.n	80119c8 <tcp_parseopt+0x8c>
 80119c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80119cc:	e010      	b.n	80119f0 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80119ce:	f7ff ff7f 	bl	80118d0 <tcp_get_next_optbyte>
 80119d2:	4603      	mov	r3, r0
 80119d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80119d6:	7afb      	ldrb	r3, [r7, #11]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d914      	bls.n	8011a06 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80119dc:	7afb      	ldrb	r3, [r7, #11]
 80119de:	b29a      	uxth	r2, r3
 80119e0:	4b0f      	ldr	r3, [pc, #60]	; (8011a20 <tcp_parseopt+0xe4>)
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	4413      	add	r3, r2
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	3b02      	subs	r3, #2
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	4b0c      	ldr	r3, [pc, #48]	; (8011a20 <tcp_parseopt+0xe4>)
 80119ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119f0:	4b0b      	ldr	r3, [pc, #44]	; (8011a20 <tcp_parseopt+0xe4>)
 80119f2:	881a      	ldrh	r2, [r3, #0]
 80119f4:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <tcp_parseopt+0xe0>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d3b5      	bcc.n	8011968 <tcp_parseopt+0x2c>
 80119fc:	e004      	b.n	8011a08 <tcp_parseopt+0xcc>
          return;
 80119fe:	bf00      	nop
 8011a00:	e002      	b.n	8011a08 <tcp_parseopt+0xcc>
            return;
 8011a02:	bf00      	nop
 8011a04:	e000      	b.n	8011a08 <tcp_parseopt+0xcc>
            return;
 8011a06:	bf00      	nop
      }
    }
  }
}
 8011a08:	3710      	adds	r7, #16
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	0801ee24 	.word	0x0801ee24
 8011a14:	0801f288 	.word	0x0801f288
 8011a18:	0801ee70 	.word	0x0801ee70
 8011a1c:	200004a8 	.word	0x200004a8
 8011a20:	200004b0 	.word	0x200004b0

08011a24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a24:	b480      	push	{r7}
 8011a26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a28:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <tcp_trigger_input_pcb_close+0x1c>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	f043 0310 	orr.w	r3, r3, #16
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	4b03      	ldr	r3, [pc, #12]	; (8011a40 <tcp_trigger_input_pcb_close+0x1c>)
 8011a34:	701a      	strb	r2, [r3, #0]
}
 8011a36:	bf00      	nop
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	200004c1 	.word	0x200004c1

08011a44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00a      	beq.n	8011a6c <tcp_route+0x28>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	7a1b      	ldrb	r3, [r3, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d006      	beq.n	8011a6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	7a1b      	ldrb	r3, [r3, #8]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fb fb80 	bl	800d168 <netif_get_by_index>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	e003      	b.n	8011a74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f004 ffa1 	bl	80169b4 <ip4_route>
 8011a72:	4603      	mov	r3, r0
  }
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a7c:	b590      	push	{r4, r7, lr}
 8011a7e:	b087      	sub	sp, #28
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	603b      	str	r3, [r7, #0]
 8011a88:	4613      	mov	r3, r2
 8011a8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d105      	bne.n	8011a9e <tcp_create_segment+0x22>
 8011a92:	4b44      	ldr	r3, [pc, #272]	; (8011ba4 <tcp_create_segment+0x128>)
 8011a94:	22a3      	movs	r2, #163	; 0xa3
 8011a96:	4944      	ldr	r1, [pc, #272]	; (8011ba8 <tcp_create_segment+0x12c>)
 8011a98:	4844      	ldr	r0, [pc, #272]	; (8011bac <tcp_create_segment+0x130>)
 8011a9a:	f006 ff29 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d105      	bne.n	8011ab0 <tcp_create_segment+0x34>
 8011aa4:	4b3f      	ldr	r3, [pc, #252]	; (8011ba4 <tcp_create_segment+0x128>)
 8011aa6:	22a4      	movs	r2, #164	; 0xa4
 8011aa8:	4941      	ldr	r1, [pc, #260]	; (8011bb0 <tcp_create_segment+0x134>)
 8011aaa:	4840      	ldr	r0, [pc, #256]	; (8011bac <tcp_create_segment+0x130>)
 8011aac:	f006 ff20 	bl	80188f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011abe:	2003      	movs	r0, #3
 8011ac0:	f7fb f84c 	bl	800cb5c <memp_malloc>
 8011ac4:	6138      	str	r0, [r7, #16]
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d104      	bne.n	8011ad6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011acc:	68b8      	ldr	r0, [r7, #8]
 8011ace:	f7fb fe87 	bl	800d7e0 <pbuf_free>
    return NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e061      	b.n	8011b9a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011adc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	891a      	ldrh	r2, [r3, #8]
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d205      	bcs.n	8011b02 <tcp_create_segment+0x86>
 8011af6:	4b2b      	ldr	r3, [pc, #172]	; (8011ba4 <tcp_create_segment+0x128>)
 8011af8:	22b0      	movs	r2, #176	; 0xb0
 8011afa:	492e      	ldr	r1, [pc, #184]	; (8011bb4 <tcp_create_segment+0x138>)
 8011afc:	482b      	ldr	r0, [pc, #172]	; (8011bac <tcp_create_segment+0x130>)
 8011afe:	f006 fef7 	bl	80188f0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	891a      	ldrh	r2, [r3, #8]
 8011b06:	7dfb      	ldrb	r3, [r7, #23]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011b12:	2114      	movs	r1, #20
 8011b14:	68b8      	ldr	r0, [r7, #8]
 8011b16:	f7fb fdcd 	bl	800d6b4 <pbuf_add_header>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d004      	beq.n	8011b2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b20:	6938      	ldr	r0, [r7, #16]
 8011b22:	f7fd f8d5 	bl	800ecd0 <tcp_seg_free>
    return NULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	e037      	b.n	8011b9a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	685a      	ldr	r2, [r3, #4]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	8ada      	ldrh	r2, [r3, #22]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	68dc      	ldr	r4, [r3, #12]
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	f7fa fbb7 	bl	800c2b0 <lwip_htons>
 8011b42:	4603      	mov	r3, r0
 8011b44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	8b1a      	ldrh	r2, [r3, #24]
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	68dc      	ldr	r4, [r3, #12]
 8011b4e:	4610      	mov	r0, r2
 8011b50:	f7fa fbae 	bl	800c2b0 <lwip_htons>
 8011b54:	4603      	mov	r3, r0
 8011b56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	68dc      	ldr	r4, [r3, #12]
 8011b5c:	6838      	ldr	r0, [r7, #0]
 8011b5e:	f7fa fbbc 	bl	800c2da <lwip_htonl>
 8011b62:	4603      	mov	r3, r0
 8011b64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b66:	7dfb      	ldrb	r3, [r7, #23]
 8011b68:	089b      	lsrs	r3, r3, #2
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	3305      	adds	r3, #5
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	031b      	lsls	r3, r3, #12
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	79fb      	ldrb	r3, [r7, #7]
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	68dc      	ldr	r4, [r3, #12]
 8011b82:	4610      	mov	r0, r2
 8011b84:	f7fa fb94 	bl	800c2b0 <lwip_htons>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	2200      	movs	r2, #0
 8011b92:	749a      	strb	r2, [r3, #18]
 8011b94:	2200      	movs	r2, #0
 8011b96:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b98:	693b      	ldr	r3, [r7, #16]
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	371c      	adds	r7, #28
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd90      	pop	{r4, r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	0801f2a4 	.word	0x0801f2a4
 8011ba8:	0801f2d8 	.word	0x0801f2d8
 8011bac:	0801f2f8 	.word	0x0801f2f8
 8011bb0:	0801f320 	.word	0x0801f320
 8011bb4:	0801f344 	.word	0x0801f344

08011bb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011bb8:	b590      	push	{r4, r7, lr}
 8011bba:	b08b      	sub	sp, #44	; 0x2c
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	61fb      	str	r3, [r7, #28]
 8011bc8:	2300      	movs	r3, #0
 8011bca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <tcp_split_unsent_seg+0x2c>
 8011bd6:	4b95      	ldr	r3, [pc, #596]	; (8011e2c <tcp_split_unsent_seg+0x274>)
 8011bd8:	f240 324b 	movw	r2, #843	; 0x34b
 8011bdc:	4994      	ldr	r1, [pc, #592]	; (8011e30 <tcp_split_unsent_seg+0x278>)
 8011bde:	4895      	ldr	r0, [pc, #596]	; (8011e34 <tcp_split_unsent_seg+0x27c>)
 8011be0:	f006 fe86 	bl	80188f0 <iprintf>

  useg = pcb->unsent;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf4:	e116      	b.n	8011e24 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011bf6:	887b      	ldrh	r3, [r7, #2]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011bfc:	4b8b      	ldr	r3, [pc, #556]	; (8011e2c <tcp_split_unsent_seg+0x274>)
 8011bfe:	f240 3253 	movw	r2, #851	; 0x353
 8011c02:	498d      	ldr	r1, [pc, #564]	; (8011e38 <tcp_split_unsent_seg+0x280>)
 8011c04:	488b      	ldr	r0, [pc, #556]	; (8011e34 <tcp_split_unsent_seg+0x27c>)
 8011c06:	f006 fe73 	bl	80188f0 <iprintf>
    return ERR_VAL;
 8011c0a:	f06f 0305 	mvn.w	r3, #5
 8011c0e:	e109      	b.n	8011e24 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	891b      	ldrh	r3, [r3, #8]
 8011c14:	887a      	ldrh	r2, [r7, #2]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d301      	bcc.n	8011c1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	e102      	b.n	8011e24 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c22:	887a      	ldrh	r2, [r7, #2]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d906      	bls.n	8011c36 <tcp_split_unsent_seg+0x7e>
 8011c28:	4b80      	ldr	r3, [pc, #512]	; (8011e2c <tcp_split_unsent_seg+0x274>)
 8011c2a:	f240 325b 	movw	r2, #859	; 0x35b
 8011c2e:	4983      	ldr	r1, [pc, #524]	; (8011e3c <tcp_split_unsent_seg+0x284>)
 8011c30:	4880      	ldr	r0, [pc, #512]	; (8011e34 <tcp_split_unsent_seg+0x27c>)
 8011c32:	f006 fe5d 	bl	80188f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	891b      	ldrh	r3, [r3, #8]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d106      	bne.n	8011c4c <tcp_split_unsent_seg+0x94>
 8011c3e:	4b7b      	ldr	r3, [pc, #492]	; (8011e2c <tcp_split_unsent_seg+0x274>)
 8011c40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011c44:	497e      	ldr	r1, [pc, #504]	; (8011e40 <tcp_split_unsent_seg+0x288>)
 8011c46:	487b      	ldr	r0, [pc, #492]	; (8011e34 <tcp_split_unsent_seg+0x27c>)
 8011c48:	f006 fe52 	bl	80188f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	7a9b      	ldrb	r3, [r3, #10]
 8011c50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f003 0304 	and.w	r3, r3, #4
 8011c5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	891a      	ldrh	r2, [r3, #8]
 8011c62:	887b      	ldrh	r3, [r7, #2]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c68:	7bbb      	ldrb	r3, [r7, #14]
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	89bb      	ldrh	r3, [r7, #12]
 8011c6e:	4413      	add	r3, r2
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c76:	4619      	mov	r1, r3
 8011c78:	2036      	movs	r0, #54	; 0x36
 8011c7a:	f7fb fad1 	bl	800d220 <pbuf_alloc>
 8011c7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f000 80b7 	beq.w	8011df6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	891a      	ldrh	r2, [r3, #8]
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	891b      	ldrh	r3, [r3, #8]
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	887b      	ldrh	r3, [r7, #2]
 8011c98:	4413      	add	r3, r2
 8011c9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	6858      	ldr	r0, [r3, #4]
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	685a      	ldr	r2, [r3, #4]
 8011ca4:	7bbb      	ldrb	r3, [r7, #14]
 8011ca6:	18d1      	adds	r1, r2, r3
 8011ca8:	897b      	ldrh	r3, [r7, #10]
 8011caa:	89ba      	ldrh	r2, [r7, #12]
 8011cac:	f7fb ff92 	bl	800dbd4 <pbuf_copy_partial>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	89bb      	ldrh	r3, [r7, #12]
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	f040 809f 	bne.w	8011dfa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	899b      	ldrh	r3, [r3, #12]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fa faf3 	bl	800c2b0 <lwip_htons>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cd2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011cd8:	7efb      	ldrb	r3, [r7, #27]
 8011cda:	f003 0308 	and.w	r3, r3, #8
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d007      	beq.n	8011cf2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011ce2:	7efb      	ldrb	r3, [r7, #27]
 8011ce4:	f023 0308 	bic.w	r3, r3, #8
 8011ce8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011cea:	7ebb      	ldrb	r3, [r7, #26]
 8011cec:	f043 0308 	orr.w	r3, r3, #8
 8011cf0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011cf2:	7efb      	ldrb	r3, [r7, #27]
 8011cf4:	f003 0301 	and.w	r3, r3, #1
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d007      	beq.n	8011d0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011cfc:	7efb      	ldrb	r3, [r7, #27]
 8011cfe:	f023 0301 	bic.w	r3, r3, #1
 8011d02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011d04:	7ebb      	ldrb	r3, [r7, #26]
 8011d06:	f043 0301 	orr.w	r3, r3, #1
 8011d0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fa fae1 	bl	800c2da <lwip_htonl>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	887b      	ldrh	r3, [r7, #2]
 8011d1c:	18d1      	adds	r1, r2, r3
 8011d1e:	7eba      	ldrb	r2, [r7, #26]
 8011d20:	7bfb      	ldrb	r3, [r7, #15]
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	460b      	mov	r3, r1
 8011d26:	6939      	ldr	r1, [r7, #16]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7ff fea7 	bl	8011a7c <tcp_create_segment>
 8011d2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d063      	beq.n	8011dfe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fb fdd8 	bl	800d8f0 <pbuf_clen>
 8011d40:	4603      	mov	r3, r0
 8011d42:	461a      	mov	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d4a:	1a9b      	subs	r3, r3, r2
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	6858      	ldr	r0, [r3, #4]
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	891a      	ldrh	r2, [r3, #8]
 8011d5e:	89bb      	ldrh	r3, [r7, #12]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	4619      	mov	r1, r3
 8011d66:	f7fb fbb5 	bl	800d4d4 <pbuf_realloc>
  useg->len -= remainder;
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	891a      	ldrh	r2, [r3, #8]
 8011d6e:	89bb      	ldrh	r3, [r7, #12]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	b29a      	uxth	r2, r3
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	899b      	ldrh	r3, [r3, #12]
 8011d7e:	b29c      	uxth	r4, r3
 8011d80:	7efb      	ldrb	r3, [r7, #27]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fa fa93 	bl	800c2b0 <lwip_htons>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	4322      	orrs	r2, r4
 8011d94:	b292      	uxth	r2, r2
 8011d96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fb fda7 	bl	800d8f0 <pbuf_clen>
 8011da2:	4603      	mov	r3, r0
 8011da4:	461a      	mov	r2, r3
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dac:	4413      	add	r3, r2
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fb fd98 	bl	800d8f0 <pbuf_clen>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dca:	4413      	add	r3, r2
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	69fa      	ldr	r2, [r7, #28]
 8011de0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d103      	bne.n	8011df2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011df2:	2300      	movs	r3, #0
 8011df4:	e016      	b.n	8011e24 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011df6:	bf00      	nop
 8011df8:	e002      	b.n	8011e00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011dfa:	bf00      	nop
 8011dfc:	e000      	b.n	8011e00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011dfe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d006      	beq.n	8011e14 <tcp_split_unsent_seg+0x25c>
 8011e06:	4b09      	ldr	r3, [pc, #36]	; (8011e2c <tcp_split_unsent_seg+0x274>)
 8011e08:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011e0c:	490d      	ldr	r1, [pc, #52]	; (8011e44 <tcp_split_unsent_seg+0x28c>)
 8011e0e:	4809      	ldr	r0, [pc, #36]	; (8011e34 <tcp_split_unsent_seg+0x27c>)
 8011e10:	f006 fd6e 	bl	80188f0 <iprintf>
  if (p != NULL) {
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011e1a:	6938      	ldr	r0, [r7, #16]
 8011e1c:	f7fb fce0 	bl	800d7e0 <pbuf_free>
  }

  return ERR_MEM;
 8011e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3724      	adds	r7, #36	; 0x24
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd90      	pop	{r4, r7, pc}
 8011e2c:	0801f2a4 	.word	0x0801f2a4
 8011e30:	0801f638 	.word	0x0801f638
 8011e34:	0801f2f8 	.word	0x0801f2f8
 8011e38:	0801f65c 	.word	0x0801f65c
 8011e3c:	0801f680 	.word	0x0801f680
 8011e40:	0801f690 	.word	0x0801f690
 8011e44:	0801f6a0 	.word	0x0801f6a0

08011e48 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011e48:	b590      	push	{r4, r7, lr}
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <tcp_send_fin+0x1c>
 8011e56:	4b21      	ldr	r3, [pc, #132]	; (8011edc <tcp_send_fin+0x94>)
 8011e58:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011e5c:	4920      	ldr	r1, [pc, #128]	; (8011ee0 <tcp_send_fin+0x98>)
 8011e5e:	4821      	ldr	r0, [pc, #132]	; (8011ee4 <tcp_send_fin+0x9c>)
 8011e60:	f006 fd46 	bl	80188f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d02e      	beq.n	8011eca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	e002      	b.n	8011e7a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d1f8      	bne.n	8011e74 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	899b      	ldrh	r3, [r3, #12]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fa fa10 	bl	800c2b0 <lwip_htons>
 8011e90:	4603      	mov	r3, r0
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	f003 0307 	and.w	r3, r3, #7
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d116      	bne.n	8011eca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	899b      	ldrh	r3, [r3, #12]
 8011ea2:	b29c      	uxth	r4, r3
 8011ea4:	2001      	movs	r0, #1
 8011ea6:	f7fa fa03 	bl	800c2b0 <lwip_htons>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	461a      	mov	r2, r3
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	4322      	orrs	r2, r4
 8011eb4:	b292      	uxth	r2, r2
 8011eb6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	8b5b      	ldrh	r3, [r3, #26]
 8011ebc:	f043 0320 	orr.w	r3, r3, #32
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e004      	b.n	8011ed4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011eca:	2101      	movs	r1, #1
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 f80b 	bl	8011ee8 <tcp_enqueue_flags>
 8011ed2:	4603      	mov	r3, r0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3714      	adds	r7, #20
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd90      	pop	{r4, r7, pc}
 8011edc:	0801f2a4 	.word	0x0801f2a4
 8011ee0:	0801f6ac 	.word	0x0801f6ac
 8011ee4:	0801f2f8 	.word	0x0801f2f8

08011ee8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b08a      	sub	sp, #40	; 0x28
 8011eec:	af02      	add	r7, sp, #8
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011efc:	78fb      	ldrb	r3, [r7, #3]
 8011efe:	f003 0303 	and.w	r3, r3, #3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <tcp_enqueue_flags+0x2c>
 8011f06:	4b67      	ldr	r3, [pc, #412]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 8011f08:	f240 4212 	movw	r2, #1042	; 0x412
 8011f0c:	4966      	ldr	r1, [pc, #408]	; (80120a8 <tcp_enqueue_flags+0x1c0>)
 8011f0e:	4867      	ldr	r0, [pc, #412]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8011f10:	f006 fcee 	bl	80188f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d106      	bne.n	8011f28 <tcp_enqueue_flags+0x40>
 8011f1a:	4b62      	ldr	r3, [pc, #392]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 8011f1c:	f240 4213 	movw	r2, #1043	; 0x413
 8011f20:	4963      	ldr	r1, [pc, #396]	; (80120b0 <tcp_enqueue_flags+0x1c8>)
 8011f22:	4862      	ldr	r0, [pc, #392]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8011f24:	f006 fce4 	bl	80188f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011f28:	78fb      	ldrb	r3, [r7, #3]
 8011f2a:	f003 0302 	and.w	r3, r3, #2
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d001      	beq.n	8011f36 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011f32:	2301      	movs	r3, #1
 8011f34:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f36:	7ffb      	ldrb	r3, [r7, #31]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	f003 0304 	and.w	r3, r3, #4
 8011f40:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f42:	7dfb      	ldrb	r3, [r7, #23]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	2036      	movs	r0, #54	; 0x36
 8011f4e:	f7fb f967 	bl	800d220 <pbuf_alloc>
 8011f52:	6138      	str	r0, [r7, #16]
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d109      	bne.n	8011f6e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	8b5b      	ldrh	r3, [r3, #26]
 8011f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f68:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6c:	e095      	b.n	801209a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	895a      	ldrh	r2, [r3, #10]
 8011f72:	7dfb      	ldrb	r3, [r7, #23]
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d206      	bcs.n	8011f88 <tcp_enqueue_flags+0xa0>
 8011f7a:	4b4a      	ldr	r3, [pc, #296]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 8011f7c:	f240 423a 	movw	r2, #1082	; 0x43a
 8011f80:	494c      	ldr	r1, [pc, #304]	; (80120b4 <tcp_enqueue_flags+0x1cc>)
 8011f82:	484a      	ldr	r0, [pc, #296]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8011f84:	f006 fcb4 	bl	80188f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f8c:	78fa      	ldrb	r2, [r7, #3]
 8011f8e:	7ffb      	ldrb	r3, [r7, #31]
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	460b      	mov	r3, r1
 8011f94:	6939      	ldr	r1, [r7, #16]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7ff fd70 	bl	8011a7c <tcp_create_segment>
 8011f9c:	60f8      	str	r0, [r7, #12]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d109      	bne.n	8011fb8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	8b5b      	ldrh	r3, [r3, #26]
 8011fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fac:	b29a      	uxth	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb6:	e070      	b.n	801209a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	f003 0303 	and.w	r3, r3, #3
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d006      	beq.n	8011fd2 <tcp_enqueue_flags+0xea>
 8011fc4:	4b37      	ldr	r3, [pc, #220]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 8011fc6:	f240 4242 	movw	r2, #1090	; 0x442
 8011fca:	493b      	ldr	r1, [pc, #236]	; (80120b8 <tcp_enqueue_flags+0x1d0>)
 8011fcc:	4837      	ldr	r0, [pc, #220]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8011fce:	f006 fc8f 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	891b      	ldrh	r3, [r3, #8]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d006      	beq.n	8011fe8 <tcp_enqueue_flags+0x100>
 8011fda:	4b32      	ldr	r3, [pc, #200]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 8011fdc:	f240 4243 	movw	r2, #1091	; 0x443
 8011fe0:	4936      	ldr	r1, [pc, #216]	; (80120bc <tcp_enqueue_flags+0x1d4>)
 8011fe2:	4832      	ldr	r0, [pc, #200]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8011fe4:	f006 fc84 	bl	80188f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d103      	bne.n	8011ff8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	68fa      	ldr	r2, [r7, #12]
 8011ff4:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ff6:	e00d      	b.n	8012014 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ffc:	61bb      	str	r3, [r7, #24]
 8011ffe:	e002      	b.n	8012006 <tcp_enqueue_flags+0x11e>
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	61bb      	str	r3, [r7, #24]
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1f8      	bne.n	8012000 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801201c:	78fb      	ldrb	r3, [r7, #3]
 801201e:	f003 0302 	and.w	r3, r3, #2
 8012022:	2b00      	cmp	r3, #0
 8012024:	d104      	bne.n	8012030 <tcp_enqueue_flags+0x148>
 8012026:	78fb      	ldrb	r3, [r7, #3]
 8012028:	f003 0301 	and.w	r3, r3, #1
 801202c:	2b00      	cmp	r3, #0
 801202e:	d004      	beq.n	801203a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012034:	1c5a      	adds	r2, r3, #1
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801203a:	78fb      	ldrb	r3, [r7, #3]
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	2b00      	cmp	r3, #0
 8012042:	d006      	beq.n	8012052 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8b5b      	ldrh	r3, [r3, #26]
 8012048:	f043 0320 	orr.w	r3, r3, #32
 801204c:	b29a      	uxth	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	4618      	mov	r0, r3
 8012058:	f7fb fc4a 	bl	800d8f0 <pbuf_clen>
 801205c:	4603      	mov	r3, r0
 801205e:	461a      	mov	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012066:	4413      	add	r3, r2
 8012068:	b29a      	uxth	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00e      	beq.n	8012098 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10a      	bne.n	8012098 <tcp_enqueue_flags+0x1b0>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012086:	2b00      	cmp	r3, #0
 8012088:	d106      	bne.n	8012098 <tcp_enqueue_flags+0x1b0>
 801208a:	4b06      	ldr	r3, [pc, #24]	; (80120a4 <tcp_enqueue_flags+0x1bc>)
 801208c:	f240 4266 	movw	r2, #1126	; 0x466
 8012090:	490b      	ldr	r1, [pc, #44]	; (80120c0 <tcp_enqueue_flags+0x1d8>)
 8012092:	4806      	ldr	r0, [pc, #24]	; (80120ac <tcp_enqueue_flags+0x1c4>)
 8012094:	f006 fc2c 	bl	80188f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	0801f2a4 	.word	0x0801f2a4
 80120a8:	0801f6c8 	.word	0x0801f6c8
 80120ac:	0801f2f8 	.word	0x0801f2f8
 80120b0:	0801f720 	.word	0x0801f720
 80120b4:	0801f740 	.word	0x0801f740
 80120b8:	0801f77c 	.word	0x0801f77c
 80120bc:	0801f794 	.word	0x0801f794
 80120c0:	0801f7c0 	.word	0x0801f7c0

080120c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80120c4:	b5b0      	push	{r4, r5, r7, lr}
 80120c6:	b08a      	sub	sp, #40	; 0x28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <tcp_output+0x1c>
 80120d2:	4ba0      	ldr	r3, [pc, #640]	; (8012354 <tcp_output+0x290>)
 80120d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80120d8:	499f      	ldr	r1, [pc, #636]	; (8012358 <tcp_output+0x294>)
 80120da:	48a0      	ldr	r0, [pc, #640]	; (801235c <tcp_output+0x298>)
 80120dc:	f006 fc08 	bl	80188f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	7d1b      	ldrb	r3, [r3, #20]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d106      	bne.n	80120f6 <tcp_output+0x32>
 80120e8:	4b9a      	ldr	r3, [pc, #616]	; (8012354 <tcp_output+0x290>)
 80120ea:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80120ee:	499c      	ldr	r1, [pc, #624]	; (8012360 <tcp_output+0x29c>)
 80120f0:	489a      	ldr	r0, [pc, #616]	; (801235c <tcp_output+0x298>)
 80120f2:	f006 fbfd 	bl	80188f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80120f6:	4b9b      	ldr	r3, [pc, #620]	; (8012364 <tcp_output+0x2a0>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d101      	bne.n	8012104 <tcp_output+0x40>
    return ERR_OK;
 8012100:	2300      	movs	r3, #0
 8012102:	e1d2      	b.n	80124aa <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012110:	429a      	cmp	r2, r3
 8012112:	d203      	bcs.n	801211c <tcp_output+0x58>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801211a:	e002      	b.n	8012122 <tcp_output+0x5e>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012122:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012128:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10b      	bne.n	8012148 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	8b5b      	ldrh	r3, [r3, #26]
 8012134:	f003 0302 	and.w	r3, r3, #2
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 81a9 	beq.w	8012490 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 fdd4 	bl	8012cec <tcp_send_empty_ack>
 8012144:	4603      	mov	r3, r0
 8012146:	e1b0      	b.n	80124aa <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012148:	6879      	ldr	r1, [r7, #4]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3304      	adds	r3, #4
 801214e:	461a      	mov	r2, r3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7ff fc77 	bl	8011a44 <tcp_route>
 8012156:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d102      	bne.n	8012164 <tcp_output+0xa0>
    return ERR_RTE;
 801215e:	f06f 0303 	mvn.w	r3, #3
 8012162:	e1a2      	b.n	80124aa <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d003      	beq.n	8012172 <tcp_output+0xae>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d111      	bne.n	8012196 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <tcp_output+0xba>
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	3304      	adds	r3, #4
 801217c:	e000      	b.n	8012180 <tcp_output+0xbc>
 801217e:	2300      	movs	r3, #0
 8012180:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d102      	bne.n	801218e <tcp_output+0xca>
      return ERR_RTE;
 8012188:	f06f 0303 	mvn.w	r3, #3
 801218c:	e18d      	b.n	80124aa <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	4618      	mov	r0, r3
 801219e:	f7fa f89c 	bl	800c2da <lwip_htonl>
 80121a2:	4602      	mov	r2, r0
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ac:	8912      	ldrh	r2, [r2, #8]
 80121ae:	4413      	add	r3, r2
 80121b0:	69ba      	ldr	r2, [r7, #24]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d227      	bcs.n	8012206 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121bc:	461a      	mov	r2, r3
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d114      	bne.n	80121ee <tcp_output+0x12a>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d110      	bne.n	80121ee <tcp_output+0x12a>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10b      	bne.n	80121ee <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2200      	movs	r2, #0
 80121da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f000 814c 	beq.w	8012494 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 fd75 	bl	8012cec <tcp_send_empty_ack>
 8012202:	4603      	mov	r3, r0
 8012204:	e151      	b.n	80124aa <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	2b00      	cmp	r3, #0
 8012218:	f000 811b 	beq.w	8012452 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801221c:	e002      	b.n	8012224 <tcp_output+0x160>
 801221e:	6a3b      	ldr	r3, [r7, #32]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	623b      	str	r3, [r7, #32]
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1f8      	bne.n	801221e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801222c:	e111      	b.n	8012452 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	899b      	ldrh	r3, [r3, #12]
 8012234:	b29b      	uxth	r3, r3
 8012236:	4618      	mov	r0, r3
 8012238:	f7fa f83a 	bl	800c2b0 <lwip_htons>
 801223c:	4603      	mov	r3, r0
 801223e:	b2db      	uxtb	r3, r3
 8012240:	f003 0304 	and.w	r3, r3, #4
 8012244:	2b00      	cmp	r3, #0
 8012246:	d006      	beq.n	8012256 <tcp_output+0x192>
 8012248:	4b42      	ldr	r3, [pc, #264]	; (8012354 <tcp_output+0x290>)
 801224a:	f240 5237 	movw	r2, #1335	; 0x537
 801224e:	4946      	ldr	r1, [pc, #280]	; (8012368 <tcp_output+0x2a4>)
 8012250:	4842      	ldr	r0, [pc, #264]	; (801235c <tcp_output+0x298>)
 8012252:	f006 fb4d 	bl	80188f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801225a:	2b00      	cmp	r3, #0
 801225c:	d01f      	beq.n	801229e <tcp_output+0x1da>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	8b5b      	ldrh	r3, [r3, #26]
 8012262:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012266:	2b00      	cmp	r3, #0
 8012268:	d119      	bne.n	801229e <tcp_output+0x1da>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801226e:	2b00      	cmp	r3, #0
 8012270:	d00b      	beq.n	801228a <tcp_output+0x1c6>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d110      	bne.n	801229e <tcp_output+0x1da>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012280:	891a      	ldrh	r2, [r3, #8]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012286:	429a      	cmp	r2, r3
 8012288:	d209      	bcs.n	801229e <tcp_output+0x1da>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012290:	2b00      	cmp	r3, #0
 8012292:	d004      	beq.n	801229e <tcp_output+0x1da>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801229a:	2b0f      	cmp	r3, #15
 801229c:	d901      	bls.n	80122a2 <tcp_output+0x1de>
 801229e:	2301      	movs	r3, #1
 80122a0:	e000      	b.n	80122a4 <tcp_output+0x1e0>
 80122a2:	2300      	movs	r3, #0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d106      	bne.n	80122b6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	8b5b      	ldrh	r3, [r3, #26]
 80122ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f000 80e3 	beq.w	801247c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	7d1b      	ldrb	r3, [r3, #20]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d00d      	beq.n	80122da <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	899b      	ldrh	r3, [r3, #12]
 80122c4:	b29c      	uxth	r4, r3
 80122c6:	2010      	movs	r0, #16
 80122c8:	f7f9 fff2 	bl	800c2b0 <lwip_htons>
 80122cc:	4603      	mov	r3, r0
 80122ce:	461a      	mov	r2, r3
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	4322      	orrs	r2, r4
 80122d6:	b292      	uxth	r2, r2
 80122d8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80122da:	697a      	ldr	r2, [r7, #20]
 80122dc:	6879      	ldr	r1, [r7, #4]
 80122de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122e0:	f000 f908 	bl	80124f4 <tcp_output_segment>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80122e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	835a      	strh	r2, [r3, #26]
      return err;
 80122fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012302:	e0d2      	b.n	80124aa <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	7d1b      	ldrb	r3, [r3, #20]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d006      	beq.n	8012322 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	8b5b      	ldrh	r3, [r3, #26]
 8012318:	f023 0303 	bic.w	r3, r3, #3
 801231c:	b29a      	uxth	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	4618      	mov	r0, r3
 801232a:	f7f9 ffd6 	bl	800c2da <lwip_htonl>
 801232e:	4604      	mov	r4, r0
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	891b      	ldrh	r3, [r3, #8]
 8012334:	461d      	mov	r5, r3
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	899b      	ldrh	r3, [r3, #12]
 801233c:	b29b      	uxth	r3, r3
 801233e:	4618      	mov	r0, r3
 8012340:	f7f9 ffb6 	bl	800c2b0 <lwip_htons>
 8012344:	4603      	mov	r3, r0
 8012346:	b2db      	uxtb	r3, r3
 8012348:	f003 0303 	and.w	r3, r3, #3
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00d      	beq.n	801236c <tcp_output+0x2a8>
 8012350:	2301      	movs	r3, #1
 8012352:	e00c      	b.n	801236e <tcp_output+0x2aa>
 8012354:	0801f2a4 	.word	0x0801f2a4
 8012358:	0801f7e8 	.word	0x0801f7e8
 801235c:	0801f2f8 	.word	0x0801f2f8
 8012360:	0801f800 	.word	0x0801f800
 8012364:	20007394 	.word	0x20007394
 8012368:	0801f828 	.word	0x0801f828
 801236c:	2300      	movs	r3, #0
 801236e:	442b      	add	r3, r5
 8012370:	4423      	add	r3, r4
 8012372:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	2b00      	cmp	r3, #0
 801237e:	da02      	bge.n	8012386 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012388:	891b      	ldrh	r3, [r3, #8]
 801238a:	461c      	mov	r4, r3
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	899b      	ldrh	r3, [r3, #12]
 8012392:	b29b      	uxth	r3, r3
 8012394:	4618      	mov	r0, r3
 8012396:	f7f9 ff8b 	bl	800c2b0 <lwip_htons>
 801239a:	4603      	mov	r3, r0
 801239c:	b2db      	uxtb	r3, r3
 801239e:	f003 0303 	and.w	r3, r3, #3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <tcp_output+0x2e6>
 80123a6:	2301      	movs	r3, #1
 80123a8:	e000      	b.n	80123ac <tcp_output+0x2e8>
 80123aa:	2300      	movs	r3, #0
 80123ac:	4423      	add	r3, r4
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d049      	beq.n	8012446 <tcp_output+0x382>
      seg->next = NULL;
 80123b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b4:	2200      	movs	r2, #0
 80123b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d105      	bne.n	80123cc <tcp_output+0x308>
        pcb->unacked = seg;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80123c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c8:	623b      	str	r3, [r7, #32]
 80123ca:	e03f      	b.n	801244c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7f9 ff81 	bl	800c2da <lwip_htonl>
 80123d8:	4604      	mov	r4, r0
 80123da:	6a3b      	ldr	r3, [r7, #32]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7f9 ff7a 	bl	800c2da <lwip_htonl>
 80123e6:	4603      	mov	r3, r0
 80123e8:	1ae3      	subs	r3, r4, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da24      	bge.n	8012438 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	3370      	adds	r3, #112	; 0x70
 80123f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123f4:	e002      	b.n	80123fc <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d011      	beq.n	8012428 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	f7f9 ff64 	bl	800c2da <lwip_htonl>
 8012412:	4604      	mov	r4, r0
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	f7f9 ff5d 	bl	800c2da <lwip_htonl>
 8012420:	4603      	mov	r3, r0
 8012422:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012424:	2b00      	cmp	r3, #0
 8012426:	dbe6      	blt.n	80123f6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	e009      	b.n	801244c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801243c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801243e:	6a3b      	ldr	r3, [r7, #32]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	623b      	str	r3, [r7, #32]
 8012444:	e002      	b.n	801244c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012448:	f7fc fc42 	bl	800ecd0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012450:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012454:	2b00      	cmp	r3, #0
 8012456:	d012      	beq.n	801247e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f7f9 ff3b 	bl	800c2da <lwip_htonl>
 8012464:	4602      	mov	r2, r0
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801246e:	8912      	ldrh	r2, [r2, #8]
 8012470:	4413      	add	r3, r2
  while (seg != NULL &&
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	429a      	cmp	r2, r3
 8012476:	f4bf aeda 	bcs.w	801222e <tcp_output+0x16a>
 801247a:	e000      	b.n	801247e <tcp_output+0x3ba>
      break;
 801247c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012482:	2b00      	cmp	r3, #0
 8012484:	d108      	bne.n	8012498 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801248e:	e004      	b.n	801249a <tcp_output+0x3d6>
    goto output_done;
 8012490:	bf00      	nop
 8012492:	e002      	b.n	801249a <tcp_output+0x3d6>
    goto output_done;
 8012494:	bf00      	nop
 8012496:	e000      	b.n	801249a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012498:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	8b5b      	ldrh	r3, [r3, #26]
 801249e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80124a8:	2300      	movs	r3, #0
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3728      	adds	r7, #40	; 0x28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bdb0      	pop	{r4, r5, r7, pc}
 80124b2:	bf00      	nop

080124b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_output_segment_busy+0x1c>
 80124c2:	4b09      	ldr	r3, [pc, #36]	; (80124e8 <tcp_output_segment_busy+0x34>)
 80124c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80124c8:	4908      	ldr	r1, [pc, #32]	; (80124ec <tcp_output_segment_busy+0x38>)
 80124ca:	4809      	ldr	r0, [pc, #36]	; (80124f0 <tcp_output_segment_busy+0x3c>)
 80124cc:	f006 fa10 	bl	80188f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	7b9b      	ldrb	r3, [r3, #14]
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d001      	beq.n	80124de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80124da:	2301      	movs	r3, #1
 80124dc:	e000      	b.n	80124e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80124de:	2300      	movs	r3, #0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	0801f2a4 	.word	0x0801f2a4
 80124ec:	0801f840 	.word	0x0801f840
 80124f0:	0801f2f8 	.word	0x0801f2f8

080124f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80124f4:	b5b0      	push	{r4, r5, r7, lr}
 80124f6:	b08c      	sub	sp, #48	; 0x30
 80124f8:	af04      	add	r7, sp, #16
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <tcp_output_segment+0x20>
 8012506:	4b64      	ldr	r3, [pc, #400]	; (8012698 <tcp_output_segment+0x1a4>)
 8012508:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801250c:	4963      	ldr	r1, [pc, #396]	; (801269c <tcp_output_segment+0x1a8>)
 801250e:	4864      	ldr	r0, [pc, #400]	; (80126a0 <tcp_output_segment+0x1ac>)
 8012510:	f006 f9ee 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <tcp_output_segment+0x34>
 801251a:	4b5f      	ldr	r3, [pc, #380]	; (8012698 <tcp_output_segment+0x1a4>)
 801251c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012520:	4960      	ldr	r1, [pc, #384]	; (80126a4 <tcp_output_segment+0x1b0>)
 8012522:	485f      	ldr	r0, [pc, #380]	; (80126a0 <tcp_output_segment+0x1ac>)
 8012524:	f006 f9e4 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d106      	bne.n	801253c <tcp_output_segment+0x48>
 801252e:	4b5a      	ldr	r3, [pc, #360]	; (8012698 <tcp_output_segment+0x1a4>)
 8012530:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012534:	495c      	ldr	r1, [pc, #368]	; (80126a8 <tcp_output_segment+0x1b4>)
 8012536:	485a      	ldr	r0, [pc, #360]	; (80126a0 <tcp_output_segment+0x1ac>)
 8012538:	f006 f9da 	bl	80188f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f7ff ffb9 	bl	80124b4 <tcp_output_segment_busy>
 8012542:	4603      	mov	r3, r0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d001      	beq.n	801254c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012548:	2300      	movs	r3, #0
 801254a:	e0a0      	b.n	801268e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68dc      	ldr	r4, [r3, #12]
 8012554:	4610      	mov	r0, r2
 8012556:	f7f9 fec0 	bl	800c2da <lwip_htonl>
 801255a:	4603      	mov	r3, r0
 801255c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	68dc      	ldr	r4, [r3, #12]
 8012566:	4610      	mov	r0, r2
 8012568:	f7f9 fea2 	bl	800c2b0 <lwip_htons>
 801256c:	4603      	mov	r3, r0
 801256e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012578:	441a      	add	r2, r3
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	68db      	ldr	r3, [r3, #12]
 8012582:	3314      	adds	r3, #20
 8012584:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	7a9b      	ldrb	r3, [r3, #10]
 801258a:	f003 0301 	and.w	r3, r3, #1
 801258e:	2b00      	cmp	r3, #0
 8012590:	d015      	beq.n	80125be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	3304      	adds	r3, #4
 8012596:	461a      	mov	r2, r3
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 801259e:	f7fc fe8d 	bl	800f2bc <tcp_eff_send_mss_netif>
 80125a2:	4603      	mov	r3, r0
 80125a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80125a6:	8b7b      	ldrh	r3, [r7, #26]
 80125a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7f9 fe94 	bl	800c2da <lwip_htonl>
 80125b2:	4602      	mov	r2, r0
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	3304      	adds	r3, #4
 80125bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	da02      	bge.n	80125ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2200      	movs	r2, #0
 80125cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10c      	bne.n	80125f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80125d6:	4b35      	ldr	r3, [pc, #212]	; (80126ac <tcp_output_segment+0x1b8>)
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7f9 fe78 	bl	800c2da <lwip_htonl>
 80125ea:	4602      	mov	r2, r0
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	461a      	mov	r2, r3
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	8959      	ldrh	r1, [r3, #10]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	8b3a      	ldrh	r2, [r7, #24]
 801260c:	1a8a      	subs	r2, r1, r2
 801260e:	b292      	uxth	r2, r2
 8012610:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	8919      	ldrh	r1, [r3, #8]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	8b3a      	ldrh	r2, [r7, #24]
 801261e:	1a8a      	subs	r2, r1, r2
 8012620:	b292      	uxth	r2, r2
 8012622:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	68d2      	ldr	r2, [r2, #12]
 801262c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	741a      	strb	r2, [r3, #16]
 8012636:	2200      	movs	r2, #0
 8012638:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	68db      	ldr	r3, [r3, #12]
 801263e:	f103 0214 	add.w	r2, r3, #20
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	7a9b      	ldrb	r3, [r3, #10]
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	f003 0304 	and.w	r3, r3, #4
 801264c:	4413      	add	r3, r2
 801264e:	69fa      	ldr	r2, [r7, #28]
 8012650:	429a      	cmp	r2, r3
 8012652:	d006      	beq.n	8012662 <tcp_output_segment+0x16e>
 8012654:	4b10      	ldr	r3, [pc, #64]	; (8012698 <tcp_output_segment+0x1a4>)
 8012656:	f240 621c 	movw	r2, #1564	; 0x61c
 801265a:	4915      	ldr	r1, [pc, #84]	; (80126b0 <tcp_output_segment+0x1bc>)
 801265c:	4810      	ldr	r0, [pc, #64]	; (80126a0 <tcp_output_segment+0x1ac>)
 801265e:	f006 f947 	bl	80188f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	6858      	ldr	r0, [r3, #4]
 8012666:	68b9      	ldr	r1, [r7, #8]
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	1d1c      	adds	r4, r3, #4
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	7add      	ldrb	r5, [r3, #11]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	7a9b      	ldrb	r3, [r3, #10]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	9202      	str	r2, [sp, #8]
 8012678:	2206      	movs	r2, #6
 801267a:	9201      	str	r2, [sp, #4]
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	462b      	mov	r3, r5
 8012680:	4622      	mov	r2, r4
 8012682:	f004 fb71 	bl	8016d68 <ip4_output_if>
 8012686:	4603      	mov	r3, r0
 8012688:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801268a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3720      	adds	r7, #32
 8012692:	46bd      	mov	sp, r7
 8012694:	bdb0      	pop	{r4, r5, r7, pc}
 8012696:	bf00      	nop
 8012698:	0801f2a4 	.word	0x0801f2a4
 801269c:	0801f868 	.word	0x0801f868
 80126a0:	0801f2f8 	.word	0x0801f2f8
 80126a4:	0801f888 	.word	0x0801f888
 80126a8:	0801f8a8 	.word	0x0801f8a8
 80126ac:	20007384 	.word	0x20007384
 80126b0:	0801f8cc 	.word	0x0801f8cc

080126b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80126b4:	b5b0      	push	{r4, r5, r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_rexmit_rto_prepare+0x1c>
 80126c2:	4b31      	ldr	r3, [pc, #196]	; (8012788 <tcp_rexmit_rto_prepare+0xd4>)
 80126c4:	f240 6263 	movw	r2, #1635	; 0x663
 80126c8:	4930      	ldr	r1, [pc, #192]	; (801278c <tcp_rexmit_rto_prepare+0xd8>)
 80126ca:	4831      	ldr	r0, [pc, #196]	; (8012790 <tcp_rexmit_rto_prepare+0xdc>)
 80126cc:	f006 f910 	bl	80188f0 <iprintf>

  if (pcb->unacked == NULL) {
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d102      	bne.n	80126de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80126d8:	f06f 0305 	mvn.w	r3, #5
 80126dc:	e050      	b.n	8012780 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126e2:	60fb      	str	r3, [r7, #12]
 80126e4:	e00b      	b.n	80126fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80126e6:	68f8      	ldr	r0, [r7, #12]
 80126e8:	f7ff fee4 	bl	80124b4 <tcp_output_segment_busy>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d002      	beq.n	80126f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80126f2:	f06f 0305 	mvn.w	r3, #5
 80126f6:	e043      	b.n	8012780 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	60fb      	str	r3, [r7, #12]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d1ef      	bne.n	80126e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f7ff fed4 	bl	80124b4 <tcp_output_segment_busy>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d002      	beq.n	8012718 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012712:	f06f 0305 	mvn.w	r3, #5
 8012716:	e033      	b.n	8012780 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2200      	movs	r2, #0
 801272c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	8b5b      	ldrh	r3, [r3, #26]
 8012732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	f7f9 fdc9 	bl	800c2da <lwip_htonl>
 8012748:	4604      	mov	r4, r0
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	891b      	ldrh	r3, [r3, #8]
 801274e:	461d      	mov	r5, r3
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	899b      	ldrh	r3, [r3, #12]
 8012756:	b29b      	uxth	r3, r3
 8012758:	4618      	mov	r0, r3
 801275a:	f7f9 fda9 	bl	800c2b0 <lwip_htons>
 801275e:	4603      	mov	r3, r0
 8012760:	b2db      	uxtb	r3, r3
 8012762:	f003 0303 	and.w	r3, r3, #3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <tcp_rexmit_rto_prepare+0xba>
 801276a:	2301      	movs	r3, #1
 801276c:	e000      	b.n	8012770 <tcp_rexmit_rto_prepare+0xbc>
 801276e:	2300      	movs	r3, #0
 8012770:	442b      	add	r3, r5
 8012772:	18e2      	adds	r2, r4, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bdb0      	pop	{r4, r5, r7, pc}
 8012788:	0801f2a4 	.word	0x0801f2a4
 801278c:	0801f8e0 	.word	0x0801f8e0
 8012790:	0801f2f8 	.word	0x0801f2f8

08012794 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d106      	bne.n	80127b0 <tcp_rexmit_rto_commit+0x1c>
 80127a2:	4b0d      	ldr	r3, [pc, #52]	; (80127d8 <tcp_rexmit_rto_commit+0x44>)
 80127a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80127a8:	490c      	ldr	r1, [pc, #48]	; (80127dc <tcp_rexmit_rto_commit+0x48>)
 80127aa:	480d      	ldr	r0, [pc, #52]	; (80127e0 <tcp_rexmit_rto_commit+0x4c>)
 80127ac:	f006 f8a0 	bl	80188f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127b6:	2bff      	cmp	r3, #255	; 0xff
 80127b8:	d007      	beq.n	80127ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127c0:	3301      	adds	r3, #1
 80127c2:	b2da      	uxtb	r2, r3
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7ff fc7a 	bl	80120c4 <tcp_output>
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	0801f2a4 	.word	0x0801f2a4
 80127dc:	0801f904 	.word	0x0801f904
 80127e0:	0801f2f8 	.word	0x0801f2f8

080127e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <tcp_rexmit_rto+0x1c>
 80127f2:	4b0a      	ldr	r3, [pc, #40]	; (801281c <tcp_rexmit_rto+0x38>)
 80127f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80127f8:	4909      	ldr	r1, [pc, #36]	; (8012820 <tcp_rexmit_rto+0x3c>)
 80127fa:	480a      	ldr	r0, [pc, #40]	; (8012824 <tcp_rexmit_rto+0x40>)
 80127fc:	f006 f878 	bl	80188f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff ff57 	bl	80126b4 <tcp_rexmit_rto_prepare>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d102      	bne.n	8012812 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7ff ffc1 	bl	8012794 <tcp_rexmit_rto_commit>
  }
}
 8012812:	bf00      	nop
 8012814:	3708      	adds	r7, #8
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	0801f2a4 	.word	0x0801f2a4
 8012820:	0801f928 	.word	0x0801f928
 8012824:	0801f2f8 	.word	0x0801f2f8

08012828 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012828:	b590      	push	{r4, r7, lr}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d106      	bne.n	8012844 <tcp_rexmit+0x1c>
 8012836:	4b2f      	ldr	r3, [pc, #188]	; (80128f4 <tcp_rexmit+0xcc>)
 8012838:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801283c:	492e      	ldr	r1, [pc, #184]	; (80128f8 <tcp_rexmit+0xd0>)
 801283e:	482f      	ldr	r0, [pc, #188]	; (80128fc <tcp_rexmit+0xd4>)
 8012840:	f006 f856 	bl	80188f0 <iprintf>

  if (pcb->unacked == NULL) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801284c:	f06f 0305 	mvn.w	r3, #5
 8012850:	e04c      	b.n	80128ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012856:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012858:	68b8      	ldr	r0, [r7, #8]
 801285a:	f7ff fe2b 	bl	80124b4 <tcp_output_segment_busy>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012864:	f06f 0305 	mvn.w	r3, #5
 8012868:	e040      	b.n	80128ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	681a      	ldr	r2, [r3, #0]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	336c      	adds	r3, #108	; 0x6c
 8012876:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012878:	e002      	b.n	8012880 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d011      	beq.n	80128ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	68db      	ldr	r3, [r3, #12]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	f7f9 fd22 	bl	800c2da <lwip_htonl>
 8012896:	4604      	mov	r4, r0
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	68db      	ldr	r3, [r3, #12]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	4618      	mov	r0, r3
 80128a0:	f7f9 fd1b 	bl	800c2da <lwip_htonl>
 80128a4:	4603      	mov	r3, r0
 80128a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dbe6      	blt.n	801287a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d103      	bne.n	80128ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128d0:	2bff      	cmp	r3, #255	; 0xff
 80128d2:	d007      	beq.n	80128e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128da:	3301      	adds	r3, #1
 80128dc:	b2da      	uxtb	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2200      	movs	r2, #0
 80128e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3714      	adds	r7, #20
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd90      	pop	{r4, r7, pc}
 80128f4:	0801f2a4 	.word	0x0801f2a4
 80128f8:	0801f944 	.word	0x0801f944
 80128fc:	0801f2f8 	.word	0x0801f2f8

08012900 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d106      	bne.n	801291c <tcp_rexmit_fast+0x1c>
 801290e:	4b2e      	ldr	r3, [pc, #184]	; (80129c8 <tcp_rexmit_fast+0xc8>)
 8012910:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012914:	492d      	ldr	r1, [pc, #180]	; (80129cc <tcp_rexmit_fast+0xcc>)
 8012916:	482e      	ldr	r0, [pc, #184]	; (80129d0 <tcp_rexmit_fast+0xd0>)
 8012918:	f005 ffea 	bl	80188f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012920:	2b00      	cmp	r3, #0
 8012922:	d04d      	beq.n	80129c0 <tcp_rexmit_fast+0xc0>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	8b5b      	ldrh	r3, [r3, #26]
 8012928:	f003 0304 	and.w	r3, r3, #4
 801292c:	2b00      	cmp	r3, #0
 801292e:	d147      	bne.n	80129c0 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7ff ff79 	bl	8012828 <tcp_rexmit>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d141      	bne.n	80129c0 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012948:	429a      	cmp	r2, r3
 801294a:	d207      	bcs.n	801295c <tcp_rexmit_fast+0x5c>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012952:	0fda      	lsrs	r2, r3, #31
 8012954:	4413      	add	r3, r2
 8012956:	105b      	asrs	r3, r3, #1
 8012958:	b29b      	uxth	r3, r3
 801295a:	e006      	b.n	801296a <tcp_rexmit_fast+0x6a>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012962:	0fda      	lsrs	r2, r3, #31
 8012964:	4413      	add	r3, r2
 8012966:	105b      	asrs	r3, r3, #1
 8012968:	b29b      	uxth	r3, r3
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012976:	461a      	mov	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	429a      	cmp	r2, r3
 8012980:	d206      	bcs.n	8012990 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801299a:	4619      	mov	r1, r3
 801299c:	0049      	lsls	r1, r1, #1
 801299e:	440b      	add	r3, r1
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	4413      	add	r3, r2
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	8b5b      	ldrh	r3, [r3, #26]
 80129b0:	f043 0304 	orr.w	r3, r3, #4
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80129c0:	bf00      	nop
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	0801f2a4 	.word	0x0801f2a4
 80129cc:	0801f95c 	.word	0x0801f95c
 80129d0:	0801f2f8 	.word	0x0801f2f8

080129d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b086      	sub	sp, #24
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	607b      	str	r3, [r7, #4]
 80129de:	460b      	mov	r3, r1
 80129e0:	817b      	strh	r3, [r7, #10]
 80129e2:	4613      	mov	r3, r2
 80129e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80129e6:	897a      	ldrh	r2, [r7, #10]
 80129e8:	893b      	ldrh	r3, [r7, #8]
 80129ea:	4413      	add	r3, r2
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	3314      	adds	r3, #20
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129f6:	4619      	mov	r1, r3
 80129f8:	2022      	movs	r0, #34	; 0x22
 80129fa:	f7fa fc11 	bl	800d220 <pbuf_alloc>
 80129fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d04e      	beq.n	8012aa4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	895b      	ldrh	r3, [r3, #10]
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	897b      	ldrh	r3, [r7, #10]
 8012a0e:	3314      	adds	r3, #20
 8012a10:	429a      	cmp	r2, r3
 8012a12:	da06      	bge.n	8012a22 <tcp_output_alloc_header_common+0x4e>
 8012a14:	4b26      	ldr	r3, [pc, #152]	; (8012ab0 <tcp_output_alloc_header_common+0xdc>)
 8012a16:	f240 7224 	movw	r2, #1828	; 0x724
 8012a1a:	4926      	ldr	r1, [pc, #152]	; (8012ab4 <tcp_output_alloc_header_common+0xe0>)
 8012a1c:	4826      	ldr	r0, [pc, #152]	; (8012ab8 <tcp_output_alloc_header_common+0xe4>)
 8012a1e:	f005 ff67 	bl	80188f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012a28:	8c3b      	ldrh	r3, [r7, #32]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7f9 fc40 	bl	800c2b0 <lwip_htons>
 8012a30:	4603      	mov	r3, r0
 8012a32:	461a      	mov	r2, r3
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f9 fc38 	bl	800c2b0 <lwip_htons>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f7f9 fc43 	bl	800c2da <lwip_htonl>
 8012a54:	4602      	mov	r2, r0
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012a5a:	897b      	ldrh	r3, [r7, #10]
 8012a5c:	089b      	lsrs	r3, r3, #2
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	3305      	adds	r3, #5
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	031b      	lsls	r3, r3, #12
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7f9 fc1c 	bl	800c2b0 <lwip_htons>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012a80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f9 fc14 	bl	800c2b0 <lwip_htons>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	2200      	movs	r2, #0
 8012a94:	741a      	strb	r2, [r3, #16]
 8012a96:	2200      	movs	r2, #0
 8012a98:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	749a      	strb	r2, [r3, #18]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012aa4:	697b      	ldr	r3, [r7, #20]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801f2a4 	.word	0x0801f2a4
 8012ab4:	0801f97c 	.word	0x0801f97c
 8012ab8:	0801f2f8 	.word	0x0801f2f8

08012abc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012abc:	b5b0      	push	{r4, r5, r7, lr}
 8012abe:	b08a      	sub	sp, #40	; 0x28
 8012ac0:	af04      	add	r7, sp, #16
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	607b      	str	r3, [r7, #4]
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	817b      	strh	r3, [r7, #10]
 8012aca:	4613      	mov	r3, r2
 8012acc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d106      	bne.n	8012ae2 <tcp_output_alloc_header+0x26>
 8012ad4:	4b15      	ldr	r3, [pc, #84]	; (8012b2c <tcp_output_alloc_header+0x70>)
 8012ad6:	f240 7242 	movw	r2, #1858	; 0x742
 8012ada:	4915      	ldr	r1, [pc, #84]	; (8012b30 <tcp_output_alloc_header+0x74>)
 8012adc:	4815      	ldr	r0, [pc, #84]	; (8012b34 <tcp_output_alloc_header+0x78>)
 8012ade:	f005 ff07 	bl	80188f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	8adb      	ldrh	r3, [r3, #22]
 8012aea:	68fa      	ldr	r2, [r7, #12]
 8012aec:	8b12      	ldrh	r2, [r2, #24]
 8012aee:	68f9      	ldr	r1, [r7, #12]
 8012af0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012af2:	893d      	ldrh	r5, [r7, #8]
 8012af4:	897c      	ldrh	r4, [r7, #10]
 8012af6:	9103      	str	r1, [sp, #12]
 8012af8:	2110      	movs	r1, #16
 8012afa:	9102      	str	r1, [sp, #8]
 8012afc:	9201      	str	r2, [sp, #4]
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	462a      	mov	r2, r5
 8012b04:	4621      	mov	r1, r4
 8012b06:	f7ff ff65 	bl	80129d4 <tcp_output_alloc_header_common>
 8012b0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d006      	beq.n	8012b20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b1a:	441a      	add	r2, r3
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012b20:	697b      	ldr	r3, [r7, #20]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3718      	adds	r7, #24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bdb0      	pop	{r4, r5, r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	0801f2a4 	.word	0x0801f2a4
 8012b30:	0801f9ac 	.word	0x0801f9ac
 8012b34:	0801f2f8 	.word	0x0801f2f8

08012b38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b088      	sub	sp, #32
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	4611      	mov	r1, r2
 8012b44:	461a      	mov	r2, r3
 8012b46:	460b      	mov	r3, r1
 8012b48:	71fb      	strb	r3, [r7, #7]
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d106      	bne.n	8012b66 <tcp_output_fill_options+0x2e>
 8012b58:	4b13      	ldr	r3, [pc, #76]	; (8012ba8 <tcp_output_fill_options+0x70>)
 8012b5a:	f240 7256 	movw	r2, #1878	; 0x756
 8012b5e:	4913      	ldr	r1, [pc, #76]	; (8012bac <tcp_output_fill_options+0x74>)
 8012b60:	4813      	ldr	r0, [pc, #76]	; (8012bb0 <tcp_output_fill_options+0x78>)
 8012b62:	f005 fec5 	bl	80188f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	3314      	adds	r3, #20
 8012b70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	f103 0214 	add.w	r2, r3, #20
 8012b78:	8bfb      	ldrh	r3, [r7, #30]
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	009b      	lsls	r3, r3, #2
 8012b82:	f003 0304 	and.w	r3, r3, #4
 8012b86:	440b      	add	r3, r1
 8012b88:	4413      	add	r3, r2
 8012b8a:	697a      	ldr	r2, [r7, #20]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d006      	beq.n	8012b9e <tcp_output_fill_options+0x66>
 8012b90:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <tcp_output_fill_options+0x70>)
 8012b92:	f240 7275 	movw	r2, #1909	; 0x775
 8012b96:	4907      	ldr	r1, [pc, #28]	; (8012bb4 <tcp_output_fill_options+0x7c>)
 8012b98:	4805      	ldr	r0, [pc, #20]	; (8012bb0 <tcp_output_fill_options+0x78>)
 8012b9a:	f005 fea9 	bl	80188f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b9e:	bf00      	nop
 8012ba0:	3720      	adds	r7, #32
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	0801f2a4 	.word	0x0801f2a4
 8012bac:	0801f9d4 	.word	0x0801f9d4
 8012bb0:	0801f2f8 	.word	0x0801f2f8
 8012bb4:	0801f8cc 	.word	0x0801f8cc

08012bb8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b08a      	sub	sp, #40	; 0x28
 8012bbc:	af04      	add	r7, sp, #16
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
 8012bc4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d106      	bne.n	8012bda <tcp_output_control_segment+0x22>
 8012bcc:	4b1c      	ldr	r3, [pc, #112]	; (8012c40 <tcp_output_control_segment+0x88>)
 8012bce:	f240 7287 	movw	r2, #1927	; 0x787
 8012bd2:	491c      	ldr	r1, [pc, #112]	; (8012c44 <tcp_output_control_segment+0x8c>)
 8012bd4:	481c      	ldr	r0, [pc, #112]	; (8012c48 <tcp_output_control_segment+0x90>)
 8012bd6:	f005 fe8b 	bl	80188f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012bda:	683a      	ldr	r2, [r7, #0]
 8012bdc:	6879      	ldr	r1, [r7, #4]
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f7fe ff30 	bl	8011a44 <tcp_route>
 8012be4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d102      	bne.n	8012bf2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012bec:	23fc      	movs	r3, #252	; 0xfc
 8012bee:	75fb      	strb	r3, [r7, #23]
 8012bf0:	e01c      	b.n	8012c2c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d006      	beq.n	8012c06 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	7adb      	ldrb	r3, [r3, #11]
 8012bfc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	7a9b      	ldrb	r3, [r3, #10]
 8012c02:	757b      	strb	r3, [r7, #21]
 8012c04:	e003      	b.n	8012c0e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012c06:	23ff      	movs	r3, #255	; 0xff
 8012c08:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012c0e:	7dba      	ldrb	r2, [r7, #22]
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	9302      	str	r3, [sp, #8]
 8012c14:	2306      	movs	r3, #6
 8012c16:	9301      	str	r3, [sp, #4]
 8012c18:	7d7b      	ldrb	r3, [r7, #21]
 8012c1a:	9300      	str	r3, [sp, #0]
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	683a      	ldr	r2, [r7, #0]
 8012c20:	6879      	ldr	r1, [r7, #4]
 8012c22:	68b8      	ldr	r0, [r7, #8]
 8012c24:	f004 f8a0 	bl	8016d68 <ip4_output_if>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012c2c:	68b8      	ldr	r0, [r7, #8]
 8012c2e:	f7fa fdd7 	bl	800d7e0 <pbuf_free>
  return err;
 8012c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3718      	adds	r7, #24
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	0801f2a4 	.word	0x0801f2a4
 8012c44:	0801f9fc 	.word	0x0801f9fc
 8012c48:	0801f2f8 	.word	0x0801f2f8

08012c4c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b08b      	sub	sp, #44	; 0x2c
 8012c50:	af04      	add	r7, sp, #16
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
 8012c58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d106      	bne.n	8012c6e <tcp_rst+0x22>
 8012c60:	4b1e      	ldr	r3, [pc, #120]	; (8012cdc <tcp_rst+0x90>)
 8012c62:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012c66:	491e      	ldr	r1, [pc, #120]	; (8012ce0 <tcp_rst+0x94>)
 8012c68:	481e      	ldr	r0, [pc, #120]	; (8012ce4 <tcp_rst+0x98>)
 8012c6a:	f005 fe41 	bl	80188f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <tcp_rst+0x36>
 8012c74:	4b19      	ldr	r3, [pc, #100]	; (8012cdc <tcp_rst+0x90>)
 8012c76:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012c7a:	491b      	ldr	r1, [pc, #108]	; (8012ce8 <tcp_rst+0x9c>)
 8012c7c:	4819      	ldr	r0, [pc, #100]	; (8012ce4 <tcp_rst+0x98>)
 8012c7e:	f005 fe37 	bl	80188f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c82:	2300      	movs	r3, #0
 8012c84:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c86:	2308      	movs	r3, #8
 8012c88:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c8a:	7dfb      	ldrb	r3, [r7, #23]
 8012c8c:	b29c      	uxth	r4, r3
 8012c8e:	68b8      	ldr	r0, [r7, #8]
 8012c90:	f7f9 fb23 	bl	800c2da <lwip_htonl>
 8012c94:	4602      	mov	r2, r0
 8012c96:	8abb      	ldrh	r3, [r7, #20]
 8012c98:	9303      	str	r3, [sp, #12]
 8012c9a:	2314      	movs	r3, #20
 8012c9c:	9302      	str	r3, [sp, #8]
 8012c9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ca4:	9300      	str	r3, [sp, #0]
 8012ca6:	4613      	mov	r3, r2
 8012ca8:	2200      	movs	r2, #0
 8012caa:	4621      	mov	r1, r4
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f7ff fe91 	bl	80129d4 <tcp_output_alloc_header_common>
 8012cb2:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00c      	beq.n	8012cd4 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012cba:	7dfb      	ldrb	r3, [r7, #23]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	6939      	ldr	r1, [r7, #16]
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f7ff ff39 	bl	8012b38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	6939      	ldr	r1, [r7, #16]
 8012ccc:	68f8      	ldr	r0, [r7, #12]
 8012cce:	f7ff ff73 	bl	8012bb8 <tcp_output_control_segment>
 8012cd2:	e000      	b.n	8012cd6 <tcp_rst+0x8a>
    return;
 8012cd4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012cd6:	371c      	adds	r7, #28
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd90      	pop	{r4, r7, pc}
 8012cdc:	0801f2a4 	.word	0x0801f2a4
 8012ce0:	0801fa28 	.word	0x0801fa28
 8012ce4:	0801f2f8 	.word	0x0801f2f8
 8012ce8:	0801fa44 	.word	0x0801fa44

08012cec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <tcp_send_empty_ack+0x24>
 8012d02:	4b28      	ldr	r3, [pc, #160]	; (8012da4 <tcp_send_empty_ack+0xb8>)
 8012d04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012d08:	4927      	ldr	r1, [pc, #156]	; (8012da8 <tcp_send_empty_ack+0xbc>)
 8012d0a:	4828      	ldr	r0, [pc, #160]	; (8012dac <tcp_send_empty_ack+0xc0>)
 8012d0c:	f005 fdf0 	bl	80188f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d10:	7dfb      	ldrb	r3, [r7, #23]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f003 0304 	and.w	r3, r3, #4
 8012d1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012d1c:	7d7b      	ldrb	r3, [r7, #21]
 8012d1e:	b29c      	uxth	r4, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7f9 fad8 	bl	800c2da <lwip_htonl>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	4621      	mov	r1, r4
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7ff fec3 	bl	8012abc <tcp_output_alloc_header>
 8012d36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d109      	bne.n	8012d52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	8b5b      	ldrh	r3, [r3, #26]
 8012d42:	f043 0303 	orr.w	r3, r3, #3
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012d4c:	f06f 0301 	mvn.w	r3, #1
 8012d50:	e023      	b.n	8012d9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012d52:	7dbb      	ldrb	r3, [r7, #22]
 8012d54:	7dfa      	ldrb	r2, [r7, #23]
 8012d56:	6939      	ldr	r1, [r7, #16]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff feed 	bl	8012b38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	3304      	adds	r3, #4
 8012d64:	6939      	ldr	r1, [r7, #16]
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7ff ff26 	bl	8012bb8 <tcp_output_control_segment>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d007      	beq.n	8012d88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	8b5b      	ldrh	r3, [r3, #26]
 8012d7c:	f043 0303 	orr.w	r3, r3, #3
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	835a      	strh	r2, [r3, #26]
 8012d86:	e006      	b.n	8012d96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	8b5b      	ldrh	r3, [r3, #26]
 8012d8c:	f023 0303 	bic.w	r3, r3, #3
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	371c      	adds	r7, #28
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd90      	pop	{r4, r7, pc}
 8012da2:	bf00      	nop
 8012da4:	0801f2a4 	.word	0x0801f2a4
 8012da8:	0801fa60 	.word	0x0801fa60
 8012dac:	0801f2f8 	.word	0x0801f2f8

08012db0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012db0:	b590      	push	{r4, r7, lr}
 8012db2:	b087      	sub	sp, #28
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012db8:	2300      	movs	r3, #0
 8012dba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d106      	bne.n	8012dd0 <tcp_keepalive+0x20>
 8012dc2:	4b18      	ldr	r3, [pc, #96]	; (8012e24 <tcp_keepalive+0x74>)
 8012dc4:	f640 0224 	movw	r2, #2084	; 0x824
 8012dc8:	4917      	ldr	r1, [pc, #92]	; (8012e28 <tcp_keepalive+0x78>)
 8012dca:	4818      	ldr	r0, [pc, #96]	; (8012e2c <tcp_keepalive+0x7c>)
 8012dcc:	f005 fd90 	bl	80188f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012dd0:	7dfb      	ldrb	r3, [r7, #23]
 8012dd2:	b29c      	uxth	r4, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dd8:	3b01      	subs	r3, #1
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7f9 fa7d 	bl	800c2da <lwip_htonl>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2200      	movs	r2, #0
 8012de4:	4621      	mov	r1, r4
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7ff fe68 	bl	8012abc <tcp_output_alloc_header>
 8012dec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d102      	bne.n	8012dfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012df4:	f04f 33ff 	mov.w	r3, #4294967295
 8012df8:	e010      	b.n	8012e1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	6939      	ldr	r1, [r7, #16]
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7ff fe99 	bl	8012b38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	6939      	ldr	r1, [r7, #16]
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff fed2 	bl	8012bb8 <tcp_output_control_segment>
 8012e14:	4603      	mov	r3, r0
 8012e16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	371c      	adds	r7, #28
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd90      	pop	{r4, r7, pc}
 8012e24:	0801f2a4 	.word	0x0801f2a4
 8012e28:	0801fa80 	.word	0x0801fa80
 8012e2c:	0801f2f8 	.word	0x0801f2f8

08012e30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012e30:	b590      	push	{r4, r7, lr}
 8012e32:	b08b      	sub	sp, #44	; 0x2c
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e38:	2300      	movs	r3, #0
 8012e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d106      	bne.n	8012e52 <tcp_zero_window_probe+0x22>
 8012e44:	4b4c      	ldr	r3, [pc, #304]	; (8012f78 <tcp_zero_window_probe+0x148>)
 8012e46:	f640 024f 	movw	r2, #2127	; 0x84f
 8012e4a:	494c      	ldr	r1, [pc, #304]	; (8012f7c <tcp_zero_window_probe+0x14c>)
 8012e4c:	484c      	ldr	r0, [pc, #304]	; (8012f80 <tcp_zero_window_probe+0x150>)
 8012e4e:	f005 fd4f 	bl	80188f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012e58:	6a3b      	ldr	r3, [r7, #32]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d101      	bne.n	8012e62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	e086      	b.n	8012f70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e68:	2bff      	cmp	r3, #255	; 0xff
 8012e6a:	d007      	beq.n	8012e7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e72:	3301      	adds	r3, #1
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012e7c:	6a3b      	ldr	r3, [r7, #32]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	899b      	ldrh	r3, [r3, #12]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f9 fa13 	bl	800c2b0 <lwip_htons>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	f003 0301 	and.w	r3, r3, #1
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d005      	beq.n	8012ea2 <tcp_zero_window_probe+0x72>
 8012e96:	6a3b      	ldr	r3, [r7, #32]
 8012e98:	891b      	ldrh	r3, [r3, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <tcp_zero_window_probe+0x72>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e000      	b.n	8012ea4 <tcp_zero_window_probe+0x74>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012ea6:	7ffb      	ldrb	r3, [r7, #31]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bf0c      	ite	eq
 8012eac:	2301      	moveq	r3, #1
 8012eae:	2300      	movne	r3, #0
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eb8:	b299      	uxth	r1, r3
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	8bba      	ldrh	r2, [r7, #28]
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7ff fdfa 	bl	8012abc <tcp_output_alloc_header>
 8012ec8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d102      	bne.n	8012ed6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ed4:	e04c      	b.n	8012f70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012edc:	7ffb      	ldrb	r3, [r7, #31]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d011      	beq.n	8012f06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	899b      	ldrh	r3, [r3, #12]
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	b21b      	sxth	r3, r3
 8012eea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012eee:	b21c      	sxth	r4, r3
 8012ef0:	2011      	movs	r0, #17
 8012ef2:	f7f9 f9dd 	bl	800c2b0 <lwip_htons>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	b21b      	sxth	r3, r3
 8012efa:	4323      	orrs	r3, r4
 8012efc:	b21b      	sxth	r3, r3
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	819a      	strh	r2, [r3, #12]
 8012f04:	e010      	b.n	8012f28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	3314      	adds	r3, #20
 8012f0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012f0e:	6a3b      	ldr	r3, [r7, #32]
 8012f10:	6858      	ldr	r0, [r3, #4]
 8012f12:	6a3b      	ldr	r3, [r7, #32]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	891a      	ldrh	r2, [r3, #8]
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	891b      	ldrh	r3, [r3, #8]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	2201      	movs	r2, #1
 8012f22:	6939      	ldr	r1, [r7, #16]
 8012f24:	f7fa fe56 	bl	800dbd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f28:	6a3b      	ldr	r3, [r7, #32]
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7f9 f9d3 	bl	800c2da <lwip_htonl>
 8012f34:	4603      	mov	r3, r0
 8012f36:	3301      	adds	r3, #1
 8012f38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da02      	bge.n	8012f4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f50:	2200      	movs	r2, #0
 8012f52:	69b9      	ldr	r1, [r7, #24]
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7ff fdef 	bl	8012b38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	3304      	adds	r3, #4
 8012f60:	69b9      	ldr	r1, [r7, #24]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7ff fe28 	bl	8012bb8 <tcp_output_control_segment>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	372c      	adds	r7, #44	; 0x2c
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd90      	pop	{r4, r7, pc}
 8012f78:	0801f2a4 	.word	0x0801f2a4
 8012f7c:	0801fa9c 	.word	0x0801fa9c
 8012f80:	0801f2f8 	.word	0x0801f2f8

08012f84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012f8c:	f7fa ff10 	bl	800ddb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012f90:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <tcpip_tcp_timer+0x38>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d103      	bne.n	8012fa0 <tcpip_tcp_timer+0x1c>
 8012f98:	4b09      	ldr	r3, [pc, #36]	; (8012fc0 <tcpip_tcp_timer+0x3c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d005      	beq.n	8012fac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	4908      	ldr	r1, [pc, #32]	; (8012fc4 <tcpip_tcp_timer+0x40>)
 8012fa4:	20fa      	movs	r0, #250	; 0xfa
 8012fa6:	f000 f8f1 	bl	801318c <sys_timeout>
 8012faa:	e002      	b.n	8012fb2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012fac:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <tcpip_tcp_timer+0x44>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	601a      	str	r2, [r3, #0]
  }
}
 8012fb2:	bf00      	nop
 8012fb4:	3708      	adds	r7, #8
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20007380 	.word	0x20007380
 8012fc0:	20007390 	.word	0x20007390
 8012fc4:	08012f85 	.word	0x08012f85
 8012fc8:	200004d0 	.word	0x200004d0

08012fcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012fd0:	4b0a      	ldr	r3, [pc, #40]	; (8012ffc <tcp_timer_needed+0x30>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d10f      	bne.n	8012ff8 <tcp_timer_needed+0x2c>
 8012fd8:	4b09      	ldr	r3, [pc, #36]	; (8013000 <tcp_timer_needed+0x34>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d103      	bne.n	8012fe8 <tcp_timer_needed+0x1c>
 8012fe0:	4b08      	ldr	r3, [pc, #32]	; (8013004 <tcp_timer_needed+0x38>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d007      	beq.n	8012ff8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012fe8:	4b04      	ldr	r3, [pc, #16]	; (8012ffc <tcp_timer_needed+0x30>)
 8012fea:	2201      	movs	r2, #1
 8012fec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fee:	2200      	movs	r2, #0
 8012ff0:	4905      	ldr	r1, [pc, #20]	; (8013008 <tcp_timer_needed+0x3c>)
 8012ff2:	20fa      	movs	r0, #250	; 0xfa
 8012ff4:	f000 f8ca 	bl	801318c <sys_timeout>
  }
}
 8012ff8:	bf00      	nop
 8012ffa:	bd80      	pop	{r7, pc}
 8012ffc:	200004d0 	.word	0x200004d0
 8013000:	20007380 	.word	0x20007380
 8013004:	20007390 	.word	0x20007390
 8013008:	08012f85 	.word	0x08012f85

0801300c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b086      	sub	sp, #24
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013018:	2006      	movs	r0, #6
 801301a:	f7f9 fd9f 	bl	800cb5c <memp_malloc>
 801301e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d109      	bne.n	801303a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d151      	bne.n	80130d0 <sys_timeout_abs+0xc4>
 801302c:	4b2a      	ldr	r3, [pc, #168]	; (80130d8 <sys_timeout_abs+0xcc>)
 801302e:	22be      	movs	r2, #190	; 0xbe
 8013030:	492a      	ldr	r1, [pc, #168]	; (80130dc <sys_timeout_abs+0xd0>)
 8013032:	482b      	ldr	r0, [pc, #172]	; (80130e0 <sys_timeout_abs+0xd4>)
 8013034:	f005 fc5c 	bl	80188f0 <iprintf>
    return;
 8013038:	e04a      	b.n	80130d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	2200      	movs	r2, #0
 801303e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013052:	4b24      	ldr	r3, [pc, #144]	; (80130e4 <sys_timeout_abs+0xd8>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d103      	bne.n	8013062 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801305a:	4a22      	ldr	r2, [pc, #136]	; (80130e4 <sys_timeout_abs+0xd8>)
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6013      	str	r3, [r2, #0]
    return;
 8013060:	e037      	b.n	80130d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	685a      	ldr	r2, [r3, #4]
 8013066:	4b1f      	ldr	r3, [pc, #124]	; (80130e4 <sys_timeout_abs+0xd8>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	1ad3      	subs	r3, r2, r3
 801306e:	0fdb      	lsrs	r3, r3, #31
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	b2db      	uxtb	r3, r3
 8013076:	2b00      	cmp	r3, #0
 8013078:	d007      	beq.n	801308a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801307a:	4b1a      	ldr	r3, [pc, #104]	; (80130e4 <sys_timeout_abs+0xd8>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013082:	4a18      	ldr	r2, [pc, #96]	; (80130e4 <sys_timeout_abs+0xd8>)
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	6013      	str	r3, [r2, #0]
 8013088:	e023      	b.n	80130d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801308a:	4b16      	ldr	r3, [pc, #88]	; (80130e4 <sys_timeout_abs+0xd8>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	617b      	str	r3, [r7, #20]
 8013090:	e01a      	b.n	80130c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00b      	beq.n	80130b2 <sys_timeout_abs+0xa6>
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	685a      	ldr	r2, [r3, #4]
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	1ad3      	subs	r3, r2, r3
 80130a6:	0fdb      	lsrs	r3, r3, #31
 80130a8:	f003 0301 	and.w	r3, r3, #1
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d007      	beq.n	80130c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	693a      	ldr	r2, [r7, #16]
 80130be:	601a      	str	r2, [r3, #0]
        break;
 80130c0:	e007      	b.n	80130d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	617b      	str	r3, [r7, #20]
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1e1      	bne.n	8013092 <sys_timeout_abs+0x86>
 80130ce:	e000      	b.n	80130d2 <sys_timeout_abs+0xc6>
    return;
 80130d0:	bf00      	nop
      }
    }
  }
}
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	0801fac0 	.word	0x0801fac0
 80130dc:	0801faf4 	.word	0x0801faf4
 80130e0:	0801fb34 	.word	0x0801fb34
 80130e4:	200004c8 	.word	0x200004c8

080130e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b086      	sub	sp, #24
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	4798      	blx	r3

  now = sys_now();
 80130fa:	f7f9 f84b 	bl	800c194 <sys_now>
 80130fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	4b0f      	ldr	r3, [pc, #60]	; (8013144 <lwip_cyclic_timer+0x5c>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	4413      	add	r3, r2
 801310a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	1ad3      	subs	r3, r2, r3
 8013112:	0fdb      	lsrs	r3, r3, #31
 8013114:	f003 0301 	and.w	r3, r3, #1
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	d009      	beq.n	8013132 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	4413      	add	r3, r2
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	4907      	ldr	r1, [pc, #28]	; (8013148 <lwip_cyclic_timer+0x60>)
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff ff6e 	bl	801300c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013130:	e004      	b.n	801313c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	4904      	ldr	r1, [pc, #16]	; (8013148 <lwip_cyclic_timer+0x60>)
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f7ff ff68 	bl	801300c <sys_timeout_abs>
}
 801313c:	bf00      	nop
 801313e:	3718      	adds	r7, #24
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	200004cc 	.word	0x200004cc
 8013148:	080130e9 	.word	0x080130e9

0801314c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013152:	2301      	movs	r3, #1
 8013154:	607b      	str	r3, [r7, #4]
 8013156:	e00e      	b.n	8013176 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013158:	4a0a      	ldr	r2, [pc, #40]	; (8013184 <sys_timeouts_init+0x38>)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	4a07      	ldr	r2, [pc, #28]	; (8013184 <sys_timeouts_init+0x38>)
 8013166:	4413      	add	r3, r2
 8013168:	461a      	mov	r2, r3
 801316a:	4907      	ldr	r1, [pc, #28]	; (8013188 <sys_timeouts_init+0x3c>)
 801316c:	f000 f80e 	bl	801318c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	3301      	adds	r3, #1
 8013174:	607b      	str	r3, [r7, #4]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b04      	cmp	r3, #4
 801317a:	d9ed      	bls.n	8013158 <sys_timeouts_init+0xc>
  }
}
 801317c:	bf00      	nop
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	08020a50 	.word	0x08020a50
 8013188:	080130e9 	.word	0x080130e9

0801318c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801319e:	d306      	bcc.n	80131ae <sys_timeout+0x22>
 80131a0:	4b0a      	ldr	r3, [pc, #40]	; (80131cc <sys_timeout+0x40>)
 80131a2:	f240 1229 	movw	r2, #297	; 0x129
 80131a6:	490a      	ldr	r1, [pc, #40]	; (80131d0 <sys_timeout+0x44>)
 80131a8:	480a      	ldr	r0, [pc, #40]	; (80131d4 <sys_timeout+0x48>)
 80131aa:	f005 fba1 	bl	80188f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80131ae:	f7f8 fff1 	bl	800c194 <sys_now>
 80131b2:	4602      	mov	r2, r0
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	4413      	add	r3, r2
 80131b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	68b9      	ldr	r1, [r7, #8]
 80131be:	6978      	ldr	r0, [r7, #20]
 80131c0:	f7ff ff24 	bl	801300c <sys_timeout_abs>
#endif
}
 80131c4:	bf00      	nop
 80131c6:	3718      	adds	r7, #24
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	0801fac0 	.word	0x0801fac0
 80131d0:	0801fb5c 	.word	0x0801fb5c
 80131d4:	0801fb34 	.word	0x0801fb34

080131d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80131dc:	f005 fba0 	bl	8018920 <rand>
 80131e0:	4603      	mov	r3, r0
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	4b01      	ldr	r3, [pc, #4]	; (80131f8 <udp_init+0x20>)
 80131f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80131f4:	bf00      	nop
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	2000006c 	.word	0x2000006c

080131fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013206:	4b17      	ldr	r3, [pc, #92]	; (8013264 <udp_new_port+0x68>)
 8013208:	881b      	ldrh	r3, [r3, #0]
 801320a:	1c5a      	adds	r2, r3, #1
 801320c:	b291      	uxth	r1, r2
 801320e:	4a15      	ldr	r2, [pc, #84]	; (8013264 <udp_new_port+0x68>)
 8013210:	8011      	strh	r1, [r2, #0]
 8013212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013216:	4293      	cmp	r3, r2
 8013218:	d103      	bne.n	8013222 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801321a:	4b12      	ldr	r3, [pc, #72]	; (8013264 <udp_new_port+0x68>)
 801321c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013220:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013222:	4b11      	ldr	r3, [pc, #68]	; (8013268 <udp_new_port+0x6c>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	603b      	str	r3, [r7, #0]
 8013228:	e011      	b.n	801324e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	8a5a      	ldrh	r2, [r3, #18]
 801322e:	4b0d      	ldr	r3, [pc, #52]	; (8013264 <udp_new_port+0x68>)
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	429a      	cmp	r2, r3
 8013234:	d108      	bne.n	8013248 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013236:	88fb      	ldrh	r3, [r7, #6]
 8013238:	3301      	adds	r3, #1
 801323a:	80fb      	strh	r3, [r7, #6]
 801323c:	88fb      	ldrh	r3, [r7, #6]
 801323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013242:	d3e0      	bcc.n	8013206 <udp_new_port+0xa>
        return 0;
 8013244:	2300      	movs	r3, #0
 8013246:	e007      	b.n	8013258 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	603b      	str	r3, [r7, #0]
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d1ea      	bne.n	801322a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013254:	4b03      	ldr	r3, [pc, #12]	; (8013264 <udp_new_port+0x68>)
 8013256:	881b      	ldrh	r3, [r3, #0]
}
 8013258:	4618      	mov	r0, r3
 801325a:	370c      	adds	r7, #12
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr
 8013264:	2000006c 	.word	0x2000006c
 8013268:	20007398 	.word	0x20007398

0801326c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	4613      	mov	r3, r2
 8013278:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d105      	bne.n	801328c <udp_input_local_match+0x20>
 8013280:	4b27      	ldr	r3, [pc, #156]	; (8013320 <udp_input_local_match+0xb4>)
 8013282:	2287      	movs	r2, #135	; 0x87
 8013284:	4927      	ldr	r1, [pc, #156]	; (8013324 <udp_input_local_match+0xb8>)
 8013286:	4828      	ldr	r0, [pc, #160]	; (8013328 <udp_input_local_match+0xbc>)
 8013288:	f005 fb32 	bl	80188f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d105      	bne.n	801329e <udp_input_local_match+0x32>
 8013292:	4b23      	ldr	r3, [pc, #140]	; (8013320 <udp_input_local_match+0xb4>)
 8013294:	2288      	movs	r2, #136	; 0x88
 8013296:	4925      	ldr	r1, [pc, #148]	; (801332c <udp_input_local_match+0xc0>)
 8013298:	4823      	ldr	r0, [pc, #140]	; (8013328 <udp_input_local_match+0xbc>)
 801329a:	f005 fb29 	bl	80188f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	7a1b      	ldrb	r3, [r3, #8]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00b      	beq.n	80132be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	7a1a      	ldrb	r2, [r3, #8]
 80132aa:	4b21      	ldr	r3, [pc, #132]	; (8013330 <udp_input_local_match+0xc4>)
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132b2:	3301      	adds	r3, #1
 80132b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d001      	beq.n	80132be <udp_input_local_match+0x52>
    return 0;
 80132ba:	2300      	movs	r3, #0
 80132bc:	e02b      	b.n	8013316 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d018      	beq.n	80132f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d013      	beq.n	80132f2 <udp_input_local_match+0x86>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00f      	beq.n	80132f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132d2:	4b17      	ldr	r3, [pc, #92]	; (8013330 <udp_input_local_match+0xc4>)
 80132d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132da:	d00a      	beq.n	80132f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681a      	ldr	r2, [r3, #0]
 80132e0:	4b13      	ldr	r3, [pc, #76]	; (8013330 <udp_input_local_match+0xc4>)
 80132e2:	695b      	ldr	r3, [r3, #20]
 80132e4:	405a      	eors	r2, r3
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	3308      	adds	r3, #8
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d110      	bne.n	8013314 <udp_input_local_match+0xa8>
          return 1;
 80132f2:	2301      	movs	r3, #1
 80132f4:	e00f      	b.n	8013316 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d009      	beq.n	8013310 <udp_input_local_match+0xa4>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d005      	beq.n	8013310 <udp_input_local_match+0xa4>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	4b09      	ldr	r3, [pc, #36]	; (8013330 <udp_input_local_match+0xc4>)
 801330a:	695b      	ldr	r3, [r3, #20]
 801330c:	429a      	cmp	r2, r3
 801330e:	d101      	bne.n	8013314 <udp_input_local_match+0xa8>
        return 1;
 8013310:	2301      	movs	r3, #1
 8013312:	e000      	b.n	8013316 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3710      	adds	r7, #16
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	0801fba8 	.word	0x0801fba8
 8013324:	0801fbd8 	.word	0x0801fbd8
 8013328:	0801fbfc 	.word	0x0801fbfc
 801332c:	0801fc24 	.word	0x0801fc24
 8013330:	2000425c 	.word	0x2000425c

08013334 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013334:	b590      	push	{r4, r7, lr}
 8013336:	b08d      	sub	sp, #52	; 0x34
 8013338:	af02      	add	r7, sp, #8
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d105      	bne.n	8013354 <udp_input+0x20>
 8013348:	4b7c      	ldr	r3, [pc, #496]	; (801353c <udp_input+0x208>)
 801334a:	22cf      	movs	r2, #207	; 0xcf
 801334c:	497c      	ldr	r1, [pc, #496]	; (8013540 <udp_input+0x20c>)
 801334e:	487d      	ldr	r0, [pc, #500]	; (8013544 <udp_input+0x210>)
 8013350:	f005 face 	bl	80188f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d105      	bne.n	8013366 <udp_input+0x32>
 801335a:	4b78      	ldr	r3, [pc, #480]	; (801353c <udp_input+0x208>)
 801335c:	22d0      	movs	r2, #208	; 0xd0
 801335e:	497a      	ldr	r1, [pc, #488]	; (8013548 <udp_input+0x214>)
 8013360:	4878      	ldr	r0, [pc, #480]	; (8013544 <udp_input+0x210>)
 8013362:	f005 fac5 	bl	80188f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	895b      	ldrh	r3, [r3, #10]
 801336a:	2b07      	cmp	r3, #7
 801336c:	d803      	bhi.n	8013376 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7fa fa36 	bl	800d7e0 <pbuf_free>
    goto end;
 8013374:	e0de      	b.n	8013534 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801337c:	4b73      	ldr	r3, [pc, #460]	; (801354c <udp_input+0x218>)
 801337e:	695a      	ldr	r2, [r3, #20]
 8013380:	4b72      	ldr	r3, [pc, #456]	; (801354c <udp_input+0x218>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4619      	mov	r1, r3
 8013386:	4610      	mov	r0, r2
 8013388:	f003 fdc6 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 801338c:	4603      	mov	r3, r0
 801338e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	881b      	ldrh	r3, [r3, #0]
 8013394:	b29b      	uxth	r3, r3
 8013396:	4618      	mov	r0, r3
 8013398:	f7f8 ff8a 	bl	800c2b0 <lwip_htons>
 801339c:	4603      	mov	r3, r0
 801339e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	885b      	ldrh	r3, [r3, #2]
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7f8 ff82 	bl	800c2b0 <lwip_htons>
 80133ac:	4603      	mov	r3, r0
 80133ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80133b4:	2300      	movs	r3, #0
 80133b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80133b8:	2300      	movs	r3, #0
 80133ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133bc:	4b64      	ldr	r3, [pc, #400]	; (8013550 <udp_input+0x21c>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	627b      	str	r3, [r7, #36]	; 0x24
 80133c2:	e054      	b.n	801346e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80133c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c6:	8a5b      	ldrh	r3, [r3, #18]
 80133c8:	89fa      	ldrh	r2, [r7, #14]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d14a      	bne.n	8013464 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80133ce:	7cfb      	ldrb	r3, [r7, #19]
 80133d0:	461a      	mov	r2, r3
 80133d2:	6839      	ldr	r1, [r7, #0]
 80133d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133d6:	f7ff ff49 	bl	801326c <udp_input_local_match>
 80133da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d041      	beq.n	8013464 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	7c1b      	ldrb	r3, [r3, #16]
 80133e4:	f003 0304 	and.w	r3, r3, #4
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d11d      	bne.n	8013428 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d102      	bne.n	80133f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	61fb      	str	r3, [r7, #28]
 80133f6:	e017      	b.n	8013428 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80133f8:	7cfb      	ldrb	r3, [r7, #19]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d014      	beq.n	8013428 <udp_input+0xf4>
 80133fe:	4b53      	ldr	r3, [pc, #332]	; (801354c <udp_input+0x218>)
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013406:	d10f      	bne.n	8013428 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	3304      	adds	r3, #4
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	429a      	cmp	r2, r3
 8013414:	d008      	beq.n	8013428 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	3304      	adds	r3, #4
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	429a      	cmp	r2, r3
 8013422:	d101      	bne.n	8013428 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013426:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	8a9b      	ldrh	r3, [r3, #20]
 801342c:	8a3a      	ldrh	r2, [r7, #16]
 801342e:	429a      	cmp	r2, r3
 8013430:	d118      	bne.n	8013464 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013434:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013436:	2b00      	cmp	r3, #0
 8013438:	d005      	beq.n	8013446 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	4b43      	ldr	r3, [pc, #268]	; (801354c <udp_input+0x218>)
 8013440:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013442:	429a      	cmp	r2, r3
 8013444:	d10e      	bne.n	8013464 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013446:	6a3b      	ldr	r3, [r7, #32]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d014      	beq.n	8013476 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344e:	68da      	ldr	r2, [r3, #12]
 8013450:	6a3b      	ldr	r3, [r7, #32]
 8013452:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013454:	4b3e      	ldr	r3, [pc, #248]	; (8013550 <udp_input+0x21c>)
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801345c:	4a3c      	ldr	r2, [pc, #240]	; (8013550 <udp_input+0x21c>)
 801345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013460:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013462:	e008      	b.n	8013476 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013466:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	627b      	str	r3, [r7, #36]	; 0x24
 801346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013470:	2b00      	cmp	r3, #0
 8013472:	d1a7      	bne.n	80133c4 <udp_input+0x90>
 8013474:	e000      	b.n	8013478 <udp_input+0x144>
        break;
 8013476:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347a:	2b00      	cmp	r3, #0
 801347c:	d101      	bne.n	8013482 <udp_input+0x14e>
    pcb = uncon_pcb;
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	2b00      	cmp	r3, #0
 8013486:	d002      	beq.n	801348e <udp_input+0x15a>
    for_us = 1;
 8013488:	2301      	movs	r3, #1
 801348a:	76fb      	strb	r3, [r7, #27]
 801348c:	e00a      	b.n	80134a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	3304      	adds	r3, #4
 8013492:	681a      	ldr	r2, [r3, #0]
 8013494:	4b2d      	ldr	r3, [pc, #180]	; (801354c <udp_input+0x218>)
 8013496:	695b      	ldr	r3, [r3, #20]
 8013498:	429a      	cmp	r2, r3
 801349a:	bf0c      	ite	eq
 801349c:	2301      	moveq	r3, #1
 801349e:	2300      	movne	r3, #0
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80134a4:	7efb      	ldrb	r3, [r7, #27]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d041      	beq.n	801352e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80134aa:	2108      	movs	r1, #8
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f7fa f911 	bl	800d6d4 <pbuf_remove_header>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00a      	beq.n	80134ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80134b8:	4b20      	ldr	r3, [pc, #128]	; (801353c <udp_input+0x208>)
 80134ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80134be:	4925      	ldr	r1, [pc, #148]	; (8013554 <udp_input+0x220>)
 80134c0:	4820      	ldr	r0, [pc, #128]	; (8013544 <udp_input+0x210>)
 80134c2:	f005 fa15 	bl	80188f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7fa f98a 	bl	800d7e0 <pbuf_free>
      goto end;
 80134cc:	e032      	b.n	8013534 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80134ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d012      	beq.n	80134fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	699b      	ldr	r3, [r3, #24]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80134dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134de:	699c      	ldr	r4, [r3, #24]
 80134e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e2:	69d8      	ldr	r0, [r3, #28]
 80134e4:	8a3b      	ldrh	r3, [r7, #16]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	4b1b      	ldr	r3, [pc, #108]	; (8013558 <udp_input+0x224>)
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80134f0:	e021      	b.n	8013536 <udp_input+0x202>
        pbuf_free(p);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7fa f974 	bl	800d7e0 <pbuf_free>
        goto end;
 80134f8:	e01c      	b.n	8013534 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80134fa:	7cfb      	ldrb	r3, [r7, #19]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d112      	bne.n	8013526 <udp_input+0x1f2>
 8013500:	4b12      	ldr	r3, [pc, #72]	; (801354c <udp_input+0x218>)
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013508:	2be0      	cmp	r3, #224	; 0xe0
 801350a:	d00c      	beq.n	8013526 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801350c:	4b0f      	ldr	r3, [pc, #60]	; (801354c <udp_input+0x218>)
 801350e:	899b      	ldrh	r3, [r3, #12]
 8013510:	3308      	adds	r3, #8
 8013512:	b29b      	uxth	r3, r3
 8013514:	b21b      	sxth	r3, r3
 8013516:	4619      	mov	r1, r3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7fa f94e 	bl	800d7ba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801351e:	2103      	movs	r1, #3
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f003 f9bd 	bl	80168a0 <icmp_dest_unreach>
      pbuf_free(p);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f7fa f95a 	bl	800d7e0 <pbuf_free>
  return;
 801352c:	e003      	b.n	8013536 <udp_input+0x202>
    pbuf_free(p);
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7fa f956 	bl	800d7e0 <pbuf_free>
  return;
 8013534:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013536:	372c      	adds	r7, #44	; 0x2c
 8013538:	46bd      	mov	sp, r7
 801353a:	bd90      	pop	{r4, r7, pc}
 801353c:	0801fba8 	.word	0x0801fba8
 8013540:	0801fc4c 	.word	0x0801fc4c
 8013544:	0801fbfc 	.word	0x0801fbfc
 8013548:	0801fc64 	.word	0x0801fc64
 801354c:	2000425c 	.word	0x2000425c
 8013550:	20007398 	.word	0x20007398
 8013554:	0801fc80 	.word	0x0801fc80
 8013558:	2000426c 	.word	0x2000426c

0801355c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b088      	sub	sp, #32
 8013560:	af02      	add	r7, sp, #8
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d109      	bne.n	8013584 <udp_sendto_if+0x28>
 8013570:	4b2e      	ldr	r3, [pc, #184]	; (801362c <udp_sendto_if+0xd0>)
 8013572:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013576:	492e      	ldr	r1, [pc, #184]	; (8013630 <udp_sendto_if+0xd4>)
 8013578:	482e      	ldr	r0, [pc, #184]	; (8013634 <udp_sendto_if+0xd8>)
 801357a:	f005 f9b9 	bl	80188f0 <iprintf>
 801357e:	f06f 030f 	mvn.w	r3, #15
 8013582:	e04f      	b.n	8013624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d109      	bne.n	801359e <udp_sendto_if+0x42>
 801358a:	4b28      	ldr	r3, [pc, #160]	; (801362c <udp_sendto_if+0xd0>)
 801358c:	f240 2281 	movw	r2, #641	; 0x281
 8013590:	4929      	ldr	r1, [pc, #164]	; (8013638 <udp_sendto_if+0xdc>)
 8013592:	4828      	ldr	r0, [pc, #160]	; (8013634 <udp_sendto_if+0xd8>)
 8013594:	f005 f9ac 	bl	80188f0 <iprintf>
 8013598:	f06f 030f 	mvn.w	r3, #15
 801359c:	e042      	b.n	8013624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d109      	bne.n	80135b8 <udp_sendto_if+0x5c>
 80135a4:	4b21      	ldr	r3, [pc, #132]	; (801362c <udp_sendto_if+0xd0>)
 80135a6:	f240 2282 	movw	r2, #642	; 0x282
 80135aa:	4924      	ldr	r1, [pc, #144]	; (801363c <udp_sendto_if+0xe0>)
 80135ac:	4821      	ldr	r0, [pc, #132]	; (8013634 <udp_sendto_if+0xd8>)
 80135ae:	f005 f99f 	bl	80188f0 <iprintf>
 80135b2:	f06f 030f 	mvn.w	r3, #15
 80135b6:	e035      	b.n	8013624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80135b8:	6a3b      	ldr	r3, [r7, #32]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d109      	bne.n	80135d2 <udp_sendto_if+0x76>
 80135be:	4b1b      	ldr	r3, [pc, #108]	; (801362c <udp_sendto_if+0xd0>)
 80135c0:	f240 2283 	movw	r2, #643	; 0x283
 80135c4:	491e      	ldr	r1, [pc, #120]	; (8013640 <udp_sendto_if+0xe4>)
 80135c6:	481b      	ldr	r0, [pc, #108]	; (8013634 <udp_sendto_if+0xd8>)
 80135c8:	f005 f992 	bl	80188f0 <iprintf>
 80135cc:	f06f 030f 	mvn.w	r3, #15
 80135d0:	e028      	b.n	8013624 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d009      	beq.n	80135ec <udp_sendto_if+0x90>
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d005      	beq.n	80135ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135e8:	2be0      	cmp	r3, #224	; 0xe0
 80135ea:	d103      	bne.n	80135f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80135ec:	6a3b      	ldr	r3, [r7, #32]
 80135ee:	3304      	adds	r3, #4
 80135f0:	617b      	str	r3, [r7, #20]
 80135f2:	e00b      	b.n	801360c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	6a3b      	ldr	r3, [r7, #32]
 80135fa:	3304      	adds	r3, #4
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d002      	beq.n	8013608 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013602:	f06f 0303 	mvn.w	r3, #3
 8013606:	e00d      	b.n	8013624 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801360c:	887a      	ldrh	r2, [r7, #2]
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	6a3b      	ldr	r3, [r7, #32]
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	4613      	mov	r3, r2
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	68b9      	ldr	r1, [r7, #8]
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f000 f811 	bl	8013644 <udp_sendto_if_src>
 8013622:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013624:	4618      	mov	r0, r3
 8013626:	3718      	adds	r7, #24
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	0801fba8 	.word	0x0801fba8
 8013630:	0801fd1c 	.word	0x0801fd1c
 8013634:	0801fbfc 	.word	0x0801fbfc
 8013638:	0801fd38 	.word	0x0801fd38
 801363c:	0801fd54 	.word	0x0801fd54
 8013640:	0801fd74 	.word	0x0801fd74

08013644 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b08c      	sub	sp, #48	; 0x30
 8013648:	af04      	add	r7, sp, #16
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
 8013650:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d109      	bne.n	801366c <udp_sendto_if_src+0x28>
 8013658:	4b65      	ldr	r3, [pc, #404]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 801365a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801365e:	4965      	ldr	r1, [pc, #404]	; (80137f4 <udp_sendto_if_src+0x1b0>)
 8013660:	4865      	ldr	r0, [pc, #404]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 8013662:	f005 f945 	bl	80188f0 <iprintf>
 8013666:	f06f 030f 	mvn.w	r3, #15
 801366a:	e0bc      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d109      	bne.n	8013686 <udp_sendto_if_src+0x42>
 8013672:	4b5f      	ldr	r3, [pc, #380]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 8013674:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013678:	4960      	ldr	r1, [pc, #384]	; (80137fc <udp_sendto_if_src+0x1b8>)
 801367a:	485f      	ldr	r0, [pc, #380]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 801367c:	f005 f938 	bl	80188f0 <iprintf>
 8013680:	f06f 030f 	mvn.w	r3, #15
 8013684:	e0af      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d109      	bne.n	80136a0 <udp_sendto_if_src+0x5c>
 801368c:	4b58      	ldr	r3, [pc, #352]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 801368e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013692:	495b      	ldr	r1, [pc, #364]	; (8013800 <udp_sendto_if_src+0x1bc>)
 8013694:	4858      	ldr	r0, [pc, #352]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 8013696:	f005 f92b 	bl	80188f0 <iprintf>
 801369a:	f06f 030f 	mvn.w	r3, #15
 801369e:	e0a2      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d109      	bne.n	80136ba <udp_sendto_if_src+0x76>
 80136a6:	4b52      	ldr	r3, [pc, #328]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 80136a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80136ac:	4955      	ldr	r1, [pc, #340]	; (8013804 <udp_sendto_if_src+0x1c0>)
 80136ae:	4852      	ldr	r0, [pc, #328]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 80136b0:	f005 f91e 	bl	80188f0 <iprintf>
 80136b4:	f06f 030f 	mvn.w	r3, #15
 80136b8:	e095      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d109      	bne.n	80136d4 <udp_sendto_if_src+0x90>
 80136c0:	4b4b      	ldr	r3, [pc, #300]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 80136c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80136c6:	4950      	ldr	r1, [pc, #320]	; (8013808 <udp_sendto_if_src+0x1c4>)
 80136c8:	484b      	ldr	r0, [pc, #300]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 80136ca:	f005 f911 	bl	80188f0 <iprintf>
 80136ce:	f06f 030f 	mvn.w	r3, #15
 80136d2:	e088      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	8a5b      	ldrh	r3, [r3, #18]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d10f      	bne.n	80136fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80136dc:	68f9      	ldr	r1, [r7, #12]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	8a5b      	ldrh	r3, [r3, #18]
 80136e2:	461a      	mov	r2, r3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f000 f893 	bl	8013810 <udp_bind>
 80136ea:	4603      	mov	r3, r0
 80136ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80136ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80136f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136fa:	e074      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	891b      	ldrh	r3, [r3, #8]
 8013700:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013704:	4293      	cmp	r3, r2
 8013706:	d902      	bls.n	801370e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013708:	f04f 33ff 	mov.w	r3, #4294967295
 801370c:	e06b      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801370e:	2108      	movs	r1, #8
 8013710:	68b8      	ldr	r0, [r7, #8]
 8013712:	f7f9 ffcf 	bl	800d6b4 <pbuf_add_header>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d015      	beq.n	8013748 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801371c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013720:	2108      	movs	r1, #8
 8013722:	2022      	movs	r0, #34	; 0x22
 8013724:	f7f9 fd7c 	bl	800d220 <pbuf_alloc>
 8013728:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d102      	bne.n	8013736 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013730:	f04f 33ff 	mov.w	r3, #4294967295
 8013734:	e057      	b.n	80137e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d006      	beq.n	801374c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801373e:	68b9      	ldr	r1, [r7, #8]
 8013740:	69f8      	ldr	r0, [r7, #28]
 8013742:	f7fa f965 	bl	800da10 <pbuf_chain>
 8013746:	e001      	b.n	801374c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801374c:	69fb      	ldr	r3, [r7, #28]
 801374e:	895b      	ldrh	r3, [r3, #10]
 8013750:	2b07      	cmp	r3, #7
 8013752:	d806      	bhi.n	8013762 <udp_sendto_if_src+0x11e>
 8013754:	4b26      	ldr	r3, [pc, #152]	; (80137f0 <udp_sendto_if_src+0x1ac>)
 8013756:	f240 320e 	movw	r2, #782	; 0x30e
 801375a:	492c      	ldr	r1, [pc, #176]	; (801380c <udp_sendto_if_src+0x1c8>)
 801375c:	4826      	ldr	r0, [pc, #152]	; (80137f8 <udp_sendto_if_src+0x1b4>)
 801375e:	f005 f8c7 	bl	80188f0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	8a5b      	ldrh	r3, [r3, #18]
 801376c:	4618      	mov	r0, r3
 801376e:	f7f8 fd9f 	bl	800c2b0 <lwip_htons>
 8013772:	4603      	mov	r3, r0
 8013774:	461a      	mov	r2, r3
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801377a:	887b      	ldrh	r3, [r7, #2]
 801377c:	4618      	mov	r0, r3
 801377e:	f7f8 fd97 	bl	800c2b0 <lwip_htons>
 8013782:	4603      	mov	r3, r0
 8013784:	461a      	mov	r2, r3
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	2200      	movs	r2, #0
 801378e:	719a      	strb	r2, [r3, #6]
 8013790:	2200      	movs	r2, #0
 8013792:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	891b      	ldrh	r3, [r3, #8]
 8013798:	4618      	mov	r0, r3
 801379a:	f7f8 fd89 	bl	800c2b0 <lwip_htons>
 801379e:	4603      	mov	r3, r0
 80137a0:	461a      	mov	r2, r3
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80137a6:	2311      	movs	r3, #17
 80137a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	7adb      	ldrb	r3, [r3, #11]
 80137ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	7a9b      	ldrb	r3, [r3, #10]
 80137b4:	7cb9      	ldrb	r1, [r7, #18]
 80137b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137b8:	9202      	str	r2, [sp, #8]
 80137ba:	7cfa      	ldrb	r2, [r7, #19]
 80137bc:	9201      	str	r2, [sp, #4]
 80137be:	9300      	str	r3, [sp, #0]
 80137c0:	460b      	mov	r3, r1
 80137c2:	687a      	ldr	r2, [r7, #4]
 80137c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137c6:	69f8      	ldr	r0, [r7, #28]
 80137c8:	f003 faf8 	bl	8016dbc <ip4_output_if_src>
 80137cc:	4603      	mov	r3, r0
 80137ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80137d0:	69fa      	ldr	r2, [r7, #28]
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d004      	beq.n	80137e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80137d8:	69f8      	ldr	r0, [r7, #28]
 80137da:	f7fa f801 	bl	800d7e0 <pbuf_free>
    q = NULL;
 80137de:	2300      	movs	r3, #0
 80137e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80137e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3720      	adds	r7, #32
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	0801fba8 	.word	0x0801fba8
 80137f4:	0801fd94 	.word	0x0801fd94
 80137f8:	0801fbfc 	.word	0x0801fbfc
 80137fc:	0801fdb4 	.word	0x0801fdb4
 8013800:	0801fdd4 	.word	0x0801fdd4
 8013804:	0801fdf8 	.word	0x0801fdf8
 8013808:	0801fe1c 	.word	0x0801fe1c
 801380c:	0801fe40 	.word	0x0801fe40

08013810 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b086      	sub	sp, #24
 8013814:	af00      	add	r7, sp, #0
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	4613      	mov	r3, r2
 801381c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013824:	4b39      	ldr	r3, [pc, #228]	; (801390c <udp_bind+0xfc>)
 8013826:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d109      	bne.n	8013842 <udp_bind+0x32>
 801382e:	4b38      	ldr	r3, [pc, #224]	; (8013910 <udp_bind+0x100>)
 8013830:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013834:	4937      	ldr	r1, [pc, #220]	; (8013914 <udp_bind+0x104>)
 8013836:	4838      	ldr	r0, [pc, #224]	; (8013918 <udp_bind+0x108>)
 8013838:	f005 f85a 	bl	80188f0 <iprintf>
 801383c:	f06f 030f 	mvn.w	r3, #15
 8013840:	e060      	b.n	8013904 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013842:	2300      	movs	r3, #0
 8013844:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013846:	4b35      	ldr	r3, [pc, #212]	; (801391c <udp_bind+0x10c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	617b      	str	r3, [r7, #20]
 801384c:	e009      	b.n	8013862 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	429a      	cmp	r2, r3
 8013854:	d102      	bne.n	801385c <udp_bind+0x4c>
      rebind = 1;
 8013856:	2301      	movs	r3, #1
 8013858:	74fb      	strb	r3, [r7, #19]
      break;
 801385a:	e005      	b.n	8013868 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	617b      	str	r3, [r7, #20]
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1f2      	bne.n	801384e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013868:	88fb      	ldrh	r3, [r7, #6]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d109      	bne.n	8013882 <udp_bind+0x72>
    port = udp_new_port();
 801386e:	f7ff fcc5 	bl	80131fc <udp_new_port>
 8013872:	4603      	mov	r3, r0
 8013874:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013876:	88fb      	ldrh	r3, [r7, #6]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d12c      	bne.n	80138d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801387c:	f06f 0307 	mvn.w	r3, #7
 8013880:	e040      	b.n	8013904 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013882:	4b26      	ldr	r3, [pc, #152]	; (801391c <udp_bind+0x10c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	617b      	str	r3, [r7, #20]
 8013888:	e022      	b.n	80138d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801388a:	68fa      	ldr	r2, [r7, #12]
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	429a      	cmp	r2, r3
 8013890:	d01b      	beq.n	80138ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	8a5b      	ldrh	r3, [r3, #18]
 8013896:	88fa      	ldrh	r2, [r7, #6]
 8013898:	429a      	cmp	r2, r3
 801389a:	d116      	bne.n	80138ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d00d      	beq.n	80138c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00a      	beq.n	80138c4 <udp_bind+0xb4>
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d003      	beq.n	80138c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d102      	bne.n	80138ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80138c4:	f06f 0307 	mvn.w	r3, #7
 80138c8:	e01c      	b.n	8013904 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	617b      	str	r3, [r7, #20]
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1d9      	bne.n	801388a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d002      	beq.n	80138e2 <udp_bind+0xd2>
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	e000      	b.n	80138e4 <udp_bind+0xd4>
 80138e2:	2300      	movs	r3, #0
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	88fa      	ldrh	r2, [r7, #6]
 80138ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80138ee:	7cfb      	ldrb	r3, [r7, #19]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d106      	bne.n	8013902 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80138f4:	4b09      	ldr	r3, [pc, #36]	; (801391c <udp_bind+0x10c>)
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80138fc:	4a07      	ldr	r2, [pc, #28]	; (801391c <udp_bind+0x10c>)
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	08020a78 	.word	0x08020a78
 8013910:	0801fba8 	.word	0x0801fba8
 8013914:	0801fe70 	.word	0x0801fe70
 8013918:	0801fbfc 	.word	0x0801fbfc
 801391c:	20007398 	.word	0x20007398

08013920 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	4613      	mov	r3, r2
 801392c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d109      	bne.n	8013948 <udp_connect+0x28>
 8013934:	4b2c      	ldr	r3, [pc, #176]	; (80139e8 <udp_connect+0xc8>)
 8013936:	f240 4235 	movw	r2, #1077	; 0x435
 801393a:	492c      	ldr	r1, [pc, #176]	; (80139ec <udp_connect+0xcc>)
 801393c:	482c      	ldr	r0, [pc, #176]	; (80139f0 <udp_connect+0xd0>)
 801393e:	f004 ffd7 	bl	80188f0 <iprintf>
 8013942:	f06f 030f 	mvn.w	r3, #15
 8013946:	e04b      	b.n	80139e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d109      	bne.n	8013962 <udp_connect+0x42>
 801394e:	4b26      	ldr	r3, [pc, #152]	; (80139e8 <udp_connect+0xc8>)
 8013950:	f240 4236 	movw	r2, #1078	; 0x436
 8013954:	4927      	ldr	r1, [pc, #156]	; (80139f4 <udp_connect+0xd4>)
 8013956:	4826      	ldr	r0, [pc, #152]	; (80139f0 <udp_connect+0xd0>)
 8013958:	f004 ffca 	bl	80188f0 <iprintf>
 801395c:	f06f 030f 	mvn.w	r3, #15
 8013960:	e03e      	b.n	80139e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	8a5b      	ldrh	r3, [r3, #18]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d10f      	bne.n	801398a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801396a:	68f9      	ldr	r1, [r7, #12]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	8a5b      	ldrh	r3, [r3, #18]
 8013970:	461a      	mov	r2, r3
 8013972:	68f8      	ldr	r0, [r7, #12]
 8013974:	f7ff ff4c 	bl	8013810 <udp_bind>
 8013978:	4603      	mov	r3, r0
 801397a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801397c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d002      	beq.n	801398a <udp_connect+0x6a>
      return err;
 8013984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013988:	e02a      	b.n	80139e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <udp_connect+0x76>
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	e000      	b.n	8013998 <udp_connect+0x78>
 8013996:	2300      	movs	r3, #0
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	88fa      	ldrh	r2, [r7, #6]
 80139a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	7c1b      	ldrb	r3, [r3, #16]
 80139a6:	f043 0304 	orr.w	r3, r3, #4
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139b0:	4b11      	ldr	r3, [pc, #68]	; (80139f8 <udp_connect+0xd8>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	617b      	str	r3, [r7, #20]
 80139b6:	e008      	b.n	80139ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 80139b8:	68fa      	ldr	r2, [r7, #12]
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d101      	bne.n	80139c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e00d      	b.n	80139e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	617b      	str	r3, [r7, #20]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1f3      	bne.n	80139b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80139d0:	4b09      	ldr	r3, [pc, #36]	; (80139f8 <udp_connect+0xd8>)
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80139d8:	4a07      	ldr	r2, [pc, #28]	; (80139f8 <udp_connect+0xd8>)
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80139de:	2300      	movs	r3, #0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3718      	adds	r7, #24
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	0801fba8 	.word	0x0801fba8
 80139ec:	0801fe88 	.word	0x0801fe88
 80139f0:	0801fbfc 	.word	0x0801fbfc
 80139f4:	0801fea4 	.word	0x0801fea4
 80139f8:	20007398 	.word	0x20007398

080139fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d107      	bne.n	8013a1e <udp_recv+0x22>
 8013a0e:	4b08      	ldr	r3, [pc, #32]	; (8013a30 <udp_recv+0x34>)
 8013a10:	f240 428a 	movw	r2, #1162	; 0x48a
 8013a14:	4907      	ldr	r1, [pc, #28]	; (8013a34 <udp_recv+0x38>)
 8013a16:	4808      	ldr	r0, [pc, #32]	; (8013a38 <udp_recv+0x3c>)
 8013a18:	f004 ff6a 	bl	80188f0 <iprintf>
 8013a1c:	e005      	b.n	8013a2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	68ba      	ldr	r2, [r7, #8]
 8013a22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	687a      	ldr	r2, [r7, #4]
 8013a28:	61da      	str	r2, [r3, #28]
}
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	0801fba8 	.word	0x0801fba8
 8013a34:	0801fedc 	.word	0x0801fedc
 8013a38:	0801fbfc 	.word	0x0801fbfc

08013a3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d107      	bne.n	8013a5a <udp_remove+0x1e>
 8013a4a:	4b19      	ldr	r3, [pc, #100]	; (8013ab0 <udp_remove+0x74>)
 8013a4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013a50:	4918      	ldr	r1, [pc, #96]	; (8013ab4 <udp_remove+0x78>)
 8013a52:	4819      	ldr	r0, [pc, #100]	; (8013ab8 <udp_remove+0x7c>)
 8013a54:	f004 ff4c 	bl	80188f0 <iprintf>
 8013a58:	e026      	b.n	8013aa8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013a5a:	4b18      	ldr	r3, [pc, #96]	; (8013abc <udp_remove+0x80>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d105      	bne.n	8013a70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013a64:	4b15      	ldr	r3, [pc, #84]	; (8013abc <udp_remove+0x80>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	4a14      	ldr	r2, [pc, #80]	; (8013abc <udp_remove+0x80>)
 8013a6c:	6013      	str	r3, [r2, #0]
 8013a6e:	e017      	b.n	8013aa0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a70:	4b12      	ldr	r3, [pc, #72]	; (8013abc <udp_remove+0x80>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	e010      	b.n	8013a9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d009      	beq.n	8013a94 <udp_remove+0x58>
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d104      	bne.n	8013a94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	68da      	ldr	r2, [r3, #12]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	60da      	str	r2, [r3, #12]
        break;
 8013a92:	e005      	b.n	8013aa0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	60fb      	str	r3, [r7, #12]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d1eb      	bne.n	8013a78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013aa0:	6879      	ldr	r1, [r7, #4]
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	f7f9 f8a6 	bl	800cbf4 <memp_free>
}
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	0801fba8 	.word	0x0801fba8
 8013ab4:	0801fef4 	.word	0x0801fef4
 8013ab8:	0801fbfc 	.word	0x0801fbfc
 8013abc:	20007398 	.word	0x20007398

08013ac0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	f7f9 f848 	bl	800cb5c <memp_malloc>
 8013acc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d007      	beq.n	8013ae4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013ad4:	2220      	movs	r2, #32
 8013ad6:	2100      	movs	r1, #0
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f004 f9fc 	bl	8017ed6 <memset>
    pcb->ttl = UDP_TTL;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	22ff      	movs	r2, #255	; 0xff
 8013ae2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013ae4:	687b      	ldr	r3, [r7, #4]
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3708      	adds	r7, #8
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
	...

08013af0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013af0:	b480      	push	{r7}
 8013af2:	b085      	sub	sp, #20
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d01e      	beq.n	8013b3e <udp_netif_ip_addr_changed+0x4e>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d01a      	beq.n	8013b3e <udp_netif_ip_addr_changed+0x4e>
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d017      	beq.n	8013b3e <udp_netif_ip_addr_changed+0x4e>
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d013      	beq.n	8013b3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b16:	4b0d      	ldr	r3, [pc, #52]	; (8013b4c <udp_netif_ip_addr_changed+0x5c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	60fb      	str	r3, [r7, #12]
 8013b1c:	e00c      	b.n	8013b38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d103      	bne.n	8013b32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	68db      	ldr	r3, [r3, #12]
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d1ef      	bne.n	8013b1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013b3e:	bf00      	nop
 8013b40:	3714      	adds	r7, #20
 8013b42:	46bd      	mov	sp, r7
 8013b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	20007398 	.word	0x20007398

08013b50 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013b54:	4b20      	ldr	r3, [pc, #128]	; (8013bd8 <dhcp_inc_pcb_refcount+0x88>)
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d133      	bne.n	8013bc4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013b5c:	4b1f      	ldr	r3, [pc, #124]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d005      	beq.n	8013b70 <dhcp_inc_pcb_refcount+0x20>
 8013b64:	4b1e      	ldr	r3, [pc, #120]	; (8013be0 <dhcp_inc_pcb_refcount+0x90>)
 8013b66:	22e5      	movs	r2, #229	; 0xe5
 8013b68:	491e      	ldr	r1, [pc, #120]	; (8013be4 <dhcp_inc_pcb_refcount+0x94>)
 8013b6a:	481f      	ldr	r0, [pc, #124]	; (8013be8 <dhcp_inc_pcb_refcount+0x98>)
 8013b6c:	f004 fec0 	bl	80188f0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013b70:	f7ff ffa6 	bl	8013ac0 <udp_new>
 8013b74:	4602      	mov	r2, r0
 8013b76:	4b19      	ldr	r3, [pc, #100]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b78:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013b7a:	4b18      	ldr	r3, [pc, #96]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d102      	bne.n	8013b88 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013b82:	f04f 33ff 	mov.w	r3, #4294967295
 8013b86:	e024      	b.n	8013bd2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013b88:	4b14      	ldr	r3, [pc, #80]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	7a5a      	ldrb	r2, [r3, #9]
 8013b8e:	4b13      	ldr	r3, [pc, #76]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f042 0220 	orr.w	r2, r2, #32
 8013b96:	b2d2      	uxtb	r2, r2
 8013b98:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013b9a:	4b10      	ldr	r3, [pc, #64]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2244      	movs	r2, #68	; 0x44
 8013ba0:	4912      	ldr	r1, [pc, #72]	; (8013bec <dhcp_inc_pcb_refcount+0x9c>)
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7ff fe34 	bl	8013810 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013ba8:	4b0c      	ldr	r3, [pc, #48]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2243      	movs	r2, #67	; 0x43
 8013bae:	490f      	ldr	r1, [pc, #60]	; (8013bec <dhcp_inc_pcb_refcount+0x9c>)
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff feb5 	bl	8013920 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013bb6:	4b09      	ldr	r3, [pc, #36]	; (8013bdc <dhcp_inc_pcb_refcount+0x8c>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	490c      	ldr	r1, [pc, #48]	; (8013bf0 <dhcp_inc_pcb_refcount+0xa0>)
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7ff ff1c 	bl	80139fc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013bc4:	4b04      	ldr	r3, [pc, #16]	; (8013bd8 <dhcp_inc_pcb_refcount+0x88>)
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	b2da      	uxtb	r2, r3
 8013bcc:	4b02      	ldr	r3, [pc, #8]	; (8013bd8 <dhcp_inc_pcb_refcount+0x88>)
 8013bce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	200004d8 	.word	0x200004d8
 8013bdc:	200004d4 	.word	0x200004d4
 8013be0:	0801ff0c 	.word	0x0801ff0c
 8013be4:	0801ff44 	.word	0x0801ff44
 8013be8:	0801ff6c 	.word	0x0801ff6c
 8013bec:	08020a78 	.word	0x08020a78
 8013bf0:	0801540d 	.word	0x0801540d

08013bf4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013bf8:	4b0e      	ldr	r3, [pc, #56]	; (8013c34 <dhcp_dec_pcb_refcount+0x40>)
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d105      	bne.n	8013c0c <dhcp_dec_pcb_refcount+0x18>
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <dhcp_dec_pcb_refcount+0x44>)
 8013c02:	22ff      	movs	r2, #255	; 0xff
 8013c04:	490d      	ldr	r1, [pc, #52]	; (8013c3c <dhcp_dec_pcb_refcount+0x48>)
 8013c06:	480e      	ldr	r0, [pc, #56]	; (8013c40 <dhcp_dec_pcb_refcount+0x4c>)
 8013c08:	f004 fe72 	bl	80188f0 <iprintf>
  dhcp_pcb_refcount--;
 8013c0c:	4b09      	ldr	r3, [pc, #36]	; (8013c34 <dhcp_dec_pcb_refcount+0x40>)
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	4b07      	ldr	r3, [pc, #28]	; (8013c34 <dhcp_dec_pcb_refcount+0x40>)
 8013c16:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013c18:	4b06      	ldr	r3, [pc, #24]	; (8013c34 <dhcp_dec_pcb_refcount+0x40>)
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d107      	bne.n	8013c30 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013c20:	4b08      	ldr	r3, [pc, #32]	; (8013c44 <dhcp_dec_pcb_refcount+0x50>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff ff09 	bl	8013a3c <udp_remove>
    dhcp_pcb = NULL;
 8013c2a:	4b06      	ldr	r3, [pc, #24]	; (8013c44 <dhcp_dec_pcb_refcount+0x50>)
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	601a      	str	r2, [r3, #0]
  }
}
 8013c30:	bf00      	nop
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	200004d8 	.word	0x200004d8
 8013c38:	0801ff0c 	.word	0x0801ff0c
 8013c3c:	0801ff94 	.word	0x0801ff94
 8013c40:	0801ff6c 	.word	0x0801ff6c
 8013c44:	200004d4 	.word	0x200004d4

08013c48 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013c56:	210c      	movs	r1, #12
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	f001 f819 	bl	8014c90 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013c5e:	4b06      	ldr	r3, [pc, #24]	; (8013c78 <dhcp_handle_nak+0x30>)
 8013c60:	4a05      	ldr	r2, [pc, #20]	; (8013c78 <dhcp_handle_nak+0x30>)
 8013c62:	4905      	ldr	r1, [pc, #20]	; (8013c78 <dhcp_handle_nak+0x30>)
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7f9 f967 	bl	800cf38 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 fc0c 	bl	8014488 <dhcp_discover>
}
 8013c70:	bf00      	nop
 8013c72:	3710      	adds	r7, #16
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	08020a78 	.word	0x08020a78

08013c7c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c88:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013c8a:	2108      	movs	r1, #8
 8013c8c:	68f8      	ldr	r0, [r7, #12]
 8013c8e:	f000 ffff 	bl	8014c90 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	331c      	adds	r3, #28
 8013c96:	2200      	movs	r2, #0
 8013c98:	4619      	mov	r1, r3
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f002 fafe 	bl	801629c <etharp_query>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	799b      	ldrb	r3, [r3, #6]
 8013ca8:	2bff      	cmp	r3, #255	; 0xff
 8013caa:	d005      	beq.n	8013cb8 <dhcp_check+0x3c>
    dhcp->tries++;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	799b      	ldrb	r3, [r3, #6]
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	b2da      	uxtb	r2, r3
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013cb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013cbc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013cbe:	893b      	ldrh	r3, [r7, #8]
 8013cc0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013cc4:	4a06      	ldr	r2, [pc, #24]	; (8013ce0 <dhcp_check+0x64>)
 8013cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8013cca:	1152      	asrs	r2, r2, #5
 8013ccc:	17db      	asrs	r3, r3, #31
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	b29a      	uxth	r2, r3
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013cd6:	bf00      	nop
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	10624dd3 	.word	0x10624dd3

08013ce4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013cf4:	4b0c      	ldr	r3, [pc, #48]	; (8013d28 <dhcp_handle_offer+0x44>)
 8013cf6:	789b      	ldrb	r3, [r3, #2]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d011      	beq.n	8013d20 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013d02:	4b0a      	ldr	r3, [pc, #40]	; (8013d2c <dhcp_handle_offer+0x48>)
 8013d04:	689b      	ldr	r3, [r3, #8]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7f8 fae7 	bl	800c2da <lwip_htonl>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	691a      	ldr	r2, [r3, #16]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f808 	bl	8013d30 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013d20:	bf00      	nop
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	2000739c 	.word	0x2000739c
 8013d2c:	200073a4 	.word	0x200073a4

08013d30 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013d30:	b5b0      	push	{r4, r5, r7, lr}
 8013d32:	b08a      	sub	sp, #40	; 0x28
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d109      	bne.n	8013d52 <dhcp_select+0x22>
 8013d3e:	4b71      	ldr	r3, [pc, #452]	; (8013f04 <dhcp_select+0x1d4>)
 8013d40:	f240 1277 	movw	r2, #375	; 0x177
 8013d44:	4970      	ldr	r1, [pc, #448]	; (8013f08 <dhcp_select+0x1d8>)
 8013d46:	4871      	ldr	r0, [pc, #452]	; (8013f0c <dhcp_select+0x1dc>)
 8013d48:	f004 fdd2 	bl	80188f0 <iprintf>
 8013d4c:	f06f 030f 	mvn.w	r3, #15
 8013d50:	e0d3      	b.n	8013efa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d56:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013d58:	69bb      	ldr	r3, [r7, #24]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d109      	bne.n	8013d72 <dhcp_select+0x42>
 8013d5e:	4b69      	ldr	r3, [pc, #420]	; (8013f04 <dhcp_select+0x1d4>)
 8013d60:	f240 1279 	movw	r2, #377	; 0x179
 8013d64:	496a      	ldr	r1, [pc, #424]	; (8013f10 <dhcp_select+0x1e0>)
 8013d66:	4869      	ldr	r0, [pc, #420]	; (8013f0c <dhcp_select+0x1dc>)
 8013d68:	f004 fdc2 	bl	80188f0 <iprintf>
 8013d6c:	f06f 0305 	mvn.w	r3, #5
 8013d70:	e0c3      	b.n	8013efa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013d72:	2101      	movs	r1, #1
 8013d74:	69b8      	ldr	r0, [r7, #24]
 8013d76:	f000 ff8b 	bl	8014c90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013d7a:	f107 030c 	add.w	r3, r7, #12
 8013d7e:	2203      	movs	r2, #3
 8013d80:	69b9      	ldr	r1, [r7, #24]
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f001 fc0e 	bl	80155a4 <dhcp_create_msg>
 8013d88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f000 8085 	beq.w	8013e9c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013d98:	89b8      	ldrh	r0, [r7, #12]
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013da0:	2302      	movs	r3, #2
 8013da2:	2239      	movs	r2, #57	; 0x39
 8013da4:	f000 ff8e 	bl	8014cc4 <dhcp_option>
 8013da8:	4603      	mov	r3, r0
 8013daa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013dac:	89b8      	ldrh	r0, [r7, #12]
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013db8:	461a      	mov	r2, r3
 8013dba:	f000 ffdd 	bl	8014d78 <dhcp_option_short>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013dc2:	89b8      	ldrh	r0, [r7, #12]
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dca:	2304      	movs	r3, #4
 8013dcc:	2232      	movs	r2, #50	; 0x32
 8013dce:	f000 ff79 	bl	8014cc4 <dhcp_option>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013dd6:	89bc      	ldrh	r4, [r7, #12]
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	69db      	ldr	r3, [r3, #28]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7f8 fa79 	bl	800c2da <lwip_htonl>
 8013de8:	4603      	mov	r3, r0
 8013dea:	461a      	mov	r2, r3
 8013dec:	4629      	mov	r1, r5
 8013dee:	4620      	mov	r0, r4
 8013df0:	f000 fff4 	bl	8014ddc <dhcp_option_long>
 8013df4:	4603      	mov	r3, r0
 8013df6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013df8:	89b8      	ldrh	r0, [r7, #12]
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e00:	2304      	movs	r3, #4
 8013e02:	2236      	movs	r2, #54	; 0x36
 8013e04:	f000 ff5e 	bl	8014cc4 <dhcp_option>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013e0c:	89bc      	ldrh	r4, [r7, #12]
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	699b      	ldr	r3, [r3, #24]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7f8 fa5e 	bl	800c2da <lwip_htonl>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	461a      	mov	r2, r3
 8013e22:	4629      	mov	r1, r5
 8013e24:	4620      	mov	r0, r4
 8013e26:	f000 ffd9 	bl	8014ddc <dhcp_option_long>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013e2e:	89b8      	ldrh	r0, [r7, #12]
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e36:	2303      	movs	r3, #3
 8013e38:	2237      	movs	r2, #55	; 0x37
 8013e3a:	f000 ff43 	bl	8014cc4 <dhcp_option>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e42:	2300      	movs	r3, #0
 8013e44:	77bb      	strb	r3, [r7, #30]
 8013e46:	e00e      	b.n	8013e66 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013e48:	89b8      	ldrh	r0, [r7, #12]
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e50:	7fbb      	ldrb	r3, [r7, #30]
 8013e52:	4a30      	ldr	r2, [pc, #192]	; (8013f14 <dhcp_select+0x1e4>)
 8013e54:	5cd3      	ldrb	r3, [r2, r3]
 8013e56:	461a      	mov	r2, r3
 8013e58:	f000 ff68 	bl	8014d2c <dhcp_option_byte>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e60:	7fbb      	ldrb	r3, [r7, #30]
 8013e62:	3301      	adds	r3, #1
 8013e64:	77bb      	strb	r3, [r7, #30]
 8013e66:	7fbb      	ldrb	r3, [r7, #30]
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	d9ed      	bls.n	8013e48 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013e6c:	89b8      	ldrh	r0, [r7, #12]
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	33f0      	adds	r3, #240	; 0xf0
 8013e72:	697a      	ldr	r2, [r7, #20]
 8013e74:	4619      	mov	r1, r3
 8013e76:	f001 fc6b 	bl	8015750 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013e7a:	4b27      	ldr	r3, [pc, #156]	; (8013f18 <dhcp_select+0x1e8>)
 8013e7c:	6818      	ldr	r0, [r3, #0]
 8013e7e:	4b27      	ldr	r3, [pc, #156]	; (8013f1c <dhcp_select+0x1ec>)
 8013e80:	9301      	str	r3, [sp, #4]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	2343      	movs	r3, #67	; 0x43
 8013e88:	4a25      	ldr	r2, [pc, #148]	; (8013f20 <dhcp_select+0x1f0>)
 8013e8a:	6979      	ldr	r1, [r7, #20]
 8013e8c:	f7ff fbda 	bl	8013644 <udp_sendto_if_src>
 8013e90:	4603      	mov	r3, r0
 8013e92:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013e94:	6978      	ldr	r0, [r7, #20]
 8013e96:	f7f9 fca3 	bl	800d7e0 <pbuf_free>
 8013e9a:	e001      	b.n	8013ea0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013e9c:	23ff      	movs	r3, #255	; 0xff
 8013e9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	799b      	ldrb	r3, [r3, #6]
 8013ea4:	2bff      	cmp	r3, #255	; 0xff
 8013ea6:	d005      	beq.n	8013eb4 <dhcp_select+0x184>
    dhcp->tries++;
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	799b      	ldrb	r3, [r3, #6]
 8013eac:	3301      	adds	r3, #1
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	69bb      	ldr	r3, [r7, #24]
 8013eb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	799b      	ldrb	r3, [r3, #6]
 8013eb8:	2b05      	cmp	r3, #5
 8013eba:	d80d      	bhi.n	8013ed8 <dhcp_select+0x1a8>
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	799b      	ldrb	r3, [r3, #6]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	4093      	lsls	r3, r2
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	461a      	mov	r2, r3
 8013eca:	0152      	lsls	r2, r2, #5
 8013ecc:	1ad2      	subs	r2, r2, r3
 8013ece:	0092      	lsls	r2, r2, #2
 8013ed0:	4413      	add	r3, r2
 8013ed2:	00db      	lsls	r3, r3, #3
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	e001      	b.n	8013edc <dhcp_select+0x1ac>
 8013ed8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013edc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013ede:	89fb      	ldrh	r3, [r7, #14]
 8013ee0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ee4:	4a0f      	ldr	r2, [pc, #60]	; (8013f24 <dhcp_select+0x1f4>)
 8013ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8013eea:	1152      	asrs	r2, r2, #5
 8013eec:	17db      	asrs	r3, r3, #31
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	b29a      	uxth	r2, r3
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3720      	adds	r7, #32
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bdb0      	pop	{r4, r5, r7, pc}
 8013f02:	bf00      	nop
 8013f04:	0801ff0c 	.word	0x0801ff0c
 8013f08:	0801ffb8 	.word	0x0801ffb8
 8013f0c:	0801ff6c 	.word	0x0801ff6c
 8013f10:	0801ffd4 	.word	0x0801ffd4
 8013f14:	20000070 	.word	0x20000070
 8013f18:	200004d4 	.word	0x200004d4
 8013f1c:	08020a78 	.word	0x08020a78
 8013f20:	08020a7c 	.word	0x08020a7c
 8013f24:	10624dd3 	.word	0x10624dd3

08013f28 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013f2e:	4b27      	ldr	r3, [pc, #156]	; (8013fcc <dhcp_coarse_tmr+0xa4>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	607b      	str	r3, [r7, #4]
 8013f34:	e042      	b.n	8013fbc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d039      	beq.n	8013fb6 <dhcp_coarse_tmr+0x8e>
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	795b      	ldrb	r3, [r3, #5]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d035      	beq.n	8013fb6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	8a9b      	ldrh	r3, [r3, #20]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d012      	beq.n	8013f78 <dhcp_coarse_tmr+0x50>
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	8a5b      	ldrh	r3, [r3, #18]
 8013f56:	3301      	adds	r3, #1
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	825a      	strh	r2, [r3, #18]
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	8a5a      	ldrh	r2, [r3, #18]
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	8a9b      	ldrh	r3, [r3, #20]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d106      	bne.n	8013f78 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f000 fdf6 	bl	8014b5c <dhcp_release_and_stop>
        dhcp_start(netif);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f000 f969 	bl	8014248 <dhcp_start>
 8013f76:	e01e      	b.n	8013fb6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	8a1b      	ldrh	r3, [r3, #16]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00b      	beq.n	8013f98 <dhcp_coarse_tmr+0x70>
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	8a1b      	ldrh	r3, [r3, #16]
 8013f84:	1e5a      	subs	r2, r3, #1
 8013f86:	b291      	uxth	r1, r2
 8013f88:	683a      	ldr	r2, [r7, #0]
 8013f8a:	8211      	strh	r1, [r2, #16]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d103      	bne.n	8013f98 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f000 f8c6 	bl	8014122 <dhcp_t2_timeout>
 8013f96:	e00e      	b.n	8013fb6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	89db      	ldrh	r3, [r3, #14]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00a      	beq.n	8013fb6 <dhcp_coarse_tmr+0x8e>
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	89db      	ldrh	r3, [r3, #14]
 8013fa4:	1e5a      	subs	r2, r3, #1
 8013fa6:	b291      	uxth	r1, r2
 8013fa8:	683a      	ldr	r2, [r7, #0]
 8013faa:	81d1      	strh	r1, [r2, #14]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d102      	bne.n	8013fb6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f000 f888 	bl	80140c6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	607b      	str	r3, [r7, #4]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d1b9      	bne.n	8013f36 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	20007370 	.word	0x20007370

08013fd0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013fd6:	4b16      	ldr	r3, [pc, #88]	; (8014030 <dhcp_fine_tmr+0x60>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	607b      	str	r3, [r7, #4]
 8013fdc:	e020      	b.n	8014020 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d017      	beq.n	801401a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	891b      	ldrh	r3, [r3, #8]
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d906      	bls.n	8014000 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	891b      	ldrh	r3, [r3, #8]
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	811a      	strh	r2, [r3, #8]
 8013ffe:	e00c      	b.n	801401a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	891b      	ldrh	r3, [r3, #8]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d108      	bne.n	801401a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	891b      	ldrh	r3, [r3, #8]
 801400c:	3b01      	subs	r3, #1
 801400e:	b29a      	uxth	r2, r3
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 f80d 	bl	8014034 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	607b      	str	r3, [r7, #4]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d1db      	bne.n	8013fde <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014026:	bf00      	nop
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	20007370 	.word	0x20007370

08014034 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014040:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	795b      	ldrb	r3, [r3, #5]
 8014046:	2b0c      	cmp	r3, #12
 8014048:	d003      	beq.n	8014052 <dhcp_timeout+0x1e>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	795b      	ldrb	r3, [r3, #5]
 801404e:	2b06      	cmp	r3, #6
 8014050:	d103      	bne.n	801405a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f000 fa18 	bl	8014488 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014058:	e031      	b.n	80140be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	795b      	ldrb	r3, [r3, #5]
 801405e:	2b01      	cmp	r3, #1
 8014060:	d10e      	bne.n	8014080 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	799b      	ldrb	r3, [r3, #6]
 8014066:	2b05      	cmp	r3, #5
 8014068:	d803      	bhi.n	8014072 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f7ff fe60 	bl	8013d30 <dhcp_select>
}
 8014070:	e025      	b.n	80140be <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f000 fd72 	bl	8014b5c <dhcp_release_and_stop>
      dhcp_start(netif);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 f8e5 	bl	8014248 <dhcp_start>
}
 801407e:	e01e      	b.n	80140be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	795b      	ldrb	r3, [r3, #5]
 8014084:	2b08      	cmp	r3, #8
 8014086:	d10b      	bne.n	80140a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	799b      	ldrb	r3, [r3, #6]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d803      	bhi.n	8014098 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f7ff fdf3 	bl	8013c7c <dhcp_check>
}
 8014096:	e012      	b.n	80140be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 fa97 	bl	80145cc <dhcp_bind>
}
 801409e:	e00e      	b.n	80140be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	795b      	ldrb	r3, [r3, #5]
 80140a4:	2b03      	cmp	r3, #3
 80140a6:	d10a      	bne.n	80140be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	799b      	ldrb	r3, [r3, #6]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d803      	bhi.n	80140b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 fc9d 	bl	80149f0 <dhcp_reboot>
}
 80140b6:	e002      	b.n	80140be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f000 f9e5 	bl	8014488 <dhcp_discover>
}
 80140be:	bf00      	nop
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}

080140c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80140c6:	b580      	push	{r7, lr}
 80140c8:	b084      	sub	sp, #16
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	795b      	ldrb	r3, [r3, #5]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d007      	beq.n	80140ec <dhcp_t1_timeout+0x26>
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	795b      	ldrb	r3, [r3, #5]
 80140e0:	2b0a      	cmp	r3, #10
 80140e2:	d003      	beq.n	80140ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80140e8:	2b05      	cmp	r3, #5
 80140ea:	d116      	bne.n	801411a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 fb47 	bl	8014780 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	899b      	ldrh	r3, [r3, #12]
 80140f6:	461a      	mov	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	8a5b      	ldrh	r3, [r3, #18]
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	2b01      	cmp	r3, #1
 8014100:	dd0b      	ble.n	801411a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	899b      	ldrh	r3, [r3, #12]
 8014106:	461a      	mov	r2, r3
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	8a5b      	ldrh	r3, [r3, #18]
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	0fda      	lsrs	r2, r3, #31
 8014110:	4413      	add	r3, r2
 8014112:	105b      	asrs	r3, r3, #1
 8014114:	b29a      	uxth	r2, r3
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801411a:	bf00      	nop
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b084      	sub	sp, #16
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801412e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	795b      	ldrb	r3, [r3, #5]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d00b      	beq.n	8014150 <dhcp_t2_timeout+0x2e>
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	795b      	ldrb	r3, [r3, #5]
 801413c:	2b0a      	cmp	r3, #10
 801413e:	d007      	beq.n	8014150 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014144:	2b05      	cmp	r3, #5
 8014146:	d003      	beq.n	8014150 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	795b      	ldrb	r3, [r3, #5]
 801414c:	2b04      	cmp	r3, #4
 801414e:	d116      	bne.n	801417e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f000 fbb1 	bl	80148b8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	8a9b      	ldrh	r3, [r3, #20]
 801415a:	461a      	mov	r2, r3
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	8a5b      	ldrh	r3, [r3, #18]
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	2b01      	cmp	r3, #1
 8014164:	dd0b      	ble.n	801417e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	8a9b      	ldrh	r3, [r3, #20]
 801416a:	461a      	mov	r2, r3
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	8a5b      	ldrh	r3, [r3, #18]
 8014170:	1ad3      	subs	r3, r2, r3
 8014172:	0fda      	lsrs	r2, r3, #31
 8014174:	4413      	add	r3, r2
 8014176:	105b      	asrs	r3, r3, #1
 8014178:	b29a      	uxth	r2, r3
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801417e:	bf00      	nop
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
	...

08014188 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b084      	sub	sp, #16
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014196:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2200      	movs	r2, #0
 801419c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2200      	movs	r2, #0
 80141a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80141a4:	4b26      	ldr	r3, [pc, #152]	; (8014240 <dhcp_handle_ack+0xb8>)
 80141a6:	78db      	ldrb	r3, [r3, #3]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d003      	beq.n	80141b4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80141ac:	4b25      	ldr	r3, [pc, #148]	; (8014244 <dhcp_handle_ack+0xbc>)
 80141ae:	68da      	ldr	r2, [r3, #12]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80141b4:	4b22      	ldr	r3, [pc, #136]	; (8014240 <dhcp_handle_ack+0xb8>)
 80141b6:	791b      	ldrb	r3, [r3, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d004      	beq.n	80141c6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80141bc:	4b21      	ldr	r3, [pc, #132]	; (8014244 <dhcp_handle_ack+0xbc>)
 80141be:	691a      	ldr	r2, [r3, #16]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80141c4:	e004      	b.n	80141d0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141ca:	085a      	lsrs	r2, r3, #1
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80141d0:	4b1b      	ldr	r3, [pc, #108]	; (8014240 <dhcp_handle_ack+0xb8>)
 80141d2:	795b      	ldrb	r3, [r3, #5]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d004      	beq.n	80141e2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80141d8:	4b1a      	ldr	r3, [pc, #104]	; (8014244 <dhcp_handle_ack+0xbc>)
 80141da:	695a      	ldr	r2, [r3, #20]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	631a      	str	r2, [r3, #48]	; 0x30
 80141e0:	e007      	b.n	80141f2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141e6:	4613      	mov	r3, r2
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	1a9b      	subs	r3, r3, r2
 80141ec:	08da      	lsrs	r2, r3, #3
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	691a      	ldr	r2, [r3, #16]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80141fa:	4b11      	ldr	r3, [pc, #68]	; (8014240 <dhcp_handle_ack+0xb8>)
 80141fc:	799b      	ldrb	r3, [r3, #6]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00b      	beq.n	801421a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014202:	4b10      	ldr	r3, [pc, #64]	; (8014244 <dhcp_handle_ack+0xbc>)
 8014204:	699b      	ldr	r3, [r3, #24]
 8014206:	4618      	mov	r0, r3
 8014208:	f7f8 f867 	bl	800c2da <lwip_htonl>
 801420c:	4602      	mov	r2, r0
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2201      	movs	r2, #1
 8014216:	71da      	strb	r2, [r3, #7]
 8014218:	e002      	b.n	8014220 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2200      	movs	r2, #0
 801421e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014220:	4b07      	ldr	r3, [pc, #28]	; (8014240 <dhcp_handle_ack+0xb8>)
 8014222:	79db      	ldrb	r3, [r3, #7]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d007      	beq.n	8014238 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014228:	4b06      	ldr	r3, [pc, #24]	; (8014244 <dhcp_handle_ack+0xbc>)
 801422a:	69db      	ldr	r3, [r3, #28]
 801422c:	4618      	mov	r0, r3
 801422e:	f7f8 f854 	bl	800c2da <lwip_htonl>
 8014232:	4602      	mov	r2, r0
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014238:	bf00      	nop
 801423a:	3710      	adds	r7, #16
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	2000739c 	.word	0x2000739c
 8014244:	200073a4 	.word	0x200073a4

08014248 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d109      	bne.n	801426a <dhcp_start+0x22>
 8014256:	4b37      	ldr	r3, [pc, #220]	; (8014334 <dhcp_start+0xec>)
 8014258:	f240 22e7 	movw	r2, #743	; 0x2e7
 801425c:	4936      	ldr	r1, [pc, #216]	; (8014338 <dhcp_start+0xf0>)
 801425e:	4837      	ldr	r0, [pc, #220]	; (801433c <dhcp_start+0xf4>)
 8014260:	f004 fb46 	bl	80188f0 <iprintf>
 8014264:	f06f 030f 	mvn.w	r3, #15
 8014268:	e060      	b.n	801432c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014270:	f003 0301 	and.w	r3, r3, #1
 8014274:	2b00      	cmp	r3, #0
 8014276:	d109      	bne.n	801428c <dhcp_start+0x44>
 8014278:	4b2e      	ldr	r3, [pc, #184]	; (8014334 <dhcp_start+0xec>)
 801427a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801427e:	4930      	ldr	r1, [pc, #192]	; (8014340 <dhcp_start+0xf8>)
 8014280:	482e      	ldr	r0, [pc, #184]	; (801433c <dhcp_start+0xf4>)
 8014282:	f004 fb35 	bl	80188f0 <iprintf>
 8014286:	f06f 030f 	mvn.w	r3, #15
 801428a:	e04f      	b.n	801432c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014290:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014296:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801429a:	d202      	bcs.n	80142a2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801429c:	f04f 33ff 	mov.w	r3, #4294967295
 80142a0:	e044      	b.n	801432c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d10d      	bne.n	80142c4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80142a8:	2034      	movs	r0, #52	; 0x34
 80142aa:	f7f8 fae9 	bl	800c880 <mem_malloc>
 80142ae:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d102      	bne.n	80142bc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80142b6:	f04f 33ff 	mov.w	r3, #4294967295
 80142ba:	e037      	b.n	801432c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	625a      	str	r2, [r3, #36]	; 0x24
 80142c2:	e005      	b.n	80142d0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	791b      	ldrb	r3, [r3, #4]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d001      	beq.n	80142d0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80142cc:	f7ff fc92 	bl	8013bf4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80142d0:	2234      	movs	r2, #52	; 0x34
 80142d2:	2100      	movs	r1, #0
 80142d4:	68f8      	ldr	r0, [r7, #12]
 80142d6:	f003 fdfe 	bl	8017ed6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80142da:	f7ff fc39 	bl	8013b50 <dhcp_inc_pcb_refcount>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d002      	beq.n	80142ea <dhcp_start+0xa2>
    return ERR_MEM;
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
 80142e8:	e020      	b.n	801432c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	2201      	movs	r2, #1
 80142ee:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80142f6:	f003 0304 	and.w	r3, r3, #4
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d105      	bne.n	801430a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80142fe:	2102      	movs	r1, #2
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f000 fcc5 	bl	8014c90 <dhcp_set_state>
    return ERR_OK;
 8014306:	2300      	movs	r3, #0
 8014308:	e010      	b.n	801432c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f000 f8bc 	bl	8014488 <dhcp_discover>
 8014310:	4603      	mov	r3, r0
 8014312:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014314:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d005      	beq.n	8014328 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 fc1d 	bl	8014b5c <dhcp_release_and_stop>
    return ERR_MEM;
 8014322:	f04f 33ff 	mov.w	r3, #4294967295
 8014326:	e001      	b.n	801432c <dhcp_start+0xe4>
  }
  return result;
 8014328:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801432c:	4618      	mov	r0, r3
 801432e:	3710      	adds	r7, #16
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	0801ff0c 	.word	0x0801ff0c
 8014338:	0801fff0 	.word	0x0801fff0
 801433c:	0801ff6c 	.word	0x0801ff6c
 8014340:	08020034 	.word	0x08020034

08014344 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d107      	bne.n	8014364 <dhcp_arp_reply+0x20>
 8014354:	4b0e      	ldr	r3, [pc, #56]	; (8014390 <dhcp_arp_reply+0x4c>)
 8014356:	f240 328b 	movw	r2, #907	; 0x38b
 801435a:	490e      	ldr	r1, [pc, #56]	; (8014394 <dhcp_arp_reply+0x50>)
 801435c:	480e      	ldr	r0, [pc, #56]	; (8014398 <dhcp_arp_reply+0x54>)
 801435e:	f004 fac7 	bl	80188f0 <iprintf>
 8014362:	e012      	b.n	801438a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014368:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00c      	beq.n	801438a <dhcp_arp_reply+0x46>
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	795b      	ldrb	r3, [r3, #5]
 8014374:	2b08      	cmp	r3, #8
 8014376:	d108      	bne.n	801438a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	69db      	ldr	r3, [r3, #28]
 8014380:	429a      	cmp	r2, r3
 8014382:	d102      	bne.n	801438a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f000 f809 	bl	801439c <dhcp_decline>
    }
  }
}
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	0801ff0c 	.word	0x0801ff0c
 8014394:	0801fff0 	.word	0x0801fff0
 8014398:	0801ff6c 	.word	0x0801ff6c

0801439c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801439c:	b5b0      	push	{r4, r5, r7, lr}
 801439e:	b08a      	sub	sp, #40	; 0x28
 80143a0:	af02      	add	r7, sp, #8
 80143a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80143aa:	210c      	movs	r1, #12
 80143ac:	69b8      	ldr	r0, [r7, #24]
 80143ae:	f000 fc6f 	bl	8014c90 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80143b2:	f107 030c 	add.w	r3, r7, #12
 80143b6:	2204      	movs	r2, #4
 80143b8:	69b9      	ldr	r1, [r7, #24]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f001 f8f2 	bl	80155a4 <dhcp_create_msg>
 80143c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d035      	beq.n	8014434 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80143ce:	89b8      	ldrh	r0, [r7, #12]
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143d6:	2304      	movs	r3, #4
 80143d8:	2232      	movs	r2, #50	; 0x32
 80143da:	f000 fc73 	bl	8014cc4 <dhcp_option>
 80143de:	4603      	mov	r3, r0
 80143e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80143e2:	89bc      	ldrh	r4, [r7, #12]
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	69db      	ldr	r3, [r3, #28]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7f7 ff73 	bl	800c2da <lwip_htonl>
 80143f4:	4603      	mov	r3, r0
 80143f6:	461a      	mov	r2, r3
 80143f8:	4629      	mov	r1, r5
 80143fa:	4620      	mov	r0, r4
 80143fc:	f000 fcee 	bl	8014ddc <dhcp_option_long>
 8014400:	4603      	mov	r3, r0
 8014402:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014404:	89b8      	ldrh	r0, [r7, #12]
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	33f0      	adds	r3, #240	; 0xf0
 801440a:	697a      	ldr	r2, [r7, #20]
 801440c:	4619      	mov	r1, r3
 801440e:	f001 f99f 	bl	8015750 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014412:	4b19      	ldr	r3, [pc, #100]	; (8014478 <dhcp_decline+0xdc>)
 8014414:	6818      	ldr	r0, [r3, #0]
 8014416:	4b19      	ldr	r3, [pc, #100]	; (801447c <dhcp_decline+0xe0>)
 8014418:	9301      	str	r3, [sp, #4]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	2343      	movs	r3, #67	; 0x43
 8014420:	4a17      	ldr	r2, [pc, #92]	; (8014480 <dhcp_decline+0xe4>)
 8014422:	6979      	ldr	r1, [r7, #20]
 8014424:	f7ff f90e 	bl	8013644 <udp_sendto_if_src>
 8014428:	4603      	mov	r3, r0
 801442a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801442c:	6978      	ldr	r0, [r7, #20]
 801442e:	f7f9 f9d7 	bl	800d7e0 <pbuf_free>
 8014432:	e001      	b.n	8014438 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014434:	23ff      	movs	r3, #255	; 0xff
 8014436:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014438:	69bb      	ldr	r3, [r7, #24]
 801443a:	799b      	ldrb	r3, [r3, #6]
 801443c:	2bff      	cmp	r3, #255	; 0xff
 801443e:	d005      	beq.n	801444c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	799b      	ldrb	r3, [r3, #6]
 8014444:	3301      	adds	r3, #1
 8014446:	b2da      	uxtb	r2, r3
 8014448:	69bb      	ldr	r3, [r7, #24]
 801444a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801444c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014450:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014452:	89fb      	ldrh	r3, [r7, #14]
 8014454:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014458:	4a0a      	ldr	r2, [pc, #40]	; (8014484 <dhcp_decline+0xe8>)
 801445a:	fb82 1203 	smull	r1, r2, r2, r3
 801445e:	1152      	asrs	r2, r2, #5
 8014460:	17db      	asrs	r3, r3, #31
 8014462:	1ad3      	subs	r3, r2, r3
 8014464:	b29a      	uxth	r2, r3
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801446a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801446e:	4618      	mov	r0, r3
 8014470:	3720      	adds	r7, #32
 8014472:	46bd      	mov	sp, r7
 8014474:	bdb0      	pop	{r4, r5, r7, pc}
 8014476:	bf00      	nop
 8014478:	200004d4 	.word	0x200004d4
 801447c:	08020a78 	.word	0x08020a78
 8014480:	08020a7c 	.word	0x08020a7c
 8014484:	10624dd3 	.word	0x10624dd3

08014488 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b08a      	sub	sp, #40	; 0x28
 801448c:	af02      	add	r7, sp, #8
 801448e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014494:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014496:	2300      	movs	r3, #0
 8014498:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	2200      	movs	r2, #0
 801449e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80144a0:	2106      	movs	r1, #6
 80144a2:	69b8      	ldr	r0, [r7, #24]
 80144a4:	f000 fbf4 	bl	8014c90 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80144a8:	f107 0308 	add.w	r3, r7, #8
 80144ac:	2201      	movs	r2, #1
 80144ae:	69b9      	ldr	r1, [r7, #24]
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f001 f877 	bl	80155a4 <dhcp_create_msg>
 80144b6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d04b      	beq.n	8014556 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144c4:	8938      	ldrh	r0, [r7, #8]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144cc:	2302      	movs	r3, #2
 80144ce:	2239      	movs	r2, #57	; 0x39
 80144d0:	f000 fbf8 	bl	8014cc4 <dhcp_option>
 80144d4:	4603      	mov	r3, r0
 80144d6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80144d8:	8938      	ldrh	r0, [r7, #8]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144e4:	461a      	mov	r2, r3
 80144e6:	f000 fc47 	bl	8014d78 <dhcp_option_short>
 80144ea:	4603      	mov	r3, r0
 80144ec:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80144ee:	8938      	ldrh	r0, [r7, #8]
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144f6:	2303      	movs	r3, #3
 80144f8:	2237      	movs	r2, #55	; 0x37
 80144fa:	f000 fbe3 	bl	8014cc4 <dhcp_option>
 80144fe:	4603      	mov	r3, r0
 8014500:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014502:	2300      	movs	r3, #0
 8014504:	77fb      	strb	r3, [r7, #31]
 8014506:	e00e      	b.n	8014526 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014508:	8938      	ldrh	r0, [r7, #8]
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014510:	7ffb      	ldrb	r3, [r7, #31]
 8014512:	4a29      	ldr	r2, [pc, #164]	; (80145b8 <dhcp_discover+0x130>)
 8014514:	5cd3      	ldrb	r3, [r2, r3]
 8014516:	461a      	mov	r2, r3
 8014518:	f000 fc08 	bl	8014d2c <dhcp_option_byte>
 801451c:	4603      	mov	r3, r0
 801451e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014520:	7ffb      	ldrb	r3, [r7, #31]
 8014522:	3301      	adds	r3, #1
 8014524:	77fb      	strb	r3, [r7, #31]
 8014526:	7ffb      	ldrb	r3, [r7, #31]
 8014528:	2b02      	cmp	r3, #2
 801452a:	d9ed      	bls.n	8014508 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801452c:	8938      	ldrh	r0, [r7, #8]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	33f0      	adds	r3, #240	; 0xf0
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	4619      	mov	r1, r3
 8014536:	f001 f90b 	bl	8015750 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801453a:	4b20      	ldr	r3, [pc, #128]	; (80145bc <dhcp_discover+0x134>)
 801453c:	6818      	ldr	r0, [r3, #0]
 801453e:	4b20      	ldr	r3, [pc, #128]	; (80145c0 <dhcp_discover+0x138>)
 8014540:	9301      	str	r3, [sp, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	9300      	str	r3, [sp, #0]
 8014546:	2343      	movs	r3, #67	; 0x43
 8014548:	4a1e      	ldr	r2, [pc, #120]	; (80145c4 <dhcp_discover+0x13c>)
 801454a:	6939      	ldr	r1, [r7, #16]
 801454c:	f7ff f87a 	bl	8013644 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014550:	6938      	ldr	r0, [r7, #16]
 8014552:	f7f9 f945 	bl	800d7e0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	799b      	ldrb	r3, [r3, #6]
 801455a:	2bff      	cmp	r3, #255	; 0xff
 801455c:	d005      	beq.n	801456a <dhcp_discover+0xe2>
    dhcp->tries++;
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	799b      	ldrb	r3, [r3, #6]
 8014562:	3301      	adds	r3, #1
 8014564:	b2da      	uxtb	r2, r3
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	799b      	ldrb	r3, [r3, #6]
 801456e:	2b05      	cmp	r3, #5
 8014570:	d80d      	bhi.n	801458e <dhcp_discover+0x106>
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	799b      	ldrb	r3, [r3, #6]
 8014576:	461a      	mov	r2, r3
 8014578:	2301      	movs	r3, #1
 801457a:	4093      	lsls	r3, r2
 801457c:	b29b      	uxth	r3, r3
 801457e:	461a      	mov	r2, r3
 8014580:	0152      	lsls	r2, r2, #5
 8014582:	1ad2      	subs	r2, r2, r3
 8014584:	0092      	lsls	r2, r2, #2
 8014586:	4413      	add	r3, r2
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	b29b      	uxth	r3, r3
 801458c:	e001      	b.n	8014592 <dhcp_discover+0x10a>
 801458e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014592:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014594:	897b      	ldrh	r3, [r7, #10]
 8014596:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801459a:	4a0b      	ldr	r2, [pc, #44]	; (80145c8 <dhcp_discover+0x140>)
 801459c:	fb82 1203 	smull	r1, r2, r2, r3
 80145a0:	1152      	asrs	r2, r2, #5
 80145a2:	17db      	asrs	r3, r3, #31
 80145a4:	1ad3      	subs	r3, r2, r3
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80145ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3720      	adds	r7, #32
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	20000070 	.word	0x20000070
 80145bc:	200004d4 	.word	0x200004d4
 80145c0:	08020a78 	.word	0x08020a78
 80145c4:	08020a7c 	.word	0x08020a7c
 80145c8:	10624dd3 	.word	0x10624dd3

080145cc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d107      	bne.n	80145ea <dhcp_bind+0x1e>
 80145da:	4b64      	ldr	r3, [pc, #400]	; (801476c <dhcp_bind+0x1a0>)
 80145dc:	f240 4215 	movw	r2, #1045	; 0x415
 80145e0:	4963      	ldr	r1, [pc, #396]	; (8014770 <dhcp_bind+0x1a4>)
 80145e2:	4864      	ldr	r0, [pc, #400]	; (8014774 <dhcp_bind+0x1a8>)
 80145e4:	f004 f984 	bl	80188f0 <iprintf>
 80145e8:	e0bc      	b.n	8014764 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ee:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d107      	bne.n	8014606 <dhcp_bind+0x3a>
 80145f6:	4b5d      	ldr	r3, [pc, #372]	; (801476c <dhcp_bind+0x1a0>)
 80145f8:	f240 4217 	movw	r2, #1047	; 0x417
 80145fc:	495e      	ldr	r1, [pc, #376]	; (8014778 <dhcp_bind+0x1ac>)
 80145fe:	485d      	ldr	r0, [pc, #372]	; (8014774 <dhcp_bind+0x1a8>)
 8014600:	f004 f976 	bl	80188f0 <iprintf>
 8014604:	e0ae      	b.n	8014764 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	2200      	movs	r2, #0
 801460a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014614:	d019      	beq.n	801464a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801461a:	331e      	adds	r3, #30
 801461c:	4a57      	ldr	r2, [pc, #348]	; (801477c <dhcp_bind+0x1b0>)
 801461e:	fba2 2303 	umull	r2, r3, r2, r3
 8014622:	095b      	lsrs	r3, r3, #5
 8014624:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801462c:	d302      	bcc.n	8014634 <dhcp_bind+0x68>
      timeout = 0xffff;
 801462e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014632:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	b29a      	uxth	r2, r3
 8014638:	69bb      	ldr	r3, [r7, #24]
 801463a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801463c:	69bb      	ldr	r3, [r7, #24]
 801463e:	8a9b      	ldrh	r3, [r3, #20]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	2201      	movs	r2, #1
 8014648:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014652:	d01d      	beq.n	8014690 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014658:	331e      	adds	r3, #30
 801465a:	4a48      	ldr	r2, [pc, #288]	; (801477c <dhcp_bind+0x1b0>)
 801465c:	fba2 2303 	umull	r2, r3, r2, r3
 8014660:	095b      	lsrs	r3, r3, #5
 8014662:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801466a:	d302      	bcc.n	8014672 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801466c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014670:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	b29a      	uxth	r2, r3
 8014676:	69bb      	ldr	r3, [r7, #24]
 8014678:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	895b      	ldrh	r3, [r3, #10]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d102      	bne.n	8014688 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	2201      	movs	r2, #1
 8014686:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	895a      	ldrh	r2, [r3, #10]
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014698:	d01d      	beq.n	80146d6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801469e:	331e      	adds	r3, #30
 80146a0:	4a36      	ldr	r2, [pc, #216]	; (801477c <dhcp_bind+0x1b0>)
 80146a2:	fba2 2303 	umull	r2, r3, r2, r3
 80146a6:	095b      	lsrs	r3, r3, #5
 80146a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146b0:	d302      	bcc.n	80146b8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80146b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	69bb      	ldr	r3, [r7, #24]
 80146be:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	899b      	ldrh	r3, [r3, #12]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d102      	bne.n	80146ce <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	2201      	movs	r2, #1
 80146cc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80146ce:	69bb      	ldr	r3, [r7, #24]
 80146d0:	899a      	ldrh	r2, [r3, #12]
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	895a      	ldrh	r2, [r3, #10]
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	899b      	ldrh	r3, [r3, #12]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d306      	bcc.n	80146f0 <dhcp_bind+0x124>
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	899b      	ldrh	r3, [r3, #12]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d002      	beq.n	80146f0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	2200      	movs	r2, #0
 80146ee:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	79db      	ldrb	r3, [r3, #7]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d003      	beq.n	8014700 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	6a1b      	ldr	r3, [r3, #32]
 80146fc:	613b      	str	r3, [r7, #16]
 80146fe:	e014      	b.n	801472a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	331c      	adds	r3, #28
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801470c:	2b00      	cmp	r3, #0
 801470e:	db02      	blt.n	8014716 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014710:	23ff      	movs	r3, #255	; 0xff
 8014712:	613b      	str	r3, [r7, #16]
 8014714:	e009      	b.n	801472a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014716:	7dfb      	ldrb	r3, [r7, #23]
 8014718:	2bbf      	cmp	r3, #191	; 0xbf
 801471a:	d903      	bls.n	8014724 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801471c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014720:	613b      	str	r3, [r7, #16]
 8014722:	e002      	b.n	801472a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014728:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d108      	bne.n	8014748 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	69da      	ldr	r2, [r3, #28]
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	4013      	ands	r3, r2
 801473e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014746:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014748:	210a      	movs	r1, #10
 801474a:	69b8      	ldr	r0, [r7, #24]
 801474c:	f000 faa0 	bl	8014c90 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	f103 011c 	add.w	r1, r3, #28
 8014756:	f107 030c 	add.w	r3, r7, #12
 801475a:	f107 0210 	add.w	r2, r7, #16
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7f8 fbea 	bl	800cf38 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014764:	3720      	adds	r7, #32
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	0801ff0c 	.word	0x0801ff0c
 8014770:	0802006c 	.word	0x0802006c
 8014774:	0801ff6c 	.word	0x0801ff6c
 8014778:	08020088 	.word	0x08020088
 801477c:	88888889 	.word	0x88888889

08014780 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08a      	sub	sp, #40	; 0x28
 8014784:	af02      	add	r7, sp, #8
 8014786:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801478c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801478e:	2105      	movs	r1, #5
 8014790:	69b8      	ldr	r0, [r7, #24]
 8014792:	f000 fa7d 	bl	8014c90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014796:	f107 030c 	add.w	r3, r7, #12
 801479a:	2203      	movs	r2, #3
 801479c:	69b9      	ldr	r1, [r7, #24]
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 ff00 	bl	80155a4 <dhcp_create_msg>
 80147a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d04e      	beq.n	801484a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80147b2:	89b8      	ldrh	r0, [r7, #12]
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ba:	2302      	movs	r3, #2
 80147bc:	2239      	movs	r2, #57	; 0x39
 80147be:	f000 fa81 	bl	8014cc4 <dhcp_option>
 80147c2:	4603      	mov	r3, r0
 80147c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80147c6:	89b8      	ldrh	r0, [r7, #12]
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147d2:	461a      	mov	r2, r3
 80147d4:	f000 fad0 	bl	8014d78 <dhcp_option_short>
 80147d8:	4603      	mov	r3, r0
 80147da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80147dc:	89b8      	ldrh	r0, [r7, #12]
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147e4:	2303      	movs	r3, #3
 80147e6:	2237      	movs	r2, #55	; 0x37
 80147e8:	f000 fa6c 	bl	8014cc4 <dhcp_option>
 80147ec:	4603      	mov	r3, r0
 80147ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147f0:	2300      	movs	r3, #0
 80147f2:	77bb      	strb	r3, [r7, #30]
 80147f4:	e00e      	b.n	8014814 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80147f6:	89b8      	ldrh	r0, [r7, #12]
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147fe:	7fbb      	ldrb	r3, [r7, #30]
 8014800:	4a2a      	ldr	r2, [pc, #168]	; (80148ac <dhcp_renew+0x12c>)
 8014802:	5cd3      	ldrb	r3, [r2, r3]
 8014804:	461a      	mov	r2, r3
 8014806:	f000 fa91 	bl	8014d2c <dhcp_option_byte>
 801480a:	4603      	mov	r3, r0
 801480c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801480e:	7fbb      	ldrb	r3, [r7, #30]
 8014810:	3301      	adds	r3, #1
 8014812:	77bb      	strb	r3, [r7, #30]
 8014814:	7fbb      	ldrb	r3, [r7, #30]
 8014816:	2b02      	cmp	r3, #2
 8014818:	d9ed      	bls.n	80147f6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801481a:	89b8      	ldrh	r0, [r7, #12]
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	33f0      	adds	r3, #240	; 0xf0
 8014820:	697a      	ldr	r2, [r7, #20]
 8014822:	4619      	mov	r1, r3
 8014824:	f000 ff94 	bl	8015750 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014828:	4b21      	ldr	r3, [pc, #132]	; (80148b0 <dhcp_renew+0x130>)
 801482a:	6818      	ldr	r0, [r3, #0]
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	f103 0218 	add.w	r2, r3, #24
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	2343      	movs	r3, #67	; 0x43
 8014838:	6979      	ldr	r1, [r7, #20]
 801483a:	f7fe fe8f 	bl	801355c <udp_sendto_if>
 801483e:	4603      	mov	r3, r0
 8014840:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014842:	6978      	ldr	r0, [r7, #20]
 8014844:	f7f8 ffcc 	bl	800d7e0 <pbuf_free>
 8014848:	e001      	b.n	801484e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801484a:	23ff      	movs	r3, #255	; 0xff
 801484c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	799b      	ldrb	r3, [r3, #6]
 8014852:	2bff      	cmp	r3, #255	; 0xff
 8014854:	d005      	beq.n	8014862 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	799b      	ldrb	r3, [r3, #6]
 801485a:	3301      	adds	r3, #1
 801485c:	b2da      	uxtb	r2, r3
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	799b      	ldrb	r3, [r3, #6]
 8014866:	2b09      	cmp	r3, #9
 8014868:	d80a      	bhi.n	8014880 <dhcp_renew+0x100>
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	799b      	ldrb	r3, [r3, #6]
 801486e:	b29b      	uxth	r3, r3
 8014870:	461a      	mov	r2, r3
 8014872:	0152      	lsls	r2, r2, #5
 8014874:	1ad2      	subs	r2, r2, r3
 8014876:	0092      	lsls	r2, r2, #2
 8014878:	4413      	add	r3, r2
 801487a:	011b      	lsls	r3, r3, #4
 801487c:	b29b      	uxth	r3, r3
 801487e:	e001      	b.n	8014884 <dhcp_renew+0x104>
 8014880:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014884:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014886:	89fb      	ldrh	r3, [r7, #14]
 8014888:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801488c:	4a09      	ldr	r2, [pc, #36]	; (80148b4 <dhcp_renew+0x134>)
 801488e:	fb82 1203 	smull	r1, r2, r2, r3
 8014892:	1152      	asrs	r2, r2, #5
 8014894:	17db      	asrs	r3, r3, #31
 8014896:	1ad3      	subs	r3, r2, r3
 8014898:	b29a      	uxth	r2, r3
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801489e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3720      	adds	r7, #32
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	20000070 	.word	0x20000070
 80148b0:	200004d4 	.word	0x200004d4
 80148b4:	10624dd3 	.word	0x10624dd3

080148b8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b08a      	sub	sp, #40	; 0x28
 80148bc:	af02      	add	r7, sp, #8
 80148be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80148c6:	2104      	movs	r1, #4
 80148c8:	69b8      	ldr	r0, [r7, #24]
 80148ca:	f000 f9e1 	bl	8014c90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80148ce:	f107 030c 	add.w	r3, r7, #12
 80148d2:	2203      	movs	r2, #3
 80148d4:	69b9      	ldr	r1, [r7, #24]
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 fe64 	bl	80155a4 <dhcp_create_msg>
 80148dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d04c      	beq.n	801497e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148ea:	89b8      	ldrh	r0, [r7, #12]
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148f2:	2302      	movs	r3, #2
 80148f4:	2239      	movs	r2, #57	; 0x39
 80148f6:	f000 f9e5 	bl	8014cc4 <dhcp_option>
 80148fa:	4603      	mov	r3, r0
 80148fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80148fe:	89b8      	ldrh	r0, [r7, #12]
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801490a:	461a      	mov	r2, r3
 801490c:	f000 fa34 	bl	8014d78 <dhcp_option_short>
 8014910:	4603      	mov	r3, r0
 8014912:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014914:	89b8      	ldrh	r0, [r7, #12]
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801491c:	2303      	movs	r3, #3
 801491e:	2237      	movs	r2, #55	; 0x37
 8014920:	f000 f9d0 	bl	8014cc4 <dhcp_option>
 8014924:	4603      	mov	r3, r0
 8014926:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014928:	2300      	movs	r3, #0
 801492a:	77bb      	strb	r3, [r7, #30]
 801492c:	e00e      	b.n	801494c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801492e:	89b8      	ldrh	r0, [r7, #12]
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014936:	7fbb      	ldrb	r3, [r7, #30]
 8014938:	4a29      	ldr	r2, [pc, #164]	; (80149e0 <dhcp_rebind+0x128>)
 801493a:	5cd3      	ldrb	r3, [r2, r3]
 801493c:	461a      	mov	r2, r3
 801493e:	f000 f9f5 	bl	8014d2c <dhcp_option_byte>
 8014942:	4603      	mov	r3, r0
 8014944:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014946:	7fbb      	ldrb	r3, [r7, #30]
 8014948:	3301      	adds	r3, #1
 801494a:	77bb      	strb	r3, [r7, #30]
 801494c:	7fbb      	ldrb	r3, [r7, #30]
 801494e:	2b02      	cmp	r3, #2
 8014950:	d9ed      	bls.n	801492e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014952:	89b8      	ldrh	r0, [r7, #12]
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	33f0      	adds	r3, #240	; 0xf0
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	4619      	mov	r1, r3
 801495c:	f000 fef8 	bl	8015750 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014960:	4b20      	ldr	r3, [pc, #128]	; (80149e4 <dhcp_rebind+0x12c>)
 8014962:	6818      	ldr	r0, [r3, #0]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	9300      	str	r3, [sp, #0]
 8014968:	2343      	movs	r3, #67	; 0x43
 801496a:	4a1f      	ldr	r2, [pc, #124]	; (80149e8 <dhcp_rebind+0x130>)
 801496c:	6979      	ldr	r1, [r7, #20]
 801496e:	f7fe fdf5 	bl	801355c <udp_sendto_if>
 8014972:	4603      	mov	r3, r0
 8014974:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014976:	6978      	ldr	r0, [r7, #20]
 8014978:	f7f8 ff32 	bl	800d7e0 <pbuf_free>
 801497c:	e001      	b.n	8014982 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801497e:	23ff      	movs	r3, #255	; 0xff
 8014980:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	799b      	ldrb	r3, [r3, #6]
 8014986:	2bff      	cmp	r3, #255	; 0xff
 8014988:	d005      	beq.n	8014996 <dhcp_rebind+0xde>
    dhcp->tries++;
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	799b      	ldrb	r3, [r3, #6]
 801498e:	3301      	adds	r3, #1
 8014990:	b2da      	uxtb	r2, r3
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014996:	69bb      	ldr	r3, [r7, #24]
 8014998:	799b      	ldrb	r3, [r3, #6]
 801499a:	2b09      	cmp	r3, #9
 801499c:	d80a      	bhi.n	80149b4 <dhcp_rebind+0xfc>
 801499e:	69bb      	ldr	r3, [r7, #24]
 80149a0:	799b      	ldrb	r3, [r3, #6]
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	461a      	mov	r2, r3
 80149a6:	0152      	lsls	r2, r2, #5
 80149a8:	1ad2      	subs	r2, r2, r3
 80149aa:	0092      	lsls	r2, r2, #2
 80149ac:	4413      	add	r3, r2
 80149ae:	00db      	lsls	r3, r3, #3
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	e001      	b.n	80149b8 <dhcp_rebind+0x100>
 80149b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80149b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80149ba:	89fb      	ldrh	r3, [r7, #14]
 80149bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80149c0:	4a0a      	ldr	r2, [pc, #40]	; (80149ec <dhcp_rebind+0x134>)
 80149c2:	fb82 1203 	smull	r1, r2, r2, r3
 80149c6:	1152      	asrs	r2, r2, #5
 80149c8:	17db      	asrs	r3, r3, #31
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80149d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3720      	adds	r7, #32
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	20000070 	.word	0x20000070
 80149e4:	200004d4 	.word	0x200004d4
 80149e8:	08020a7c 	.word	0x08020a7c
 80149ec:	10624dd3 	.word	0x10624dd3

080149f0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80149f0:	b5b0      	push	{r4, r5, r7, lr}
 80149f2:	b08a      	sub	sp, #40	; 0x28
 80149f4:	af02      	add	r7, sp, #8
 80149f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149fc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80149fe:	2103      	movs	r1, #3
 8014a00:	69b8      	ldr	r0, [r7, #24]
 8014a02:	f000 f945 	bl	8014c90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a06:	f107 030c 	add.w	r3, r7, #12
 8014a0a:	2203      	movs	r2, #3
 8014a0c:	69b9      	ldr	r1, [r7, #24]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f000 fdc8 	bl	80155a4 <dhcp_create_msg>
 8014a14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d066      	beq.n	8014aea <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a22:	89b8      	ldrh	r0, [r7, #12]
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	2239      	movs	r2, #57	; 0x39
 8014a2e:	f000 f949 	bl	8014cc4 <dhcp_option>
 8014a32:	4603      	mov	r3, r0
 8014a34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014a36:	89b8      	ldrh	r0, [r7, #12]
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	33f0      	adds	r3, #240	; 0xf0
 8014a3c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014a40:	4619      	mov	r1, r3
 8014a42:	f000 f999 	bl	8014d78 <dhcp_option_short>
 8014a46:	4603      	mov	r3, r0
 8014a48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a4a:	89b8      	ldrh	r0, [r7, #12]
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a52:	2304      	movs	r3, #4
 8014a54:	2232      	movs	r2, #50	; 0x32
 8014a56:	f000 f935 	bl	8014cc4 <dhcp_option>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a5e:	89bc      	ldrh	r4, [r7, #12]
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	69db      	ldr	r3, [r3, #28]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7f7 fc35 	bl	800c2da <lwip_htonl>
 8014a70:	4603      	mov	r3, r0
 8014a72:	461a      	mov	r2, r3
 8014a74:	4629      	mov	r1, r5
 8014a76:	4620      	mov	r0, r4
 8014a78:	f000 f9b0 	bl	8014ddc <dhcp_option_long>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014a80:	89b8      	ldrh	r0, [r7, #12]
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a88:	2303      	movs	r3, #3
 8014a8a:	2237      	movs	r2, #55	; 0x37
 8014a8c:	f000 f91a 	bl	8014cc4 <dhcp_option>
 8014a90:	4603      	mov	r3, r0
 8014a92:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a94:	2300      	movs	r3, #0
 8014a96:	77bb      	strb	r3, [r7, #30]
 8014a98:	e00e      	b.n	8014ab8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014a9a:	89b8      	ldrh	r0, [r7, #12]
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014aa2:	7fbb      	ldrb	r3, [r7, #30]
 8014aa4:	4a29      	ldr	r2, [pc, #164]	; (8014b4c <dhcp_reboot+0x15c>)
 8014aa6:	5cd3      	ldrb	r3, [r2, r3]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	f000 f93f 	bl	8014d2c <dhcp_option_byte>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ab2:	7fbb      	ldrb	r3, [r7, #30]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	77bb      	strb	r3, [r7, #30]
 8014ab8:	7fbb      	ldrb	r3, [r7, #30]
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	d9ed      	bls.n	8014a9a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014abe:	89b8      	ldrh	r0, [r7, #12]
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	33f0      	adds	r3, #240	; 0xf0
 8014ac4:	697a      	ldr	r2, [r7, #20]
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	f000 fe42 	bl	8015750 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014acc:	4b20      	ldr	r3, [pc, #128]	; (8014b50 <dhcp_reboot+0x160>)
 8014ace:	6818      	ldr	r0, [r3, #0]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	9300      	str	r3, [sp, #0]
 8014ad4:	2343      	movs	r3, #67	; 0x43
 8014ad6:	4a1f      	ldr	r2, [pc, #124]	; (8014b54 <dhcp_reboot+0x164>)
 8014ad8:	6979      	ldr	r1, [r7, #20]
 8014ada:	f7fe fd3f 	bl	801355c <udp_sendto_if>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014ae2:	6978      	ldr	r0, [r7, #20]
 8014ae4:	f7f8 fe7c 	bl	800d7e0 <pbuf_free>
 8014ae8:	e001      	b.n	8014aee <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014aea:	23ff      	movs	r3, #255	; 0xff
 8014aec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014aee:	69bb      	ldr	r3, [r7, #24]
 8014af0:	799b      	ldrb	r3, [r3, #6]
 8014af2:	2bff      	cmp	r3, #255	; 0xff
 8014af4:	d005      	beq.n	8014b02 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	799b      	ldrb	r3, [r3, #6]
 8014afa:	3301      	adds	r3, #1
 8014afc:	b2da      	uxtb	r2, r3
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	799b      	ldrb	r3, [r3, #6]
 8014b06:	2b09      	cmp	r3, #9
 8014b08:	d80a      	bhi.n	8014b20 <dhcp_reboot+0x130>
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	799b      	ldrb	r3, [r3, #6]
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	461a      	mov	r2, r3
 8014b12:	0152      	lsls	r2, r2, #5
 8014b14:	1ad2      	subs	r2, r2, r3
 8014b16:	0092      	lsls	r2, r2, #2
 8014b18:	4413      	add	r3, r2
 8014b1a:	00db      	lsls	r3, r3, #3
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	e001      	b.n	8014b24 <dhcp_reboot+0x134>
 8014b20:	f242 7310 	movw	r3, #10000	; 0x2710
 8014b24:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b26:	89fb      	ldrh	r3, [r7, #14]
 8014b28:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b2c:	4a0a      	ldr	r2, [pc, #40]	; (8014b58 <dhcp_reboot+0x168>)
 8014b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8014b32:	1152      	asrs	r2, r2, #5
 8014b34:	17db      	asrs	r3, r3, #31
 8014b36:	1ad3      	subs	r3, r2, r3
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3720      	adds	r7, #32
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bdb0      	pop	{r4, r5, r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	20000070 	.word	0x20000070
 8014b50:	200004d4 	.word	0x200004d4
 8014b54:	08020a7c 	.word	0x08020a7c
 8014b58:	10624dd3 	.word	0x10624dd3

08014b5c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014b5c:	b5b0      	push	{r4, r5, r7, lr}
 8014b5e:	b08a      	sub	sp, #40	; 0x28
 8014b60:	af02      	add	r7, sp, #8
 8014b62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b68:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f000 8084 	beq.w	8014c7a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	795b      	ldrb	r3, [r3, #5]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f000 8081 	beq.w	8014c7e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014b7c:	69fb      	ldr	r3, [r7, #28]
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	2200      	movs	r2, #0
 8014b86:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	2200      	movs	r2, #0
 8014b92:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	2200      	movs	r2, #0
 8014b98:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	829a      	strh	r2, [r3, #20]
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	8a9a      	ldrh	r2, [r3, #20]
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	825a      	strh	r2, [r3, #18]
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	8a5a      	ldrh	r2, [r3, #18]
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	821a      	strh	r2, [r3, #16]
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	8a1a      	ldrh	r2, [r3, #16]
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f000 fdec 	bl	80157ac <dhcp_supplied_address>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d03b      	beq.n	8014c52 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014bda:	f107 030e 	add.w	r3, r7, #14
 8014bde:	2207      	movs	r2, #7
 8014be0:	69f9      	ldr	r1, [r7, #28]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 fcde 	bl	80155a4 <dhcp_create_msg>
 8014be8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014bea:	69bb      	ldr	r3, [r7, #24]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d030      	beq.n	8014c52 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014bf0:	69bb      	ldr	r3, [r7, #24]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014bf6:	89f8      	ldrh	r0, [r7, #14]
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014bfe:	2304      	movs	r3, #4
 8014c00:	2236      	movs	r2, #54	; 0x36
 8014c02:	f000 f85f 	bl	8014cc4 <dhcp_option>
 8014c06:	4603      	mov	r3, r0
 8014c08:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014c0a:	89fc      	ldrh	r4, [r7, #14]
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7f7 fb60 	bl	800c2da <lwip_htonl>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	4629      	mov	r1, r5
 8014c20:	4620      	mov	r0, r4
 8014c22:	f000 f8db 	bl	8014ddc <dhcp_option_long>
 8014c26:	4603      	mov	r3, r0
 8014c28:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c2a:	89f8      	ldrh	r0, [r7, #14]
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	33f0      	adds	r3, #240	; 0xf0
 8014c30:	69ba      	ldr	r2, [r7, #24]
 8014c32:	4619      	mov	r1, r3
 8014c34:	f000 fd8c 	bl	8015750 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014c38:	4b13      	ldr	r3, [pc, #76]	; (8014c88 <dhcp_release_and_stop+0x12c>)
 8014c3a:	6818      	ldr	r0, [r3, #0]
 8014c3c:	f107 0210 	add.w	r2, r7, #16
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	2343      	movs	r3, #67	; 0x43
 8014c46:	69b9      	ldr	r1, [r7, #24]
 8014c48:	f7fe fc88 	bl	801355c <udp_sendto_if>
      pbuf_free(p_out);
 8014c4c:	69b8      	ldr	r0, [r7, #24]
 8014c4e:	f7f8 fdc7 	bl	800d7e0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014c52:	4b0e      	ldr	r3, [pc, #56]	; (8014c8c <dhcp_release_and_stop+0x130>)
 8014c54:	4a0d      	ldr	r2, [pc, #52]	; (8014c8c <dhcp_release_and_stop+0x130>)
 8014c56:	490d      	ldr	r1, [pc, #52]	; (8014c8c <dhcp_release_and_stop+0x130>)
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f7f8 f96d 	bl	800cf38 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014c5e:	2100      	movs	r1, #0
 8014c60:	69f8      	ldr	r0, [r7, #28]
 8014c62:	f000 f815 	bl	8014c90 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014c66:	69fb      	ldr	r3, [r7, #28]
 8014c68:	791b      	ldrb	r3, [r3, #4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d008      	beq.n	8014c80 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014c6e:	f7fe ffc1 	bl	8013bf4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	2200      	movs	r2, #0
 8014c76:	711a      	strb	r2, [r3, #4]
 8014c78:	e002      	b.n	8014c80 <dhcp_release_and_stop+0x124>
    return;
 8014c7a:	bf00      	nop
 8014c7c:	e000      	b.n	8014c80 <dhcp_release_and_stop+0x124>
    return;
 8014c7e:	bf00      	nop
  }
}
 8014c80:	3720      	adds	r7, #32
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bdb0      	pop	{r4, r5, r7, pc}
 8014c86:	bf00      	nop
 8014c88:	200004d4 	.word	0x200004d4
 8014c8c:	08020a78 	.word	0x08020a78

08014c90 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b083      	sub	sp, #12
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	460b      	mov	r3, r1
 8014c9a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	795b      	ldrb	r3, [r3, #5]
 8014ca0:	78fa      	ldrb	r2, [r7, #3]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d008      	beq.n	8014cb8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	78fa      	ldrb	r2, [r7, #3]
 8014caa:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	811a      	strh	r2, [r3, #8]
  }
}
 8014cb8:	bf00      	nop
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6039      	str	r1, [r7, #0]
 8014ccc:	4611      	mov	r1, r2
 8014cce:	461a      	mov	r2, r3
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	80fb      	strh	r3, [r7, #6]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	717b      	strb	r3, [r7, #5]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014cdc:	88fa      	ldrh	r2, [r7, #6]
 8014cde:	793b      	ldrb	r3, [r7, #4]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	3302      	adds	r3, #2
 8014ce4:	2b44      	cmp	r3, #68	; 0x44
 8014ce6:	d906      	bls.n	8014cf6 <dhcp_option+0x32>
 8014ce8:	4b0d      	ldr	r3, [pc, #52]	; (8014d20 <dhcp_option+0x5c>)
 8014cea:	f240 529a 	movw	r2, #1434	; 0x59a
 8014cee:	490d      	ldr	r1, [pc, #52]	; (8014d24 <dhcp_option+0x60>)
 8014cf0:	480d      	ldr	r0, [pc, #52]	; (8014d28 <dhcp_option+0x64>)
 8014cf2:	f003 fdfd 	bl	80188f0 <iprintf>
  options[options_out_len++] = option_type;
 8014cf6:	88fb      	ldrh	r3, [r7, #6]
 8014cf8:	1c5a      	adds	r2, r3, #1
 8014cfa:	80fa      	strh	r2, [r7, #6]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	4413      	add	r3, r2
 8014d02:	797a      	ldrb	r2, [r7, #5]
 8014d04:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014d06:	88fb      	ldrh	r3, [r7, #6]
 8014d08:	1c5a      	adds	r2, r3, #1
 8014d0a:	80fa      	strh	r2, [r7, #6]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	4413      	add	r3, r2
 8014d12:	793a      	ldrb	r2, [r7, #4]
 8014d14:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d16:	88fb      	ldrh	r3, [r7, #6]
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	0801ff0c 	.word	0x0801ff0c
 8014d24:	080200a0 	.word	0x080200a0
 8014d28:	0801ff6c 	.word	0x0801ff6c

08014d2c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	4603      	mov	r3, r0
 8014d34:	6039      	str	r1, [r7, #0]
 8014d36:	80fb      	strh	r3, [r7, #6]
 8014d38:	4613      	mov	r3, r2
 8014d3a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014d3c:	88fb      	ldrh	r3, [r7, #6]
 8014d3e:	2b43      	cmp	r3, #67	; 0x43
 8014d40:	d906      	bls.n	8014d50 <dhcp_option_byte+0x24>
 8014d42:	4b0a      	ldr	r3, [pc, #40]	; (8014d6c <dhcp_option_byte+0x40>)
 8014d44:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014d48:	4909      	ldr	r1, [pc, #36]	; (8014d70 <dhcp_option_byte+0x44>)
 8014d4a:	480a      	ldr	r0, [pc, #40]	; (8014d74 <dhcp_option_byte+0x48>)
 8014d4c:	f003 fdd0 	bl	80188f0 <iprintf>
  options[options_out_len++] = value;
 8014d50:	88fb      	ldrh	r3, [r7, #6]
 8014d52:	1c5a      	adds	r2, r3, #1
 8014d54:	80fa      	strh	r2, [r7, #6]
 8014d56:	461a      	mov	r2, r3
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	797a      	ldrb	r2, [r7, #5]
 8014d5e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d60:	88fb      	ldrh	r3, [r7, #6]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	0801ff0c 	.word	0x0801ff0c
 8014d70:	080200e4 	.word	0x080200e4
 8014d74:	0801ff6c 	.word	0x0801ff6c

08014d78 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	4603      	mov	r3, r0
 8014d80:	6039      	str	r1, [r7, #0]
 8014d82:	80fb      	strh	r3, [r7, #6]
 8014d84:	4613      	mov	r3, r2
 8014d86:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014d88:	88fb      	ldrh	r3, [r7, #6]
 8014d8a:	3302      	adds	r3, #2
 8014d8c:	2b44      	cmp	r3, #68	; 0x44
 8014d8e:	d906      	bls.n	8014d9e <dhcp_option_short+0x26>
 8014d90:	4b0f      	ldr	r3, [pc, #60]	; (8014dd0 <dhcp_option_short+0x58>)
 8014d92:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014d96:	490f      	ldr	r1, [pc, #60]	; (8014dd4 <dhcp_option_short+0x5c>)
 8014d98:	480f      	ldr	r0, [pc, #60]	; (8014dd8 <dhcp_option_short+0x60>)
 8014d9a:	f003 fda9 	bl	80188f0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014d9e:	88bb      	ldrh	r3, [r7, #4]
 8014da0:	0a1b      	lsrs	r3, r3, #8
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	88fb      	ldrh	r3, [r7, #6]
 8014da6:	1c59      	adds	r1, r3, #1
 8014da8:	80f9      	strh	r1, [r7, #6]
 8014daa:	4619      	mov	r1, r3
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	440b      	add	r3, r1
 8014db0:	b2d2      	uxtb	r2, r2
 8014db2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014db4:	88fb      	ldrh	r3, [r7, #6]
 8014db6:	1c5a      	adds	r2, r3, #1
 8014db8:	80fa      	strh	r2, [r7, #6]
 8014dba:	461a      	mov	r2, r3
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	88ba      	ldrh	r2, [r7, #4]
 8014dc2:	b2d2      	uxtb	r2, r2
 8014dc4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014dc6:	88fb      	ldrh	r3, [r7, #6]
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	0801ff0c 	.word	0x0801ff0c
 8014dd4:	0802011c 	.word	0x0802011c
 8014dd8:	0801ff6c 	.word	0x0801ff6c

08014ddc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	4603      	mov	r3, r0
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014dea:	89fb      	ldrh	r3, [r7, #14]
 8014dec:	3304      	adds	r3, #4
 8014dee:	2b44      	cmp	r3, #68	; 0x44
 8014df0:	d906      	bls.n	8014e00 <dhcp_option_long+0x24>
 8014df2:	4b19      	ldr	r3, [pc, #100]	; (8014e58 <dhcp_option_long+0x7c>)
 8014df4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014df8:	4918      	ldr	r1, [pc, #96]	; (8014e5c <dhcp_option_long+0x80>)
 8014dfa:	4819      	ldr	r0, [pc, #100]	; (8014e60 <dhcp_option_long+0x84>)
 8014dfc:	f003 fd78 	bl	80188f0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	0e1a      	lsrs	r2, r3, #24
 8014e04:	89fb      	ldrh	r3, [r7, #14]
 8014e06:	1c59      	adds	r1, r3, #1
 8014e08:	81f9      	strh	r1, [r7, #14]
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	440b      	add	r3, r1
 8014e10:	b2d2      	uxtb	r2, r2
 8014e12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	0c1a      	lsrs	r2, r3, #16
 8014e18:	89fb      	ldrh	r3, [r7, #14]
 8014e1a:	1c59      	adds	r1, r3, #1
 8014e1c:	81f9      	strh	r1, [r7, #14]
 8014e1e:	4619      	mov	r1, r3
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	440b      	add	r3, r1
 8014e24:	b2d2      	uxtb	r2, r2
 8014e26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	0a1a      	lsrs	r2, r3, #8
 8014e2c:	89fb      	ldrh	r3, [r7, #14]
 8014e2e:	1c59      	adds	r1, r3, #1
 8014e30:	81f9      	strh	r1, [r7, #14]
 8014e32:	4619      	mov	r1, r3
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	440b      	add	r3, r1
 8014e38:	b2d2      	uxtb	r2, r2
 8014e3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014e3c:	89fb      	ldrh	r3, [r7, #14]
 8014e3e:	1c5a      	adds	r2, r3, #1
 8014e40:	81fa      	strh	r2, [r7, #14]
 8014e42:	461a      	mov	r2, r3
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	4413      	add	r3, r2
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	b2d2      	uxtb	r2, r2
 8014e4c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0801ff0c 	.word	0x0801ff0c
 8014e5c:	08020158 	.word	0x08020158
 8014e60:	0801ff6c 	.word	0x0801ff6c

08014e64 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b090      	sub	sp, #64	; 0x40
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014e72:	2300      	movs	r3, #0
 8014e74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014e76:	2208      	movs	r2, #8
 8014e78:	2100      	movs	r1, #0
 8014e7a:	48be      	ldr	r0, [pc, #760]	; (8015174 <dhcp_parse_reply+0x310>)
 8014e7c:	f003 f82b 	bl	8017ed6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	895b      	ldrh	r3, [r3, #10]
 8014e84:	2b2b      	cmp	r3, #43	; 0x2b
 8014e86:	d802      	bhi.n	8014e8e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014e88:	f06f 0301 	mvn.w	r3, #1
 8014e8c:	e2a8      	b.n	80153e0 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014e94:	23f0      	movs	r3, #240	; 0xf0
 8014e96:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	891b      	ldrh	r3, [r3, #8]
 8014e9c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014ea2:	e00c      	b.n	8014ebe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014eaa:	1ad3      	subs	r3, r2, r3
 8014eac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eb0:	895b      	ldrh	r3, [r3, #10]
 8014eb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d004      	beq.n	8014ece <dhcp_parse_reply+0x6a>
 8014ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec6:	895b      	ldrh	r3, [r3, #10]
 8014ec8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d2ea      	bcs.n	8014ea4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d102      	bne.n	8014eda <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014ed4:	f06f 0301 	mvn.w	r3, #1
 8014ed8:	e282      	b.n	80153e0 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014eda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014edc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014ede:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ee0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014ee8:	e23a      	b.n	8015360 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014eea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014eee:	4413      	add	r3, r2
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014efa:	f04f 33ff 	mov.w	r3, #4294967295
 8014efe:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014f00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f02:	3302      	adds	r3, #2
 8014f04:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014f06:	8bfa      	ldrh	r2, [r7, #30]
 8014f08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d202      	bcs.n	8014f14 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014f0e:	f06f 0301 	mvn.w	r3, #1
 8014f12:	e265      	b.n	80153e0 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014f14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f16:	3301      	adds	r3, #1
 8014f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f1a:	8952      	ldrh	r2, [r2, #10]
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	da07      	bge.n	8014f30 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014f20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f22:	3301      	adds	r3, #1
 8014f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f26:	4413      	add	r3, r2
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f2e:	e00b      	b.n	8014f48 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d004      	beq.n	8014f42 <dhcp_parse_reply+0xde>
 8014f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	e000      	b.n	8014f44 <dhcp_parse_reply+0xe0>
 8014f42:	2300      	movs	r3, #0
 8014f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014f50:	7dfb      	ldrb	r3, [r7, #23]
 8014f52:	2b3b      	cmp	r3, #59	; 0x3b
 8014f54:	f200 812d 	bhi.w	80151b2 <dhcp_parse_reply+0x34e>
 8014f58:	a201      	add	r2, pc, #4	; (adr r2, 8014f60 <dhcp_parse_reply+0xfc>)
 8014f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f5e:	bf00      	nop
 8014f60:	08015051 	.word	0x08015051
 8014f64:	08015061 	.word	0x08015061
 8014f68:	080151b3 	.word	0x080151b3
 8014f6c:	08015083 	.word	0x08015083
 8014f70:	080151b3 	.word	0x080151b3
 8014f74:	080151b3 	.word	0x080151b3
 8014f78:	080151b3 	.word	0x080151b3
 8014f7c:	080151b3 	.word	0x080151b3
 8014f80:	080151b3 	.word	0x080151b3
 8014f84:	080151b3 	.word	0x080151b3
 8014f88:	080151b3 	.word	0x080151b3
 8014f8c:	080151b3 	.word	0x080151b3
 8014f90:	080151b3 	.word	0x080151b3
 8014f94:	080151b3 	.word	0x080151b3
 8014f98:	080151b3 	.word	0x080151b3
 8014f9c:	080151b3 	.word	0x080151b3
 8014fa0:	080151b3 	.word	0x080151b3
 8014fa4:	080151b3 	.word	0x080151b3
 8014fa8:	080151b3 	.word	0x080151b3
 8014fac:	080151b3 	.word	0x080151b3
 8014fb0:	080151b3 	.word	0x080151b3
 8014fb4:	080151b3 	.word	0x080151b3
 8014fb8:	080151b3 	.word	0x080151b3
 8014fbc:	080151b3 	.word	0x080151b3
 8014fc0:	080151b3 	.word	0x080151b3
 8014fc4:	080151b3 	.word	0x080151b3
 8014fc8:	080151b3 	.word	0x080151b3
 8014fcc:	080151b3 	.word	0x080151b3
 8014fd0:	080151b3 	.word	0x080151b3
 8014fd4:	080151b3 	.word	0x080151b3
 8014fd8:	080151b3 	.word	0x080151b3
 8014fdc:	080151b3 	.word	0x080151b3
 8014fe0:	080151b3 	.word	0x080151b3
 8014fe4:	080151b3 	.word	0x080151b3
 8014fe8:	080151b3 	.word	0x080151b3
 8014fec:	080151b3 	.word	0x080151b3
 8014ff0:	080151b3 	.word	0x080151b3
 8014ff4:	080151b3 	.word	0x080151b3
 8014ff8:	080151b3 	.word	0x080151b3
 8014ffc:	080151b3 	.word	0x080151b3
 8015000:	080151b3 	.word	0x080151b3
 8015004:	080151b3 	.word	0x080151b3
 8015008:	080151b3 	.word	0x080151b3
 801500c:	080151b3 	.word	0x080151b3
 8015010:	080151b3 	.word	0x080151b3
 8015014:	080151b3 	.word	0x080151b3
 8015018:	080151b3 	.word	0x080151b3
 801501c:	080151b3 	.word	0x080151b3
 8015020:	080151b3 	.word	0x080151b3
 8015024:	080151b3 	.word	0x080151b3
 8015028:	080151b3 	.word	0x080151b3
 801502c:	080150af 	.word	0x080150af
 8015030:	080150d1 	.word	0x080150d1
 8015034:	0801510d 	.word	0x0801510d
 8015038:	0801512f 	.word	0x0801512f
 801503c:	080151b3 	.word	0x080151b3
 8015040:	080151b3 	.word	0x080151b3
 8015044:	080151b3 	.word	0x080151b3
 8015048:	08015151 	.word	0x08015151
 801504c:	08015191 	.word	0x08015191
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015050:	2300      	movs	r3, #0
 8015052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801505a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801505e:	e0ac      	b.n	80151ba <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015064:	2b04      	cmp	r3, #4
 8015066:	d009      	beq.n	801507c <dhcp_parse_reply+0x218>
 8015068:	4b43      	ldr	r3, [pc, #268]	; (8015178 <dhcp_parse_reply+0x314>)
 801506a:	f240 622e 	movw	r2, #1582	; 0x62e
 801506e:	4943      	ldr	r1, [pc, #268]	; (801517c <dhcp_parse_reply+0x318>)
 8015070:	4843      	ldr	r0, [pc, #268]	; (8015180 <dhcp_parse_reply+0x31c>)
 8015072:	f003 fc3d 	bl	80188f0 <iprintf>
 8015076:	f06f 0305 	mvn.w	r3, #5
 801507a:	e1b1      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801507c:	2306      	movs	r3, #6
 801507e:	623b      	str	r3, [r7, #32]
        break;
 8015080:	e09b      	b.n	80151ba <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015082:	2304      	movs	r3, #4
 8015084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015088:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801508c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015090:	429a      	cmp	r2, r3
 8015092:	d209      	bcs.n	80150a8 <dhcp_parse_reply+0x244>
 8015094:	4b38      	ldr	r3, [pc, #224]	; (8015178 <dhcp_parse_reply+0x314>)
 8015096:	f240 6233 	movw	r2, #1587	; 0x633
 801509a:	493a      	ldr	r1, [pc, #232]	; (8015184 <dhcp_parse_reply+0x320>)
 801509c:	4838      	ldr	r0, [pc, #224]	; (8015180 <dhcp_parse_reply+0x31c>)
 801509e:	f003 fc27 	bl	80188f0 <iprintf>
 80150a2:	f06f 0305 	mvn.w	r3, #5
 80150a6:	e19b      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80150a8:	2307      	movs	r3, #7
 80150aa:	623b      	str	r3, [r7, #32]
        break;
 80150ac:	e085      	b.n	80151ba <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150b2:	2b04      	cmp	r3, #4
 80150b4:	d009      	beq.n	80150ca <dhcp_parse_reply+0x266>
 80150b6:	4b30      	ldr	r3, [pc, #192]	; (8015178 <dhcp_parse_reply+0x314>)
 80150b8:	f240 6241 	movw	r2, #1601	; 0x641
 80150bc:	492f      	ldr	r1, [pc, #188]	; (801517c <dhcp_parse_reply+0x318>)
 80150be:	4830      	ldr	r0, [pc, #192]	; (8015180 <dhcp_parse_reply+0x31c>)
 80150c0:	f003 fc16 	bl	80188f0 <iprintf>
 80150c4:	f06f 0305 	mvn.w	r3, #5
 80150c8:	e18a      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80150ca:	2303      	movs	r3, #3
 80150cc:	623b      	str	r3, [r7, #32]
        break;
 80150ce:	e074      	b.n	80151ba <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80150d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d4:	2b01      	cmp	r3, #1
 80150d6:	d009      	beq.n	80150ec <dhcp_parse_reply+0x288>
 80150d8:	4b27      	ldr	r3, [pc, #156]	; (8015178 <dhcp_parse_reply+0x314>)
 80150da:	f240 624f 	movw	r2, #1615	; 0x64f
 80150de:	492a      	ldr	r1, [pc, #168]	; (8015188 <dhcp_parse_reply+0x324>)
 80150e0:	4827      	ldr	r0, [pc, #156]	; (8015180 <dhcp_parse_reply+0x31c>)
 80150e2:	f003 fc05 	bl	80188f0 <iprintf>
 80150e6:	f06f 0305 	mvn.w	r3, #5
 80150ea:	e179      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80150ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80150ee:	2bf0      	cmp	r3, #240	; 0xf0
 80150f0:	d009      	beq.n	8015106 <dhcp_parse_reply+0x2a2>
 80150f2:	4b21      	ldr	r3, [pc, #132]	; (8015178 <dhcp_parse_reply+0x314>)
 80150f4:	f240 6251 	movw	r2, #1617	; 0x651
 80150f8:	4924      	ldr	r1, [pc, #144]	; (801518c <dhcp_parse_reply+0x328>)
 80150fa:	4821      	ldr	r0, [pc, #132]	; (8015180 <dhcp_parse_reply+0x31c>)
 80150fc:	f003 fbf8 	bl	80188f0 <iprintf>
 8015100:	f06f 0305 	mvn.w	r3, #5
 8015104:	e16c      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015106:	2300      	movs	r3, #0
 8015108:	623b      	str	r3, [r7, #32]
        break;
 801510a:	e056      	b.n	80151ba <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015110:	2b01      	cmp	r3, #1
 8015112:	d009      	beq.n	8015128 <dhcp_parse_reply+0x2c4>
 8015114:	4b18      	ldr	r3, [pc, #96]	; (8015178 <dhcp_parse_reply+0x314>)
 8015116:	f240 6255 	movw	r2, #1621	; 0x655
 801511a:	491b      	ldr	r1, [pc, #108]	; (8015188 <dhcp_parse_reply+0x324>)
 801511c:	4818      	ldr	r0, [pc, #96]	; (8015180 <dhcp_parse_reply+0x31c>)
 801511e:	f003 fbe7 	bl	80188f0 <iprintf>
 8015122:	f06f 0305 	mvn.w	r3, #5
 8015126:	e15b      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015128:	2301      	movs	r3, #1
 801512a:	623b      	str	r3, [r7, #32]
        break;
 801512c:	e045      	b.n	80151ba <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801512e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015132:	2b04      	cmp	r3, #4
 8015134:	d009      	beq.n	801514a <dhcp_parse_reply+0x2e6>
 8015136:	4b10      	ldr	r3, [pc, #64]	; (8015178 <dhcp_parse_reply+0x314>)
 8015138:	f240 6259 	movw	r2, #1625	; 0x659
 801513c:	490f      	ldr	r1, [pc, #60]	; (801517c <dhcp_parse_reply+0x318>)
 801513e:	4810      	ldr	r0, [pc, #64]	; (8015180 <dhcp_parse_reply+0x31c>)
 8015140:	f003 fbd6 	bl	80188f0 <iprintf>
 8015144:	f06f 0305 	mvn.w	r3, #5
 8015148:	e14a      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801514a:	2302      	movs	r3, #2
 801514c:	623b      	str	r3, [r7, #32]
        break;
 801514e:	e034      	b.n	80151ba <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015154:	2b04      	cmp	r3, #4
 8015156:	d009      	beq.n	801516c <dhcp_parse_reply+0x308>
 8015158:	4b07      	ldr	r3, [pc, #28]	; (8015178 <dhcp_parse_reply+0x314>)
 801515a:	f240 625d 	movw	r2, #1629	; 0x65d
 801515e:	4907      	ldr	r1, [pc, #28]	; (801517c <dhcp_parse_reply+0x318>)
 8015160:	4807      	ldr	r0, [pc, #28]	; (8015180 <dhcp_parse_reply+0x31c>)
 8015162:	f003 fbc5 	bl	80188f0 <iprintf>
 8015166:	f06f 0305 	mvn.w	r3, #5
 801516a:	e139      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801516c:	2304      	movs	r3, #4
 801516e:	623b      	str	r3, [r7, #32]
        break;
 8015170:	e023      	b.n	80151ba <dhcp_parse_reply+0x356>
 8015172:	bf00      	nop
 8015174:	2000739c 	.word	0x2000739c
 8015178:	0801ff0c 	.word	0x0801ff0c
 801517c:	08020194 	.word	0x08020194
 8015180:	0801ff6c 	.word	0x0801ff6c
 8015184:	080201a0 	.word	0x080201a0
 8015188:	080201b4 	.word	0x080201b4
 801518c:	080201c0 	.word	0x080201c0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015194:	2b04      	cmp	r3, #4
 8015196:	d009      	beq.n	80151ac <dhcp_parse_reply+0x348>
 8015198:	4b93      	ldr	r3, [pc, #588]	; (80153e8 <dhcp_parse_reply+0x584>)
 801519a:	f240 6261 	movw	r2, #1633	; 0x661
 801519e:	4993      	ldr	r1, [pc, #588]	; (80153ec <dhcp_parse_reply+0x588>)
 80151a0:	4893      	ldr	r0, [pc, #588]	; (80153f0 <dhcp_parse_reply+0x58c>)
 80151a2:	f003 fba5 	bl	80188f0 <iprintf>
 80151a6:	f06f 0305 	mvn.w	r3, #5
 80151aa:	e119      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80151ac:	2305      	movs	r3, #5
 80151ae:	623b      	str	r3, [r7, #32]
        break;
 80151b0:	e003      	b.n	80151ba <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80151b8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80151ba:	7dfb      	ldrb	r3, [r7, #23]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d103      	bne.n	80151c8 <dhcp_parse_reply+0x364>
      offset++;
 80151c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151c2:	3301      	adds	r3, #1
 80151c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80151c6:	e0a1      	b.n	801530c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80151c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151ce:	4413      	add	r3, r2
 80151d0:	3302      	adds	r3, #2
 80151d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151d6:	db02      	blt.n	80151de <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80151d8:	f06f 0301 	mvn.w	r3, #1
 80151dc:	e100      	b.n	80153e0 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80151de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151e6:	4413      	add	r3, r2
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	3302      	adds	r3, #2
 80151ec:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80151ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f000 808a 	beq.w	801530c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80151f8:	2300      	movs	r3, #0
 80151fa:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80151fc:	6a3b      	ldr	r3, [r7, #32]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	db02      	blt.n	8015208 <dhcp_parse_reply+0x3a4>
 8015202:	6a3b      	ldr	r3, [r7, #32]
 8015204:	2b07      	cmp	r3, #7
 8015206:	dd06      	ble.n	8015216 <dhcp_parse_reply+0x3b2>
 8015208:	4b77      	ldr	r3, [pc, #476]	; (80153e8 <dhcp_parse_reply+0x584>)
 801520a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801520e:	4979      	ldr	r1, [pc, #484]	; (80153f4 <dhcp_parse_reply+0x590>)
 8015210:	4877      	ldr	r0, [pc, #476]	; (80153f0 <dhcp_parse_reply+0x58c>)
 8015212:	f003 fb6d 	bl	80188f0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015216:	4a78      	ldr	r2, [pc, #480]	; (80153f8 <dhcp_parse_reply+0x594>)
 8015218:	6a3b      	ldr	r3, [r7, #32]
 801521a:	4413      	add	r3, r2
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d174      	bne.n	801530c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8015222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015226:	2b04      	cmp	r3, #4
 8015228:	bf28      	it	cs
 801522a:	2304      	movcs	r3, #4
 801522c:	b2db      	uxtb	r3, r3
 801522e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015230:	8bfb      	ldrh	r3, [r7, #30]
 8015232:	8aba      	ldrh	r2, [r7, #20]
 8015234:	f107 0108 	add.w	r1, r7, #8
 8015238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801523a:	f7f8 fccb 	bl	800dbd4 <pbuf_copy_partial>
 801523e:	4603      	mov	r3, r0
 8015240:	461a      	mov	r2, r3
 8015242:	8abb      	ldrh	r3, [r7, #20]
 8015244:	4293      	cmp	r3, r2
 8015246:	d002      	beq.n	801524e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015248:	f06f 0301 	mvn.w	r3, #1
 801524c:	e0c8      	b.n	80153e0 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801524e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015252:	2b04      	cmp	r3, #4
 8015254:	d933      	bls.n	80152be <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801525a:	f003 0303 	and.w	r3, r3, #3
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d009      	beq.n	8015278 <dhcp_parse_reply+0x414>
 8015264:	4b60      	ldr	r3, [pc, #384]	; (80153e8 <dhcp_parse_reply+0x584>)
 8015266:	f240 6281 	movw	r2, #1665	; 0x681
 801526a:	4964      	ldr	r1, [pc, #400]	; (80153fc <dhcp_parse_reply+0x598>)
 801526c:	4860      	ldr	r0, [pc, #384]	; (80153f0 <dhcp_parse_reply+0x58c>)
 801526e:	f003 fb3f 	bl	80188f0 <iprintf>
 8015272:	f06f 0305 	mvn.w	r3, #5
 8015276:	e0b3      	b.n	80153e0 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8015278:	4a5f      	ldr	r2, [pc, #380]	; (80153f8 <dhcp_parse_reply+0x594>)
 801527a:	6a3b      	ldr	r3, [r7, #32]
 801527c:	4413      	add	r3, r2
 801527e:	2201      	movs	r2, #1
 8015280:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	4618      	mov	r0, r3
 8015286:	f7f7 f828 	bl	800c2da <lwip_htonl>
 801528a:	4601      	mov	r1, r0
 801528c:	4a5c      	ldr	r2, [pc, #368]	; (8015400 <dhcp_parse_reply+0x59c>)
 801528e:	6a3b      	ldr	r3, [r7, #32]
 8015290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015298:	3b04      	subs	r3, #4
 801529a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801529e:	8bfb      	ldrh	r3, [r7, #30]
 80152a0:	3304      	adds	r3, #4
 80152a2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80152a4:	8a7a      	ldrh	r2, [r7, #18]
 80152a6:	8bfb      	ldrh	r3, [r7, #30]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d202      	bcs.n	80152b2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80152ac:	f06f 0301 	mvn.w	r3, #1
 80152b0:	e096      	b.n	80153e0 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80152b2:	8a7b      	ldrh	r3, [r7, #18]
 80152b4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80152b6:	6a3b      	ldr	r3, [r7, #32]
 80152b8:	3301      	adds	r3, #1
 80152ba:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80152bc:	e79e      	b.n	80151fc <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80152be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152c2:	2b04      	cmp	r3, #4
 80152c4:	d106      	bne.n	80152d4 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7f7 f806 	bl	800c2da <lwip_htonl>
 80152ce:	4603      	mov	r3, r0
 80152d0:	60bb      	str	r3, [r7, #8]
 80152d2:	e011      	b.n	80152f8 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80152d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d009      	beq.n	80152f0 <dhcp_parse_reply+0x48c>
 80152dc:	4b42      	ldr	r3, [pc, #264]	; (80153e8 <dhcp_parse_reply+0x584>)
 80152de:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80152e2:	4948      	ldr	r1, [pc, #288]	; (8015404 <dhcp_parse_reply+0x5a0>)
 80152e4:	4842      	ldr	r0, [pc, #264]	; (80153f0 <dhcp_parse_reply+0x58c>)
 80152e6:	f003 fb03 	bl	80188f0 <iprintf>
 80152ea:	f06f 0305 	mvn.w	r3, #5
 80152ee:	e077      	b.n	80153e0 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80152f0:	f107 0308 	add.w	r3, r7, #8
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80152f8:	4a3f      	ldr	r2, [pc, #252]	; (80153f8 <dhcp_parse_reply+0x594>)
 80152fa:	6a3b      	ldr	r3, [r7, #32]
 80152fc:	4413      	add	r3, r2
 80152fe:	2201      	movs	r2, #1
 8015300:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	493e      	ldr	r1, [pc, #248]	; (8015400 <dhcp_parse_reply+0x59c>)
 8015306:	6a3b      	ldr	r3, [r7, #32]
 8015308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801530e:	895b      	ldrh	r3, [r3, #10]
 8015310:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015312:	429a      	cmp	r2, r3
 8015314:	d324      	bcc.n	8015360 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015318:	895b      	ldrh	r3, [r3, #10]
 801531a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801531c:	1ad3      	subs	r3, r2, r3
 801531e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015322:	895b      	ldrh	r3, [r3, #10]
 8015324:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801532a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801532c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801532e:	429a      	cmp	r2, r3
 8015330:	d213      	bcs.n	801535a <dhcp_parse_reply+0x4f6>
        q = q->next;
 8015332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533a:	2b00      	cmp	r3, #0
 801533c:	d109      	bne.n	8015352 <dhcp_parse_reply+0x4ee>
 801533e:	4b2a      	ldr	r3, [pc, #168]	; (80153e8 <dhcp_parse_reply+0x584>)
 8015340:	f240 629d 	movw	r2, #1693	; 0x69d
 8015344:	4930      	ldr	r1, [pc, #192]	; (8015408 <dhcp_parse_reply+0x5a4>)
 8015346:	482a      	ldr	r0, [pc, #168]	; (80153f0 <dhcp_parse_reply+0x58c>)
 8015348:	f003 fad2 	bl	80188f0 <iprintf>
 801534c:	f06f 0305 	mvn.w	r3, #5
 8015350:	e046      	b.n	80153e0 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8015352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015358:	e002      	b.n	8015360 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801535a:	f06f 0301 	mvn.w	r3, #1
 801535e:	e03f      	b.n	80153e0 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015362:	2b00      	cmp	r3, #0
 8015364:	d00a      	beq.n	801537c <dhcp_parse_reply+0x518>
 8015366:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015368:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801536a:	429a      	cmp	r2, r3
 801536c:	d206      	bcs.n	801537c <dhcp_parse_reply+0x518>
 801536e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015372:	4413      	add	r3, r2
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	2bff      	cmp	r3, #255	; 0xff
 8015378:	f47f adb7 	bne.w	8014eea <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801537c:	4b1e      	ldr	r3, [pc, #120]	; (80153f8 <dhcp_parse_reply+0x594>)
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d018      	beq.n	80153b6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015384:	4b1e      	ldr	r3, [pc, #120]	; (8015400 <dhcp_parse_reply+0x59c>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801538a:	4b1b      	ldr	r3, [pc, #108]	; (80153f8 <dhcp_parse_reply+0x594>)
 801538c:	2200      	movs	r2, #0
 801538e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2b01      	cmp	r3, #1
 8015394:	d102      	bne.n	801539c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8015396:	2301      	movs	r3, #1
 8015398:	62fb      	str	r3, [r7, #44]	; 0x2c
 801539a:	e00c      	b.n	80153b6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d102      	bne.n	80153a8 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80153a2:	2301      	movs	r3, #1
 80153a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80153a6:	e006      	b.n	80153b6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2b03      	cmp	r3, #3
 80153ac:	d103      	bne.n	80153b6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80153ae:	2301      	movs	r3, #1
 80153b0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80153b2:	2301      	movs	r3, #1
 80153b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80153b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d006      	beq.n	80153ca <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80153bc:	2300      	movs	r3, #0
 80153be:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80153c0:	236c      	movs	r3, #108	; 0x6c
 80153c2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80153c4:	23ec      	movs	r3, #236	; 0xec
 80153c6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80153c8:	e569      	b.n	8014e9e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80153ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d006      	beq.n	80153de <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80153d0:	2300      	movs	r3, #0
 80153d2:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80153d4:	232c      	movs	r3, #44	; 0x2c
 80153d6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80153d8:	236c      	movs	r3, #108	; 0x6c
 80153da:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80153dc:	e55f      	b.n	8014e9e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80153de:	2300      	movs	r3, #0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3740      	adds	r7, #64	; 0x40
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	0801ff0c 	.word	0x0801ff0c
 80153ec:	08020194 	.word	0x08020194
 80153f0:	0801ff6c 	.word	0x0801ff6c
 80153f4:	080201d8 	.word	0x080201d8
 80153f8:	2000739c 	.word	0x2000739c
 80153fc:	080201ec 	.word	0x080201ec
 8015400:	200073a4 	.word	0x200073a4
 8015404:	08020204 	.word	0x08020204
 8015408:	08020218 	.word	0x08020218

0801540c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b08a      	sub	sp, #40	; 0x28
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]
 8015418:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801541a:	4b5f      	ldr	r3, [pc, #380]	; (8015598 <dhcp_recv+0x18c>)
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015420:	6a3b      	ldr	r3, [r7, #32]
 8015422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015424:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	2b00      	cmp	r3, #0
 8015430:	f000 809d 	beq.w	801556e <dhcp_recv+0x162>
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	791b      	ldrb	r3, [r3, #4]
 8015438:	2b00      	cmp	r3, #0
 801543a:	f000 8098 	beq.w	801556e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	895b      	ldrh	r3, [r3, #10]
 8015442:	2b2b      	cmp	r3, #43	; 0x2b
 8015444:	f240 8095 	bls.w	8015572 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	2b02      	cmp	r3, #2
 801544e:	f040 8092 	bne.w	8015576 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015452:	2300      	movs	r3, #0
 8015454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015458:	e012      	b.n	8015480 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801545a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801545e:	6a3a      	ldr	r2, [r7, #32]
 8015460:	4413      	add	r3, r2
 8015462:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801546a:	69b9      	ldr	r1, [r7, #24]
 801546c:	440b      	add	r3, r1
 801546e:	7f1b      	ldrb	r3, [r3, #28]
 8015470:	429a      	cmp	r2, r3
 8015472:	f040 8082 	bne.w	801557a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801547a:	3301      	adds	r3, #1
 801547c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015480:	6a3b      	ldr	r3, [r7, #32]
 8015482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015486:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801548a:	429a      	cmp	r2, r3
 801548c:	d203      	bcs.n	8015496 <dhcp_recv+0x8a>
 801548e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015492:	2b05      	cmp	r3, #5
 8015494:	d9e1      	bls.n	801545a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	4618      	mov	r0, r3
 801549c:	f7f6 ff1d 	bl	800c2da <lwip_htonl>
 80154a0:	4602      	mov	r2, r0
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d169      	bne.n	801557e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80154aa:	69f9      	ldr	r1, [r7, #28]
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff fcd9 	bl	8014e64 <dhcp_parse_reply>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d164      	bne.n	8015582 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80154b8:	4b38      	ldr	r3, [pc, #224]	; (801559c <dhcp_recv+0x190>)
 80154ba:	785b      	ldrb	r3, [r3, #1]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d062      	beq.n	8015586 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80154c6:	4b36      	ldr	r3, [pc, #216]	; (80155a0 <dhcp_recv+0x194>)
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80154cc:	7cfb      	ldrb	r3, [r7, #19]
 80154ce:	2b05      	cmp	r3, #5
 80154d0:	d12a      	bne.n	8015528 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	795b      	ldrb	r3, [r3, #5]
 80154d6:	2b01      	cmp	r3, #1
 80154d8:	d112      	bne.n	8015500 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80154da:	6979      	ldr	r1, [r7, #20]
 80154dc:	6a38      	ldr	r0, [r7, #32]
 80154de:	f7fe fe53 	bl	8014188 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80154e2:	6a3b      	ldr	r3, [r7, #32]
 80154e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80154e8:	f003 0308 	and.w	r3, r3, #8
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d003      	beq.n	80154f8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80154f0:	6a38      	ldr	r0, [r7, #32]
 80154f2:	f7fe fbc3 	bl	8013c7c <dhcp_check>
 80154f6:	e047      	b.n	8015588 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80154f8:	6a38      	ldr	r0, [r7, #32]
 80154fa:	f7ff f867 	bl	80145cc <dhcp_bind>
 80154fe:	e043      	b.n	8015588 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	795b      	ldrb	r3, [r3, #5]
 8015504:	2b03      	cmp	r3, #3
 8015506:	d007      	beq.n	8015518 <dhcp_recv+0x10c>
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	795b      	ldrb	r3, [r3, #5]
 801550c:	2b04      	cmp	r3, #4
 801550e:	d003      	beq.n	8015518 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015514:	2b05      	cmp	r3, #5
 8015516:	d137      	bne.n	8015588 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015518:	6979      	ldr	r1, [r7, #20]
 801551a:	6a38      	ldr	r0, [r7, #32]
 801551c:	f7fe fe34 	bl	8014188 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015520:	6a38      	ldr	r0, [r7, #32]
 8015522:	f7ff f853 	bl	80145cc <dhcp_bind>
 8015526:	e02f      	b.n	8015588 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015528:	7cfb      	ldrb	r3, [r7, #19]
 801552a:	2b06      	cmp	r3, #6
 801552c:	d113      	bne.n	8015556 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015532:	2b03      	cmp	r3, #3
 8015534:	d00b      	beq.n	801554e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	795b      	ldrb	r3, [r3, #5]
 801553a:	2b01      	cmp	r3, #1
 801553c:	d007      	beq.n	801554e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801553e:	69fb      	ldr	r3, [r7, #28]
 8015540:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015542:	2b04      	cmp	r3, #4
 8015544:	d003      	beq.n	801554e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	795b      	ldrb	r3, [r3, #5]
 801554a:	2b05      	cmp	r3, #5
 801554c:	d103      	bne.n	8015556 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801554e:	6a38      	ldr	r0, [r7, #32]
 8015550:	f7fe fb7a 	bl	8013c48 <dhcp_handle_nak>
 8015554:	e018      	b.n	8015588 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015556:	7cfb      	ldrb	r3, [r7, #19]
 8015558:	2b02      	cmp	r3, #2
 801555a:	d108      	bne.n	801556e <dhcp_recv+0x162>
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	795b      	ldrb	r3, [r3, #5]
 8015560:	2b06      	cmp	r3, #6
 8015562:	d104      	bne.n	801556e <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015564:	6979      	ldr	r1, [r7, #20]
 8015566:	6a38      	ldr	r0, [r7, #32]
 8015568:	f7fe fbbc 	bl	8013ce4 <dhcp_handle_offer>
 801556c:	e00c      	b.n	8015588 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801556e:	bf00      	nop
 8015570:	e00a      	b.n	8015588 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015572:	bf00      	nop
 8015574:	e008      	b.n	8015588 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015576:	bf00      	nop
 8015578:	e006      	b.n	8015588 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801557a:	bf00      	nop
 801557c:	e004      	b.n	8015588 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801557e:	bf00      	nop
 8015580:	e002      	b.n	8015588 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015582:	bf00      	nop
 8015584:	e000      	b.n	8015588 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015586:	bf00      	nop
  pbuf_free(p);
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7f8 f929 	bl	800d7e0 <pbuf_free>
}
 801558e:	bf00      	nop
 8015590:	3728      	adds	r7, #40	; 0x28
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	2000425c 	.word	0x2000425c
 801559c:	2000739c 	.word	0x2000739c
 80155a0:	200073a4 	.word	0x200073a4

080155a4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b088      	sub	sp, #32
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	603b      	str	r3, [r7, #0]
 80155b0:	4613      	mov	r3, r2
 80155b2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d108      	bne.n	80155cc <dhcp_create_msg+0x28>
 80155ba:	4b5f      	ldr	r3, [pc, #380]	; (8015738 <dhcp_create_msg+0x194>)
 80155bc:	f240 7269 	movw	r2, #1897	; 0x769
 80155c0:	495e      	ldr	r1, [pc, #376]	; (801573c <dhcp_create_msg+0x198>)
 80155c2:	485f      	ldr	r0, [pc, #380]	; (8015740 <dhcp_create_msg+0x19c>)
 80155c4:	f003 f994 	bl	80188f0 <iprintf>
 80155c8:	2300      	movs	r3, #0
 80155ca:	e0b1      	b.n	8015730 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d108      	bne.n	80155e4 <dhcp_create_msg+0x40>
 80155d2:	4b59      	ldr	r3, [pc, #356]	; (8015738 <dhcp_create_msg+0x194>)
 80155d4:	f240 726a 	movw	r2, #1898	; 0x76a
 80155d8:	495a      	ldr	r1, [pc, #360]	; (8015744 <dhcp_create_msg+0x1a0>)
 80155da:	4859      	ldr	r0, [pc, #356]	; (8015740 <dhcp_create_msg+0x19c>)
 80155dc:	f003 f988 	bl	80188f0 <iprintf>
 80155e0:	2300      	movs	r3, #0
 80155e2:	e0a5      	b.n	8015730 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80155e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155e8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80155ec:	2036      	movs	r0, #54	; 0x36
 80155ee:	f7f7 fe17 	bl	800d220 <pbuf_alloc>
 80155f2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80155f4:	69bb      	ldr	r3, [r7, #24]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d101      	bne.n	80155fe <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80155fa:	2300      	movs	r3, #0
 80155fc:	e098      	b.n	8015730 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	895b      	ldrh	r3, [r3, #10]
 8015602:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015606:	d206      	bcs.n	8015616 <dhcp_create_msg+0x72>
 8015608:	4b4b      	ldr	r3, [pc, #300]	; (8015738 <dhcp_create_msg+0x194>)
 801560a:	f240 7272 	movw	r2, #1906	; 0x772
 801560e:	494e      	ldr	r1, [pc, #312]	; (8015748 <dhcp_create_msg+0x1a4>)
 8015610:	484b      	ldr	r0, [pc, #300]	; (8015740 <dhcp_create_msg+0x19c>)
 8015612:	f003 f96d 	bl	80188f0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	2b03      	cmp	r3, #3
 801561a:	d103      	bne.n	8015624 <dhcp_create_msg+0x80>
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	795b      	ldrb	r3, [r3, #5]
 8015620:	2b03      	cmp	r3, #3
 8015622:	d10d      	bne.n	8015640 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	799b      	ldrb	r3, [r3, #6]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d105      	bne.n	8015638 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801562c:	f003 f978 	bl	8018920 <rand>
 8015630:	4603      	mov	r3, r0
 8015632:	461a      	mov	r2, r3
 8015634:	4b45      	ldr	r3, [pc, #276]	; (801574c <dhcp_create_msg+0x1a8>)
 8015636:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015638:	4b44      	ldr	r3, [pc, #272]	; (801574c <dhcp_create_msg+0x1a8>)
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015646:	f44f 729a 	mov.w	r2, #308	; 0x134
 801564a:	2100      	movs	r1, #0
 801564c:	6978      	ldr	r0, [r7, #20]
 801564e:	f002 fc42 	bl	8017ed6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2201      	movs	r2, #1
 8015656:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	2201      	movs	r2, #1
 801565c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4618      	mov	r0, r3
 801566e:	f7f6 fe34 	bl	800c2da <lwip_htonl>
 8015672:	4602      	mov	r2, r0
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015678:	79fb      	ldrb	r3, [r7, #7]
 801567a:	2b08      	cmp	r3, #8
 801567c:	d010      	beq.n	80156a0 <dhcp_create_msg+0xfc>
 801567e:	79fb      	ldrb	r3, [r7, #7]
 8015680:	2b04      	cmp	r3, #4
 8015682:	d00d      	beq.n	80156a0 <dhcp_create_msg+0xfc>
 8015684:	79fb      	ldrb	r3, [r7, #7]
 8015686:	2b07      	cmp	r3, #7
 8015688:	d00a      	beq.n	80156a0 <dhcp_create_msg+0xfc>
 801568a:	79fb      	ldrb	r3, [r7, #7]
 801568c:	2b03      	cmp	r3, #3
 801568e:	d10c      	bne.n	80156aa <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015694:	2b05      	cmp	r3, #5
 8015696:	d003      	beq.n	80156a0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	795b      	ldrb	r3, [r3, #5]
 801569c:	2b04      	cmp	r3, #4
 801569e:	d104      	bne.n	80156aa <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	3304      	adds	r3, #4
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156aa:	2300      	movs	r3, #0
 80156ac:	83fb      	strh	r3, [r7, #30]
 80156ae:	e00c      	b.n	80156ca <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80156b0:	8bfa      	ldrh	r2, [r7, #30]
 80156b2:	8bfb      	ldrh	r3, [r7, #30]
 80156b4:	68f9      	ldr	r1, [r7, #12]
 80156b6:	440a      	add	r2, r1
 80156b8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80156bc:	697a      	ldr	r2, [r7, #20]
 80156be:	4413      	add	r3, r2
 80156c0:	460a      	mov	r2, r1
 80156c2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156c4:	8bfb      	ldrh	r3, [r7, #30]
 80156c6:	3301      	adds	r3, #1
 80156c8:	83fb      	strh	r3, [r7, #30]
 80156ca:	8bfb      	ldrh	r3, [r7, #30]
 80156cc:	2b05      	cmp	r3, #5
 80156ce:	d9ef      	bls.n	80156b0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	2200      	movs	r2, #0
 80156d4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80156d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80156dc:	2200      	movs	r2, #0
 80156de:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80156e2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80156e6:	2200      	movs	r2, #0
 80156e8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80156ec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80156f0:	2200      	movs	r2, #0
 80156f2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80156f6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015700:	2301      	movs	r3, #1
 8015702:	2235      	movs	r2, #53	; 0x35
 8015704:	2000      	movs	r0, #0
 8015706:	f7ff fadd 	bl	8014cc4 <dhcp_option>
 801570a:	4603      	mov	r3, r0
 801570c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015714:	79fa      	ldrb	r2, [r7, #7]
 8015716:	8a7b      	ldrh	r3, [r7, #18]
 8015718:	4618      	mov	r0, r3
 801571a:	f7ff fb07 	bl	8014d2c <dhcp_option_byte>
 801571e:	4603      	mov	r3, r0
 8015720:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d002      	beq.n	801572e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	8a7a      	ldrh	r2, [r7, #18]
 801572c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801572e:	69bb      	ldr	r3, [r7, #24]
}
 8015730:	4618      	mov	r0, r3
 8015732:	3720      	adds	r7, #32
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	0801ff0c 	.word	0x0801ff0c
 801573c:	0802022c 	.word	0x0802022c
 8015740:	0801ff6c 	.word	0x0801ff6c
 8015744:	0802024c 	.word	0x0802024c
 8015748:	0802026c 	.word	0x0802026c
 801574c:	200004dc 	.word	0x200004dc

08015750 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	4603      	mov	r3, r0
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801575e:	89fb      	ldrh	r3, [r7, #14]
 8015760:	1c5a      	adds	r2, r3, #1
 8015762:	81fa      	strh	r2, [r7, #14]
 8015764:	461a      	mov	r2, r3
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	4413      	add	r3, r2
 801576a:	22ff      	movs	r2, #255	; 0xff
 801576c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801576e:	e007      	b.n	8015780 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015770:	89fb      	ldrh	r3, [r7, #14]
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	81fa      	strh	r2, [r7, #14]
 8015776:	461a      	mov	r2, r3
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	4413      	add	r3, r2
 801577c:	2200      	movs	r2, #0
 801577e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015780:	89fb      	ldrh	r3, [r7, #14]
 8015782:	2b43      	cmp	r3, #67	; 0x43
 8015784:	d904      	bls.n	8015790 <dhcp_option_trailer+0x40>
 8015786:	89fb      	ldrh	r3, [r7, #14]
 8015788:	f003 0303 	and.w	r3, r3, #3
 801578c:	2b00      	cmp	r3, #0
 801578e:	d002      	beq.n	8015796 <dhcp_option_trailer+0x46>
 8015790:	89fb      	ldrh	r3, [r7, #14]
 8015792:	2b43      	cmp	r3, #67	; 0x43
 8015794:	d9ec      	bls.n	8015770 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015796:	89fb      	ldrh	r3, [r7, #14]
 8015798:	33f0      	adds	r3, #240	; 0xf0
 801579a:	b29b      	uxth	r3, r3
 801579c:	4619      	mov	r1, r3
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7f7 fe98 	bl	800d4d4 <pbuf_realloc>
}
 80157a4:	bf00      	nop
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}

080157ac <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b085      	sub	sp, #20
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d017      	beq.n	80157ea <dhcp_supplied_address+0x3e>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d013      	beq.n	80157ea <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157c6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	795b      	ldrb	r3, [r3, #5]
 80157cc:	2b0a      	cmp	r3, #10
 80157ce:	d007      	beq.n	80157e0 <dhcp_supplied_address+0x34>
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	795b      	ldrb	r3, [r3, #5]
 80157d4:	2b05      	cmp	r3, #5
 80157d6:	d003      	beq.n	80157e0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80157dc:	2b04      	cmp	r3, #4
 80157de:	d101      	bne.n	80157e4 <dhcp_supplied_address+0x38>
 80157e0:	2301      	movs	r3, #1
 80157e2:	e000      	b.n	80157e6 <dhcp_supplied_address+0x3a>
 80157e4:	2300      	movs	r3, #0
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	e000      	b.n	80157ec <dhcp_supplied_address+0x40>
  }
  return 0;
 80157ea:	2300      	movs	r3, #0
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3714      	adds	r7, #20
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015800:	4915      	ldr	r1, [pc, #84]	; (8015858 <etharp_free_entry+0x60>)
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	4613      	mov	r3, r2
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	4413      	add	r3, r2
 801580a:	00db      	lsls	r3, r3, #3
 801580c:	440b      	add	r3, r1
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d013      	beq.n	801583c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015814:	4910      	ldr	r1, [pc, #64]	; (8015858 <etharp_free_entry+0x60>)
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	4613      	mov	r3, r2
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	4413      	add	r3, r2
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	440b      	add	r3, r1
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	4618      	mov	r0, r3
 8015826:	f7f7 ffdb 	bl	800d7e0 <pbuf_free>
    arp_table[i].q = NULL;
 801582a:	490b      	ldr	r1, [pc, #44]	; (8015858 <etharp_free_entry+0x60>)
 801582c:	687a      	ldr	r2, [r7, #4]
 801582e:	4613      	mov	r3, r2
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	4413      	add	r3, r2
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	440b      	add	r3, r1
 8015838:	2200      	movs	r2, #0
 801583a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801583c:	4906      	ldr	r1, [pc, #24]	; (8015858 <etharp_free_entry+0x60>)
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	4613      	mov	r3, r2
 8015842:	005b      	lsls	r3, r3, #1
 8015844:	4413      	add	r3, r2
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	440b      	add	r3, r1
 801584a:	3314      	adds	r3, #20
 801584c:	2200      	movs	r2, #0
 801584e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015850:	bf00      	nop
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	200004e0 	.word	0x200004e0

0801585c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015862:	2300      	movs	r3, #0
 8015864:	607b      	str	r3, [r7, #4]
 8015866:	e096      	b.n	8015996 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015868:	494f      	ldr	r1, [pc, #316]	; (80159a8 <etharp_tmr+0x14c>)
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	4613      	mov	r3, r2
 801586e:	005b      	lsls	r3, r3, #1
 8015870:	4413      	add	r3, r2
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	440b      	add	r3, r1
 8015876:	3314      	adds	r3, #20
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801587c:	78fb      	ldrb	r3, [r7, #3]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f000 8086 	beq.w	8015990 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015884:	4948      	ldr	r1, [pc, #288]	; (80159a8 <etharp_tmr+0x14c>)
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3312      	adds	r3, #18
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	3301      	adds	r3, #1
 8015898:	b298      	uxth	r0, r3
 801589a:	4943      	ldr	r1, [pc, #268]	; (80159a8 <etharp_tmr+0x14c>)
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	00db      	lsls	r3, r3, #3
 80158a6:	440b      	add	r3, r1
 80158a8:	3312      	adds	r3, #18
 80158aa:	4602      	mov	r2, r0
 80158ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80158ae:	493e      	ldr	r1, [pc, #248]	; (80159a8 <etharp_tmr+0x14c>)
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	3312      	adds	r3, #18
 80158be:	881b      	ldrh	r3, [r3, #0]
 80158c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80158c4:	d215      	bcs.n	80158f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80158c6:	4938      	ldr	r1, [pc, #224]	; (80159a8 <etharp_tmr+0x14c>)
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	4613      	mov	r3, r2
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	4413      	add	r3, r2
 80158d0:	00db      	lsls	r3, r3, #3
 80158d2:	440b      	add	r3, r1
 80158d4:	3314      	adds	r3, #20
 80158d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d10e      	bne.n	80158fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80158dc:	4932      	ldr	r1, [pc, #200]	; (80159a8 <etharp_tmr+0x14c>)
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	4613      	mov	r3, r2
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	4413      	add	r3, r2
 80158e6:	00db      	lsls	r3, r3, #3
 80158e8:	440b      	add	r3, r1
 80158ea:	3312      	adds	r3, #18
 80158ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d903      	bls.n	80158fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7ff ff80 	bl	80157f8 <etharp_free_entry>
 80158f8:	e04a      	b.n	8015990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80158fa:	492b      	ldr	r1, [pc, #172]	; (80159a8 <etharp_tmr+0x14c>)
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	4613      	mov	r3, r2
 8015900:	005b      	lsls	r3, r3, #1
 8015902:	4413      	add	r3, r2
 8015904:	00db      	lsls	r3, r3, #3
 8015906:	440b      	add	r3, r1
 8015908:	3314      	adds	r3, #20
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	2b03      	cmp	r3, #3
 801590e:	d10a      	bne.n	8015926 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015910:	4925      	ldr	r1, [pc, #148]	; (80159a8 <etharp_tmr+0x14c>)
 8015912:	687a      	ldr	r2, [r7, #4]
 8015914:	4613      	mov	r3, r2
 8015916:	005b      	lsls	r3, r3, #1
 8015918:	4413      	add	r3, r2
 801591a:	00db      	lsls	r3, r3, #3
 801591c:	440b      	add	r3, r1
 801591e:	3314      	adds	r3, #20
 8015920:	2204      	movs	r2, #4
 8015922:	701a      	strb	r2, [r3, #0]
 8015924:	e034      	b.n	8015990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015926:	4920      	ldr	r1, [pc, #128]	; (80159a8 <etharp_tmr+0x14c>)
 8015928:	687a      	ldr	r2, [r7, #4]
 801592a:	4613      	mov	r3, r2
 801592c:	005b      	lsls	r3, r3, #1
 801592e:	4413      	add	r3, r2
 8015930:	00db      	lsls	r3, r3, #3
 8015932:	440b      	add	r3, r1
 8015934:	3314      	adds	r3, #20
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	2b04      	cmp	r3, #4
 801593a:	d10a      	bne.n	8015952 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801593c:	491a      	ldr	r1, [pc, #104]	; (80159a8 <etharp_tmr+0x14c>)
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	4613      	mov	r3, r2
 8015942:	005b      	lsls	r3, r3, #1
 8015944:	4413      	add	r3, r2
 8015946:	00db      	lsls	r3, r3, #3
 8015948:	440b      	add	r3, r1
 801594a:	3314      	adds	r3, #20
 801594c:	2202      	movs	r2, #2
 801594e:	701a      	strb	r2, [r3, #0]
 8015950:	e01e      	b.n	8015990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015952:	4915      	ldr	r1, [pc, #84]	; (80159a8 <etharp_tmr+0x14c>)
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	4613      	mov	r3, r2
 8015958:	005b      	lsls	r3, r3, #1
 801595a:	4413      	add	r3, r2
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	440b      	add	r3, r1
 8015960:	3314      	adds	r3, #20
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b01      	cmp	r3, #1
 8015966:	d113      	bne.n	8015990 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015968:	490f      	ldr	r1, [pc, #60]	; (80159a8 <etharp_tmr+0x14c>)
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	4613      	mov	r3, r2
 801596e:	005b      	lsls	r3, r3, #1
 8015970:	4413      	add	r3, r2
 8015972:	00db      	lsls	r3, r3, #3
 8015974:	440b      	add	r3, r1
 8015976:	3308      	adds	r3, #8
 8015978:	6818      	ldr	r0, [r3, #0]
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	4613      	mov	r3, r2
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	4413      	add	r3, r2
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	4a08      	ldr	r2, [pc, #32]	; (80159a8 <etharp_tmr+0x14c>)
 8015986:	4413      	add	r3, r2
 8015988:	3304      	adds	r3, #4
 801598a:	4619      	mov	r1, r3
 801598c:	f000 fe72 	bl	8016674 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	3301      	adds	r3, #1
 8015994:	607b      	str	r3, [r7, #4]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2b09      	cmp	r3, #9
 801599a:	f77f af65 	ble.w	8015868 <etharp_tmr+0xc>
      }
    }
  }
}
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	200004e0 	.word	0x200004e0

080159ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b08a      	sub	sp, #40	; 0x28
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	60f8      	str	r0, [r7, #12]
 80159b4:	460b      	mov	r3, r1
 80159b6:	607a      	str	r2, [r7, #4]
 80159b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80159ba:	230a      	movs	r3, #10
 80159bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80159be:	230a      	movs	r3, #10
 80159c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80159c2:	230a      	movs	r3, #10
 80159c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80159c6:	2300      	movs	r3, #0
 80159c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80159ca:	230a      	movs	r3, #10
 80159cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80159ce:	2300      	movs	r3, #0
 80159d0:	83bb      	strh	r3, [r7, #28]
 80159d2:	2300      	movs	r3, #0
 80159d4:	837b      	strh	r3, [r7, #26]
 80159d6:	2300      	movs	r3, #0
 80159d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159da:	2300      	movs	r3, #0
 80159dc:	843b      	strh	r3, [r7, #32]
 80159de:	e0ae      	b.n	8015b3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80159e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159e4:	49a6      	ldr	r1, [pc, #664]	; (8015c80 <etharp_find_entry+0x2d4>)
 80159e6:	4613      	mov	r3, r2
 80159e8:	005b      	lsls	r3, r3, #1
 80159ea:	4413      	add	r3, r2
 80159ec:	00db      	lsls	r3, r3, #3
 80159ee:	440b      	add	r3, r1
 80159f0:	3314      	adds	r3, #20
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80159f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80159fa:	2b0a      	cmp	r3, #10
 80159fc:	d105      	bne.n	8015a0a <etharp_find_entry+0x5e>
 80159fe:	7dfb      	ldrb	r3, [r7, #23]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d102      	bne.n	8015a0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015a04:	8c3b      	ldrh	r3, [r7, #32]
 8015a06:	847b      	strh	r3, [r7, #34]	; 0x22
 8015a08:	e095      	b.n	8015b36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f000 8092 	beq.w	8015b36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015a12:	7dfb      	ldrb	r3, [r7, #23]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d009      	beq.n	8015a2c <etharp_find_entry+0x80>
 8015a18:	7dfb      	ldrb	r3, [r7, #23]
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d806      	bhi.n	8015a2c <etharp_find_entry+0x80>
 8015a1e:	4b99      	ldr	r3, [pc, #612]	; (8015c84 <etharp_find_entry+0x2d8>)
 8015a20:	f44f 7292 	mov.w	r2, #292	; 0x124
 8015a24:	4998      	ldr	r1, [pc, #608]	; (8015c88 <etharp_find_entry+0x2dc>)
 8015a26:	4899      	ldr	r0, [pc, #612]	; (8015c8c <etharp_find_entry+0x2e0>)
 8015a28:	f002 ff62 	bl	80188f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d020      	beq.n	8015a74 <etharp_find_entry+0xc8>
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	6819      	ldr	r1, [r3, #0]
 8015a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a3a:	4891      	ldr	r0, [pc, #580]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015a3c:	4613      	mov	r3, r2
 8015a3e:	005b      	lsls	r3, r3, #1
 8015a40:	4413      	add	r3, r2
 8015a42:	00db      	lsls	r3, r3, #3
 8015a44:	4403      	add	r3, r0
 8015a46:	3304      	adds	r3, #4
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	4299      	cmp	r1, r3
 8015a4c:	d112      	bne.n	8015a74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d00c      	beq.n	8015a6e <etharp_find_entry+0xc2>
 8015a54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a58:	4989      	ldr	r1, [pc, #548]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	005b      	lsls	r3, r3, #1
 8015a5e:	4413      	add	r3, r2
 8015a60:	00db      	lsls	r3, r3, #3
 8015a62:	440b      	add	r3, r1
 8015a64:	3308      	adds	r3, #8
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d102      	bne.n	8015a74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015a6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a72:	e100      	b.n	8015c76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015a74:	7dfb      	ldrb	r3, [r7, #23]
 8015a76:	2b01      	cmp	r3, #1
 8015a78:	d140      	bne.n	8015afc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a7e:	4980      	ldr	r1, [pc, #512]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015a80:	4613      	mov	r3, r2
 8015a82:	005b      	lsls	r3, r3, #1
 8015a84:	4413      	add	r3, r2
 8015a86:	00db      	lsls	r3, r3, #3
 8015a88:	440b      	add	r3, r1
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d01a      	beq.n	8015ac6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a94:	497a      	ldr	r1, [pc, #488]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015a96:	4613      	mov	r3, r2
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	4413      	add	r3, r2
 8015a9c:	00db      	lsls	r3, r3, #3
 8015a9e:	440b      	add	r3, r1
 8015aa0:	3312      	adds	r3, #18
 8015aa2:	881b      	ldrh	r3, [r3, #0]
 8015aa4:	8bba      	ldrh	r2, [r7, #28]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d845      	bhi.n	8015b36 <etharp_find_entry+0x18a>
            old_queue = i;
 8015aaa:	8c3b      	ldrh	r3, [r7, #32]
 8015aac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015aae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ab2:	4973      	ldr	r1, [pc, #460]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	005b      	lsls	r3, r3, #1
 8015ab8:	4413      	add	r3, r2
 8015aba:	00db      	lsls	r3, r3, #3
 8015abc:	440b      	add	r3, r1
 8015abe:	3312      	adds	r3, #18
 8015ac0:	881b      	ldrh	r3, [r3, #0]
 8015ac2:	83bb      	strh	r3, [r7, #28]
 8015ac4:	e037      	b.n	8015b36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015ac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aca:	496d      	ldr	r1, [pc, #436]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015acc:	4613      	mov	r3, r2
 8015ace:	005b      	lsls	r3, r3, #1
 8015ad0:	4413      	add	r3, r2
 8015ad2:	00db      	lsls	r3, r3, #3
 8015ad4:	440b      	add	r3, r1
 8015ad6:	3312      	adds	r3, #18
 8015ad8:	881b      	ldrh	r3, [r3, #0]
 8015ada:	8b7a      	ldrh	r2, [r7, #26]
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d82a      	bhi.n	8015b36 <etharp_find_entry+0x18a>
            old_pending = i;
 8015ae0:	8c3b      	ldrh	r3, [r7, #32]
 8015ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015ae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ae8:	4965      	ldr	r1, [pc, #404]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015aea:	4613      	mov	r3, r2
 8015aec:	005b      	lsls	r3, r3, #1
 8015aee:	4413      	add	r3, r2
 8015af0:	00db      	lsls	r3, r3, #3
 8015af2:	440b      	add	r3, r1
 8015af4:	3312      	adds	r3, #18
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	837b      	strh	r3, [r7, #26]
 8015afa:	e01c      	b.n	8015b36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015afc:	7dfb      	ldrb	r3, [r7, #23]
 8015afe:	2b01      	cmp	r3, #1
 8015b00:	d919      	bls.n	8015b36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b06:	495e      	ldr	r1, [pc, #376]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	3312      	adds	r3, #18
 8015b14:	881b      	ldrh	r3, [r3, #0]
 8015b16:	8b3a      	ldrh	r2, [r7, #24]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d80c      	bhi.n	8015b36 <etharp_find_entry+0x18a>
            old_stable = i;
 8015b1c:	8c3b      	ldrh	r3, [r7, #32]
 8015b1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b24:	4956      	ldr	r1, [pc, #344]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015b26:	4613      	mov	r3, r2
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	4413      	add	r3, r2
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	440b      	add	r3, r1
 8015b30:	3312      	adds	r3, #18
 8015b32:	881b      	ldrh	r3, [r3, #0]
 8015b34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b36:	8c3b      	ldrh	r3, [r7, #32]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	843b      	strh	r3, [r7, #32]
 8015b3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b42:	2b09      	cmp	r3, #9
 8015b44:	f77f af4c 	ble.w	80159e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015b48:	7afb      	ldrb	r3, [r7, #11]
 8015b4a:	f003 0302 	and.w	r3, r3, #2
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d108      	bne.n	8015b64 <etharp_find_entry+0x1b8>
 8015b52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015b56:	2b0a      	cmp	r3, #10
 8015b58:	d107      	bne.n	8015b6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015b5a:	7afb      	ldrb	r3, [r7, #11]
 8015b5c:	f003 0301 	and.w	r3, r3, #1
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d102      	bne.n	8015b6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015b64:	f04f 33ff 	mov.w	r3, #4294967295
 8015b68:	e085      	b.n	8015c76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015b6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015b6e:	2b09      	cmp	r3, #9
 8015b70:	dc02      	bgt.n	8015b78 <etharp_find_entry+0x1cc>
    i = empty;
 8015b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b74:	843b      	strh	r3, [r7, #32]
 8015b76:	e039      	b.n	8015bec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015b78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015b7c:	2b09      	cmp	r3, #9
 8015b7e:	dc14      	bgt.n	8015baa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015b84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b88:	493d      	ldr	r1, [pc, #244]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d018      	beq.n	8015bcc <etharp_find_entry+0x220>
 8015b9a:	4b3a      	ldr	r3, [pc, #232]	; (8015c84 <etharp_find_entry+0x2d8>)
 8015b9c:	f240 126d 	movw	r2, #365	; 0x16d
 8015ba0:	493b      	ldr	r1, [pc, #236]	; (8015c90 <etharp_find_entry+0x2e4>)
 8015ba2:	483a      	ldr	r0, [pc, #232]	; (8015c8c <etharp_find_entry+0x2e0>)
 8015ba4:	f002 fea4 	bl	80188f0 <iprintf>
 8015ba8:	e010      	b.n	8015bcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015baa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015bae:	2b09      	cmp	r3, #9
 8015bb0:	dc02      	bgt.n	8015bb8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bb4:	843b      	strh	r3, [r7, #32]
 8015bb6:	e009      	b.n	8015bcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015bb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015bbc:	2b09      	cmp	r3, #9
 8015bbe:	dc02      	bgt.n	8015bc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015bc0:	8bfb      	ldrh	r3, [r7, #30]
 8015bc2:	843b      	strh	r3, [r7, #32]
 8015bc4:	e002      	b.n	8015bcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015bca:	e054      	b.n	8015c76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015bcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bd0:	2b09      	cmp	r3, #9
 8015bd2:	dd06      	ble.n	8015be2 <etharp_find_entry+0x236>
 8015bd4:	4b2b      	ldr	r3, [pc, #172]	; (8015c84 <etharp_find_entry+0x2d8>)
 8015bd6:	f240 127f 	movw	r2, #383	; 0x17f
 8015bda:	492e      	ldr	r1, [pc, #184]	; (8015c94 <etharp_find_entry+0x2e8>)
 8015bdc:	482b      	ldr	r0, [pc, #172]	; (8015c8c <etharp_find_entry+0x2e0>)
 8015bde:	f002 fe87 	bl	80188f0 <iprintf>
    etharp_free_entry(i);
 8015be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7ff fe06 	bl	80157f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015bec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bf0:	2b09      	cmp	r3, #9
 8015bf2:	dd06      	ble.n	8015c02 <etharp_find_entry+0x256>
 8015bf4:	4b23      	ldr	r3, [pc, #140]	; (8015c84 <etharp_find_entry+0x2d8>)
 8015bf6:	f240 1283 	movw	r2, #387	; 0x183
 8015bfa:	4926      	ldr	r1, [pc, #152]	; (8015c94 <etharp_find_entry+0x2e8>)
 8015bfc:	4823      	ldr	r0, [pc, #140]	; (8015c8c <etharp_find_entry+0x2e0>)
 8015bfe:	f002 fe77 	bl	80188f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015c02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c06:	491e      	ldr	r1, [pc, #120]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015c08:	4613      	mov	r3, r2
 8015c0a:	005b      	lsls	r3, r3, #1
 8015c0c:	4413      	add	r3, r2
 8015c0e:	00db      	lsls	r3, r3, #3
 8015c10:	440b      	add	r3, r1
 8015c12:	3314      	adds	r3, #20
 8015c14:	781b      	ldrb	r3, [r3, #0]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d006      	beq.n	8015c28 <etharp_find_entry+0x27c>
 8015c1a:	4b1a      	ldr	r3, [pc, #104]	; (8015c84 <etharp_find_entry+0x2d8>)
 8015c1c:	f240 1285 	movw	r2, #389	; 0x185
 8015c20:	491d      	ldr	r1, [pc, #116]	; (8015c98 <etharp_find_entry+0x2ec>)
 8015c22:	481a      	ldr	r0, [pc, #104]	; (8015c8c <etharp_find_entry+0x2e0>)
 8015c24:	f002 fe64 	bl	80188f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00b      	beq.n	8015c46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015c2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	4812      	ldr	r0, [pc, #72]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015c38:	4613      	mov	r3, r2
 8015c3a:	005b      	lsls	r3, r3, #1
 8015c3c:	4413      	add	r3, r2
 8015c3e:	00db      	lsls	r3, r3, #3
 8015c40:	4403      	add	r3, r0
 8015c42:	3304      	adds	r3, #4
 8015c44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015c46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c4a:	490d      	ldr	r1, [pc, #52]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	005b      	lsls	r3, r3, #1
 8015c50:	4413      	add	r3, r2
 8015c52:	00db      	lsls	r3, r3, #3
 8015c54:	440b      	add	r3, r1
 8015c56:	3312      	adds	r3, #18
 8015c58:	2200      	movs	r2, #0
 8015c5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c60:	4907      	ldr	r1, [pc, #28]	; (8015c80 <etharp_find_entry+0x2d4>)
 8015c62:	4613      	mov	r3, r2
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	4413      	add	r3, r2
 8015c68:	00db      	lsls	r3, r3, #3
 8015c6a:	440b      	add	r3, r1
 8015c6c:	3308      	adds	r3, #8
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015c72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3728      	adds	r7, #40	; 0x28
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	200004e0 	.word	0x200004e0
 8015c84:	080202ac 	.word	0x080202ac
 8015c88:	080202e4 	.word	0x080202e4
 8015c8c:	08020324 	.word	0x08020324
 8015c90:	0802034c 	.word	0x0802034c
 8015c94:	08020364 	.word	0x08020364
 8015c98:	08020378 	.word	0x08020378

08015c9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b088      	sub	sp, #32
 8015ca0:	af02      	add	r7, sp, #8
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	60b9      	str	r1, [r7, #8]
 8015ca6:	607a      	str	r2, [r7, #4]
 8015ca8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cb0:	2b06      	cmp	r3, #6
 8015cb2:	d006      	beq.n	8015cc2 <etharp_update_arp_entry+0x26>
 8015cb4:	4b48      	ldr	r3, [pc, #288]	; (8015dd8 <etharp_update_arp_entry+0x13c>)
 8015cb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015cba:	4948      	ldr	r1, [pc, #288]	; (8015ddc <etharp_update_arp_entry+0x140>)
 8015cbc:	4848      	ldr	r0, [pc, #288]	; (8015de0 <etharp_update_arp_entry+0x144>)
 8015cbe:	f002 fe17 	bl	80188f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d012      	beq.n	8015cee <etharp_update_arp_entry+0x52>
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d00e      	beq.n	8015cee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	68f9      	ldr	r1, [r7, #12]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f001 f91e 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 8015cdc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cea:	2be0      	cmp	r3, #224	; 0xe0
 8015cec:	d102      	bne.n	8015cf4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015cee:	f06f 030f 	mvn.w	r3, #15
 8015cf2:	e06c      	b.n	8015dce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015cf4:	78fb      	ldrb	r3, [r7, #3]
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	68b8      	ldr	r0, [r7, #8]
 8015cfc:	f7ff fe56 	bl	80159ac <etharp_find_entry>
 8015d00:	4603      	mov	r3, r0
 8015d02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015d04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	da02      	bge.n	8015d12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015d0c:	8afb      	ldrh	r3, [r7, #22]
 8015d0e:	b25b      	sxtb	r3, r3
 8015d10:	e05d      	b.n	8015dce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015d12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d16:	4933      	ldr	r1, [pc, #204]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d18:	4613      	mov	r3, r2
 8015d1a:	005b      	lsls	r3, r3, #1
 8015d1c:	4413      	add	r3, r2
 8015d1e:	00db      	lsls	r3, r3, #3
 8015d20:	440b      	add	r3, r1
 8015d22:	3314      	adds	r3, #20
 8015d24:	2202      	movs	r2, #2
 8015d26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d2c:	492d      	ldr	r1, [pc, #180]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d2e:	4613      	mov	r3, r2
 8015d30:	005b      	lsls	r3, r3, #1
 8015d32:	4413      	add	r3, r2
 8015d34:	00db      	lsls	r3, r3, #3
 8015d36:	440b      	add	r3, r1
 8015d38:	3308      	adds	r3, #8
 8015d3a:	68fa      	ldr	r2, [r7, #12]
 8015d3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015d3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d42:	4613      	mov	r3, r2
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	4413      	add	r3, r2
 8015d48:	00db      	lsls	r3, r3, #3
 8015d4a:	3308      	adds	r3, #8
 8015d4c:	4a25      	ldr	r2, [pc, #148]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d4e:	4413      	add	r3, r2
 8015d50:	3304      	adds	r3, #4
 8015d52:	2206      	movs	r2, #6
 8015d54:	6879      	ldr	r1, [r7, #4]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f002 f899 	bl	8017e8e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d60:	4920      	ldr	r1, [pc, #128]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d62:	4613      	mov	r3, r2
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	440b      	add	r3, r1
 8015d6c:	3312      	adds	r3, #18
 8015d6e:	2200      	movs	r2, #0
 8015d70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015d72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d76:	491b      	ldr	r1, [pc, #108]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d78:	4613      	mov	r3, r2
 8015d7a:	005b      	lsls	r3, r3, #1
 8015d7c:	4413      	add	r3, r2
 8015d7e:	00db      	lsls	r3, r3, #3
 8015d80:	440b      	add	r3, r1
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d021      	beq.n	8015dcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015d88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d8c:	4915      	ldr	r1, [pc, #84]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015d8e:	4613      	mov	r3, r2
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	440b      	add	r3, r1
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015da0:	4910      	ldr	r1, [pc, #64]	; (8015de4 <etharp_update_arp_entry+0x148>)
 8015da2:	4613      	mov	r3, r2
 8015da4:	005b      	lsls	r3, r3, #1
 8015da6:	4413      	add	r3, r2
 8015da8:	00db      	lsls	r3, r3, #3
 8015daa:	440b      	add	r3, r1
 8015dac:	2200      	movs	r2, #0
 8015dae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6939      	ldr	r1, [r7, #16]
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f001 ffad 	bl	8017d20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015dc6:	6938      	ldr	r0, [r7, #16]
 8015dc8:	f7f7 fd0a 	bl	800d7e0 <pbuf_free>
  }
  return ERR_OK;
 8015dcc:	2300      	movs	r3, #0
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	080202ac 	.word	0x080202ac
 8015ddc:	080203a4 	.word	0x080203a4
 8015de0:	08020324 	.word	0x08020324
 8015de4:	200004e0 	.word	0x200004e0

08015de8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b084      	sub	sp, #16
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015df0:	2300      	movs	r3, #0
 8015df2:	60fb      	str	r3, [r7, #12]
 8015df4:	e01e      	b.n	8015e34 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015df6:	4913      	ldr	r1, [pc, #76]	; (8015e44 <etharp_cleanup_netif+0x5c>)
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	4613      	mov	r3, r2
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	4413      	add	r3, r2
 8015e00:	00db      	lsls	r3, r3, #3
 8015e02:	440b      	add	r3, r1
 8015e04:	3314      	adds	r3, #20
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015e0a:	7afb      	ldrb	r3, [r7, #11]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d00e      	beq.n	8015e2e <etharp_cleanup_netif+0x46>
 8015e10:	490c      	ldr	r1, [pc, #48]	; (8015e44 <etharp_cleanup_netif+0x5c>)
 8015e12:	68fa      	ldr	r2, [r7, #12]
 8015e14:	4613      	mov	r3, r2
 8015e16:	005b      	lsls	r3, r3, #1
 8015e18:	4413      	add	r3, r2
 8015e1a:	00db      	lsls	r3, r3, #3
 8015e1c:	440b      	add	r3, r1
 8015e1e:	3308      	adds	r3, #8
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	687a      	ldr	r2, [r7, #4]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	d102      	bne.n	8015e2e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f7ff fce5 	bl	80157f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	3301      	adds	r3, #1
 8015e32:	60fb      	str	r3, [r7, #12]
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2b09      	cmp	r3, #9
 8015e38:	dddd      	ble.n	8015df6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015e3a:	bf00      	nop
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	200004e0 	.word	0x200004e0

08015e48 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015e48:	b5b0      	push	{r4, r5, r7, lr}
 8015e4a:	b08a      	sub	sp, #40	; 0x28
 8015e4c:	af04      	add	r7, sp, #16
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d107      	bne.n	8015e68 <etharp_input+0x20>
 8015e58:	4b3f      	ldr	r3, [pc, #252]	; (8015f58 <etharp_input+0x110>)
 8015e5a:	f240 228a 	movw	r2, #650	; 0x28a
 8015e5e:	493f      	ldr	r1, [pc, #252]	; (8015f5c <etharp_input+0x114>)
 8015e60:	483f      	ldr	r0, [pc, #252]	; (8015f60 <etharp_input+0x118>)
 8015e62:	f002 fd45 	bl	80188f0 <iprintf>
 8015e66:	e074      	b.n	8015f52 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	685b      	ldr	r3, [r3, #4]
 8015e6c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e78:	d10c      	bne.n	8015e94 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015e7e:	2b06      	cmp	r3, #6
 8015e80:	d108      	bne.n	8015e94 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015e86:	2b04      	cmp	r3, #4
 8015e88:	d104      	bne.n	8015e94 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	885b      	ldrh	r3, [r3, #2]
 8015e8e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015e90:	2b08      	cmp	r3, #8
 8015e92:	d003      	beq.n	8015e9c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7f7 fca3 	bl	800d7e0 <pbuf_free>
    return;
 8015e9a:	e05a      	b.n	8015f52 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	330e      	adds	r3, #14
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	3318      	adds	r3, #24
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	3304      	adds	r3, #4
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d102      	bne.n	8015ebc <etharp_input+0x74>
    for_us = 0;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	75fb      	strb	r3, [r7, #23]
 8015eba:	e009      	b.n	8015ed0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015ebc:	68ba      	ldr	r2, [r7, #8]
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	bf0c      	ite	eq
 8015ec8:	2301      	moveq	r3, #1
 8015eca:	2300      	movne	r3, #0
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	f103 0208 	add.w	r2, r3, #8
 8015ed6:	7dfb      	ldrb	r3, [r7, #23]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d001      	beq.n	8015ee0 <etharp_input+0x98>
 8015edc:	2301      	movs	r3, #1
 8015ede:	e000      	b.n	8015ee2 <etharp_input+0x9a>
 8015ee0:	2302      	movs	r3, #2
 8015ee2:	f107 010c 	add.w	r1, r7, #12
 8015ee6:	6838      	ldr	r0, [r7, #0]
 8015ee8:	f7ff fed8 	bl	8015c9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	88db      	ldrh	r3, [r3, #6]
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ef6:	d003      	beq.n	8015f00 <etharp_input+0xb8>
 8015ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015efc:	d01e      	beq.n	8015f3c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015efe:	e025      	b.n	8015f4c <etharp_input+0x104>
      if (for_us) {
 8015f00:	7dfb      	ldrb	r3, [r7, #23]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d021      	beq.n	8015f4a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015f1c:	693a      	ldr	r2, [r7, #16]
 8015f1e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015f20:	2102      	movs	r1, #2
 8015f22:	9103      	str	r1, [sp, #12]
 8015f24:	f107 010c 	add.w	r1, r7, #12
 8015f28:	9102      	str	r1, [sp, #8]
 8015f2a:	9201      	str	r2, [sp, #4]
 8015f2c:	9300      	str	r3, [sp, #0]
 8015f2e:	462b      	mov	r3, r5
 8015f30:	4622      	mov	r2, r4
 8015f32:	4601      	mov	r1, r0
 8015f34:	6838      	ldr	r0, [r7, #0]
 8015f36:	f000 faef 	bl	8016518 <etharp_raw>
      break;
 8015f3a:	e006      	b.n	8015f4a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015f3c:	f107 030c 	add.w	r3, r7, #12
 8015f40:	4619      	mov	r1, r3
 8015f42:	6838      	ldr	r0, [r7, #0]
 8015f44:	f7fe f9fe 	bl	8014344 <dhcp_arp_reply>
      break;
 8015f48:	e000      	b.n	8015f4c <etharp_input+0x104>
      break;
 8015f4a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7f7 fc47 	bl	800d7e0 <pbuf_free>
}
 8015f52:	3718      	adds	r7, #24
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bdb0      	pop	{r4, r5, r7, pc}
 8015f58:	080202ac 	.word	0x080202ac
 8015f5c:	080203fc 	.word	0x080203fc
 8015f60:	08020324 	.word	0x08020324

08015f64 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b086      	sub	sp, #24
 8015f68:	af02      	add	r7, sp, #8
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	4613      	mov	r3, r2
 8015f70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015f72:	79fa      	ldrb	r2, [r7, #7]
 8015f74:	4944      	ldr	r1, [pc, #272]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015f76:	4613      	mov	r3, r2
 8015f78:	005b      	lsls	r3, r3, #1
 8015f7a:	4413      	add	r3, r2
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	440b      	add	r3, r1
 8015f80:	3314      	adds	r3, #20
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d806      	bhi.n	8015f96 <etharp_output_to_arp_index+0x32>
 8015f88:	4b40      	ldr	r3, [pc, #256]	; (801608c <etharp_output_to_arp_index+0x128>)
 8015f8a:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015f8e:	4940      	ldr	r1, [pc, #256]	; (8016090 <etharp_output_to_arp_index+0x12c>)
 8015f90:	4840      	ldr	r0, [pc, #256]	; (8016094 <etharp_output_to_arp_index+0x130>)
 8015f92:	f002 fcad 	bl	80188f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015f96:	79fa      	ldrb	r2, [r7, #7]
 8015f98:	493b      	ldr	r1, [pc, #236]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	4413      	add	r3, r2
 8015fa0:	00db      	lsls	r3, r3, #3
 8015fa2:	440b      	add	r3, r1
 8015fa4:	3314      	adds	r3, #20
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	2b02      	cmp	r3, #2
 8015faa:	d153      	bne.n	8016054 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015fac:	79fa      	ldrb	r2, [r7, #7]
 8015fae:	4936      	ldr	r1, [pc, #216]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	4413      	add	r3, r2
 8015fb6:	00db      	lsls	r3, r3, #3
 8015fb8:	440b      	add	r3, r1
 8015fba:	3312      	adds	r3, #18
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015fc2:	d919      	bls.n	8015ff8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015fc4:	79fa      	ldrb	r2, [r7, #7]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	005b      	lsls	r3, r3, #1
 8015fca:	4413      	add	r3, r2
 8015fcc:	00db      	lsls	r3, r3, #3
 8015fce:	4a2e      	ldr	r2, [pc, #184]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015fd0:	4413      	add	r3, r2
 8015fd2:	3304      	adds	r3, #4
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	68f8      	ldr	r0, [r7, #12]
 8015fd8:	f000 fb4c 	bl	8016674 <etharp_request>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d138      	bne.n	8016054 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015fe2:	79fa      	ldrb	r2, [r7, #7]
 8015fe4:	4928      	ldr	r1, [pc, #160]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	4413      	add	r3, r2
 8015fec:	00db      	lsls	r3, r3, #3
 8015fee:	440b      	add	r3, r1
 8015ff0:	3314      	adds	r3, #20
 8015ff2:	2203      	movs	r2, #3
 8015ff4:	701a      	strb	r2, [r3, #0]
 8015ff6:	e02d      	b.n	8016054 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ff8:	79fa      	ldrb	r2, [r7, #7]
 8015ffa:	4923      	ldr	r1, [pc, #140]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	005b      	lsls	r3, r3, #1
 8016000:	4413      	add	r3, r2
 8016002:	00db      	lsls	r3, r3, #3
 8016004:	440b      	add	r3, r1
 8016006:	3312      	adds	r3, #18
 8016008:	881b      	ldrh	r3, [r3, #0]
 801600a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801600e:	d321      	bcc.n	8016054 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016010:	79fa      	ldrb	r2, [r7, #7]
 8016012:	4613      	mov	r3, r2
 8016014:	005b      	lsls	r3, r3, #1
 8016016:	4413      	add	r3, r2
 8016018:	00db      	lsls	r3, r3, #3
 801601a:	4a1b      	ldr	r2, [pc, #108]	; (8016088 <etharp_output_to_arp_index+0x124>)
 801601c:	4413      	add	r3, r2
 801601e:	1d19      	adds	r1, r3, #4
 8016020:	79fa      	ldrb	r2, [r7, #7]
 8016022:	4613      	mov	r3, r2
 8016024:	005b      	lsls	r3, r3, #1
 8016026:	4413      	add	r3, r2
 8016028:	00db      	lsls	r3, r3, #3
 801602a:	3308      	adds	r3, #8
 801602c:	4a16      	ldr	r2, [pc, #88]	; (8016088 <etharp_output_to_arp_index+0x124>)
 801602e:	4413      	add	r3, r2
 8016030:	3304      	adds	r3, #4
 8016032:	461a      	mov	r2, r3
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f000 fafb 	bl	8016630 <etharp_request_dst>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d109      	bne.n	8016054 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016040:	79fa      	ldrb	r2, [r7, #7]
 8016042:	4911      	ldr	r1, [pc, #68]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8016044:	4613      	mov	r3, r2
 8016046:	005b      	lsls	r3, r3, #1
 8016048:	4413      	add	r3, r2
 801604a:	00db      	lsls	r3, r3, #3
 801604c:	440b      	add	r3, r1
 801604e:	3314      	adds	r3, #20
 8016050:	2203      	movs	r2, #3
 8016052:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801605a:	79fa      	ldrb	r2, [r7, #7]
 801605c:	4613      	mov	r3, r2
 801605e:	005b      	lsls	r3, r3, #1
 8016060:	4413      	add	r3, r2
 8016062:	00db      	lsls	r3, r3, #3
 8016064:	3308      	adds	r3, #8
 8016066:	4a08      	ldr	r2, [pc, #32]	; (8016088 <etharp_output_to_arp_index+0x124>)
 8016068:	4413      	add	r3, r2
 801606a:	1d1a      	adds	r2, r3, #4
 801606c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	4613      	mov	r3, r2
 8016074:	460a      	mov	r2, r1
 8016076:	68b9      	ldr	r1, [r7, #8]
 8016078:	68f8      	ldr	r0, [r7, #12]
 801607a:	f001 fe51 	bl	8017d20 <ethernet_output>
 801607e:	4603      	mov	r3, r0
}
 8016080:	4618      	mov	r0, r3
 8016082:	3710      	adds	r7, #16
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	200004e0 	.word	0x200004e0
 801608c:	080202ac 	.word	0x080202ac
 8016090:	0802041c 	.word	0x0802041c
 8016094:	08020324 	.word	0x08020324

08016098 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b08a      	sub	sp, #40	; 0x28
 801609c:	af02      	add	r7, sp, #8
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d106      	bne.n	80160bc <etharp_output+0x24>
 80160ae:	4b73      	ldr	r3, [pc, #460]	; (801627c <etharp_output+0x1e4>)
 80160b0:	f240 321e 	movw	r2, #798	; 0x31e
 80160b4:	4972      	ldr	r1, [pc, #456]	; (8016280 <etharp_output+0x1e8>)
 80160b6:	4873      	ldr	r0, [pc, #460]	; (8016284 <etharp_output+0x1ec>)
 80160b8:	f002 fc1a 	bl	80188f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d106      	bne.n	80160d0 <etharp_output+0x38>
 80160c2:	4b6e      	ldr	r3, [pc, #440]	; (801627c <etharp_output+0x1e4>)
 80160c4:	f240 321f 	movw	r2, #799	; 0x31f
 80160c8:	496f      	ldr	r1, [pc, #444]	; (8016288 <etharp_output+0x1f0>)
 80160ca:	486e      	ldr	r0, [pc, #440]	; (8016284 <etharp_output+0x1ec>)
 80160cc:	f002 fc10 	bl	80188f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d106      	bne.n	80160e4 <etharp_output+0x4c>
 80160d6:	4b69      	ldr	r3, [pc, #420]	; (801627c <etharp_output+0x1e4>)
 80160d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80160dc:	496b      	ldr	r1, [pc, #428]	; (801628c <etharp_output+0x1f4>)
 80160de:	4869      	ldr	r0, [pc, #420]	; (8016284 <etharp_output+0x1ec>)
 80160e0:	f002 fc06 	bl	80188f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	68f9      	ldr	r1, [r7, #12]
 80160ea:	4618      	mov	r0, r3
 80160ec:	f000 ff14 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d002      	beq.n	80160fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80160f6:	4b66      	ldr	r3, [pc, #408]	; (8016290 <etharp_output+0x1f8>)
 80160f8:	61fb      	str	r3, [r7, #28]
 80160fa:	e0af      	b.n	801625c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016104:	2be0      	cmp	r3, #224	; 0xe0
 8016106:	d118      	bne.n	801613a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016108:	2301      	movs	r3, #1
 801610a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801610c:	2300      	movs	r3, #0
 801610e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016110:	235e      	movs	r3, #94	; 0x5e
 8016112:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	3301      	adds	r3, #1
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801611e:	b2db      	uxtb	r3, r3
 8016120:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	3302      	adds	r3, #2
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	3303      	adds	r3, #3
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016132:	f107 0310 	add.w	r3, r7, #16
 8016136:	61fb      	str	r3, [r7, #28]
 8016138:	e090      	b.n	801625c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681a      	ldr	r2, [r3, #0]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	3304      	adds	r3, #4
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	405a      	eors	r2, r3
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	3308      	adds	r3, #8
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	4013      	ands	r3, r2
 801614e:	2b00      	cmp	r3, #0
 8016150:	d012      	beq.n	8016178 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016158:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801615c:	4293      	cmp	r3, r2
 801615e:	d00b      	beq.n	8016178 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	330c      	adds	r3, #12
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d003      	beq.n	8016172 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	330c      	adds	r3, #12
 801616e:	61bb      	str	r3, [r7, #24]
 8016170:	e002      	b.n	8016178 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016172:	f06f 0303 	mvn.w	r3, #3
 8016176:	e07d      	b.n	8016274 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016178:	4b46      	ldr	r3, [pc, #280]	; (8016294 <etharp_output+0x1fc>)
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	4619      	mov	r1, r3
 801617e:	4a46      	ldr	r2, [pc, #280]	; (8016298 <etharp_output+0x200>)
 8016180:	460b      	mov	r3, r1
 8016182:	005b      	lsls	r3, r3, #1
 8016184:	440b      	add	r3, r1
 8016186:	00db      	lsls	r3, r3, #3
 8016188:	4413      	add	r3, r2
 801618a:	3314      	adds	r3, #20
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	2b01      	cmp	r3, #1
 8016190:	d925      	bls.n	80161de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016192:	4b40      	ldr	r3, [pc, #256]	; (8016294 <etharp_output+0x1fc>)
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	4619      	mov	r1, r3
 8016198:	4a3f      	ldr	r2, [pc, #252]	; (8016298 <etharp_output+0x200>)
 801619a:	460b      	mov	r3, r1
 801619c:	005b      	lsls	r3, r3, #1
 801619e:	440b      	add	r3, r1
 80161a0:	00db      	lsls	r3, r3, #3
 80161a2:	4413      	add	r3, r2
 80161a4:	3308      	adds	r3, #8
 80161a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d117      	bne.n	80161de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	681a      	ldr	r2, [r3, #0]
 80161b2:	4b38      	ldr	r3, [pc, #224]	; (8016294 <etharp_output+0x1fc>)
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	4618      	mov	r0, r3
 80161b8:	4937      	ldr	r1, [pc, #220]	; (8016298 <etharp_output+0x200>)
 80161ba:	4603      	mov	r3, r0
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4403      	add	r3, r0
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	440b      	add	r3, r1
 80161c4:	3304      	adds	r3, #4
 80161c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d108      	bne.n	80161de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80161cc:	4b31      	ldr	r3, [pc, #196]	; (8016294 <etharp_output+0x1fc>)
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	461a      	mov	r2, r3
 80161d2:	68b9      	ldr	r1, [r7, #8]
 80161d4:	68f8      	ldr	r0, [r7, #12]
 80161d6:	f7ff fec5 	bl	8015f64 <etharp_output_to_arp_index>
 80161da:	4603      	mov	r3, r0
 80161dc:	e04a      	b.n	8016274 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80161de:	2300      	movs	r3, #0
 80161e0:	75fb      	strb	r3, [r7, #23]
 80161e2:	e031      	b.n	8016248 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80161e4:	7dfa      	ldrb	r2, [r7, #23]
 80161e6:	492c      	ldr	r1, [pc, #176]	; (8016298 <etharp_output+0x200>)
 80161e8:	4613      	mov	r3, r2
 80161ea:	005b      	lsls	r3, r3, #1
 80161ec:	4413      	add	r3, r2
 80161ee:	00db      	lsls	r3, r3, #3
 80161f0:	440b      	add	r3, r1
 80161f2:	3314      	adds	r3, #20
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d923      	bls.n	8016242 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80161fa:	7dfa      	ldrb	r2, [r7, #23]
 80161fc:	4926      	ldr	r1, [pc, #152]	; (8016298 <etharp_output+0x200>)
 80161fe:	4613      	mov	r3, r2
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	4413      	add	r3, r2
 8016204:	00db      	lsls	r3, r3, #3
 8016206:	440b      	add	r3, r1
 8016208:	3308      	adds	r3, #8
 801620a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801620c:	68fa      	ldr	r2, [r7, #12]
 801620e:	429a      	cmp	r2, r3
 8016210:	d117      	bne.n	8016242 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	6819      	ldr	r1, [r3, #0]
 8016216:	7dfa      	ldrb	r2, [r7, #23]
 8016218:	481f      	ldr	r0, [pc, #124]	; (8016298 <etharp_output+0x200>)
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	4403      	add	r3, r0
 8016224:	3304      	adds	r3, #4
 8016226:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016228:	4299      	cmp	r1, r3
 801622a:	d10a      	bne.n	8016242 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801622c:	4a19      	ldr	r2, [pc, #100]	; (8016294 <etharp_output+0x1fc>)
 801622e:	7dfb      	ldrb	r3, [r7, #23]
 8016230:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	461a      	mov	r2, r3
 8016236:	68b9      	ldr	r1, [r7, #8]
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f7ff fe93 	bl	8015f64 <etharp_output_to_arp_index>
 801623e:	4603      	mov	r3, r0
 8016240:	e018      	b.n	8016274 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016242:	7dfb      	ldrb	r3, [r7, #23]
 8016244:	3301      	adds	r3, #1
 8016246:	75fb      	strb	r3, [r7, #23]
 8016248:	7dfb      	ldrb	r3, [r7, #23]
 801624a:	2b09      	cmp	r3, #9
 801624c:	d9ca      	bls.n	80161e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801624e:	68ba      	ldr	r2, [r7, #8]
 8016250:	69b9      	ldr	r1, [r7, #24]
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f000 f822 	bl	801629c <etharp_query>
 8016258:	4603      	mov	r3, r0
 801625a:	e00b      	b.n	8016274 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	68b9      	ldr	r1, [r7, #8]
 801626c:	68f8      	ldr	r0, [r7, #12]
 801626e:	f001 fd57 	bl	8017d20 <ethernet_output>
 8016272:	4603      	mov	r3, r0
}
 8016274:	4618      	mov	r0, r3
 8016276:	3720      	adds	r7, #32
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	080202ac 	.word	0x080202ac
 8016280:	080203fc 	.word	0x080203fc
 8016284:	08020324 	.word	0x08020324
 8016288:	0802044c 	.word	0x0802044c
 801628c:	080203ec 	.word	0x080203ec
 8016290:	08020a80 	.word	0x08020a80
 8016294:	200005d0 	.word	0x200005d0
 8016298:	200004e0 	.word	0x200004e0

0801629c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b08c      	sub	sp, #48	; 0x30
 80162a0:	af02      	add	r7, sp, #8
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	60b9      	str	r1, [r7, #8]
 80162a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	332a      	adds	r3, #42	; 0x2a
 80162ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80162ae:	23ff      	movs	r3, #255	; 0xff
 80162b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80162b4:	2300      	movs	r3, #0
 80162b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	68f9      	ldr	r1, [r7, #12]
 80162be:	4618      	mov	r0, r3
 80162c0:	f000 fe2a 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d10c      	bne.n	80162e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80162d2:	2be0      	cmp	r3, #224	; 0xe0
 80162d4:	d006      	beq.n	80162e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d003      	beq.n	80162e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d102      	bne.n	80162ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80162e4:	f06f 030f 	mvn.w	r3, #15
 80162e8:	e102      	b.n	80164f0 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80162ea:	68fa      	ldr	r2, [r7, #12]
 80162ec:	2101      	movs	r1, #1
 80162ee:	68b8      	ldr	r0, [r7, #8]
 80162f0:	f7ff fb5c 	bl	80159ac <etharp_find_entry>
 80162f4:	4603      	mov	r3, r0
 80162f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80162f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	da02      	bge.n	8016306 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016300:	8a7b      	ldrh	r3, [r7, #18]
 8016302:	b25b      	sxtb	r3, r3
 8016304:	e0f4      	b.n	80164f0 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016306:	8a7b      	ldrh	r3, [r7, #18]
 8016308:	2b7e      	cmp	r3, #126	; 0x7e
 801630a:	d906      	bls.n	801631a <etharp_query+0x7e>
 801630c:	4b7a      	ldr	r3, [pc, #488]	; (80164f8 <etharp_query+0x25c>)
 801630e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016312:	497a      	ldr	r1, [pc, #488]	; (80164fc <etharp_query+0x260>)
 8016314:	487a      	ldr	r0, [pc, #488]	; (8016500 <etharp_query+0x264>)
 8016316:	f002 faeb 	bl	80188f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801631a:	8a7b      	ldrh	r3, [r7, #18]
 801631c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801631e:	7c7a      	ldrb	r2, [r7, #17]
 8016320:	4978      	ldr	r1, [pc, #480]	; (8016504 <etharp_query+0x268>)
 8016322:	4613      	mov	r3, r2
 8016324:	005b      	lsls	r3, r3, #1
 8016326:	4413      	add	r3, r2
 8016328:	00db      	lsls	r3, r3, #3
 801632a:	440b      	add	r3, r1
 801632c:	3314      	adds	r3, #20
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d115      	bne.n	8016360 <etharp_query+0xc4>
    is_new_entry = 1;
 8016334:	2301      	movs	r3, #1
 8016336:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016338:	7c7a      	ldrb	r2, [r7, #17]
 801633a:	4972      	ldr	r1, [pc, #456]	; (8016504 <etharp_query+0x268>)
 801633c:	4613      	mov	r3, r2
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4413      	add	r3, r2
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	440b      	add	r3, r1
 8016346:	3314      	adds	r3, #20
 8016348:	2201      	movs	r2, #1
 801634a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801634c:	7c7a      	ldrb	r2, [r7, #17]
 801634e:	496d      	ldr	r1, [pc, #436]	; (8016504 <etharp_query+0x268>)
 8016350:	4613      	mov	r3, r2
 8016352:	005b      	lsls	r3, r3, #1
 8016354:	4413      	add	r3, r2
 8016356:	00db      	lsls	r3, r3, #3
 8016358:	440b      	add	r3, r1
 801635a:	3308      	adds	r3, #8
 801635c:	68fa      	ldr	r2, [r7, #12]
 801635e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016360:	7c7a      	ldrb	r2, [r7, #17]
 8016362:	4968      	ldr	r1, [pc, #416]	; (8016504 <etharp_query+0x268>)
 8016364:	4613      	mov	r3, r2
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	440b      	add	r3, r1
 801636e:	3314      	adds	r3, #20
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d011      	beq.n	801639a <etharp_query+0xfe>
 8016376:	7c7a      	ldrb	r2, [r7, #17]
 8016378:	4962      	ldr	r1, [pc, #392]	; (8016504 <etharp_query+0x268>)
 801637a:	4613      	mov	r3, r2
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4413      	add	r3, r2
 8016380:	00db      	lsls	r3, r3, #3
 8016382:	440b      	add	r3, r1
 8016384:	3314      	adds	r3, #20
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d806      	bhi.n	801639a <etharp_query+0xfe>
 801638c:	4b5a      	ldr	r3, [pc, #360]	; (80164f8 <etharp_query+0x25c>)
 801638e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016392:	495d      	ldr	r1, [pc, #372]	; (8016508 <etharp_query+0x26c>)
 8016394:	485a      	ldr	r0, [pc, #360]	; (8016500 <etharp_query+0x264>)
 8016396:	f002 faab 	bl	80188f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d102      	bne.n	80163a6 <etharp_query+0x10a>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d10c      	bne.n	80163c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80163a6:	68b9      	ldr	r1, [r7, #8]
 80163a8:	68f8      	ldr	r0, [r7, #12]
 80163aa:	f000 f963 	bl	8016674 <etharp_request>
 80163ae:	4603      	mov	r3, r0
 80163b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d102      	bne.n	80163c0 <etharp_query+0x124>
      return result;
 80163ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163be:	e097      	b.n	80164f0 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d106      	bne.n	80163d4 <etharp_query+0x138>
 80163c6:	4b4c      	ldr	r3, [pc, #304]	; (80164f8 <etharp_query+0x25c>)
 80163c8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80163cc:	494f      	ldr	r1, [pc, #316]	; (801650c <etharp_query+0x270>)
 80163ce:	484c      	ldr	r0, [pc, #304]	; (8016500 <etharp_query+0x264>)
 80163d0:	f002 fa8e 	bl	80188f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80163d4:	7c7a      	ldrb	r2, [r7, #17]
 80163d6:	494b      	ldr	r1, [pc, #300]	; (8016504 <etharp_query+0x268>)
 80163d8:	4613      	mov	r3, r2
 80163da:	005b      	lsls	r3, r3, #1
 80163dc:	4413      	add	r3, r2
 80163de:	00db      	lsls	r3, r3, #3
 80163e0:	440b      	add	r3, r1
 80163e2:	3314      	adds	r3, #20
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d918      	bls.n	801641c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80163ea:	4a49      	ldr	r2, [pc, #292]	; (8016510 <etharp_query+0x274>)
 80163ec:	7c7b      	ldrb	r3, [r7, #17]
 80163ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80163f0:	7c7a      	ldrb	r2, [r7, #17]
 80163f2:	4613      	mov	r3, r2
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	4413      	add	r3, r2
 80163f8:	00db      	lsls	r3, r3, #3
 80163fa:	3308      	adds	r3, #8
 80163fc:	4a41      	ldr	r2, [pc, #260]	; (8016504 <etharp_query+0x268>)
 80163fe:	4413      	add	r3, r2
 8016400:	1d1a      	adds	r2, r3, #4
 8016402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	4613      	mov	r3, r2
 801640a:	697a      	ldr	r2, [r7, #20]
 801640c:	6879      	ldr	r1, [r7, #4]
 801640e:	68f8      	ldr	r0, [r7, #12]
 8016410:	f001 fc86 	bl	8017d20 <ethernet_output>
 8016414:	4603      	mov	r3, r0
 8016416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801641a:	e067      	b.n	80164ec <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801641c:	7c7a      	ldrb	r2, [r7, #17]
 801641e:	4939      	ldr	r1, [pc, #228]	; (8016504 <etharp_query+0x268>)
 8016420:	4613      	mov	r3, r2
 8016422:	005b      	lsls	r3, r3, #1
 8016424:	4413      	add	r3, r2
 8016426:	00db      	lsls	r3, r3, #3
 8016428:	440b      	add	r3, r1
 801642a:	3314      	adds	r3, #20
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d15c      	bne.n	80164ec <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	61fb      	str	r3, [r7, #28]
    while (p) {
 801643a:	e01c      	b.n	8016476 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	895a      	ldrh	r2, [r3, #10]
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	891b      	ldrh	r3, [r3, #8]
 8016444:	429a      	cmp	r2, r3
 8016446:	d10a      	bne.n	801645e <etharp_query+0x1c2>
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d006      	beq.n	801645e <etharp_query+0x1c2>
 8016450:	4b29      	ldr	r3, [pc, #164]	; (80164f8 <etharp_query+0x25c>)
 8016452:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016456:	492f      	ldr	r1, [pc, #188]	; (8016514 <etharp_query+0x278>)
 8016458:	4829      	ldr	r0, [pc, #164]	; (8016500 <etharp_query+0x264>)
 801645a:	f002 fa49 	bl	80188f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	7b1b      	ldrb	r3, [r3, #12]
 8016462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016466:	2b00      	cmp	r3, #0
 8016468:	d002      	beq.n	8016470 <etharp_query+0x1d4>
        copy_needed = 1;
 801646a:	2301      	movs	r3, #1
 801646c:	61bb      	str	r3, [r7, #24]
        break;
 801646e:	e005      	b.n	801647c <etharp_query+0x1e0>
      }
      p = p->next;
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1df      	bne.n	801643c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d007      	beq.n	8016492 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016488:	200e      	movs	r0, #14
 801648a:	f7f7 fc15 	bl	800dcb8 <pbuf_clone>
 801648e:	61f8      	str	r0, [r7, #28]
 8016490:	e004      	b.n	801649c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016496:	69f8      	ldr	r0, [r7, #28]
 8016498:	f7f7 fa42 	bl	800d920 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d021      	beq.n	80164e6 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80164a2:	7c7a      	ldrb	r2, [r7, #17]
 80164a4:	4917      	ldr	r1, [pc, #92]	; (8016504 <etharp_query+0x268>)
 80164a6:	4613      	mov	r3, r2
 80164a8:	005b      	lsls	r3, r3, #1
 80164aa:	4413      	add	r3, r2
 80164ac:	00db      	lsls	r3, r3, #3
 80164ae:	440b      	add	r3, r1
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d00a      	beq.n	80164cc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80164b6:	7c7a      	ldrb	r2, [r7, #17]
 80164b8:	4912      	ldr	r1, [pc, #72]	; (8016504 <etharp_query+0x268>)
 80164ba:	4613      	mov	r3, r2
 80164bc:	005b      	lsls	r3, r3, #1
 80164be:	4413      	add	r3, r2
 80164c0:	00db      	lsls	r3, r3, #3
 80164c2:	440b      	add	r3, r1
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7f7 f98a 	bl	800d7e0 <pbuf_free>
      }
      arp_table[i].q = p;
 80164cc:	7c7a      	ldrb	r2, [r7, #17]
 80164ce:	490d      	ldr	r1, [pc, #52]	; (8016504 <etharp_query+0x268>)
 80164d0:	4613      	mov	r3, r2
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	4413      	add	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	440b      	add	r3, r1
 80164da:	69fa      	ldr	r2, [r7, #28]
 80164dc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80164de:	2300      	movs	r3, #0
 80164e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164e4:	e002      	b.n	80164ec <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80164e6:	23ff      	movs	r3, #255	; 0xff
 80164e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80164ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	3728      	adds	r7, #40	; 0x28
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}
 80164f8:	080202ac 	.word	0x080202ac
 80164fc:	08020458 	.word	0x08020458
 8016500:	08020324 	.word	0x08020324
 8016504:	200004e0 	.word	0x200004e0
 8016508:	08020468 	.word	0x08020468
 801650c:	0802044c 	.word	0x0802044c
 8016510:	200005d0 	.word	0x200005d0
 8016514:	08020490 	.word	0x08020490

08016518 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b08a      	sub	sp, #40	; 0x28
 801651c:	af02      	add	r7, sp, #8
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	607a      	str	r2, [r7, #4]
 8016524:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016526:	2300      	movs	r3, #0
 8016528:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d106      	bne.n	801653e <etharp_raw+0x26>
 8016530:	4b3a      	ldr	r3, [pc, #232]	; (801661c <etharp_raw+0x104>)
 8016532:	f240 4257 	movw	r2, #1111	; 0x457
 8016536:	493a      	ldr	r1, [pc, #232]	; (8016620 <etharp_raw+0x108>)
 8016538:	483a      	ldr	r0, [pc, #232]	; (8016624 <etharp_raw+0x10c>)
 801653a:	f002 f9d9 	bl	80188f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801653e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016542:	211c      	movs	r1, #28
 8016544:	200e      	movs	r0, #14
 8016546:	f7f6 fe6b 	bl	800d220 <pbuf_alloc>
 801654a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801654c:	69bb      	ldr	r3, [r7, #24]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d102      	bne.n	8016558 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016552:	f04f 33ff 	mov.w	r3, #4294967295
 8016556:	e05d      	b.n	8016614 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	895b      	ldrh	r3, [r3, #10]
 801655c:	2b1b      	cmp	r3, #27
 801655e:	d806      	bhi.n	801656e <etharp_raw+0x56>
 8016560:	4b2e      	ldr	r3, [pc, #184]	; (801661c <etharp_raw+0x104>)
 8016562:	f240 4263 	movw	r2, #1123	; 0x463
 8016566:	4930      	ldr	r1, [pc, #192]	; (8016628 <etharp_raw+0x110>)
 8016568:	482e      	ldr	r0, [pc, #184]	; (8016624 <etharp_raw+0x10c>)
 801656a:	f002 f9c1 	bl	80188f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016574:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016576:	4618      	mov	r0, r3
 8016578:	f7f5 fe9a 	bl	800c2b0 <lwip_htons>
 801657c:	4603      	mov	r3, r0
 801657e:	461a      	mov	r2, r3
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801658a:	2b06      	cmp	r3, #6
 801658c:	d006      	beq.n	801659c <etharp_raw+0x84>
 801658e:	4b23      	ldr	r3, [pc, #140]	; (801661c <etharp_raw+0x104>)
 8016590:	f240 426a 	movw	r2, #1130	; 0x46a
 8016594:	4925      	ldr	r1, [pc, #148]	; (801662c <etharp_raw+0x114>)
 8016596:	4823      	ldr	r0, [pc, #140]	; (8016624 <etharp_raw+0x10c>)
 8016598:	f002 f9aa 	bl	80188f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	3308      	adds	r3, #8
 80165a0:	2206      	movs	r2, #6
 80165a2:	6839      	ldr	r1, [r7, #0]
 80165a4:	4618      	mov	r0, r3
 80165a6:	f001 fc72 	bl	8017e8e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	3312      	adds	r3, #18
 80165ae:	2206      	movs	r2, #6
 80165b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165b2:	4618      	mov	r0, r3
 80165b4:	f001 fc6b 	bl	8017e8e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	330e      	adds	r3, #14
 80165bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165be:	6812      	ldr	r2, [r2, #0]
 80165c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	3318      	adds	r3, #24
 80165c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165c8:	6812      	ldr	r2, [r2, #0]
 80165ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	2200      	movs	r2, #0
 80165d0:	701a      	strb	r2, [r3, #0]
 80165d2:	2200      	movs	r2, #0
 80165d4:	f042 0201 	orr.w	r2, r2, #1
 80165d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	2200      	movs	r2, #0
 80165de:	f042 0208 	orr.w	r2, r2, #8
 80165e2:	709a      	strb	r2, [r3, #2]
 80165e4:	2200      	movs	r2, #0
 80165e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	2206      	movs	r2, #6
 80165ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	2204      	movs	r2, #4
 80165f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80165f4:	f640 0306 	movw	r3, #2054	; 0x806
 80165f8:	9300      	str	r3, [sp, #0]
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	68ba      	ldr	r2, [r7, #8]
 80165fe:	69b9      	ldr	r1, [r7, #24]
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	f001 fb8d 	bl	8017d20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016606:	69b8      	ldr	r0, [r7, #24]
 8016608:	f7f7 f8ea 	bl	800d7e0 <pbuf_free>
  p = NULL;
 801660c:	2300      	movs	r3, #0
 801660e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016610:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016614:	4618      	mov	r0, r3
 8016616:	3720      	adds	r7, #32
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}
 801661c:	080202ac 	.word	0x080202ac
 8016620:	080203fc 	.word	0x080203fc
 8016624:	08020324 	.word	0x08020324
 8016628:	080204ac 	.word	0x080204ac
 801662c:	080204e0 	.word	0x080204e0

08016630 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b088      	sub	sp, #32
 8016634:	af04      	add	r7, sp, #16
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801664c:	2201      	movs	r2, #1
 801664e:	9203      	str	r2, [sp, #12]
 8016650:	68ba      	ldr	r2, [r7, #8]
 8016652:	9202      	str	r2, [sp, #8]
 8016654:	4a06      	ldr	r2, [pc, #24]	; (8016670 <etharp_request_dst+0x40>)
 8016656:	9201      	str	r2, [sp, #4]
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	4603      	mov	r3, r0
 801665c:	687a      	ldr	r2, [r7, #4]
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f7ff ff5a 	bl	8016518 <etharp_raw>
 8016664:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016666:	4618      	mov	r0, r3
 8016668:	3710      	adds	r7, #16
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	08020a88 	.word	0x08020a88

08016674 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b082      	sub	sp, #8
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801667e:	4a05      	ldr	r2, [pc, #20]	; (8016694 <etharp_request+0x20>)
 8016680:	6839      	ldr	r1, [r7, #0]
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f7ff ffd4 	bl	8016630 <etharp_request_dst>
 8016688:	4603      	mov	r3, r0
}
 801668a:	4618      	mov	r0, r3
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	08020a80 	.word	0x08020a80

08016698 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b08e      	sub	sp, #56	; 0x38
 801669c:	af04      	add	r7, sp, #16
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80166a2:	4b79      	ldr	r3, [pc, #484]	; (8016888 <icmp_input+0x1f0>)
 80166a4:	689b      	ldr	r3, [r3, #8]
 80166a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80166a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	f003 030f 	and.w	r3, r3, #15
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	009b      	lsls	r3, r3, #2
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80166b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166ba:	2b13      	cmp	r3, #19
 80166bc:	f240 80cd 	bls.w	801685a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	895b      	ldrh	r3, [r3, #10]
 80166c4:	2b03      	cmp	r3, #3
 80166c6:	f240 80ca 	bls.w	801685e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80166d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80166d8:	2b00      	cmp	r3, #0
 80166da:	f000 80b7 	beq.w	801684c <icmp_input+0x1b4>
 80166de:	2b08      	cmp	r3, #8
 80166e0:	f040 80b7 	bne.w	8016852 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80166e4:	4b69      	ldr	r3, [pc, #420]	; (801688c <icmp_input+0x1f4>)
 80166e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166e8:	4b67      	ldr	r3, [pc, #412]	; (8016888 <icmp_input+0x1f0>)
 80166ea:	695b      	ldr	r3, [r3, #20]
 80166ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80166f0:	2be0      	cmp	r3, #224	; 0xe0
 80166f2:	f000 80bb 	beq.w	801686c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80166f6:	4b64      	ldr	r3, [pc, #400]	; (8016888 <icmp_input+0x1f0>)
 80166f8:	695a      	ldr	r2, [r3, #20]
 80166fa:	4b63      	ldr	r3, [pc, #396]	; (8016888 <icmp_input+0x1f0>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4619      	mov	r1, r3
 8016700:	4610      	mov	r0, r2
 8016702:	f000 fc09 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 8016706:	4603      	mov	r3, r0
 8016708:	2b00      	cmp	r3, #0
 801670a:	f040 80b1 	bne.w	8016870 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	891b      	ldrh	r3, [r3, #8]
 8016712:	2b07      	cmp	r3, #7
 8016714:	f240 80a5 	bls.w	8016862 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801671a:	330e      	adds	r3, #14
 801671c:	4619      	mov	r1, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7f6 ffc8 	bl	800d6b4 <pbuf_add_header>
 8016724:	4603      	mov	r3, r0
 8016726:	2b00      	cmp	r3, #0
 8016728:	d04b      	beq.n	80167c2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	891a      	ldrh	r2, [r3, #8]
 801672e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016730:	4413      	add	r3, r2
 8016732:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	891b      	ldrh	r3, [r3, #8]
 8016738:	8b7a      	ldrh	r2, [r7, #26]
 801673a:	429a      	cmp	r2, r3
 801673c:	f0c0 809a 	bcc.w	8016874 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016740:	8b7b      	ldrh	r3, [r7, #26]
 8016742:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016746:	4619      	mov	r1, r3
 8016748:	200e      	movs	r0, #14
 801674a:	f7f6 fd69 	bl	800d220 <pbuf_alloc>
 801674e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2b00      	cmp	r3, #0
 8016754:	f000 8090 	beq.w	8016878 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	895b      	ldrh	r3, [r3, #10]
 801675c:	461a      	mov	r2, r3
 801675e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016760:	3308      	adds	r3, #8
 8016762:	429a      	cmp	r2, r3
 8016764:	d203      	bcs.n	801676e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016766:	6978      	ldr	r0, [r7, #20]
 8016768:	f7f7 f83a 	bl	800d7e0 <pbuf_free>
          goto icmperr;
 801676c:	e085      	b.n	801687a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016776:	4618      	mov	r0, r3
 8016778:	f001 fb89 	bl	8017e8e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801677c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801677e:	4619      	mov	r1, r3
 8016780:	6978      	ldr	r0, [r7, #20]
 8016782:	f7f6 ffa7 	bl	800d6d4 <pbuf_remove_header>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d009      	beq.n	80167a0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801678c:	4b40      	ldr	r3, [pc, #256]	; (8016890 <icmp_input+0x1f8>)
 801678e:	22b6      	movs	r2, #182	; 0xb6
 8016790:	4940      	ldr	r1, [pc, #256]	; (8016894 <icmp_input+0x1fc>)
 8016792:	4841      	ldr	r0, [pc, #260]	; (8016898 <icmp_input+0x200>)
 8016794:	f002 f8ac 	bl	80188f0 <iprintf>
          pbuf_free(r);
 8016798:	6978      	ldr	r0, [r7, #20]
 801679a:	f7f7 f821 	bl	800d7e0 <pbuf_free>
          goto icmperr;
 801679e:	e06c      	b.n	801687a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80167a0:	6879      	ldr	r1, [r7, #4]
 80167a2:	6978      	ldr	r0, [r7, #20]
 80167a4:	f7f7 f944 	bl	800da30 <pbuf_copy>
 80167a8:	4603      	mov	r3, r0
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d003      	beq.n	80167b6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80167ae:	6978      	ldr	r0, [r7, #20]
 80167b0:	f7f7 f816 	bl	800d7e0 <pbuf_free>
          goto icmperr;
 80167b4:	e061      	b.n	801687a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7f7 f812 	bl	800d7e0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	607b      	str	r3, [r7, #4]
 80167c0:	e00f      	b.n	80167e2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80167c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167c4:	330e      	adds	r3, #14
 80167c6:	4619      	mov	r1, r3
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7f6 ff83 	bl	800d6d4 <pbuf_remove_header>
 80167ce:	4603      	mov	r3, r0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d006      	beq.n	80167e2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80167d4:	4b2e      	ldr	r3, [pc, #184]	; (8016890 <icmp_input+0x1f8>)
 80167d6:	22c7      	movs	r2, #199	; 0xc7
 80167d8:	4930      	ldr	r1, [pc, #192]	; (801689c <icmp_input+0x204>)
 80167da:	482f      	ldr	r0, [pc, #188]	; (8016898 <icmp_input+0x200>)
 80167dc:	f002 f888 	bl	80188f0 <iprintf>
          goto icmperr;
 80167e0:	e04b      	b.n	801687a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80167e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167ea:	4619      	mov	r1, r3
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f7f6 ff61 	bl	800d6b4 <pbuf_add_header>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d12b      	bne.n	8016850 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	685b      	ldr	r3, [r3, #4]
 80167fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016806:	4b20      	ldr	r3, [pc, #128]	; (8016888 <icmp_input+0x1f0>)
 8016808:	691a      	ldr	r2, [r3, #16]
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	2200      	movs	r2, #0
 8016812:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	2200      	movs	r2, #0
 8016818:	709a      	strb	r2, [r3, #2]
 801681a:	2200      	movs	r2, #0
 801681c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	22ff      	movs	r2, #255	; 0xff
 8016822:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2200      	movs	r2, #0
 8016828:	729a      	strb	r2, [r3, #10]
 801682a:	2200      	movs	r2, #0
 801682c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	9302      	str	r3, [sp, #8]
 8016832:	2301      	movs	r3, #1
 8016834:	9301      	str	r3, [sp, #4]
 8016836:	2300      	movs	r3, #0
 8016838:	9300      	str	r3, [sp, #0]
 801683a:	23ff      	movs	r3, #255	; 0xff
 801683c:	2200      	movs	r2, #0
 801683e:	69f9      	ldr	r1, [r7, #28]
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f000 fa91 	bl	8016d68 <ip4_output_if>
 8016846:	4603      	mov	r3, r0
 8016848:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801684a:	e001      	b.n	8016850 <icmp_input+0x1b8>
      break;
 801684c:	bf00      	nop
 801684e:	e000      	b.n	8016852 <icmp_input+0x1ba>
      break;
 8016850:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7f6 ffc4 	bl	800d7e0 <pbuf_free>
  return;
 8016858:	e013      	b.n	8016882 <icmp_input+0x1ea>
    goto lenerr;
 801685a:	bf00      	nop
 801685c:	e002      	b.n	8016864 <icmp_input+0x1cc>
    goto lenerr;
 801685e:	bf00      	nop
 8016860:	e000      	b.n	8016864 <icmp_input+0x1cc>
        goto lenerr;
 8016862:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	f7f6 ffbb 	bl	800d7e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801686a:	e00a      	b.n	8016882 <icmp_input+0x1ea>
        goto icmperr;
 801686c:	bf00      	nop
 801686e:	e004      	b.n	801687a <icmp_input+0x1e2>
        goto icmperr;
 8016870:	bf00      	nop
 8016872:	e002      	b.n	801687a <icmp_input+0x1e2>
          goto icmperr;
 8016874:	bf00      	nop
 8016876:	e000      	b.n	801687a <icmp_input+0x1e2>
          goto icmperr;
 8016878:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f7f6 ffb0 	bl	800d7e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016880:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016882:	3728      	adds	r7, #40	; 0x28
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}
 8016888:	2000425c 	.word	0x2000425c
 801688c:	20004270 	.word	0x20004270
 8016890:	08020524 	.word	0x08020524
 8016894:	0802055c 	.word	0x0802055c
 8016898:	08020594 	.word	0x08020594
 801689c:	080205bc 	.word	0x080205bc

080168a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	460b      	mov	r3, r1
 80168aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80168ac:	78fb      	ldrb	r3, [r7, #3]
 80168ae:	461a      	mov	r2, r3
 80168b0:	2103      	movs	r1, #3
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f000 f814 	bl	80168e0 <icmp_send_response>
}
 80168b8:	bf00      	nop
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	460b      	mov	r3, r1
 80168ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80168cc:	78fb      	ldrb	r3, [r7, #3]
 80168ce:	461a      	mov	r2, r3
 80168d0:	210b      	movs	r1, #11
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f000 f804 	bl	80168e0 <icmp_send_response>
}
 80168d8:	bf00      	nop
 80168da:	3708      	adds	r7, #8
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}

080168e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b08c      	sub	sp, #48	; 0x30
 80168e4:	af04      	add	r7, sp, #16
 80168e6:	6078      	str	r0, [r7, #4]
 80168e8:	460b      	mov	r3, r1
 80168ea:	70fb      	strb	r3, [r7, #3]
 80168ec:	4613      	mov	r3, r2
 80168ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80168f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80168f4:	2124      	movs	r1, #36	; 0x24
 80168f6:	2022      	movs	r0, #34	; 0x22
 80168f8:	f7f6 fc92 	bl	800d220 <pbuf_alloc>
 80168fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d04c      	beq.n	801699e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	895b      	ldrh	r3, [r3, #10]
 8016908:	2b23      	cmp	r3, #35	; 0x23
 801690a:	d806      	bhi.n	801691a <icmp_send_response+0x3a>
 801690c:	4b26      	ldr	r3, [pc, #152]	; (80169a8 <icmp_send_response+0xc8>)
 801690e:	f240 1269 	movw	r2, #361	; 0x169
 8016912:	4926      	ldr	r1, [pc, #152]	; (80169ac <icmp_send_response+0xcc>)
 8016914:	4826      	ldr	r0, [pc, #152]	; (80169b0 <icmp_send_response+0xd0>)
 8016916:	f001 ffeb 	bl	80188f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	78fa      	ldrb	r2, [r7, #3]
 801692a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	78ba      	ldrb	r2, [r7, #2]
 8016930:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	2200      	movs	r2, #0
 8016936:	711a      	strb	r2, [r3, #4]
 8016938:	2200      	movs	r2, #0
 801693a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	2200      	movs	r2, #0
 8016940:	719a      	strb	r2, [r3, #6]
 8016942:	2200      	movs	r2, #0
 8016944:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	f103 0008 	add.w	r0, r3, #8
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	221c      	movs	r2, #28
 8016954:	4619      	mov	r1, r3
 8016956:	f001 fa9a 	bl	8017e8e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	68db      	ldr	r3, [r3, #12]
 801695e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016960:	f107 030c 	add.w	r3, r7, #12
 8016964:	4618      	mov	r0, r3
 8016966:	f000 f825 	bl	80169b4 <ip4_route>
 801696a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d011      	beq.n	8016996 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	2200      	movs	r2, #0
 8016976:	709a      	strb	r2, [r3, #2]
 8016978:	2200      	movs	r2, #0
 801697a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801697c:	f107 020c 	add.w	r2, r7, #12
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	9302      	str	r3, [sp, #8]
 8016984:	2301      	movs	r3, #1
 8016986:	9301      	str	r3, [sp, #4]
 8016988:	2300      	movs	r3, #0
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	23ff      	movs	r3, #255	; 0xff
 801698e:	2100      	movs	r1, #0
 8016990:	69f8      	ldr	r0, [r7, #28]
 8016992:	f000 f9e9 	bl	8016d68 <ip4_output_if>
  }
  pbuf_free(q);
 8016996:	69f8      	ldr	r0, [r7, #28]
 8016998:	f7f6 ff22 	bl	800d7e0 <pbuf_free>
 801699c:	e000      	b.n	80169a0 <icmp_send_response+0xc0>
    return;
 801699e:	bf00      	nop
}
 80169a0:	3720      	adds	r7, #32
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	08020524 	.word	0x08020524
 80169ac:	080205f0 	.word	0x080205f0
 80169b0:	08020594 	.word	0x08020594

080169b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80169b4:	b480      	push	{r7}
 80169b6:	b085      	sub	sp, #20
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80169bc:	4b33      	ldr	r3, [pc, #204]	; (8016a8c <ip4_route+0xd8>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	60fb      	str	r3, [r7, #12]
 80169c2:	e036      	b.n	8016a32 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169ca:	f003 0301 	and.w	r3, r3, #1
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d02b      	beq.n	8016a2c <ip4_route+0x78>
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169da:	089b      	lsrs	r3, r3, #2
 80169dc:	f003 0301 	and.w	r3, r3, #1
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d022      	beq.n	8016a2c <ip4_route+0x78>
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	3304      	adds	r3, #4
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d01d      	beq.n	8016a2c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681a      	ldr	r2, [r3, #0]
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	3304      	adds	r3, #4
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	405a      	eors	r2, r3
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	3308      	adds	r3, #8
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	4013      	ands	r3, r2
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d101      	bne.n	8016a0c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	e038      	b.n	8016a7e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a12:	f003 0302 	and.w	r3, r3, #2
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d108      	bne.n	8016a2c <ip4_route+0x78>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	330c      	adds	r3, #12
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d101      	bne.n	8016a2c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	e028      	b.n	8016a7e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	60fb      	str	r3, [r7, #12]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1c5      	bne.n	80169c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016a38:	4b15      	ldr	r3, [pc, #84]	; (8016a90 <ip4_route+0xdc>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d01a      	beq.n	8016a76 <ip4_route+0xc2>
 8016a40:	4b13      	ldr	r3, [pc, #76]	; (8016a90 <ip4_route+0xdc>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a48:	f003 0301 	and.w	r3, r3, #1
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d012      	beq.n	8016a76 <ip4_route+0xc2>
 8016a50:	4b0f      	ldr	r3, [pc, #60]	; (8016a90 <ip4_route+0xdc>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a58:	f003 0304 	and.w	r3, r3, #4
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d00a      	beq.n	8016a76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016a60:	4b0b      	ldr	r3, [pc, #44]	; (8016a90 <ip4_route+0xdc>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	3304      	adds	r3, #4
 8016a66:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d004      	beq.n	8016a76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	2b7f      	cmp	r3, #127	; 0x7f
 8016a74:	d101      	bne.n	8016a7a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016a76:	2300      	movs	r3, #0
 8016a78:	e001      	b.n	8016a7e <ip4_route+0xca>
  }

  return netif_default;
 8016a7a:	4b05      	ldr	r3, [pc, #20]	; (8016a90 <ip4_route+0xdc>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3714      	adds	r7, #20
 8016a82:	46bd      	mov	sp, r7
 8016a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop
 8016a8c:	20007370 	.word	0x20007370
 8016a90:	20007374 	.word	0x20007374

08016a94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016aa2:	f003 0301 	and.w	r3, r3, #1
 8016aa6:	b2db      	uxtb	r3, r3
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d016      	beq.n	8016ada <ip4_input_accept+0x46>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	3304      	adds	r3, #4
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d011      	beq.n	8016ada <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016ab6:	4b0b      	ldr	r3, [pc, #44]	; (8016ae4 <ip4_input_accept+0x50>)
 8016ab8:	695a      	ldr	r2, [r3, #20]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	3304      	adds	r3, #4
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d008      	beq.n	8016ad6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016ac4:	4b07      	ldr	r3, [pc, #28]	; (8016ae4 <ip4_input_accept+0x50>)
 8016ac6:	695b      	ldr	r3, [r3, #20]
 8016ac8:	6879      	ldr	r1, [r7, #4]
 8016aca:	4618      	mov	r0, r3
 8016acc:	f000 fa24 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 8016ad0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d001      	beq.n	8016ada <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	e000      	b.n	8016adc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016ada:	2300      	movs	r3, #0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	2000425c 	.word	0x2000425c

08016ae8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b088      	sub	sp, #32
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016af2:	2301      	movs	r3, #1
 8016af4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	091b      	lsrs	r3, r3, #4
 8016b02:	b2db      	uxtb	r3, r3
 8016b04:	2b04      	cmp	r3, #4
 8016b06:	d004      	beq.n	8016b12 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f7f6 fe69 	bl	800d7e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e121      	b.n	8016d56 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	f003 030f 	and.w	r3, r3, #15
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016b22:	69fb      	ldr	r3, [r7, #28]
 8016b24:	885b      	ldrh	r3, [r3, #2]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f5 fbc1 	bl	800c2b0 <lwip_htons>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	891b      	ldrh	r3, [r3, #8]
 8016b36:	8a3a      	ldrh	r2, [r7, #16]
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	d204      	bcs.n	8016b46 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016b3c:	8a3b      	ldrh	r3, [r7, #16]
 8016b3e:	4619      	mov	r1, r3
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f7f6 fcc7 	bl	800d4d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	895b      	ldrh	r3, [r3, #10]
 8016b4a:	8a7a      	ldrh	r2, [r7, #18]
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d807      	bhi.n	8016b60 <ip4_input+0x78>
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	891b      	ldrh	r3, [r3, #8]
 8016b54:	8a3a      	ldrh	r2, [r7, #16]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d802      	bhi.n	8016b60 <ip4_input+0x78>
 8016b5a:	8a7b      	ldrh	r3, [r7, #18]
 8016b5c:	2b13      	cmp	r3, #19
 8016b5e:	d804      	bhi.n	8016b6a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7f6 fe3d 	bl	800d7e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016b66:	2300      	movs	r3, #0
 8016b68:	e0f5      	b.n	8016d56 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	691b      	ldr	r3, [r3, #16]
 8016b6e:	4a7c      	ldr	r2, [pc, #496]	; (8016d60 <ip4_input+0x278>)
 8016b70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	68db      	ldr	r3, [r3, #12]
 8016b76:	4a7a      	ldr	r2, [pc, #488]	; (8016d60 <ip4_input+0x278>)
 8016b78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016b7a:	4b79      	ldr	r3, [pc, #484]	; (8016d60 <ip4_input+0x278>)
 8016b7c:	695b      	ldr	r3, [r3, #20]
 8016b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b82:	2be0      	cmp	r3, #224	; 0xe0
 8016b84:	d112      	bne.n	8016bac <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b8c:	f003 0301 	and.w	r3, r3, #1
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d007      	beq.n	8016ba6 <ip4_input+0xbe>
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	3304      	adds	r3, #4
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d002      	beq.n	8016ba6 <ip4_input+0xbe>
      netif = inp;
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	61bb      	str	r3, [r7, #24]
 8016ba4:	e02a      	b.n	8016bfc <ip4_input+0x114>
    } else {
      netif = NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	61bb      	str	r3, [r7, #24]
 8016baa:	e027      	b.n	8016bfc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016bac:	6838      	ldr	r0, [r7, #0]
 8016bae:	f7ff ff71 	bl	8016a94 <ip4_input_accept>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d002      	beq.n	8016bbe <ip4_input+0xd6>
      netif = inp;
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	61bb      	str	r3, [r7, #24]
 8016bbc:	e01e      	b.n	8016bfc <ip4_input+0x114>
    } else {
      netif = NULL;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016bc2:	4b67      	ldr	r3, [pc, #412]	; (8016d60 <ip4_input+0x278>)
 8016bc4:	695b      	ldr	r3, [r3, #20]
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8016bca:	d017      	beq.n	8016bfc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016bcc:	4b65      	ldr	r3, [pc, #404]	; (8016d64 <ip4_input+0x27c>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	61bb      	str	r3, [r7, #24]
 8016bd2:	e00e      	b.n	8016bf2 <ip4_input+0x10a>
          if (netif == inp) {
 8016bd4:	69ba      	ldr	r2, [r7, #24]
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d006      	beq.n	8016bea <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016bdc:	69b8      	ldr	r0, [r7, #24]
 8016bde:	f7ff ff59 	bl	8016a94 <ip4_input_accept>
 8016be2:	4603      	mov	r3, r0
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d108      	bne.n	8016bfa <ip4_input+0x112>
 8016be8:	e000      	b.n	8016bec <ip4_input+0x104>
            continue;
 8016bea:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016bec:	69bb      	ldr	r3, [r7, #24]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	61bb      	str	r3, [r7, #24]
 8016bf2:	69bb      	ldr	r3, [r7, #24]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1ed      	bne.n	8016bd4 <ip4_input+0xec>
 8016bf8:	e000      	b.n	8016bfc <ip4_input+0x114>
            break;
 8016bfa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d111      	bne.n	8016c26 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	7a5b      	ldrb	r3, [r3, #9]
 8016c06:	2b11      	cmp	r3, #17
 8016c08:	d10d      	bne.n	8016c26 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016c0a:	8a7b      	ldrh	r3, [r7, #18]
 8016c0c:	69fa      	ldr	r2, [r7, #28]
 8016c0e:	4413      	add	r3, r2
 8016c10:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	885b      	ldrh	r3, [r3, #2]
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016c1c:	d103      	bne.n	8016c26 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016c22:	2300      	movs	r3, #0
 8016c24:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d017      	beq.n	8016c5c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016c2c:	4b4c      	ldr	r3, [pc, #304]	; (8016d60 <ip4_input+0x278>)
 8016c2e:	691b      	ldr	r3, [r3, #16]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d013      	beq.n	8016c5c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016c34:	4b4a      	ldr	r3, [pc, #296]	; (8016d60 <ip4_input+0x278>)
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	6839      	ldr	r1, [r7, #0]
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f000 f96c 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d105      	bne.n	8016c52 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016c46:	4b46      	ldr	r3, [pc, #280]	; (8016d60 <ip4_input+0x278>)
 8016c48:	691b      	ldr	r3, [r3, #16]
 8016c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016c4e:	2be0      	cmp	r3, #224	; 0xe0
 8016c50:	d104      	bne.n	8016c5c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f7f6 fdc4 	bl	800d7e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	e07c      	b.n	8016d56 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016c5c:	69bb      	ldr	r3, [r7, #24]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d104      	bne.n	8016c6c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f7f6 fdbc 	bl	800d7e0 <pbuf_free>
    return ERR_OK;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	e074      	b.n	8016d56 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	88db      	ldrh	r3, [r3, #6]
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	461a      	mov	r2, r3
 8016c74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016c78:	4013      	ands	r3, r2
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d00b      	beq.n	8016c96 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 fc90 	bl	80175a4 <ip4_reass>
 8016c84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d101      	bne.n	8016c90 <ip4_input+0x1a8>
      return ERR_OK;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	e062      	b.n	8016d56 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016c96:	4a32      	ldr	r2, [pc, #200]	; (8016d60 <ip4_input+0x278>)
 8016c98:	69bb      	ldr	r3, [r7, #24]
 8016c9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016c9c:	4a30      	ldr	r2, [pc, #192]	; (8016d60 <ip4_input+0x278>)
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016ca2:	4a2f      	ldr	r2, [pc, #188]	; (8016d60 <ip4_input+0x278>)
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016ca8:	69fb      	ldr	r3, [r7, #28]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	f003 030f 	and.w	r3, r3, #15
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	009b      	lsls	r3, r3, #2
 8016cb4:	b2db      	uxtb	r3, r3
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	4b29      	ldr	r3, [pc, #164]	; (8016d60 <ip4_input+0x278>)
 8016cba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016cbc:	8a7b      	ldrh	r3, [r7, #18]
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f7f6 fd07 	bl	800d6d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016cc6:	69fb      	ldr	r3, [r7, #28]
 8016cc8:	7a5b      	ldrb	r3, [r3, #9]
 8016cca:	2b06      	cmp	r3, #6
 8016ccc:	d009      	beq.n	8016ce2 <ip4_input+0x1fa>
 8016cce:	2b11      	cmp	r3, #17
 8016cd0:	d002      	beq.n	8016cd8 <ip4_input+0x1f0>
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d00a      	beq.n	8016cec <ip4_input+0x204>
 8016cd6:	e00e      	b.n	8016cf6 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016cd8:	6839      	ldr	r1, [r7, #0]
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f7fc fb2a 	bl	8013334 <udp_input>
        break;
 8016ce0:	e026      	b.n	8016d30 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016ce2:	6839      	ldr	r1, [r7, #0]
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f7f8 fba7 	bl	800f438 <tcp_input>
        break;
 8016cea:	e021      	b.n	8016d30 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f7ff fcd2 	bl	8016698 <icmp_input>
        break;
 8016cf4:	e01c      	b.n	8016d30 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016cf6:	4b1a      	ldr	r3, [pc, #104]	; (8016d60 <ip4_input+0x278>)
 8016cf8:	695b      	ldr	r3, [r3, #20]
 8016cfa:	69b9      	ldr	r1, [r7, #24]
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f000 f90b 	bl	8016f18 <ip4_addr_isbroadcast_u32>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d10f      	bne.n	8016d28 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d08:	4b15      	ldr	r3, [pc, #84]	; (8016d60 <ip4_input+0x278>)
 8016d0a:	695b      	ldr	r3, [r3, #20]
 8016d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d10:	2be0      	cmp	r3, #224	; 0xe0
 8016d12:	d009      	beq.n	8016d28 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016d18:	4619      	mov	r1, r3
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f7f6 fd4d 	bl	800d7ba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016d20:	2102      	movs	r1, #2
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f7ff fdbc 	bl	80168a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7f6 fd59 	bl	800d7e0 <pbuf_free>
        break;
 8016d2e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016d30:	4b0b      	ldr	r3, [pc, #44]	; (8016d60 <ip4_input+0x278>)
 8016d32:	2200      	movs	r2, #0
 8016d34:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016d36:	4b0a      	ldr	r3, [pc, #40]	; (8016d60 <ip4_input+0x278>)
 8016d38:	2200      	movs	r2, #0
 8016d3a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016d3c:	4b08      	ldr	r3, [pc, #32]	; (8016d60 <ip4_input+0x278>)
 8016d3e:	2200      	movs	r2, #0
 8016d40:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016d42:	4b07      	ldr	r3, [pc, #28]	; (8016d60 <ip4_input+0x278>)
 8016d44:	2200      	movs	r2, #0
 8016d46:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016d48:	4b05      	ldr	r3, [pc, #20]	; (8016d60 <ip4_input+0x278>)
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016d4e:	4b04      	ldr	r3, [pc, #16]	; (8016d60 <ip4_input+0x278>)
 8016d50:	2200      	movs	r2, #0
 8016d52:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016d54:	2300      	movs	r3, #0
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3720      	adds	r7, #32
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	2000425c 	.word	0x2000425c
 8016d64:	20007370 	.word	0x20007370

08016d68 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b08a      	sub	sp, #40	; 0x28
 8016d6c:	af04      	add	r7, sp, #16
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	60b9      	str	r1, [r7, #8]
 8016d72:	607a      	str	r2, [r7, #4]
 8016d74:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d009      	beq.n	8016d94 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d003      	beq.n	8016d8e <ip4_output_if+0x26>
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d102      	bne.n	8016d94 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d90:	3304      	adds	r3, #4
 8016d92:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016d94:	78fa      	ldrb	r2, [r7, #3]
 8016d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d98:	9302      	str	r3, [sp, #8]
 8016d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d9e:	9301      	str	r3, [sp, #4]
 8016da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	4613      	mov	r3, r2
 8016da8:	687a      	ldr	r2, [r7, #4]
 8016daa:	6979      	ldr	r1, [r7, #20]
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f000 f805 	bl	8016dbc <ip4_output_if_src>
 8016db2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3718      	adds	r7, #24
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b088      	sub	sp, #32
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	607a      	str	r2, [r7, #4]
 8016dc8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	7b9b      	ldrb	r3, [r3, #14]
 8016dce:	2b01      	cmp	r3, #1
 8016dd0:	d006      	beq.n	8016de0 <ip4_output_if_src+0x24>
 8016dd2:	4b4b      	ldr	r3, [pc, #300]	; (8016f00 <ip4_output_if_src+0x144>)
 8016dd4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016dd8:	494a      	ldr	r1, [pc, #296]	; (8016f04 <ip4_output_if_src+0x148>)
 8016dda:	484b      	ldr	r0, [pc, #300]	; (8016f08 <ip4_output_if_src+0x14c>)
 8016ddc:	f001 fd88 	bl	80188f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d060      	beq.n	8016ea8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016de6:	2314      	movs	r3, #20
 8016de8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016dea:	2114      	movs	r1, #20
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f7f6 fc61 	bl	800d6b4 <pbuf_add_header>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d002      	beq.n	8016dfe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016df8:	f06f 0301 	mvn.w	r3, #1
 8016dfc:	e07c      	b.n	8016ef8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	895b      	ldrh	r3, [r3, #10]
 8016e08:	2b13      	cmp	r3, #19
 8016e0a:	d806      	bhi.n	8016e1a <ip4_output_if_src+0x5e>
 8016e0c:	4b3c      	ldr	r3, [pc, #240]	; (8016f00 <ip4_output_if_src+0x144>)
 8016e0e:	f240 3289 	movw	r2, #905	; 0x389
 8016e12:	493e      	ldr	r1, [pc, #248]	; (8016f0c <ip4_output_if_src+0x150>)
 8016e14:	483c      	ldr	r0, [pc, #240]	; (8016f08 <ip4_output_if_src+0x14c>)
 8016e16:	f001 fd6b 	bl	80188f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	78fa      	ldrb	r2, [r7, #3]
 8016e1e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016e26:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	69fb      	ldr	r3, [r7, #28]
 8016e2e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016e30:	8b7b      	ldrh	r3, [r7, #26]
 8016e32:	089b      	lsrs	r3, r3, #2
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e3c:	b2da      	uxtb	r2, r3
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016e48:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	891b      	ldrh	r3, [r3, #8]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7f5 fa2e 	bl	800c2b0 <lwip_htons>
 8016e54:	4603      	mov	r3, r0
 8016e56:	461a      	mov	r2, r3
 8016e58:	69fb      	ldr	r3, [r7, #28]
 8016e5a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016e5c:	69fb      	ldr	r3, [r7, #28]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	719a      	strb	r2, [r3, #6]
 8016e62:	2200      	movs	r2, #0
 8016e64:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016e66:	4b2a      	ldr	r3, [pc, #168]	; (8016f10 <ip4_output_if_src+0x154>)
 8016e68:	881b      	ldrh	r3, [r3, #0]
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7f5 fa20 	bl	800c2b0 <lwip_htons>
 8016e70:	4603      	mov	r3, r0
 8016e72:	461a      	mov	r2, r3
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016e78:	4b25      	ldr	r3, [pc, #148]	; (8016f10 <ip4_output_if_src+0x154>)
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	4b23      	ldr	r3, [pc, #140]	; (8016f10 <ip4_output_if_src+0x154>)
 8016e82:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d104      	bne.n	8016e94 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016e8a:	4b22      	ldr	r3, [pc, #136]	; (8016f14 <ip4_output_if_src+0x158>)
 8016e8c:	681a      	ldr	r2, [r3, #0]
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	60da      	str	r2, [r3, #12]
 8016e92:	e003      	b.n	8016e9c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	681a      	ldr	r2, [r3, #0]
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	729a      	strb	r2, [r3, #10]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	72da      	strb	r2, [r3, #11]
 8016ea6:	e00f      	b.n	8016ec8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	895b      	ldrh	r3, [r3, #10]
 8016eac:	2b13      	cmp	r3, #19
 8016eae:	d802      	bhi.n	8016eb6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016eb0:	f06f 0301 	mvn.w	r3, #1
 8016eb4:	e020      	b.n	8016ef8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016ebc:	69fb      	ldr	r3, [r7, #28]
 8016ebe:	691b      	ldr	r3, [r3, #16]
 8016ec0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016ec2:	f107 0314 	add.w	r3, r7, #20
 8016ec6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00c      	beq.n	8016eea <ip4_output_if_src+0x12e>
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	891a      	ldrh	r2, [r3, #8]
 8016ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d906      	bls.n	8016eea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016ee0:	68f8      	ldr	r0, [r7, #12]
 8016ee2:	f000 fd4b 	bl	801797c <ip4_frag>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	e006      	b.n	8016ef8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eec:	695b      	ldr	r3, [r3, #20]
 8016eee:	687a      	ldr	r2, [r7, #4]
 8016ef0:	68f9      	ldr	r1, [r7, #12]
 8016ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ef4:	4798      	blx	r3
 8016ef6:	4603      	mov	r3, r0
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3720      	adds	r7, #32
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}
 8016f00:	0802061c 	.word	0x0802061c
 8016f04:	08020650 	.word	0x08020650
 8016f08:	0802065c 	.word	0x0802065c
 8016f0c:	08020684 	.word	0x08020684
 8016f10:	200005d2 	.word	0x200005d2
 8016f14:	08020a78 	.word	0x08020a78

08016f18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f2c:	d002      	beq.n	8016f34 <ip4_addr_isbroadcast_u32+0x1c>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d101      	bne.n	8016f38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016f34:	2301      	movs	r3, #1
 8016f36:	e02a      	b.n	8016f8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016f3e:	f003 0302 	and.w	r3, r3, #2
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d101      	bne.n	8016f4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016f46:	2300      	movs	r3, #0
 8016f48:	e021      	b.n	8016f8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	3304      	adds	r3, #4
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d101      	bne.n	8016f5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016f56:	2300      	movs	r3, #0
 8016f58:	e019      	b.n	8016f8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016f5a:	68fa      	ldr	r2, [r7, #12]
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	3304      	adds	r3, #4
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	405a      	eors	r2, r3
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	3308      	adds	r3, #8
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	4013      	ands	r3, r2
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d10d      	bne.n	8016f8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	3308      	adds	r3, #8
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	43da      	mvns	r2, r3
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	3308      	adds	r3, #8
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d101      	bne.n	8016f8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016f88:	2301      	movs	r3, #1
 8016f8a:	e000      	b.n	8016f8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016f8c:	2300      	movs	r3, #0
  }
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3714      	adds	r7, #20
 8016f92:	46bd      	mov	sp, r7
 8016f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f98:	4770      	bx	lr
	...

08016f9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016fa6:	4b12      	ldr	r3, [pc, #72]	; (8016ff0 <ip_reass_tmr+0x54>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016fac:	e018      	b.n	8016fe0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	7fdb      	ldrb	r3, [r3, #31]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d00b      	beq.n	8016fce <ip_reass_tmr+0x32>
      r->timer--;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	7fdb      	ldrb	r3, [r3, #31]
 8016fba:	3b01      	subs	r3, #1
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	60fb      	str	r3, [r7, #12]
 8016fcc:	e008      	b.n	8016fe0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016fd8:	68b9      	ldr	r1, [r7, #8]
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f000 f80a 	bl	8016ff4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d1e3      	bne.n	8016fae <ip_reass_tmr+0x12>
    }
  }
}
 8016fe6:	bf00      	nop
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	200005d4 	.word	0x200005d4

08016ff4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b088      	sub	sp, #32
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017002:	683a      	ldr	r2, [r7, #0]
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	429a      	cmp	r2, r3
 8017008:	d105      	bne.n	8017016 <ip_reass_free_complete_datagram+0x22>
 801700a:	4b45      	ldr	r3, [pc, #276]	; (8017120 <ip_reass_free_complete_datagram+0x12c>)
 801700c:	22ab      	movs	r2, #171	; 0xab
 801700e:	4945      	ldr	r1, [pc, #276]	; (8017124 <ip_reass_free_complete_datagram+0x130>)
 8017010:	4845      	ldr	r0, [pc, #276]	; (8017128 <ip_reass_free_complete_datagram+0x134>)
 8017012:	f001 fc6d 	bl	80188f0 <iprintf>
  if (prev != NULL) {
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d00a      	beq.n	8017032 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	429a      	cmp	r2, r3
 8017024:	d005      	beq.n	8017032 <ip_reass_free_complete_datagram+0x3e>
 8017026:	4b3e      	ldr	r3, [pc, #248]	; (8017120 <ip_reass_free_complete_datagram+0x12c>)
 8017028:	22ad      	movs	r2, #173	; 0xad
 801702a:	4940      	ldr	r1, [pc, #256]	; (801712c <ip_reass_free_complete_datagram+0x138>)
 801702c:	483e      	ldr	r0, [pc, #248]	; (8017128 <ip_reass_free_complete_datagram+0x134>)
 801702e:	f001 fc5f 	bl	80188f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	889b      	ldrh	r3, [r3, #4]
 801703e:	b29b      	uxth	r3, r3
 8017040:	2b00      	cmp	r3, #0
 8017042:	d12a      	bne.n	801709a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017052:	69bb      	ldr	r3, [r7, #24]
 8017054:	6858      	ldr	r0, [r3, #4]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	3308      	adds	r3, #8
 801705a:	2214      	movs	r2, #20
 801705c:	4619      	mov	r1, r3
 801705e:	f000 ff16 	bl	8017e8e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017062:	2101      	movs	r1, #1
 8017064:	69b8      	ldr	r0, [r7, #24]
 8017066:	f7ff fc2b 	bl	80168c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801706a:	69b8      	ldr	r0, [r7, #24]
 801706c:	f7f6 fc40 	bl	800d8f0 <pbuf_clen>
 8017070:	4603      	mov	r3, r0
 8017072:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017074:	8bfa      	ldrh	r2, [r7, #30]
 8017076:	8a7b      	ldrh	r3, [r7, #18]
 8017078:	4413      	add	r3, r2
 801707a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801707e:	db05      	blt.n	801708c <ip_reass_free_complete_datagram+0x98>
 8017080:	4b27      	ldr	r3, [pc, #156]	; (8017120 <ip_reass_free_complete_datagram+0x12c>)
 8017082:	22bc      	movs	r2, #188	; 0xbc
 8017084:	492a      	ldr	r1, [pc, #168]	; (8017130 <ip_reass_free_complete_datagram+0x13c>)
 8017086:	4828      	ldr	r0, [pc, #160]	; (8017128 <ip_reass_free_complete_datagram+0x134>)
 8017088:	f001 fc32 	bl	80188f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801708c:	8bfa      	ldrh	r2, [r7, #30]
 801708e:	8a7b      	ldrh	r3, [r7, #18]
 8017090:	4413      	add	r3, r2
 8017092:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017094:	69b8      	ldr	r0, [r7, #24]
 8017096:	f7f6 fba3 	bl	800d7e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80170a0:	e01f      	b.n	80170e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80170a8:	69bb      	ldr	r3, [r7, #24]
 80170aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f7f6 fc1c 	bl	800d8f0 <pbuf_clen>
 80170b8:	4603      	mov	r3, r0
 80170ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80170bc:	8bfa      	ldrh	r2, [r7, #30]
 80170be:	8a7b      	ldrh	r3, [r7, #18]
 80170c0:	4413      	add	r3, r2
 80170c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170c6:	db05      	blt.n	80170d4 <ip_reass_free_complete_datagram+0xe0>
 80170c8:	4b15      	ldr	r3, [pc, #84]	; (8017120 <ip_reass_free_complete_datagram+0x12c>)
 80170ca:	22cc      	movs	r2, #204	; 0xcc
 80170cc:	4918      	ldr	r1, [pc, #96]	; (8017130 <ip_reass_free_complete_datagram+0x13c>)
 80170ce:	4816      	ldr	r0, [pc, #88]	; (8017128 <ip_reass_free_complete_datagram+0x134>)
 80170d0:	f001 fc0e 	bl	80188f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80170d4:	8bfa      	ldrh	r2, [r7, #30]
 80170d6:	8a7b      	ldrh	r3, [r7, #18]
 80170d8:	4413      	add	r3, r2
 80170da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f7f6 fb7f 	bl	800d7e0 <pbuf_free>
  while (p != NULL) {
 80170e2:	69bb      	ldr	r3, [r7, #24]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d1dc      	bne.n	80170a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80170e8:	6839      	ldr	r1, [r7, #0]
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f000 f8c2 	bl	8017274 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80170f0:	4b10      	ldr	r3, [pc, #64]	; (8017134 <ip_reass_free_complete_datagram+0x140>)
 80170f2:	881b      	ldrh	r3, [r3, #0]
 80170f4:	8bfa      	ldrh	r2, [r7, #30]
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d905      	bls.n	8017106 <ip_reass_free_complete_datagram+0x112>
 80170fa:	4b09      	ldr	r3, [pc, #36]	; (8017120 <ip_reass_free_complete_datagram+0x12c>)
 80170fc:	22d2      	movs	r2, #210	; 0xd2
 80170fe:	490e      	ldr	r1, [pc, #56]	; (8017138 <ip_reass_free_complete_datagram+0x144>)
 8017100:	4809      	ldr	r0, [pc, #36]	; (8017128 <ip_reass_free_complete_datagram+0x134>)
 8017102:	f001 fbf5 	bl	80188f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017106:	4b0b      	ldr	r3, [pc, #44]	; (8017134 <ip_reass_free_complete_datagram+0x140>)
 8017108:	881a      	ldrh	r2, [r3, #0]
 801710a:	8bfb      	ldrh	r3, [r7, #30]
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	b29a      	uxth	r2, r3
 8017110:	4b08      	ldr	r3, [pc, #32]	; (8017134 <ip_reass_free_complete_datagram+0x140>)
 8017112:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017114:	8bfb      	ldrh	r3, [r7, #30]
}
 8017116:	4618      	mov	r0, r3
 8017118:	3720      	adds	r7, #32
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	080206b4 	.word	0x080206b4
 8017124:	080206f0 	.word	0x080206f0
 8017128:	080206fc 	.word	0x080206fc
 801712c:	08020724 	.word	0x08020724
 8017130:	08020738 	.word	0x08020738
 8017134:	200005d8 	.word	0x200005d8
 8017138:	08020758 	.word	0x08020758

0801713c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b08a      	sub	sp, #40	; 0x28
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017146:	2300      	movs	r3, #0
 8017148:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801714a:	2300      	movs	r3, #0
 801714c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801714e:	2300      	movs	r3, #0
 8017150:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017152:	2300      	movs	r3, #0
 8017154:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017156:	2300      	movs	r3, #0
 8017158:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801715a:	4b28      	ldr	r3, [pc, #160]	; (80171fc <ip_reass_remove_oldest_datagram+0xc0>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017160:	e030      	b.n	80171c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017164:	695a      	ldr	r2, [r3, #20]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	68db      	ldr	r3, [r3, #12]
 801716a:	429a      	cmp	r2, r3
 801716c:	d10c      	bne.n	8017188 <ip_reass_remove_oldest_datagram+0x4c>
 801716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017170:	699a      	ldr	r2, [r3, #24]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	691b      	ldr	r3, [r3, #16]
 8017176:	429a      	cmp	r2, r3
 8017178:	d106      	bne.n	8017188 <ip_reass_remove_oldest_datagram+0x4c>
 801717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717c:	899a      	ldrh	r2, [r3, #12]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	889b      	ldrh	r3, [r3, #4]
 8017182:	b29b      	uxth	r3, r3
 8017184:	429a      	cmp	r2, r3
 8017186:	d014      	beq.n	80171b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	3301      	adds	r3, #1
 801718c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801718e:	6a3b      	ldr	r3, [r7, #32]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d104      	bne.n	801719e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017196:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017198:	69fb      	ldr	r3, [r7, #28]
 801719a:	61bb      	str	r3, [r7, #24]
 801719c:	e009      	b.n	80171b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a0:	7fda      	ldrb	r2, [r3, #31]
 80171a2:	6a3b      	ldr	r3, [r7, #32]
 80171a4:	7fdb      	ldrb	r3, [r3, #31]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d803      	bhi.n	80171b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80171aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80171ae:	69fb      	ldr	r3, [r7, #28]
 80171b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80171b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d001      	beq.n	80171be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80171ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80171be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80171c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d1cb      	bne.n	8017162 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80171ca:	6a3b      	ldr	r3, [r7, #32]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d008      	beq.n	80171e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80171d0:	69b9      	ldr	r1, [r7, #24]
 80171d2:	6a38      	ldr	r0, [r7, #32]
 80171d4:	f7ff ff0e 	bl	8016ff4 <ip_reass_free_complete_datagram>
 80171d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80171da:	697a      	ldr	r2, [r7, #20]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	4413      	add	r3, r2
 80171e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80171e2:	697a      	ldr	r2, [r7, #20]
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	da02      	bge.n	80171f0 <ip_reass_remove_oldest_datagram+0xb4>
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	dcac      	bgt.n	801714a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80171f0:	697b      	ldr	r3, [r7, #20]
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3728      	adds	r7, #40	; 0x28
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	200005d4 	.word	0x200005d4

08017200 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801720a:	2004      	movs	r0, #4
 801720c:	f7f5 fca6 	bl	800cb5c <memp_malloc>
 8017210:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d110      	bne.n	801723a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017218:	6839      	ldr	r1, [r7, #0]
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f7ff ff8e 	bl	801713c <ip_reass_remove_oldest_datagram>
 8017220:	4602      	mov	r2, r0
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	4293      	cmp	r3, r2
 8017226:	dc03      	bgt.n	8017230 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017228:	2004      	movs	r0, #4
 801722a:	f7f5 fc97 	bl	800cb5c <memp_malloc>
 801722e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d101      	bne.n	801723a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017236:	2300      	movs	r3, #0
 8017238:	e016      	b.n	8017268 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801723a:	2220      	movs	r2, #32
 801723c:	2100      	movs	r1, #0
 801723e:	68f8      	ldr	r0, [r7, #12]
 8017240:	f000 fe49 	bl	8017ed6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	220f      	movs	r2, #15
 8017248:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801724a:	4b09      	ldr	r3, [pc, #36]	; (8017270 <ip_reass_enqueue_new_datagram+0x70>)
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017252:	4a07      	ldr	r2, [pc, #28]	; (8017270 <ip_reass_enqueue_new_datagram+0x70>)
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	3308      	adds	r3, #8
 801725c:	2214      	movs	r2, #20
 801725e:	6879      	ldr	r1, [r7, #4]
 8017260:	4618      	mov	r0, r3
 8017262:	f000 fe14 	bl	8017e8e <memcpy>
  return ipr;
 8017266:	68fb      	ldr	r3, [r7, #12]
}
 8017268:	4618      	mov	r0, r3
 801726a:	3710      	adds	r7, #16
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	200005d4 	.word	0x200005d4

08017274 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b082      	sub	sp, #8
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
 801727c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801727e:	4b10      	ldr	r3, [pc, #64]	; (80172c0 <ip_reass_dequeue_datagram+0x4c>)
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	687a      	ldr	r2, [r7, #4]
 8017284:	429a      	cmp	r2, r3
 8017286:	d104      	bne.n	8017292 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	4a0c      	ldr	r2, [pc, #48]	; (80172c0 <ip_reass_dequeue_datagram+0x4c>)
 801728e:	6013      	str	r3, [r2, #0]
 8017290:	e00d      	b.n	80172ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d106      	bne.n	80172a6 <ip_reass_dequeue_datagram+0x32>
 8017298:	4b0a      	ldr	r3, [pc, #40]	; (80172c4 <ip_reass_dequeue_datagram+0x50>)
 801729a:	f240 1245 	movw	r2, #325	; 0x145
 801729e:	490a      	ldr	r1, [pc, #40]	; (80172c8 <ip_reass_dequeue_datagram+0x54>)
 80172a0:	480a      	ldr	r0, [pc, #40]	; (80172cc <ip_reass_dequeue_datagram+0x58>)
 80172a2:	f001 fb25 	bl	80188f0 <iprintf>
    prev->next = ipr->next;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80172ae:	6879      	ldr	r1, [r7, #4]
 80172b0:	2004      	movs	r0, #4
 80172b2:	f7f5 fc9f 	bl	800cbf4 <memp_free>
}
 80172b6:	bf00      	nop
 80172b8:	3708      	adds	r7, #8
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	200005d4 	.word	0x200005d4
 80172c4:	080206b4 	.word	0x080206b4
 80172c8:	0802077c 	.word	0x0802077c
 80172cc:	080206fc 	.word	0x080206fc

080172d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08c      	sub	sp, #48	; 0x30
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80172dc:	2300      	movs	r3, #0
 80172de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80172e0:	2301      	movs	r3, #1
 80172e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	885b      	ldrh	r3, [r3, #2]
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7f4 ffdd 	bl	800c2b0 <lwip_htons>
 80172f6:	4603      	mov	r3, r0
 80172f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80172fa:	69fb      	ldr	r3, [r7, #28]
 80172fc:	781b      	ldrb	r3, [r3, #0]
 80172fe:	f003 030f 	and.w	r3, r3, #15
 8017302:	b2db      	uxtb	r3, r3
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017308:	7e7b      	ldrb	r3, [r7, #25]
 801730a:	b29b      	uxth	r3, r3
 801730c:	8b7a      	ldrh	r2, [r7, #26]
 801730e:	429a      	cmp	r2, r3
 8017310:	d202      	bcs.n	8017318 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017312:	f04f 33ff 	mov.w	r3, #4294967295
 8017316:	e135      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017318:	7e7b      	ldrb	r3, [r7, #25]
 801731a:	b29b      	uxth	r3, r3
 801731c:	8b7a      	ldrh	r2, [r7, #26]
 801731e:	1ad3      	subs	r3, r2, r3
 8017320:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	88db      	ldrh	r3, [r3, #6]
 8017326:	b29b      	uxth	r3, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7f4 ffc1 	bl	800c2b0 <lwip_htons>
 801732e:	4603      	mov	r3, r0
 8017330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017334:	b29b      	uxth	r3, r3
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017342:	2200      	movs	r2, #0
 8017344:	701a      	strb	r2, [r3, #0]
 8017346:	2200      	movs	r2, #0
 8017348:	705a      	strb	r2, [r3, #1]
 801734a:	2200      	movs	r2, #0
 801734c:	709a      	strb	r2, [r3, #2]
 801734e:	2200      	movs	r2, #0
 8017350:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017354:	8afa      	ldrh	r2, [r7, #22]
 8017356:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017358:	8afa      	ldrh	r2, [r7, #22]
 801735a:	8b7b      	ldrh	r3, [r7, #26]
 801735c:	4413      	add	r3, r2
 801735e:	b29a      	uxth	r2, r3
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017366:	88db      	ldrh	r3, [r3, #6]
 8017368:	b29b      	uxth	r3, r3
 801736a:	8afa      	ldrh	r2, [r7, #22]
 801736c:	429a      	cmp	r2, r3
 801736e:	d902      	bls.n	8017376 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017370:	f04f 33ff 	mov.w	r3, #4294967295
 8017374:	e106      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	685b      	ldr	r3, [r3, #4]
 801737a:	627b      	str	r3, [r7, #36]	; 0x24
 801737c:	e068      	b.n	8017450 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017386:	889b      	ldrh	r3, [r3, #4]
 8017388:	b29a      	uxth	r2, r3
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	889b      	ldrh	r3, [r3, #4]
 801738e:	b29b      	uxth	r3, r3
 8017390:	429a      	cmp	r2, r3
 8017392:	d235      	bcs.n	8017400 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017398:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739c:	2b00      	cmp	r3, #0
 801739e:	d020      	beq.n	80173e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80173a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a2:	889b      	ldrh	r3, [r3, #4]
 80173a4:	b29a      	uxth	r2, r3
 80173a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a8:	88db      	ldrh	r3, [r3, #6]
 80173aa:	b29b      	uxth	r3, r3
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d307      	bcc.n	80173c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80173b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b2:	88db      	ldrh	r3, [r3, #6]
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	693b      	ldr	r3, [r7, #16]
 80173b8:	889b      	ldrh	r3, [r3, #4]
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	429a      	cmp	r2, r3
 80173be:	d902      	bls.n	80173c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173c0:	f04f 33ff 	mov.w	r3, #4294967295
 80173c4:	e0de      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	68ba      	ldr	r2, [r7, #8]
 80173ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80173cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ce:	88db      	ldrh	r3, [r3, #6]
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d4:	889b      	ldrh	r3, [r3, #4]
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	429a      	cmp	r2, r3
 80173da:	d03d      	beq.n	8017458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80173dc:	2300      	movs	r3, #0
 80173de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80173e0:	e03a      	b.n	8017458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80173e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e4:	88db      	ldrh	r3, [r3, #6]
 80173e6:	b29a      	uxth	r2, r3
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	889b      	ldrh	r3, [r3, #4]
 80173ec:	b29b      	uxth	r3, r3
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d902      	bls.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173f2:	f04f 33ff 	mov.w	r3, #4294967295
 80173f6:	e0c5      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	68ba      	ldr	r2, [r7, #8]
 80173fc:	605a      	str	r2, [r3, #4]
      break;
 80173fe:	e02b      	b.n	8017458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017402:	889b      	ldrh	r3, [r3, #4]
 8017404:	b29a      	uxth	r2, r3
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	889b      	ldrh	r3, [r3, #4]
 801740a:	b29b      	uxth	r3, r3
 801740c:	429a      	cmp	r2, r3
 801740e:	d102      	bne.n	8017416 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017410:	f04f 33ff 	mov.w	r3, #4294967295
 8017414:	e0b6      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017418:	889b      	ldrh	r3, [r3, #4]
 801741a:	b29a      	uxth	r2, r3
 801741c:	693b      	ldr	r3, [r7, #16]
 801741e:	88db      	ldrh	r3, [r3, #6]
 8017420:	b29b      	uxth	r3, r3
 8017422:	429a      	cmp	r2, r3
 8017424:	d202      	bcs.n	801742c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017426:	f04f 33ff 	mov.w	r3, #4294967295
 801742a:	e0ab      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742e:	2b00      	cmp	r3, #0
 8017430:	d009      	beq.n	8017446 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017434:	88db      	ldrh	r3, [r3, #6]
 8017436:	b29a      	uxth	r2, r3
 8017438:	693b      	ldr	r3, [r7, #16]
 801743a:	889b      	ldrh	r3, [r3, #4]
 801743c:	b29b      	uxth	r3, r3
 801743e:	429a      	cmp	r2, r3
 8017440:	d001      	beq.n	8017446 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017442:	2300      	movs	r3, #0
 8017444:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017446:	693b      	ldr	r3, [r7, #16]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017452:	2b00      	cmp	r3, #0
 8017454:	d193      	bne.n	801737e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017456:	e000      	b.n	801745a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017458:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745c:	2b00      	cmp	r3, #0
 801745e:	d12d      	bne.n	80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017462:	2b00      	cmp	r3, #0
 8017464:	d01c      	beq.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017468:	88db      	ldrh	r3, [r3, #6]
 801746a:	b29a      	uxth	r2, r3
 801746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746e:	889b      	ldrh	r3, [r3, #4]
 8017470:	b29b      	uxth	r3, r3
 8017472:	429a      	cmp	r2, r3
 8017474:	d906      	bls.n	8017484 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017476:	4b45      	ldr	r3, [pc, #276]	; (801758c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017478:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801747c:	4944      	ldr	r1, [pc, #272]	; (8017590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801747e:	4845      	ldr	r0, [pc, #276]	; (8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017480:	f001 fa36 	bl	80188f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017486:	68ba      	ldr	r2, [r7, #8]
 8017488:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801748c:	88db      	ldrh	r3, [r3, #6]
 801748e:	b29a      	uxth	r2, r3
 8017490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017492:	889b      	ldrh	r3, [r3, #4]
 8017494:	b29b      	uxth	r3, r3
 8017496:	429a      	cmp	r2, r3
 8017498:	d010      	beq.n	80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801749a:	2300      	movs	r3, #0
 801749c:	623b      	str	r3, [r7, #32]
 801749e:	e00d      	b.n	80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d006      	beq.n	80174b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80174a8:	4b38      	ldr	r3, [pc, #224]	; (801758c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174aa:	f240 12bf 	movw	r2, #447	; 0x1bf
 80174ae:	493a      	ldr	r1, [pc, #232]	; (8017598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80174b0:	4838      	ldr	r0, [pc, #224]	; (8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174b2:	f001 fa1d 	bl	80188f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	68ba      	ldr	r2, [r7, #8]
 80174ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d105      	bne.n	80174ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	7f9b      	ldrb	r3, [r3, #30]
 80174c6:	f003 0301 	and.w	r3, r3, #1
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d059      	beq.n	8017582 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80174ce:	6a3b      	ldr	r3, [r7, #32]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d04f      	beq.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	685b      	ldr	r3, [r3, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d006      	beq.n	80174ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	685b      	ldr	r3, [r3, #4]
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	889b      	ldrh	r3, [r3, #4]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d002      	beq.n	80174f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	623b      	str	r3, [r7, #32]
 80174ee:	e041      	b.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80174f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80174f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80174fa:	e012      	b.n	8017522 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80174fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017504:	88db      	ldrh	r3, [r3, #6]
 8017506:	b29a      	uxth	r2, r3
 8017508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750a:	889b      	ldrh	r3, [r3, #4]
 801750c:	b29b      	uxth	r3, r3
 801750e:	429a      	cmp	r2, r3
 8017510:	d002      	beq.n	8017518 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017512:	2300      	movs	r3, #0
 8017514:	623b      	str	r3, [r7, #32]
            break;
 8017516:	e007      	b.n	8017528 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017524:	2b00      	cmp	r3, #0
 8017526:	d1e9      	bne.n	80174fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017528:	6a3b      	ldr	r3, [r7, #32]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d022      	beq.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	685b      	ldr	r3, [r3, #4]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d106      	bne.n	8017544 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017536:	4b15      	ldr	r3, [pc, #84]	; (801758c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017538:	f240 12df 	movw	r2, #479	; 0x1df
 801753c:	4917      	ldr	r1, [pc, #92]	; (801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801753e:	4815      	ldr	r0, [pc, #84]	; (8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017540:	f001 f9d6 	bl	80188f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801754c:	429a      	cmp	r2, r3
 801754e:	d106      	bne.n	801755e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017550:	4b0e      	ldr	r3, [pc, #56]	; (801758c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017552:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017556:	4911      	ldr	r1, [pc, #68]	; (801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017558:	480e      	ldr	r0, [pc, #56]	; (8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801755a:	f001 f9c9 	bl	80188f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d006      	beq.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017566:	4b09      	ldr	r3, [pc, #36]	; (801758c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017568:	f240 12e3 	movw	r2, #483	; 0x1e3
 801756c:	490c      	ldr	r1, [pc, #48]	; (80175a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801756e:	4809      	ldr	r0, [pc, #36]	; (8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017570:	f001 f9be 	bl	80188f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017574:	6a3b      	ldr	r3, [r7, #32]
 8017576:	2b00      	cmp	r3, #0
 8017578:	bf14      	ite	ne
 801757a:	2301      	movne	r3, #1
 801757c:	2300      	moveq	r3, #0
 801757e:	b2db      	uxtb	r3, r3
 8017580:	e000      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017582:	2300      	movs	r3, #0
}
 8017584:	4618      	mov	r0, r3
 8017586:	3730      	adds	r7, #48	; 0x30
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}
 801758c:	080206b4 	.word	0x080206b4
 8017590:	08020798 	.word	0x08020798
 8017594:	080206fc 	.word	0x080206fc
 8017598:	080207b8 	.word	0x080207b8
 801759c:	080207f0 	.word	0x080207f0
 80175a0:	08020800 	.word	0x08020800

080175a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b08e      	sub	sp, #56	; 0x38
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	685b      	ldr	r3, [r3, #4]
 80175b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80175b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b4:	781b      	ldrb	r3, [r3, #0]
 80175b6:	f003 030f 	and.w	r3, r3, #15
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	009b      	lsls	r3, r3, #2
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	2b14      	cmp	r3, #20
 80175c2:	f040 8167 	bne.w	8017894 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80175c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c8:	88db      	ldrh	r3, [r3, #6]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7f4 fe6f 	bl	800c2b0 <lwip_htons>
 80175d2:	4603      	mov	r3, r0
 80175d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175d8:	b29b      	uxth	r3, r3
 80175da:	00db      	lsls	r3, r3, #3
 80175dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80175de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e0:	885b      	ldrh	r3, [r3, #2]
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7f4 fe63 	bl	800c2b0 <lwip_htons>
 80175ea:	4603      	mov	r3, r0
 80175ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	f003 030f 	and.w	r3, r3, #15
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80175fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017602:	b29b      	uxth	r3, r3
 8017604:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017606:	429a      	cmp	r2, r3
 8017608:	f0c0 8146 	bcc.w	8017898 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801760c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017610:	b29b      	uxth	r3, r3
 8017612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017614:	1ad3      	subs	r3, r2, r3
 8017616:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f7f6 f969 	bl	800d8f0 <pbuf_clen>
 801761e:	4603      	mov	r3, r0
 8017620:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017622:	4ba3      	ldr	r3, [pc, #652]	; (80178b0 <ip4_reass+0x30c>)
 8017624:	881b      	ldrh	r3, [r3, #0]
 8017626:	461a      	mov	r2, r3
 8017628:	8c3b      	ldrh	r3, [r7, #32]
 801762a:	4413      	add	r3, r2
 801762c:	2b0a      	cmp	r3, #10
 801762e:	dd10      	ble.n	8017652 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017630:	8c3b      	ldrh	r3, [r7, #32]
 8017632:	4619      	mov	r1, r3
 8017634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017636:	f7ff fd81 	bl	801713c <ip_reass_remove_oldest_datagram>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	f000 812d 	beq.w	801789c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017642:	4b9b      	ldr	r3, [pc, #620]	; (80178b0 <ip4_reass+0x30c>)
 8017644:	881b      	ldrh	r3, [r3, #0]
 8017646:	461a      	mov	r2, r3
 8017648:	8c3b      	ldrh	r3, [r7, #32]
 801764a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801764c:	2b0a      	cmp	r3, #10
 801764e:	f300 8125 	bgt.w	801789c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017652:	4b98      	ldr	r3, [pc, #608]	; (80178b4 <ip4_reass+0x310>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	633b      	str	r3, [r7, #48]	; 0x30
 8017658:	e015      	b.n	8017686 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765c:	695a      	ldr	r2, [r3, #20]
 801765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017660:	68db      	ldr	r3, [r3, #12]
 8017662:	429a      	cmp	r2, r3
 8017664:	d10c      	bne.n	8017680 <ip4_reass+0xdc>
 8017666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017668:	699a      	ldr	r2, [r3, #24]
 801766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766c:	691b      	ldr	r3, [r3, #16]
 801766e:	429a      	cmp	r2, r3
 8017670:	d106      	bne.n	8017680 <ip4_reass+0xdc>
 8017672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017674:	899a      	ldrh	r2, [r3, #12]
 8017676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017678:	889b      	ldrh	r3, [r3, #4]
 801767a:	b29b      	uxth	r3, r3
 801767c:	429a      	cmp	r2, r3
 801767e:	d006      	beq.n	801768e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	633b      	str	r3, [r7, #48]	; 0x30
 8017686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017688:	2b00      	cmp	r3, #0
 801768a:	d1e6      	bne.n	801765a <ip4_reass+0xb6>
 801768c:	e000      	b.n	8017690 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801768e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017692:	2b00      	cmp	r3, #0
 8017694:	d109      	bne.n	80176aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017696:	8c3b      	ldrh	r3, [r7, #32]
 8017698:	4619      	mov	r1, r3
 801769a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801769c:	f7ff fdb0 	bl	8017200 <ip_reass_enqueue_new_datagram>
 80176a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80176a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d11c      	bne.n	80176e2 <ip4_reass+0x13e>
      goto nullreturn;
 80176a8:	e0f9      	b.n	801789e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80176aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ac:	88db      	ldrh	r3, [r3, #6]
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7f4 fdfd 	bl	800c2b0 <lwip_htons>
 80176b6:	4603      	mov	r3, r0
 80176b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d110      	bne.n	80176e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80176c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c2:	89db      	ldrh	r3, [r3, #14]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f4 fdf3 	bl	800c2b0 <lwip_htons>
 80176ca:	4603      	mov	r3, r0
 80176cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d006      	beq.n	80176e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80176d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d6:	3308      	adds	r3, #8
 80176d8:	2214      	movs	r2, #20
 80176da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176dc:	4618      	mov	r0, r3
 80176de:	f000 fbd6 	bl	8017e8e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80176e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e4:	88db      	ldrh	r3, [r3, #6]
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	f003 0320 	and.w	r3, r3, #32
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	bf0c      	ite	eq
 80176f0:	2301      	moveq	r3, #1
 80176f2:	2300      	movne	r3, #0
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80176f8:	69fb      	ldr	r3, [r7, #28]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d00e      	beq.n	801771c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80176fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017702:	4413      	add	r3, r2
 8017704:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017706:	8b7a      	ldrh	r2, [r7, #26]
 8017708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801770a:	429a      	cmp	r2, r3
 801770c:	f0c0 80a0 	bcc.w	8017850 <ip4_reass+0x2ac>
 8017710:	8b7b      	ldrh	r3, [r7, #26]
 8017712:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017716:	4293      	cmp	r3, r2
 8017718:	f200 809a 	bhi.w	8017850 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801771c:	69fa      	ldr	r2, [r7, #28]
 801771e:	6879      	ldr	r1, [r7, #4]
 8017720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017722:	f7ff fdd5 	bl	80172d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8017726:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801772e:	f000 8091 	beq.w	8017854 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017732:	4b5f      	ldr	r3, [pc, #380]	; (80178b0 <ip4_reass+0x30c>)
 8017734:	881a      	ldrh	r2, [r3, #0]
 8017736:	8c3b      	ldrh	r3, [r7, #32]
 8017738:	4413      	add	r3, r2
 801773a:	b29a      	uxth	r2, r3
 801773c:	4b5c      	ldr	r3, [pc, #368]	; (80178b0 <ip4_reass+0x30c>)
 801773e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017740:	69fb      	ldr	r3, [r7, #28]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d00d      	beq.n	8017762 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801774a:	4413      	add	r3, r2
 801774c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017750:	8a7a      	ldrh	r2, [r7, #18]
 8017752:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017756:	7f9b      	ldrb	r3, [r3, #30]
 8017758:	f043 0301 	orr.w	r3, r3, #1
 801775c:	b2da      	uxtb	r2, r3
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	2b01      	cmp	r3, #1
 8017766:	d171      	bne.n	801784c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776a:	8b9b      	ldrh	r3, [r3, #28]
 801776c:	3314      	adds	r3, #20
 801776e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	685b      	ldr	r3, [r3, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017784:	3308      	adds	r3, #8
 8017786:	2214      	movs	r2, #20
 8017788:	4619      	mov	r1, r3
 801778a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801778c:	f000 fb7f 	bl	8017e8e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017790:	8a3b      	ldrh	r3, [r7, #16]
 8017792:	4618      	mov	r0, r3
 8017794:	f7f4 fd8c 	bl	800c2b0 <lwip_htons>
 8017798:	4603      	mov	r3, r0
 801779a:	461a      	mov	r2, r3
 801779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80177a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a2:	2200      	movs	r2, #0
 80177a4:	719a      	strb	r2, [r3, #6]
 80177a6:	2200      	movs	r2, #0
 80177a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80177aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ac:	2200      	movs	r2, #0
 80177ae:	729a      	strb	r2, [r3, #10]
 80177b0:	2200      	movs	r2, #0
 80177b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80177b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b6:	685b      	ldr	r3, [r3, #4]
 80177b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80177ba:	e00d      	b.n	80177d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80177bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80177c2:	2114      	movs	r1, #20
 80177c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80177c6:	f7f5 ff85 	bl	800d6d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80177ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f7f6 f8c9 	bl	800d964 <pbuf_cat>
      r = iprh->next_pbuf;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80177d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1ee      	bne.n	80177bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80177de:	4b35      	ldr	r3, [pc, #212]	; (80178b4 <ip4_reass+0x310>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d102      	bne.n	80177ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80177e8:	2300      	movs	r3, #0
 80177ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177ec:	e010      	b.n	8017810 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80177ee:	4b31      	ldr	r3, [pc, #196]	; (80178b4 <ip4_reass+0x310>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177f4:	e007      	b.n	8017806 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80177f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d006      	beq.n	801780e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017808:	2b00      	cmp	r3, #0
 801780a:	d1f4      	bne.n	80177f6 <ip4_reass+0x252>
 801780c:	e000      	b.n	8017810 <ip4_reass+0x26c>
          break;
 801780e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017814:	f7ff fd2e 	bl	8017274 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f7f6 f869 	bl	800d8f0 <pbuf_clen>
 801781e:	4603      	mov	r3, r0
 8017820:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017822:	4b23      	ldr	r3, [pc, #140]	; (80178b0 <ip4_reass+0x30c>)
 8017824:	881b      	ldrh	r3, [r3, #0]
 8017826:	8c3a      	ldrh	r2, [r7, #32]
 8017828:	429a      	cmp	r2, r3
 801782a:	d906      	bls.n	801783a <ip4_reass+0x296>
 801782c:	4b22      	ldr	r3, [pc, #136]	; (80178b8 <ip4_reass+0x314>)
 801782e:	f240 229b 	movw	r2, #667	; 0x29b
 8017832:	4922      	ldr	r1, [pc, #136]	; (80178bc <ip4_reass+0x318>)
 8017834:	4822      	ldr	r0, [pc, #136]	; (80178c0 <ip4_reass+0x31c>)
 8017836:	f001 f85b 	bl	80188f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801783a:	4b1d      	ldr	r3, [pc, #116]	; (80178b0 <ip4_reass+0x30c>)
 801783c:	881a      	ldrh	r2, [r3, #0]
 801783e:	8c3b      	ldrh	r3, [r7, #32]
 8017840:	1ad3      	subs	r3, r2, r3
 8017842:	b29a      	uxth	r2, r3
 8017844:	4b1a      	ldr	r3, [pc, #104]	; (80178b0 <ip4_reass+0x30c>)
 8017846:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	e02c      	b.n	80178a6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801784c:	2300      	movs	r3, #0
 801784e:	e02a      	b.n	80178a6 <ip4_reass+0x302>

nullreturn_ipr:
 8017850:	bf00      	nop
 8017852:	e000      	b.n	8017856 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017854:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017858:	2b00      	cmp	r3, #0
 801785a:	d106      	bne.n	801786a <ip4_reass+0x2c6>
 801785c:	4b16      	ldr	r3, [pc, #88]	; (80178b8 <ip4_reass+0x314>)
 801785e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017862:	4918      	ldr	r1, [pc, #96]	; (80178c4 <ip4_reass+0x320>)
 8017864:	4816      	ldr	r0, [pc, #88]	; (80178c0 <ip4_reass+0x31c>)
 8017866:	f001 f843 	bl	80188f0 <iprintf>
  if (ipr->p == NULL) {
 801786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d114      	bne.n	801789c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017872:	4b10      	ldr	r3, [pc, #64]	; (80178b4 <ip4_reass+0x310>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017878:	429a      	cmp	r2, r3
 801787a:	d006      	beq.n	801788a <ip4_reass+0x2e6>
 801787c:	4b0e      	ldr	r3, [pc, #56]	; (80178b8 <ip4_reass+0x314>)
 801787e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017882:	4911      	ldr	r1, [pc, #68]	; (80178c8 <ip4_reass+0x324>)
 8017884:	480e      	ldr	r0, [pc, #56]	; (80178c0 <ip4_reass+0x31c>)
 8017886:	f001 f833 	bl	80188f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801788a:	2100      	movs	r1, #0
 801788c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801788e:	f7ff fcf1 	bl	8017274 <ip_reass_dequeue_datagram>
 8017892:	e004      	b.n	801789e <ip4_reass+0x2fa>
    goto nullreturn;
 8017894:	bf00      	nop
 8017896:	e002      	b.n	801789e <ip4_reass+0x2fa>
    goto nullreturn;
 8017898:	bf00      	nop
 801789a:	e000      	b.n	801789e <ip4_reass+0x2fa>
  }

nullreturn:
 801789c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f7f5 ff9e 	bl	800d7e0 <pbuf_free>
  return NULL;
 80178a4:	2300      	movs	r3, #0
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3738      	adds	r7, #56	; 0x38
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	200005d8 	.word	0x200005d8
 80178b4:	200005d4 	.word	0x200005d4
 80178b8:	080206b4 	.word	0x080206b4
 80178bc:	08020824 	.word	0x08020824
 80178c0:	080206fc 	.word	0x080206fc
 80178c4:	08020840 	.word	0x08020840
 80178c8:	0802084c 	.word	0x0802084c

080178cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80178d0:	2005      	movs	r0, #5
 80178d2:	f7f5 f943 	bl	800cb5c <memp_malloc>
 80178d6:	4603      	mov	r3, r0
}
 80178d8:	4618      	mov	r0, r3
 80178da:	bd80      	pop	{r7, pc}

080178dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d106      	bne.n	80178f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80178ea:	4b07      	ldr	r3, [pc, #28]	; (8017908 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80178ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80178f0:	4906      	ldr	r1, [pc, #24]	; (801790c <ip_frag_free_pbuf_custom_ref+0x30>)
 80178f2:	4807      	ldr	r0, [pc, #28]	; (8017910 <ip_frag_free_pbuf_custom_ref+0x34>)
 80178f4:	f000 fffc 	bl	80188f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80178f8:	6879      	ldr	r1, [r7, #4]
 80178fa:	2005      	movs	r0, #5
 80178fc:	f7f5 f97a 	bl	800cbf4 <memp_free>
}
 8017900:	bf00      	nop
 8017902:	3708      	adds	r7, #8
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	080206b4 	.word	0x080206b4
 801790c:	0802086c 	.word	0x0802086c
 8017910:	080206fc 	.word	0x080206fc

08017914 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b084      	sub	sp, #16
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d106      	bne.n	8017934 <ipfrag_free_pbuf_custom+0x20>
 8017926:	4b11      	ldr	r3, [pc, #68]	; (801796c <ipfrag_free_pbuf_custom+0x58>)
 8017928:	f240 22ce 	movw	r2, #718	; 0x2ce
 801792c:	4910      	ldr	r1, [pc, #64]	; (8017970 <ipfrag_free_pbuf_custom+0x5c>)
 801792e:	4811      	ldr	r0, [pc, #68]	; (8017974 <ipfrag_free_pbuf_custom+0x60>)
 8017930:	f000 ffde 	bl	80188f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	429a      	cmp	r2, r3
 801793a:	d006      	beq.n	801794a <ipfrag_free_pbuf_custom+0x36>
 801793c:	4b0b      	ldr	r3, [pc, #44]	; (801796c <ipfrag_free_pbuf_custom+0x58>)
 801793e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017942:	490d      	ldr	r1, [pc, #52]	; (8017978 <ipfrag_free_pbuf_custom+0x64>)
 8017944:	480b      	ldr	r0, [pc, #44]	; (8017974 <ipfrag_free_pbuf_custom+0x60>)
 8017946:	f000 ffd3 	bl	80188f0 <iprintf>
  if (pcr->original != NULL) {
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d004      	beq.n	801795c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	695b      	ldr	r3, [r3, #20]
 8017956:	4618      	mov	r0, r3
 8017958:	f7f5 ff42 	bl	800d7e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801795c:	68f8      	ldr	r0, [r7, #12]
 801795e:	f7ff ffbd 	bl	80178dc <ip_frag_free_pbuf_custom_ref>
}
 8017962:	bf00      	nop
 8017964:	3710      	adds	r7, #16
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}
 801796a:	bf00      	nop
 801796c:	080206b4 	.word	0x080206b4
 8017970:	08020878 	.word	0x08020878
 8017974:	080206fc 	.word	0x080206fc
 8017978:	08020884 	.word	0x08020884

0801797c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b094      	sub	sp, #80	; 0x50
 8017980:	af02      	add	r7, sp, #8
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017988:	2300      	movs	r3, #0
 801798a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017992:	3b14      	subs	r3, #20
 8017994:	2b00      	cmp	r3, #0
 8017996:	da00      	bge.n	801799a <ip4_frag+0x1e>
 8017998:	3307      	adds	r3, #7
 801799a:	10db      	asrs	r3, r3, #3
 801799c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801799e:	2314      	movs	r3, #20
 80179a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	685b      	ldr	r3, [r3, #4]
 80179a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80179a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80179ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	f003 030f 	and.w	r3, r3, #15
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	2b14      	cmp	r3, #20
 80179bc:	d002      	beq.n	80179c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80179be:	f06f 0305 	mvn.w	r3, #5
 80179c2:	e10f      	b.n	8017be4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	895b      	ldrh	r3, [r3, #10]
 80179c8:	2b13      	cmp	r3, #19
 80179ca:	d809      	bhi.n	80179e0 <ip4_frag+0x64>
 80179cc:	4b87      	ldr	r3, [pc, #540]	; (8017bec <ip4_frag+0x270>)
 80179ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80179d2:	4987      	ldr	r1, [pc, #540]	; (8017bf0 <ip4_frag+0x274>)
 80179d4:	4887      	ldr	r0, [pc, #540]	; (8017bf4 <ip4_frag+0x278>)
 80179d6:	f000 ff8b 	bl	80188f0 <iprintf>
 80179da:	f06f 0305 	mvn.w	r3, #5
 80179de:	e101      	b.n	8017be4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80179e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e2:	88db      	ldrh	r3, [r3, #6]
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7f4 fc62 	bl	800c2b0 <lwip_htons>
 80179ec:	4603      	mov	r3, r0
 80179ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80179f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80179f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80179fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80179fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	891b      	ldrh	r3, [r3, #8]
 8017a06:	3b14      	subs	r3, #20
 8017a08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017a0c:	e0e0      	b.n	8017bd0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a10:	00db      	lsls	r3, r3, #3
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a18:	4293      	cmp	r3, r2
 8017a1a:	bf28      	it	cs
 8017a1c:	4613      	movcs	r3, r2
 8017a1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017a20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a24:	2114      	movs	r1, #20
 8017a26:	200e      	movs	r0, #14
 8017a28:	f7f5 fbfa 	bl	800d220 <pbuf_alloc>
 8017a2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	f000 80d4 	beq.w	8017bde <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a38:	895b      	ldrh	r3, [r3, #10]
 8017a3a:	2b13      	cmp	r3, #19
 8017a3c:	d806      	bhi.n	8017a4c <ip4_frag+0xd0>
 8017a3e:	4b6b      	ldr	r3, [pc, #428]	; (8017bec <ip4_frag+0x270>)
 8017a40:	f240 3225 	movw	r2, #805	; 0x325
 8017a44:	496c      	ldr	r1, [pc, #432]	; (8017bf8 <ip4_frag+0x27c>)
 8017a46:	486b      	ldr	r0, [pc, #428]	; (8017bf4 <ip4_frag+0x278>)
 8017a48:	f000 ff52 	bl	80188f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	2214      	movs	r2, #20
 8017a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017a54:	4618      	mov	r0, r3
 8017a56:	f000 fa1a 	bl	8017e8e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017a60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017a66:	e064      	b.n	8017b32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	895a      	ldrh	r2, [r3, #10]
 8017a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a6e:	1ad3      	subs	r3, r2, r3
 8017a70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	895b      	ldrh	r3, [r3, #10]
 8017a76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d906      	bls.n	8017a8a <ip4_frag+0x10e>
 8017a7c:	4b5b      	ldr	r3, [pc, #364]	; (8017bec <ip4_frag+0x270>)
 8017a7e:	f240 322d 	movw	r2, #813	; 0x32d
 8017a82:	495e      	ldr	r1, [pc, #376]	; (8017bfc <ip4_frag+0x280>)
 8017a84:	485b      	ldr	r0, [pc, #364]	; (8017bf4 <ip4_frag+0x278>)
 8017a86:	f000 ff33 	bl	80188f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017a8a:	8bfa      	ldrh	r2, [r7, #30]
 8017a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017a90:	4293      	cmp	r3, r2
 8017a92:	bf28      	it	cs
 8017a94:	4613      	movcs	r3, r2
 8017a96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017a9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d105      	bne.n	8017aae <ip4_frag+0x132>
        poff = 0;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	60fb      	str	r3, [r7, #12]
        continue;
 8017aac:	e041      	b.n	8017b32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017aae:	f7ff ff0d 	bl	80178cc <ip_frag_alloc_pbuf_custom_ref>
 8017ab2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ab4:	69bb      	ldr	r3, [r7, #24]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d103      	bne.n	8017ac2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017abc:	f7f5 fe90 	bl	800d7e0 <pbuf_free>
        goto memerr;
 8017ac0:	e08e      	b.n	8017be0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ac2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017aca:	4413      	add	r3, r2
 8017acc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017ad0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017ad4:	9201      	str	r2, [sp, #4]
 8017ad6:	9300      	str	r3, [sp, #0]
 8017ad8:	4603      	mov	r3, r0
 8017ada:	2241      	movs	r2, #65	; 0x41
 8017adc:	2000      	movs	r0, #0
 8017ade:	f7f5 fcc5 	bl	800d46c <pbuf_alloced_custom>
 8017ae2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d106      	bne.n	8017af8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017aea:	69b8      	ldr	r0, [r7, #24]
 8017aec:	f7ff fef6 	bl	80178dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017af2:	f7f5 fe75 	bl	800d7e0 <pbuf_free>
        goto memerr;
 8017af6:	e073      	b.n	8017be0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017af8:	68f8      	ldr	r0, [r7, #12]
 8017afa:	f7f5 ff11 	bl	800d920 <pbuf_ref>
      pcr->original = p;
 8017afe:	69bb      	ldr	r3, [r7, #24]
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017b04:	69bb      	ldr	r3, [r7, #24]
 8017b06:	4a3e      	ldr	r2, [pc, #248]	; (8017c00 <ip4_frag+0x284>)
 8017b08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017b0a:	6979      	ldr	r1, [r7, #20]
 8017b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b0e:	f7f5 ff29 	bl	800d964 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017b12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b1a:	1ad3      	subs	r3, r2, r3
 8017b1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017b20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d004      	beq.n	8017b32 <ip4_frag+0x1b6>
        poff = 0;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017b32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d196      	bne.n	8017a68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017b3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017b3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b40:	4413      	add	r3, r2
 8017b42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b4c:	3b14      	subs	r3, #20
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	bfd4      	ite	le
 8017b52:	2301      	movle	r3, #1
 8017b54:	2300      	movgt	r3, #0
 8017b56:	b2db      	uxtb	r3, r3
 8017b58:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b62:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017b64:	6a3b      	ldr	r3, [r7, #32]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d002      	beq.n	8017b70 <ip4_frag+0x1f4>
 8017b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d003      	beq.n	8017b78 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017b70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017b76:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017b78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7f4 fb98 	bl	800c2b0 <lwip_htons>
 8017b80:	4603      	mov	r3, r0
 8017b82:	461a      	mov	r2, r3
 8017b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b86:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017b88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b8a:	3314      	adds	r3, #20
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f7f4 fb8e 	bl	800c2b0 <lwip_htons>
 8017b94:	4603      	mov	r3, r0
 8017b96:	461a      	mov	r2, r3
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	729a      	strb	r2, [r3, #10]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017ba6:	68bb      	ldr	r3, [r7, #8]
 8017ba8:	695b      	ldr	r3, [r3, #20]
 8017baa:	687a      	ldr	r2, [r7, #4]
 8017bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017bae:	68b8      	ldr	r0, [r7, #8]
 8017bb0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bb4:	f7f5 fe14 	bl	800d7e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017bbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bbe:	1ad3      	subs	r3, r2, r3
 8017bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017bc4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017bc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bca:	4413      	add	r3, r2
 8017bcc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017bd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	f47f af1a 	bne.w	8017a0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	e002      	b.n	8017be4 <ip4_frag+0x268>
      goto memerr;
 8017bde:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017be4:	4618      	mov	r0, r3
 8017be6:	3748      	adds	r7, #72	; 0x48
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	080206b4 	.word	0x080206b4
 8017bf0:	08020890 	.word	0x08020890
 8017bf4:	080206fc 	.word	0x080206fc
 8017bf8:	080208ac 	.word	0x080208ac
 8017bfc:	080208cc 	.word	0x080208cc
 8017c00:	08017915 	.word	0x08017915

08017c04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b086      	sub	sp, #24
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
 8017c0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017c0e:	230e      	movs	r3, #14
 8017c10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	895b      	ldrh	r3, [r3, #10]
 8017c16:	2b0e      	cmp	r3, #14
 8017c18:	d96e      	bls.n	8017cf8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	7bdb      	ldrb	r3, [r3, #15]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d106      	bne.n	8017c30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017c28:	3301      	adds	r3, #1
 8017c2a:	b2da      	uxtb	r2, r3
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	7b1a      	ldrb	r2, [r3, #12]
 8017c3a:	7b5b      	ldrb	r3, [r3, #13]
 8017c3c:	021b      	lsls	r3, r3, #8
 8017c3e:	4313      	orrs	r3, r2
 8017c40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	f003 0301 	and.w	r3, r3, #1
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d023      	beq.n	8017c96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017c4e:	693b      	ldr	r3, [r7, #16]
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	2b01      	cmp	r3, #1
 8017c54:	d10f      	bne.n	8017c76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	785b      	ldrb	r3, [r3, #1]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d11b      	bne.n	8017c96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c62:	2b5e      	cmp	r3, #94	; 0x5e
 8017c64:	d117      	bne.n	8017c96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	7b5b      	ldrb	r3, [r3, #13]
 8017c6a:	f043 0310 	orr.w	r3, r3, #16
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	735a      	strb	r2, [r3, #13]
 8017c74:	e00f      	b.n	8017c96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017c76:	693b      	ldr	r3, [r7, #16]
 8017c78:	2206      	movs	r2, #6
 8017c7a:	4928      	ldr	r1, [pc, #160]	; (8017d1c <ethernet_input+0x118>)
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f000 f8f7 	bl	8017e70 <memcmp>
 8017c82:	4603      	mov	r3, r0
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d106      	bne.n	8017c96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	7b5b      	ldrb	r3, [r3, #13]
 8017c8c:	f043 0308 	orr.w	r3, r3, #8
 8017c90:	b2da      	uxtb	r2, r3
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017c96:	89fb      	ldrh	r3, [r7, #14]
 8017c98:	2b08      	cmp	r3, #8
 8017c9a:	d003      	beq.n	8017ca4 <ethernet_input+0xa0>
 8017c9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017ca0:	d014      	beq.n	8017ccc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017ca2:	e032      	b.n	8017d0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017caa:	f003 0308 	and.w	r3, r3, #8
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d024      	beq.n	8017cfc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017cb2:	8afb      	ldrh	r3, [r7, #22]
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7f5 fd0c 	bl	800d6d4 <pbuf_remove_header>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d11e      	bne.n	8017d00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017cc2:	6839      	ldr	r1, [r7, #0]
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f7fe ff0f 	bl	8016ae8 <ip4_input>
      break;
 8017cca:	e013      	b.n	8017cf4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017cd2:	f003 0308 	and.w	r3, r3, #8
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d014      	beq.n	8017d04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017cda:	8afb      	ldrh	r3, [r7, #22]
 8017cdc:	4619      	mov	r1, r3
 8017cde:	6878      	ldr	r0, [r7, #4]
 8017ce0:	f7f5 fcf8 	bl	800d6d4 <pbuf_remove_header>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d10e      	bne.n	8017d08 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017cea:	6839      	ldr	r1, [r7, #0]
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f7fe f8ab 	bl	8015e48 <etharp_input>
      break;
 8017cf2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	e00c      	b.n	8017d12 <ethernet_input+0x10e>
    goto free_and_return;
 8017cf8:	bf00      	nop
 8017cfa:	e006      	b.n	8017d0a <ethernet_input+0x106>
        goto free_and_return;
 8017cfc:	bf00      	nop
 8017cfe:	e004      	b.n	8017d0a <ethernet_input+0x106>
        goto free_and_return;
 8017d00:	bf00      	nop
 8017d02:	e002      	b.n	8017d0a <ethernet_input+0x106>
        goto free_and_return;
 8017d04:	bf00      	nop
 8017d06:	e000      	b.n	8017d0a <ethernet_input+0x106>
        goto free_and_return;
 8017d08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7f5 fd68 	bl	800d7e0 <pbuf_free>
  return ERR_OK;
 8017d10:	2300      	movs	r3, #0
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3718      	adds	r7, #24
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	08020a80 	.word	0x08020a80

08017d20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b086      	sub	sp, #24
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	60f8      	str	r0, [r7, #12]
 8017d28:	60b9      	str	r1, [r7, #8]
 8017d2a:	607a      	str	r2, [r7, #4]
 8017d2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017d2e:	8c3b      	ldrh	r3, [r7, #32]
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7f4 fabd 	bl	800c2b0 <lwip_htons>
 8017d36:	4603      	mov	r3, r0
 8017d38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017d3a:	210e      	movs	r1, #14
 8017d3c:	68b8      	ldr	r0, [r7, #8]
 8017d3e:	f7f5 fcb9 	bl	800d6b4 <pbuf_add_header>
 8017d42:	4603      	mov	r3, r0
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d125      	bne.n	8017d94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	685b      	ldr	r3, [r3, #4]
 8017d4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	8afa      	ldrh	r2, [r7, #22]
 8017d52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017d54:	693b      	ldr	r3, [r7, #16]
 8017d56:	2206      	movs	r2, #6
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f000 f897 	bl	8017e8e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017d60:	693b      	ldr	r3, [r7, #16]
 8017d62:	3306      	adds	r3, #6
 8017d64:	2206      	movs	r2, #6
 8017d66:	6879      	ldr	r1, [r7, #4]
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f000 f890 	bl	8017e8e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d74:	2b06      	cmp	r3, #6
 8017d76:	d006      	beq.n	8017d86 <ethernet_output+0x66>
 8017d78:	4b0a      	ldr	r3, [pc, #40]	; (8017da4 <ethernet_output+0x84>)
 8017d7a:	f240 1233 	movw	r2, #307	; 0x133
 8017d7e:	490a      	ldr	r1, [pc, #40]	; (8017da8 <ethernet_output+0x88>)
 8017d80:	480a      	ldr	r0, [pc, #40]	; (8017dac <ethernet_output+0x8c>)
 8017d82:	f000 fdb5 	bl	80188f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	699b      	ldr	r3, [r3, #24]
 8017d8a:	68b9      	ldr	r1, [r7, #8]
 8017d8c:	68f8      	ldr	r0, [r7, #12]
 8017d8e:	4798      	blx	r3
 8017d90:	4603      	mov	r3, r0
 8017d92:	e002      	b.n	8017d9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017d94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017d96:	f06f 0301 	mvn.w	r3, #1
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3718      	adds	r7, #24
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}
 8017da2:	bf00      	nop
 8017da4:	080208dc 	.word	0x080208dc
 8017da8:	08020914 	.word	0x08020914
 8017dac:	08020948 	.word	0x08020948

08017db0 <atof>:
 8017db0:	2100      	movs	r1, #0
 8017db2:	f001 bc89 	b.w	80196c8 <strtod>

08017db6 <atoi>:
 8017db6:	220a      	movs	r2, #10
 8017db8:	2100      	movs	r1, #0
 8017dba:	f001 bd15 	b.w	80197e8 <strtol>
	...

08017dc0 <__libc_init_array>:
 8017dc0:	b570      	push	{r4, r5, r6, lr}
 8017dc2:	4e0d      	ldr	r6, [pc, #52]	; (8017df8 <__libc_init_array+0x38>)
 8017dc4:	4c0d      	ldr	r4, [pc, #52]	; (8017dfc <__libc_init_array+0x3c>)
 8017dc6:	1ba4      	subs	r4, r4, r6
 8017dc8:	10a4      	asrs	r4, r4, #2
 8017dca:	2500      	movs	r5, #0
 8017dcc:	42a5      	cmp	r5, r4
 8017dce:	d109      	bne.n	8017de4 <__libc_init_array+0x24>
 8017dd0:	4e0b      	ldr	r6, [pc, #44]	; (8017e00 <__libc_init_array+0x40>)
 8017dd2:	4c0c      	ldr	r4, [pc, #48]	; (8017e04 <__libc_init_array+0x44>)
 8017dd4:	f005 f91c 	bl	801d010 <_init>
 8017dd8:	1ba4      	subs	r4, r4, r6
 8017dda:	10a4      	asrs	r4, r4, #2
 8017ddc:	2500      	movs	r5, #0
 8017dde:	42a5      	cmp	r5, r4
 8017de0:	d105      	bne.n	8017dee <__libc_init_array+0x2e>
 8017de2:	bd70      	pop	{r4, r5, r6, pc}
 8017de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017de8:	4798      	blx	r3
 8017dea:	3501      	adds	r5, #1
 8017dec:	e7ee      	b.n	8017dcc <__libc_init_array+0xc>
 8017dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017df2:	4798      	blx	r3
 8017df4:	3501      	adds	r5, #1
 8017df6:	e7f2      	b.n	8017dde <__libc_init_array+0x1e>
 8017df8:	08020df8 	.word	0x08020df8
 8017dfc:	08020df8 	.word	0x08020df8
 8017e00:	08020df8 	.word	0x08020df8
 8017e04:	08020dfc 	.word	0x08020dfc

08017e08 <__locale_ctype_ptr_l>:
 8017e08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017e0c:	4770      	bx	lr
	...

08017e10 <__locale_ctype_ptr>:
 8017e10:	4b04      	ldr	r3, [pc, #16]	; (8017e24 <__locale_ctype_ptr+0x14>)
 8017e12:	4a05      	ldr	r2, [pc, #20]	; (8017e28 <__locale_ctype_ptr+0x18>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	6a1b      	ldr	r3, [r3, #32]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	bf08      	it	eq
 8017e1c:	4613      	moveq	r3, r2
 8017e1e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e22:	4770      	bx	lr
 8017e24:	20000074 	.word	0x20000074
 8017e28:	200000d8 	.word	0x200000d8

08017e2c <malloc>:
 8017e2c:	4b02      	ldr	r3, [pc, #8]	; (8017e38 <malloc+0xc>)
 8017e2e:	4601      	mov	r1, r0
 8017e30:	6818      	ldr	r0, [r3, #0]
 8017e32:	f000 b8a7 	b.w	8017f84 <_malloc_r>
 8017e36:	bf00      	nop
 8017e38:	20000074 	.word	0x20000074

08017e3c <free>:
 8017e3c:	4b02      	ldr	r3, [pc, #8]	; (8017e48 <free+0xc>)
 8017e3e:	4601      	mov	r1, r0
 8017e40:	6818      	ldr	r0, [r3, #0]
 8017e42:	f000 b851 	b.w	8017ee8 <_free_r>
 8017e46:	bf00      	nop
 8017e48:	20000074 	.word	0x20000074

08017e4c <__ascii_mbtowc>:
 8017e4c:	b082      	sub	sp, #8
 8017e4e:	b901      	cbnz	r1, 8017e52 <__ascii_mbtowc+0x6>
 8017e50:	a901      	add	r1, sp, #4
 8017e52:	b142      	cbz	r2, 8017e66 <__ascii_mbtowc+0x1a>
 8017e54:	b14b      	cbz	r3, 8017e6a <__ascii_mbtowc+0x1e>
 8017e56:	7813      	ldrb	r3, [r2, #0]
 8017e58:	600b      	str	r3, [r1, #0]
 8017e5a:	7812      	ldrb	r2, [r2, #0]
 8017e5c:	1c10      	adds	r0, r2, #0
 8017e5e:	bf18      	it	ne
 8017e60:	2001      	movne	r0, #1
 8017e62:	b002      	add	sp, #8
 8017e64:	4770      	bx	lr
 8017e66:	4610      	mov	r0, r2
 8017e68:	e7fb      	b.n	8017e62 <__ascii_mbtowc+0x16>
 8017e6a:	f06f 0001 	mvn.w	r0, #1
 8017e6e:	e7f8      	b.n	8017e62 <__ascii_mbtowc+0x16>

08017e70 <memcmp>:
 8017e70:	b530      	push	{r4, r5, lr}
 8017e72:	2400      	movs	r4, #0
 8017e74:	42a2      	cmp	r2, r4
 8017e76:	d101      	bne.n	8017e7c <memcmp+0xc>
 8017e78:	2000      	movs	r0, #0
 8017e7a:	e007      	b.n	8017e8c <memcmp+0x1c>
 8017e7c:	5d03      	ldrb	r3, [r0, r4]
 8017e7e:	3401      	adds	r4, #1
 8017e80:	190d      	adds	r5, r1, r4
 8017e82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017e86:	42ab      	cmp	r3, r5
 8017e88:	d0f4      	beq.n	8017e74 <memcmp+0x4>
 8017e8a:	1b58      	subs	r0, r3, r5
 8017e8c:	bd30      	pop	{r4, r5, pc}

08017e8e <memcpy>:
 8017e8e:	b510      	push	{r4, lr}
 8017e90:	1e43      	subs	r3, r0, #1
 8017e92:	440a      	add	r2, r1
 8017e94:	4291      	cmp	r1, r2
 8017e96:	d100      	bne.n	8017e9a <memcpy+0xc>
 8017e98:	bd10      	pop	{r4, pc}
 8017e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ea2:	e7f7      	b.n	8017e94 <memcpy+0x6>

08017ea4 <memmove>:
 8017ea4:	4288      	cmp	r0, r1
 8017ea6:	b510      	push	{r4, lr}
 8017ea8:	eb01 0302 	add.w	r3, r1, r2
 8017eac:	d807      	bhi.n	8017ebe <memmove+0x1a>
 8017eae:	1e42      	subs	r2, r0, #1
 8017eb0:	4299      	cmp	r1, r3
 8017eb2:	d00a      	beq.n	8017eca <memmove+0x26>
 8017eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017eb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017ebc:	e7f8      	b.n	8017eb0 <memmove+0xc>
 8017ebe:	4283      	cmp	r3, r0
 8017ec0:	d9f5      	bls.n	8017eae <memmove+0xa>
 8017ec2:	1881      	adds	r1, r0, r2
 8017ec4:	1ad2      	subs	r2, r2, r3
 8017ec6:	42d3      	cmn	r3, r2
 8017ec8:	d100      	bne.n	8017ecc <memmove+0x28>
 8017eca:	bd10      	pop	{r4, pc}
 8017ecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ed0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017ed4:	e7f7      	b.n	8017ec6 <memmove+0x22>

08017ed6 <memset>:
 8017ed6:	4402      	add	r2, r0
 8017ed8:	4603      	mov	r3, r0
 8017eda:	4293      	cmp	r3, r2
 8017edc:	d100      	bne.n	8017ee0 <memset+0xa>
 8017ede:	4770      	bx	lr
 8017ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8017ee4:	e7f9      	b.n	8017eda <memset+0x4>
	...

08017ee8 <_free_r>:
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	4605      	mov	r5, r0
 8017eec:	2900      	cmp	r1, #0
 8017eee:	d045      	beq.n	8017f7c <_free_r+0x94>
 8017ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ef4:	1f0c      	subs	r4, r1, #4
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	bfb8      	it	lt
 8017efa:	18e4      	addlt	r4, r4, r3
 8017efc:	f002 fedc 	bl	801acb8 <__malloc_lock>
 8017f00:	4a1f      	ldr	r2, [pc, #124]	; (8017f80 <_free_r+0x98>)
 8017f02:	6813      	ldr	r3, [r2, #0]
 8017f04:	4610      	mov	r0, r2
 8017f06:	b933      	cbnz	r3, 8017f16 <_free_r+0x2e>
 8017f08:	6063      	str	r3, [r4, #4]
 8017f0a:	6014      	str	r4, [r2, #0]
 8017f0c:	4628      	mov	r0, r5
 8017f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f12:	f002 bed2 	b.w	801acba <__malloc_unlock>
 8017f16:	42a3      	cmp	r3, r4
 8017f18:	d90c      	bls.n	8017f34 <_free_r+0x4c>
 8017f1a:	6821      	ldr	r1, [r4, #0]
 8017f1c:	1862      	adds	r2, r4, r1
 8017f1e:	4293      	cmp	r3, r2
 8017f20:	bf04      	itt	eq
 8017f22:	681a      	ldreq	r2, [r3, #0]
 8017f24:	685b      	ldreq	r3, [r3, #4]
 8017f26:	6063      	str	r3, [r4, #4]
 8017f28:	bf04      	itt	eq
 8017f2a:	1852      	addeq	r2, r2, r1
 8017f2c:	6022      	streq	r2, [r4, #0]
 8017f2e:	6004      	str	r4, [r0, #0]
 8017f30:	e7ec      	b.n	8017f0c <_free_r+0x24>
 8017f32:	4613      	mov	r3, r2
 8017f34:	685a      	ldr	r2, [r3, #4]
 8017f36:	b10a      	cbz	r2, 8017f3c <_free_r+0x54>
 8017f38:	42a2      	cmp	r2, r4
 8017f3a:	d9fa      	bls.n	8017f32 <_free_r+0x4a>
 8017f3c:	6819      	ldr	r1, [r3, #0]
 8017f3e:	1858      	adds	r0, r3, r1
 8017f40:	42a0      	cmp	r0, r4
 8017f42:	d10b      	bne.n	8017f5c <_free_r+0x74>
 8017f44:	6820      	ldr	r0, [r4, #0]
 8017f46:	4401      	add	r1, r0
 8017f48:	1858      	adds	r0, r3, r1
 8017f4a:	4282      	cmp	r2, r0
 8017f4c:	6019      	str	r1, [r3, #0]
 8017f4e:	d1dd      	bne.n	8017f0c <_free_r+0x24>
 8017f50:	6810      	ldr	r0, [r2, #0]
 8017f52:	6852      	ldr	r2, [r2, #4]
 8017f54:	605a      	str	r2, [r3, #4]
 8017f56:	4401      	add	r1, r0
 8017f58:	6019      	str	r1, [r3, #0]
 8017f5a:	e7d7      	b.n	8017f0c <_free_r+0x24>
 8017f5c:	d902      	bls.n	8017f64 <_free_r+0x7c>
 8017f5e:	230c      	movs	r3, #12
 8017f60:	602b      	str	r3, [r5, #0]
 8017f62:	e7d3      	b.n	8017f0c <_free_r+0x24>
 8017f64:	6820      	ldr	r0, [r4, #0]
 8017f66:	1821      	adds	r1, r4, r0
 8017f68:	428a      	cmp	r2, r1
 8017f6a:	bf04      	itt	eq
 8017f6c:	6811      	ldreq	r1, [r2, #0]
 8017f6e:	6852      	ldreq	r2, [r2, #4]
 8017f70:	6062      	str	r2, [r4, #4]
 8017f72:	bf04      	itt	eq
 8017f74:	1809      	addeq	r1, r1, r0
 8017f76:	6021      	streq	r1, [r4, #0]
 8017f78:	605c      	str	r4, [r3, #4]
 8017f7a:	e7c7      	b.n	8017f0c <_free_r+0x24>
 8017f7c:	bd38      	pop	{r3, r4, r5, pc}
 8017f7e:	bf00      	nop
 8017f80:	200005dc 	.word	0x200005dc

08017f84 <_malloc_r>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	1ccd      	adds	r5, r1, #3
 8017f88:	f025 0503 	bic.w	r5, r5, #3
 8017f8c:	3508      	adds	r5, #8
 8017f8e:	2d0c      	cmp	r5, #12
 8017f90:	bf38      	it	cc
 8017f92:	250c      	movcc	r5, #12
 8017f94:	2d00      	cmp	r5, #0
 8017f96:	4606      	mov	r6, r0
 8017f98:	db01      	blt.n	8017f9e <_malloc_r+0x1a>
 8017f9a:	42a9      	cmp	r1, r5
 8017f9c:	d903      	bls.n	8017fa6 <_malloc_r+0x22>
 8017f9e:	230c      	movs	r3, #12
 8017fa0:	6033      	str	r3, [r6, #0]
 8017fa2:	2000      	movs	r0, #0
 8017fa4:	bd70      	pop	{r4, r5, r6, pc}
 8017fa6:	f002 fe87 	bl	801acb8 <__malloc_lock>
 8017faa:	4a21      	ldr	r2, [pc, #132]	; (8018030 <_malloc_r+0xac>)
 8017fac:	6814      	ldr	r4, [r2, #0]
 8017fae:	4621      	mov	r1, r4
 8017fb0:	b991      	cbnz	r1, 8017fd8 <_malloc_r+0x54>
 8017fb2:	4c20      	ldr	r4, [pc, #128]	; (8018034 <_malloc_r+0xb0>)
 8017fb4:	6823      	ldr	r3, [r4, #0]
 8017fb6:	b91b      	cbnz	r3, 8017fc0 <_malloc_r+0x3c>
 8017fb8:	4630      	mov	r0, r6
 8017fba:	f000 fce5 	bl	8018988 <_sbrk_r>
 8017fbe:	6020      	str	r0, [r4, #0]
 8017fc0:	4629      	mov	r1, r5
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	f000 fce0 	bl	8018988 <_sbrk_r>
 8017fc8:	1c43      	adds	r3, r0, #1
 8017fca:	d124      	bne.n	8018016 <_malloc_r+0x92>
 8017fcc:	230c      	movs	r3, #12
 8017fce:	6033      	str	r3, [r6, #0]
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	f002 fe72 	bl	801acba <__malloc_unlock>
 8017fd6:	e7e4      	b.n	8017fa2 <_malloc_r+0x1e>
 8017fd8:	680b      	ldr	r3, [r1, #0]
 8017fda:	1b5b      	subs	r3, r3, r5
 8017fdc:	d418      	bmi.n	8018010 <_malloc_r+0x8c>
 8017fde:	2b0b      	cmp	r3, #11
 8017fe0:	d90f      	bls.n	8018002 <_malloc_r+0x7e>
 8017fe2:	600b      	str	r3, [r1, #0]
 8017fe4:	50cd      	str	r5, [r1, r3]
 8017fe6:	18cc      	adds	r4, r1, r3
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f002 fe66 	bl	801acba <__malloc_unlock>
 8017fee:	f104 000b 	add.w	r0, r4, #11
 8017ff2:	1d23      	adds	r3, r4, #4
 8017ff4:	f020 0007 	bic.w	r0, r0, #7
 8017ff8:	1ac3      	subs	r3, r0, r3
 8017ffa:	d0d3      	beq.n	8017fa4 <_malloc_r+0x20>
 8017ffc:	425a      	negs	r2, r3
 8017ffe:	50e2      	str	r2, [r4, r3]
 8018000:	e7d0      	b.n	8017fa4 <_malloc_r+0x20>
 8018002:	428c      	cmp	r4, r1
 8018004:	684b      	ldr	r3, [r1, #4]
 8018006:	bf16      	itet	ne
 8018008:	6063      	strne	r3, [r4, #4]
 801800a:	6013      	streq	r3, [r2, #0]
 801800c:	460c      	movne	r4, r1
 801800e:	e7eb      	b.n	8017fe8 <_malloc_r+0x64>
 8018010:	460c      	mov	r4, r1
 8018012:	6849      	ldr	r1, [r1, #4]
 8018014:	e7cc      	b.n	8017fb0 <_malloc_r+0x2c>
 8018016:	1cc4      	adds	r4, r0, #3
 8018018:	f024 0403 	bic.w	r4, r4, #3
 801801c:	42a0      	cmp	r0, r4
 801801e:	d005      	beq.n	801802c <_malloc_r+0xa8>
 8018020:	1a21      	subs	r1, r4, r0
 8018022:	4630      	mov	r0, r6
 8018024:	f000 fcb0 	bl	8018988 <_sbrk_r>
 8018028:	3001      	adds	r0, #1
 801802a:	d0cf      	beq.n	8017fcc <_malloc_r+0x48>
 801802c:	6025      	str	r5, [r4, #0]
 801802e:	e7db      	b.n	8017fe8 <_malloc_r+0x64>
 8018030:	200005dc 	.word	0x200005dc
 8018034:	200005e0 	.word	0x200005e0

08018038 <__cvt>:
 8018038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801803c:	ec55 4b10 	vmov	r4, r5, d0
 8018040:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018042:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018046:	2d00      	cmp	r5, #0
 8018048:	460e      	mov	r6, r1
 801804a:	4691      	mov	r9, r2
 801804c:	4619      	mov	r1, r3
 801804e:	bfb8      	it	lt
 8018050:	4622      	movlt	r2, r4
 8018052:	462b      	mov	r3, r5
 8018054:	f027 0720 	bic.w	r7, r7, #32
 8018058:	bfbb      	ittet	lt
 801805a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801805e:	461d      	movlt	r5, r3
 8018060:	2300      	movge	r3, #0
 8018062:	232d      	movlt	r3, #45	; 0x2d
 8018064:	bfb8      	it	lt
 8018066:	4614      	movlt	r4, r2
 8018068:	2f46      	cmp	r7, #70	; 0x46
 801806a:	700b      	strb	r3, [r1, #0]
 801806c:	d004      	beq.n	8018078 <__cvt+0x40>
 801806e:	2f45      	cmp	r7, #69	; 0x45
 8018070:	d100      	bne.n	8018074 <__cvt+0x3c>
 8018072:	3601      	adds	r6, #1
 8018074:	2102      	movs	r1, #2
 8018076:	e000      	b.n	801807a <__cvt+0x42>
 8018078:	2103      	movs	r1, #3
 801807a:	ab03      	add	r3, sp, #12
 801807c:	9301      	str	r3, [sp, #4]
 801807e:	ab02      	add	r3, sp, #8
 8018080:	9300      	str	r3, [sp, #0]
 8018082:	4632      	mov	r2, r6
 8018084:	4653      	mov	r3, sl
 8018086:	ec45 4b10 	vmov	d0, r4, r5
 801808a:	f001 fc5d 	bl	8019948 <_dtoa_r>
 801808e:	2f47      	cmp	r7, #71	; 0x47
 8018090:	4680      	mov	r8, r0
 8018092:	d102      	bne.n	801809a <__cvt+0x62>
 8018094:	f019 0f01 	tst.w	r9, #1
 8018098:	d026      	beq.n	80180e8 <__cvt+0xb0>
 801809a:	2f46      	cmp	r7, #70	; 0x46
 801809c:	eb08 0906 	add.w	r9, r8, r6
 80180a0:	d111      	bne.n	80180c6 <__cvt+0x8e>
 80180a2:	f898 3000 	ldrb.w	r3, [r8]
 80180a6:	2b30      	cmp	r3, #48	; 0x30
 80180a8:	d10a      	bne.n	80180c0 <__cvt+0x88>
 80180aa:	2200      	movs	r2, #0
 80180ac:	2300      	movs	r3, #0
 80180ae:	4620      	mov	r0, r4
 80180b0:	4629      	mov	r1, r5
 80180b2:	f7e8 fd19 	bl	8000ae8 <__aeabi_dcmpeq>
 80180b6:	b918      	cbnz	r0, 80180c0 <__cvt+0x88>
 80180b8:	f1c6 0601 	rsb	r6, r6, #1
 80180bc:	f8ca 6000 	str.w	r6, [sl]
 80180c0:	f8da 3000 	ldr.w	r3, [sl]
 80180c4:	4499      	add	r9, r3
 80180c6:	2200      	movs	r2, #0
 80180c8:	2300      	movs	r3, #0
 80180ca:	4620      	mov	r0, r4
 80180cc:	4629      	mov	r1, r5
 80180ce:	f7e8 fd0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80180d2:	b938      	cbnz	r0, 80180e4 <__cvt+0xac>
 80180d4:	2230      	movs	r2, #48	; 0x30
 80180d6:	9b03      	ldr	r3, [sp, #12]
 80180d8:	454b      	cmp	r3, r9
 80180da:	d205      	bcs.n	80180e8 <__cvt+0xb0>
 80180dc:	1c59      	adds	r1, r3, #1
 80180de:	9103      	str	r1, [sp, #12]
 80180e0:	701a      	strb	r2, [r3, #0]
 80180e2:	e7f8      	b.n	80180d6 <__cvt+0x9e>
 80180e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80180e8:	9b03      	ldr	r3, [sp, #12]
 80180ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80180ec:	eba3 0308 	sub.w	r3, r3, r8
 80180f0:	4640      	mov	r0, r8
 80180f2:	6013      	str	r3, [r2, #0]
 80180f4:	b004      	add	sp, #16
 80180f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080180fa <__exponent>:
 80180fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180fc:	2900      	cmp	r1, #0
 80180fe:	4604      	mov	r4, r0
 8018100:	bfba      	itte	lt
 8018102:	4249      	neglt	r1, r1
 8018104:	232d      	movlt	r3, #45	; 0x2d
 8018106:	232b      	movge	r3, #43	; 0x2b
 8018108:	2909      	cmp	r1, #9
 801810a:	f804 2b02 	strb.w	r2, [r4], #2
 801810e:	7043      	strb	r3, [r0, #1]
 8018110:	dd20      	ble.n	8018154 <__exponent+0x5a>
 8018112:	f10d 0307 	add.w	r3, sp, #7
 8018116:	461f      	mov	r7, r3
 8018118:	260a      	movs	r6, #10
 801811a:	fb91 f5f6 	sdiv	r5, r1, r6
 801811e:	fb06 1115 	mls	r1, r6, r5, r1
 8018122:	3130      	adds	r1, #48	; 0x30
 8018124:	2d09      	cmp	r5, #9
 8018126:	f803 1c01 	strb.w	r1, [r3, #-1]
 801812a:	f103 32ff 	add.w	r2, r3, #4294967295
 801812e:	4629      	mov	r1, r5
 8018130:	dc09      	bgt.n	8018146 <__exponent+0x4c>
 8018132:	3130      	adds	r1, #48	; 0x30
 8018134:	3b02      	subs	r3, #2
 8018136:	f802 1c01 	strb.w	r1, [r2, #-1]
 801813a:	42bb      	cmp	r3, r7
 801813c:	4622      	mov	r2, r4
 801813e:	d304      	bcc.n	801814a <__exponent+0x50>
 8018140:	1a10      	subs	r0, r2, r0
 8018142:	b003      	add	sp, #12
 8018144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018146:	4613      	mov	r3, r2
 8018148:	e7e7      	b.n	801811a <__exponent+0x20>
 801814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801814e:	f804 2b01 	strb.w	r2, [r4], #1
 8018152:	e7f2      	b.n	801813a <__exponent+0x40>
 8018154:	2330      	movs	r3, #48	; 0x30
 8018156:	4419      	add	r1, r3
 8018158:	7083      	strb	r3, [r0, #2]
 801815a:	1d02      	adds	r2, r0, #4
 801815c:	70c1      	strb	r1, [r0, #3]
 801815e:	e7ef      	b.n	8018140 <__exponent+0x46>

08018160 <_printf_float>:
 8018160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018164:	b08d      	sub	sp, #52	; 0x34
 8018166:	460c      	mov	r4, r1
 8018168:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801816c:	4616      	mov	r6, r2
 801816e:	461f      	mov	r7, r3
 8018170:	4605      	mov	r5, r0
 8018172:	f002 fd93 	bl	801ac9c <_localeconv_r>
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	9304      	str	r3, [sp, #16]
 801817a:	4618      	mov	r0, r3
 801817c:	f7e8 f832 	bl	80001e4 <strlen>
 8018180:	2300      	movs	r3, #0
 8018182:	930a      	str	r3, [sp, #40]	; 0x28
 8018184:	f8d8 3000 	ldr.w	r3, [r8]
 8018188:	9005      	str	r0, [sp, #20]
 801818a:	3307      	adds	r3, #7
 801818c:	f023 0307 	bic.w	r3, r3, #7
 8018190:	f103 0208 	add.w	r2, r3, #8
 8018194:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018198:	f8d4 b000 	ldr.w	fp, [r4]
 801819c:	f8c8 2000 	str.w	r2, [r8]
 80181a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80181a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80181ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80181b0:	9307      	str	r3, [sp, #28]
 80181b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80181b6:	f04f 32ff 	mov.w	r2, #4294967295
 80181ba:	4ba7      	ldr	r3, [pc, #668]	; (8018458 <_printf_float+0x2f8>)
 80181bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80181c0:	f7e8 fcc4 	bl	8000b4c <__aeabi_dcmpun>
 80181c4:	bb70      	cbnz	r0, 8018224 <_printf_float+0xc4>
 80181c6:	f04f 32ff 	mov.w	r2, #4294967295
 80181ca:	4ba3      	ldr	r3, [pc, #652]	; (8018458 <_printf_float+0x2f8>)
 80181cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80181d0:	f7e8 fc9e 	bl	8000b10 <__aeabi_dcmple>
 80181d4:	bb30      	cbnz	r0, 8018224 <_printf_float+0xc4>
 80181d6:	2200      	movs	r2, #0
 80181d8:	2300      	movs	r3, #0
 80181da:	4640      	mov	r0, r8
 80181dc:	4649      	mov	r1, r9
 80181de:	f7e8 fc8d 	bl	8000afc <__aeabi_dcmplt>
 80181e2:	b110      	cbz	r0, 80181ea <_printf_float+0x8a>
 80181e4:	232d      	movs	r3, #45	; 0x2d
 80181e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181ea:	4a9c      	ldr	r2, [pc, #624]	; (801845c <_printf_float+0x2fc>)
 80181ec:	4b9c      	ldr	r3, [pc, #624]	; (8018460 <_printf_float+0x300>)
 80181ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80181f2:	bf8c      	ite	hi
 80181f4:	4690      	movhi	r8, r2
 80181f6:	4698      	movls	r8, r3
 80181f8:	2303      	movs	r3, #3
 80181fa:	f02b 0204 	bic.w	r2, fp, #4
 80181fe:	6123      	str	r3, [r4, #16]
 8018200:	6022      	str	r2, [r4, #0]
 8018202:	f04f 0900 	mov.w	r9, #0
 8018206:	9700      	str	r7, [sp, #0]
 8018208:	4633      	mov	r3, r6
 801820a:	aa0b      	add	r2, sp, #44	; 0x2c
 801820c:	4621      	mov	r1, r4
 801820e:	4628      	mov	r0, r5
 8018210:	f000 f9e6 	bl	80185e0 <_printf_common>
 8018214:	3001      	adds	r0, #1
 8018216:	f040 808d 	bne.w	8018334 <_printf_float+0x1d4>
 801821a:	f04f 30ff 	mov.w	r0, #4294967295
 801821e:	b00d      	add	sp, #52	; 0x34
 8018220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018224:	4642      	mov	r2, r8
 8018226:	464b      	mov	r3, r9
 8018228:	4640      	mov	r0, r8
 801822a:	4649      	mov	r1, r9
 801822c:	f7e8 fc8e 	bl	8000b4c <__aeabi_dcmpun>
 8018230:	b110      	cbz	r0, 8018238 <_printf_float+0xd8>
 8018232:	4a8c      	ldr	r2, [pc, #560]	; (8018464 <_printf_float+0x304>)
 8018234:	4b8c      	ldr	r3, [pc, #560]	; (8018468 <_printf_float+0x308>)
 8018236:	e7da      	b.n	80181ee <_printf_float+0x8e>
 8018238:	6861      	ldr	r1, [r4, #4]
 801823a:	1c4b      	adds	r3, r1, #1
 801823c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8018240:	a80a      	add	r0, sp, #40	; 0x28
 8018242:	d13e      	bne.n	80182c2 <_printf_float+0x162>
 8018244:	2306      	movs	r3, #6
 8018246:	6063      	str	r3, [r4, #4]
 8018248:	2300      	movs	r3, #0
 801824a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801824e:	ab09      	add	r3, sp, #36	; 0x24
 8018250:	9300      	str	r3, [sp, #0]
 8018252:	ec49 8b10 	vmov	d0, r8, r9
 8018256:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801825a:	6022      	str	r2, [r4, #0]
 801825c:	f8cd a004 	str.w	sl, [sp, #4]
 8018260:	6861      	ldr	r1, [r4, #4]
 8018262:	4628      	mov	r0, r5
 8018264:	f7ff fee8 	bl	8018038 <__cvt>
 8018268:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801826c:	2b47      	cmp	r3, #71	; 0x47
 801826e:	4680      	mov	r8, r0
 8018270:	d109      	bne.n	8018286 <_printf_float+0x126>
 8018272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018274:	1cd8      	adds	r0, r3, #3
 8018276:	db02      	blt.n	801827e <_printf_float+0x11e>
 8018278:	6862      	ldr	r2, [r4, #4]
 801827a:	4293      	cmp	r3, r2
 801827c:	dd47      	ble.n	801830e <_printf_float+0x1ae>
 801827e:	f1aa 0a02 	sub.w	sl, sl, #2
 8018282:	fa5f fa8a 	uxtb.w	sl, sl
 8018286:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801828a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801828c:	d824      	bhi.n	80182d8 <_printf_float+0x178>
 801828e:	3901      	subs	r1, #1
 8018290:	4652      	mov	r2, sl
 8018292:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018296:	9109      	str	r1, [sp, #36]	; 0x24
 8018298:	f7ff ff2f 	bl	80180fa <__exponent>
 801829c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801829e:	1813      	adds	r3, r2, r0
 80182a0:	2a01      	cmp	r2, #1
 80182a2:	4681      	mov	r9, r0
 80182a4:	6123      	str	r3, [r4, #16]
 80182a6:	dc02      	bgt.n	80182ae <_printf_float+0x14e>
 80182a8:	6822      	ldr	r2, [r4, #0]
 80182aa:	07d1      	lsls	r1, r2, #31
 80182ac:	d501      	bpl.n	80182b2 <_printf_float+0x152>
 80182ae:	3301      	adds	r3, #1
 80182b0:	6123      	str	r3, [r4, #16]
 80182b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d0a5      	beq.n	8018206 <_printf_float+0xa6>
 80182ba:	232d      	movs	r3, #45	; 0x2d
 80182bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182c0:	e7a1      	b.n	8018206 <_printf_float+0xa6>
 80182c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80182c6:	f000 8177 	beq.w	80185b8 <_printf_float+0x458>
 80182ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80182ce:	d1bb      	bne.n	8018248 <_printf_float+0xe8>
 80182d0:	2900      	cmp	r1, #0
 80182d2:	d1b9      	bne.n	8018248 <_printf_float+0xe8>
 80182d4:	2301      	movs	r3, #1
 80182d6:	e7b6      	b.n	8018246 <_printf_float+0xe6>
 80182d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80182dc:	d119      	bne.n	8018312 <_printf_float+0x1b2>
 80182de:	2900      	cmp	r1, #0
 80182e0:	6863      	ldr	r3, [r4, #4]
 80182e2:	dd0c      	ble.n	80182fe <_printf_float+0x19e>
 80182e4:	6121      	str	r1, [r4, #16]
 80182e6:	b913      	cbnz	r3, 80182ee <_printf_float+0x18e>
 80182e8:	6822      	ldr	r2, [r4, #0]
 80182ea:	07d2      	lsls	r2, r2, #31
 80182ec:	d502      	bpl.n	80182f4 <_printf_float+0x194>
 80182ee:	3301      	adds	r3, #1
 80182f0:	440b      	add	r3, r1
 80182f2:	6123      	str	r3, [r4, #16]
 80182f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80182f8:	f04f 0900 	mov.w	r9, #0
 80182fc:	e7d9      	b.n	80182b2 <_printf_float+0x152>
 80182fe:	b913      	cbnz	r3, 8018306 <_printf_float+0x1a6>
 8018300:	6822      	ldr	r2, [r4, #0]
 8018302:	07d0      	lsls	r0, r2, #31
 8018304:	d501      	bpl.n	801830a <_printf_float+0x1aa>
 8018306:	3302      	adds	r3, #2
 8018308:	e7f3      	b.n	80182f2 <_printf_float+0x192>
 801830a:	2301      	movs	r3, #1
 801830c:	e7f1      	b.n	80182f2 <_printf_float+0x192>
 801830e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8018312:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018316:	4293      	cmp	r3, r2
 8018318:	db05      	blt.n	8018326 <_printf_float+0x1c6>
 801831a:	6822      	ldr	r2, [r4, #0]
 801831c:	6123      	str	r3, [r4, #16]
 801831e:	07d1      	lsls	r1, r2, #31
 8018320:	d5e8      	bpl.n	80182f4 <_printf_float+0x194>
 8018322:	3301      	adds	r3, #1
 8018324:	e7e5      	b.n	80182f2 <_printf_float+0x192>
 8018326:	2b00      	cmp	r3, #0
 8018328:	bfd4      	ite	le
 801832a:	f1c3 0302 	rsble	r3, r3, #2
 801832e:	2301      	movgt	r3, #1
 8018330:	4413      	add	r3, r2
 8018332:	e7de      	b.n	80182f2 <_printf_float+0x192>
 8018334:	6823      	ldr	r3, [r4, #0]
 8018336:	055a      	lsls	r2, r3, #21
 8018338:	d407      	bmi.n	801834a <_printf_float+0x1ea>
 801833a:	6923      	ldr	r3, [r4, #16]
 801833c:	4642      	mov	r2, r8
 801833e:	4631      	mov	r1, r6
 8018340:	4628      	mov	r0, r5
 8018342:	47b8      	blx	r7
 8018344:	3001      	adds	r0, #1
 8018346:	d12b      	bne.n	80183a0 <_printf_float+0x240>
 8018348:	e767      	b.n	801821a <_printf_float+0xba>
 801834a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801834e:	f240 80dc 	bls.w	801850a <_printf_float+0x3aa>
 8018352:	2200      	movs	r2, #0
 8018354:	2300      	movs	r3, #0
 8018356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801835a:	f7e8 fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 801835e:	2800      	cmp	r0, #0
 8018360:	d033      	beq.n	80183ca <_printf_float+0x26a>
 8018362:	2301      	movs	r3, #1
 8018364:	4a41      	ldr	r2, [pc, #260]	; (801846c <_printf_float+0x30c>)
 8018366:	4631      	mov	r1, r6
 8018368:	4628      	mov	r0, r5
 801836a:	47b8      	blx	r7
 801836c:	3001      	adds	r0, #1
 801836e:	f43f af54 	beq.w	801821a <_printf_float+0xba>
 8018372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018376:	429a      	cmp	r2, r3
 8018378:	db02      	blt.n	8018380 <_printf_float+0x220>
 801837a:	6823      	ldr	r3, [r4, #0]
 801837c:	07d8      	lsls	r0, r3, #31
 801837e:	d50f      	bpl.n	80183a0 <_printf_float+0x240>
 8018380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018384:	4631      	mov	r1, r6
 8018386:	4628      	mov	r0, r5
 8018388:	47b8      	blx	r7
 801838a:	3001      	adds	r0, #1
 801838c:	f43f af45 	beq.w	801821a <_printf_float+0xba>
 8018390:	f04f 0800 	mov.w	r8, #0
 8018394:	f104 091a 	add.w	r9, r4, #26
 8018398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801839a:	3b01      	subs	r3, #1
 801839c:	4543      	cmp	r3, r8
 801839e:	dc09      	bgt.n	80183b4 <_printf_float+0x254>
 80183a0:	6823      	ldr	r3, [r4, #0]
 80183a2:	079b      	lsls	r3, r3, #30
 80183a4:	f100 8103 	bmi.w	80185ae <_printf_float+0x44e>
 80183a8:	68e0      	ldr	r0, [r4, #12]
 80183aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183ac:	4298      	cmp	r0, r3
 80183ae:	bfb8      	it	lt
 80183b0:	4618      	movlt	r0, r3
 80183b2:	e734      	b.n	801821e <_printf_float+0xbe>
 80183b4:	2301      	movs	r3, #1
 80183b6:	464a      	mov	r2, r9
 80183b8:	4631      	mov	r1, r6
 80183ba:	4628      	mov	r0, r5
 80183bc:	47b8      	blx	r7
 80183be:	3001      	adds	r0, #1
 80183c0:	f43f af2b 	beq.w	801821a <_printf_float+0xba>
 80183c4:	f108 0801 	add.w	r8, r8, #1
 80183c8:	e7e6      	b.n	8018398 <_printf_float+0x238>
 80183ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	dc2b      	bgt.n	8018428 <_printf_float+0x2c8>
 80183d0:	2301      	movs	r3, #1
 80183d2:	4a26      	ldr	r2, [pc, #152]	; (801846c <_printf_float+0x30c>)
 80183d4:	4631      	mov	r1, r6
 80183d6:	4628      	mov	r0, r5
 80183d8:	47b8      	blx	r7
 80183da:	3001      	adds	r0, #1
 80183dc:	f43f af1d 	beq.w	801821a <_printf_float+0xba>
 80183e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183e2:	b923      	cbnz	r3, 80183ee <_printf_float+0x28e>
 80183e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183e6:	b913      	cbnz	r3, 80183ee <_printf_float+0x28e>
 80183e8:	6823      	ldr	r3, [r4, #0]
 80183ea:	07d9      	lsls	r1, r3, #31
 80183ec:	d5d8      	bpl.n	80183a0 <_printf_float+0x240>
 80183ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80183f2:	4631      	mov	r1, r6
 80183f4:	4628      	mov	r0, r5
 80183f6:	47b8      	blx	r7
 80183f8:	3001      	adds	r0, #1
 80183fa:	f43f af0e 	beq.w	801821a <_printf_float+0xba>
 80183fe:	f04f 0900 	mov.w	r9, #0
 8018402:	f104 0a1a 	add.w	sl, r4, #26
 8018406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018408:	425b      	negs	r3, r3
 801840a:	454b      	cmp	r3, r9
 801840c:	dc01      	bgt.n	8018412 <_printf_float+0x2b2>
 801840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018410:	e794      	b.n	801833c <_printf_float+0x1dc>
 8018412:	2301      	movs	r3, #1
 8018414:	4652      	mov	r2, sl
 8018416:	4631      	mov	r1, r6
 8018418:	4628      	mov	r0, r5
 801841a:	47b8      	blx	r7
 801841c:	3001      	adds	r0, #1
 801841e:	f43f aefc 	beq.w	801821a <_printf_float+0xba>
 8018422:	f109 0901 	add.w	r9, r9, #1
 8018426:	e7ee      	b.n	8018406 <_printf_float+0x2a6>
 8018428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801842a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801842c:	429a      	cmp	r2, r3
 801842e:	bfa8      	it	ge
 8018430:	461a      	movge	r2, r3
 8018432:	2a00      	cmp	r2, #0
 8018434:	4691      	mov	r9, r2
 8018436:	dd07      	ble.n	8018448 <_printf_float+0x2e8>
 8018438:	4613      	mov	r3, r2
 801843a:	4631      	mov	r1, r6
 801843c:	4642      	mov	r2, r8
 801843e:	4628      	mov	r0, r5
 8018440:	47b8      	blx	r7
 8018442:	3001      	adds	r0, #1
 8018444:	f43f aee9 	beq.w	801821a <_printf_float+0xba>
 8018448:	f104 031a 	add.w	r3, r4, #26
 801844c:	f04f 0b00 	mov.w	fp, #0
 8018450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018454:	9306      	str	r3, [sp, #24]
 8018456:	e015      	b.n	8018484 <_printf_float+0x324>
 8018458:	7fefffff 	.word	0x7fefffff
 801845c:	08020aa2 	.word	0x08020aa2
 8018460:	08020a9e 	.word	0x08020a9e
 8018464:	08020aaa 	.word	0x08020aaa
 8018468:	08020aa6 	.word	0x08020aa6
 801846c:	08020aae 	.word	0x08020aae
 8018470:	2301      	movs	r3, #1
 8018472:	9a06      	ldr	r2, [sp, #24]
 8018474:	4631      	mov	r1, r6
 8018476:	4628      	mov	r0, r5
 8018478:	47b8      	blx	r7
 801847a:	3001      	adds	r0, #1
 801847c:	f43f aecd 	beq.w	801821a <_printf_float+0xba>
 8018480:	f10b 0b01 	add.w	fp, fp, #1
 8018484:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8018488:	ebaa 0309 	sub.w	r3, sl, r9
 801848c:	455b      	cmp	r3, fp
 801848e:	dcef      	bgt.n	8018470 <_printf_float+0x310>
 8018490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018494:	429a      	cmp	r2, r3
 8018496:	44d0      	add	r8, sl
 8018498:	db15      	blt.n	80184c6 <_printf_float+0x366>
 801849a:	6823      	ldr	r3, [r4, #0]
 801849c:	07da      	lsls	r2, r3, #31
 801849e:	d412      	bmi.n	80184c6 <_printf_float+0x366>
 80184a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184a4:	eba3 020a 	sub.w	r2, r3, sl
 80184a8:	eba3 0a01 	sub.w	sl, r3, r1
 80184ac:	4592      	cmp	sl, r2
 80184ae:	bfa8      	it	ge
 80184b0:	4692      	movge	sl, r2
 80184b2:	f1ba 0f00 	cmp.w	sl, #0
 80184b6:	dc0e      	bgt.n	80184d6 <_printf_float+0x376>
 80184b8:	f04f 0800 	mov.w	r8, #0
 80184bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80184c0:	f104 091a 	add.w	r9, r4, #26
 80184c4:	e019      	b.n	80184fa <_printf_float+0x39a>
 80184c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80184ca:	4631      	mov	r1, r6
 80184cc:	4628      	mov	r0, r5
 80184ce:	47b8      	blx	r7
 80184d0:	3001      	adds	r0, #1
 80184d2:	d1e5      	bne.n	80184a0 <_printf_float+0x340>
 80184d4:	e6a1      	b.n	801821a <_printf_float+0xba>
 80184d6:	4653      	mov	r3, sl
 80184d8:	4642      	mov	r2, r8
 80184da:	4631      	mov	r1, r6
 80184dc:	4628      	mov	r0, r5
 80184de:	47b8      	blx	r7
 80184e0:	3001      	adds	r0, #1
 80184e2:	d1e9      	bne.n	80184b8 <_printf_float+0x358>
 80184e4:	e699      	b.n	801821a <_printf_float+0xba>
 80184e6:	2301      	movs	r3, #1
 80184e8:	464a      	mov	r2, r9
 80184ea:	4631      	mov	r1, r6
 80184ec:	4628      	mov	r0, r5
 80184ee:	47b8      	blx	r7
 80184f0:	3001      	adds	r0, #1
 80184f2:	f43f ae92 	beq.w	801821a <_printf_float+0xba>
 80184f6:	f108 0801 	add.w	r8, r8, #1
 80184fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	eba3 030a 	sub.w	r3, r3, sl
 8018504:	4543      	cmp	r3, r8
 8018506:	dcee      	bgt.n	80184e6 <_printf_float+0x386>
 8018508:	e74a      	b.n	80183a0 <_printf_float+0x240>
 801850a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801850c:	2a01      	cmp	r2, #1
 801850e:	dc01      	bgt.n	8018514 <_printf_float+0x3b4>
 8018510:	07db      	lsls	r3, r3, #31
 8018512:	d53a      	bpl.n	801858a <_printf_float+0x42a>
 8018514:	2301      	movs	r3, #1
 8018516:	4642      	mov	r2, r8
 8018518:	4631      	mov	r1, r6
 801851a:	4628      	mov	r0, r5
 801851c:	47b8      	blx	r7
 801851e:	3001      	adds	r0, #1
 8018520:	f43f ae7b 	beq.w	801821a <_printf_float+0xba>
 8018524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018528:	4631      	mov	r1, r6
 801852a:	4628      	mov	r0, r5
 801852c:	47b8      	blx	r7
 801852e:	3001      	adds	r0, #1
 8018530:	f108 0801 	add.w	r8, r8, #1
 8018534:	f43f ae71 	beq.w	801821a <_printf_float+0xba>
 8018538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801853a:	2200      	movs	r2, #0
 801853c:	f103 3aff 	add.w	sl, r3, #4294967295
 8018540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018544:	2300      	movs	r3, #0
 8018546:	f7e8 facf 	bl	8000ae8 <__aeabi_dcmpeq>
 801854a:	b9c8      	cbnz	r0, 8018580 <_printf_float+0x420>
 801854c:	4653      	mov	r3, sl
 801854e:	4642      	mov	r2, r8
 8018550:	4631      	mov	r1, r6
 8018552:	4628      	mov	r0, r5
 8018554:	47b8      	blx	r7
 8018556:	3001      	adds	r0, #1
 8018558:	d10e      	bne.n	8018578 <_printf_float+0x418>
 801855a:	e65e      	b.n	801821a <_printf_float+0xba>
 801855c:	2301      	movs	r3, #1
 801855e:	4652      	mov	r2, sl
 8018560:	4631      	mov	r1, r6
 8018562:	4628      	mov	r0, r5
 8018564:	47b8      	blx	r7
 8018566:	3001      	adds	r0, #1
 8018568:	f43f ae57 	beq.w	801821a <_printf_float+0xba>
 801856c:	f108 0801 	add.w	r8, r8, #1
 8018570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018572:	3b01      	subs	r3, #1
 8018574:	4543      	cmp	r3, r8
 8018576:	dcf1      	bgt.n	801855c <_printf_float+0x3fc>
 8018578:	464b      	mov	r3, r9
 801857a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801857e:	e6de      	b.n	801833e <_printf_float+0x1de>
 8018580:	f04f 0800 	mov.w	r8, #0
 8018584:	f104 0a1a 	add.w	sl, r4, #26
 8018588:	e7f2      	b.n	8018570 <_printf_float+0x410>
 801858a:	2301      	movs	r3, #1
 801858c:	e7df      	b.n	801854e <_printf_float+0x3ee>
 801858e:	2301      	movs	r3, #1
 8018590:	464a      	mov	r2, r9
 8018592:	4631      	mov	r1, r6
 8018594:	4628      	mov	r0, r5
 8018596:	47b8      	blx	r7
 8018598:	3001      	adds	r0, #1
 801859a:	f43f ae3e 	beq.w	801821a <_printf_float+0xba>
 801859e:	f108 0801 	add.w	r8, r8, #1
 80185a2:	68e3      	ldr	r3, [r4, #12]
 80185a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80185a6:	1a9b      	subs	r3, r3, r2
 80185a8:	4543      	cmp	r3, r8
 80185aa:	dcf0      	bgt.n	801858e <_printf_float+0x42e>
 80185ac:	e6fc      	b.n	80183a8 <_printf_float+0x248>
 80185ae:	f04f 0800 	mov.w	r8, #0
 80185b2:	f104 0919 	add.w	r9, r4, #25
 80185b6:	e7f4      	b.n	80185a2 <_printf_float+0x442>
 80185b8:	2900      	cmp	r1, #0
 80185ba:	f43f ae8b 	beq.w	80182d4 <_printf_float+0x174>
 80185be:	2300      	movs	r3, #0
 80185c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80185c4:	ab09      	add	r3, sp, #36	; 0x24
 80185c6:	9300      	str	r3, [sp, #0]
 80185c8:	ec49 8b10 	vmov	d0, r8, r9
 80185cc:	6022      	str	r2, [r4, #0]
 80185ce:	f8cd a004 	str.w	sl, [sp, #4]
 80185d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80185d6:	4628      	mov	r0, r5
 80185d8:	f7ff fd2e 	bl	8018038 <__cvt>
 80185dc:	4680      	mov	r8, r0
 80185de:	e648      	b.n	8018272 <_printf_float+0x112>

080185e0 <_printf_common>:
 80185e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185e4:	4691      	mov	r9, r2
 80185e6:	461f      	mov	r7, r3
 80185e8:	688a      	ldr	r2, [r1, #8]
 80185ea:	690b      	ldr	r3, [r1, #16]
 80185ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80185f0:	4293      	cmp	r3, r2
 80185f2:	bfb8      	it	lt
 80185f4:	4613      	movlt	r3, r2
 80185f6:	f8c9 3000 	str.w	r3, [r9]
 80185fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80185fe:	4606      	mov	r6, r0
 8018600:	460c      	mov	r4, r1
 8018602:	b112      	cbz	r2, 801860a <_printf_common+0x2a>
 8018604:	3301      	adds	r3, #1
 8018606:	f8c9 3000 	str.w	r3, [r9]
 801860a:	6823      	ldr	r3, [r4, #0]
 801860c:	0699      	lsls	r1, r3, #26
 801860e:	bf42      	ittt	mi
 8018610:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018614:	3302      	addmi	r3, #2
 8018616:	f8c9 3000 	strmi.w	r3, [r9]
 801861a:	6825      	ldr	r5, [r4, #0]
 801861c:	f015 0506 	ands.w	r5, r5, #6
 8018620:	d107      	bne.n	8018632 <_printf_common+0x52>
 8018622:	f104 0a19 	add.w	sl, r4, #25
 8018626:	68e3      	ldr	r3, [r4, #12]
 8018628:	f8d9 2000 	ldr.w	r2, [r9]
 801862c:	1a9b      	subs	r3, r3, r2
 801862e:	42ab      	cmp	r3, r5
 8018630:	dc28      	bgt.n	8018684 <_printf_common+0xa4>
 8018632:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018636:	6822      	ldr	r2, [r4, #0]
 8018638:	3300      	adds	r3, #0
 801863a:	bf18      	it	ne
 801863c:	2301      	movne	r3, #1
 801863e:	0692      	lsls	r2, r2, #26
 8018640:	d42d      	bmi.n	801869e <_printf_common+0xbe>
 8018642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018646:	4639      	mov	r1, r7
 8018648:	4630      	mov	r0, r6
 801864a:	47c0      	blx	r8
 801864c:	3001      	adds	r0, #1
 801864e:	d020      	beq.n	8018692 <_printf_common+0xb2>
 8018650:	6823      	ldr	r3, [r4, #0]
 8018652:	68e5      	ldr	r5, [r4, #12]
 8018654:	f8d9 2000 	ldr.w	r2, [r9]
 8018658:	f003 0306 	and.w	r3, r3, #6
 801865c:	2b04      	cmp	r3, #4
 801865e:	bf08      	it	eq
 8018660:	1aad      	subeq	r5, r5, r2
 8018662:	68a3      	ldr	r3, [r4, #8]
 8018664:	6922      	ldr	r2, [r4, #16]
 8018666:	bf0c      	ite	eq
 8018668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801866c:	2500      	movne	r5, #0
 801866e:	4293      	cmp	r3, r2
 8018670:	bfc4      	itt	gt
 8018672:	1a9b      	subgt	r3, r3, r2
 8018674:	18ed      	addgt	r5, r5, r3
 8018676:	f04f 0900 	mov.w	r9, #0
 801867a:	341a      	adds	r4, #26
 801867c:	454d      	cmp	r5, r9
 801867e:	d11a      	bne.n	80186b6 <_printf_common+0xd6>
 8018680:	2000      	movs	r0, #0
 8018682:	e008      	b.n	8018696 <_printf_common+0xb6>
 8018684:	2301      	movs	r3, #1
 8018686:	4652      	mov	r2, sl
 8018688:	4639      	mov	r1, r7
 801868a:	4630      	mov	r0, r6
 801868c:	47c0      	blx	r8
 801868e:	3001      	adds	r0, #1
 8018690:	d103      	bne.n	801869a <_printf_common+0xba>
 8018692:	f04f 30ff 	mov.w	r0, #4294967295
 8018696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801869a:	3501      	adds	r5, #1
 801869c:	e7c3      	b.n	8018626 <_printf_common+0x46>
 801869e:	18e1      	adds	r1, r4, r3
 80186a0:	1c5a      	adds	r2, r3, #1
 80186a2:	2030      	movs	r0, #48	; 0x30
 80186a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80186a8:	4422      	add	r2, r4
 80186aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80186ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80186b2:	3302      	adds	r3, #2
 80186b4:	e7c5      	b.n	8018642 <_printf_common+0x62>
 80186b6:	2301      	movs	r3, #1
 80186b8:	4622      	mov	r2, r4
 80186ba:	4639      	mov	r1, r7
 80186bc:	4630      	mov	r0, r6
 80186be:	47c0      	blx	r8
 80186c0:	3001      	adds	r0, #1
 80186c2:	d0e6      	beq.n	8018692 <_printf_common+0xb2>
 80186c4:	f109 0901 	add.w	r9, r9, #1
 80186c8:	e7d8      	b.n	801867c <_printf_common+0x9c>
	...

080186cc <_printf_i>:
 80186cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80186d4:	460c      	mov	r4, r1
 80186d6:	7e09      	ldrb	r1, [r1, #24]
 80186d8:	b085      	sub	sp, #20
 80186da:	296e      	cmp	r1, #110	; 0x6e
 80186dc:	4617      	mov	r7, r2
 80186de:	4606      	mov	r6, r0
 80186e0:	4698      	mov	r8, r3
 80186e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186e4:	f000 80b3 	beq.w	801884e <_printf_i+0x182>
 80186e8:	d822      	bhi.n	8018730 <_printf_i+0x64>
 80186ea:	2963      	cmp	r1, #99	; 0x63
 80186ec:	d036      	beq.n	801875c <_printf_i+0x90>
 80186ee:	d80a      	bhi.n	8018706 <_printf_i+0x3a>
 80186f0:	2900      	cmp	r1, #0
 80186f2:	f000 80b9 	beq.w	8018868 <_printf_i+0x19c>
 80186f6:	2958      	cmp	r1, #88	; 0x58
 80186f8:	f000 8083 	beq.w	8018802 <_printf_i+0x136>
 80186fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018700:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018704:	e032      	b.n	801876c <_printf_i+0xa0>
 8018706:	2964      	cmp	r1, #100	; 0x64
 8018708:	d001      	beq.n	801870e <_printf_i+0x42>
 801870a:	2969      	cmp	r1, #105	; 0x69
 801870c:	d1f6      	bne.n	80186fc <_printf_i+0x30>
 801870e:	6820      	ldr	r0, [r4, #0]
 8018710:	6813      	ldr	r3, [r2, #0]
 8018712:	0605      	lsls	r5, r0, #24
 8018714:	f103 0104 	add.w	r1, r3, #4
 8018718:	d52a      	bpl.n	8018770 <_printf_i+0xa4>
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	6011      	str	r1, [r2, #0]
 801871e:	2b00      	cmp	r3, #0
 8018720:	da03      	bge.n	801872a <_printf_i+0x5e>
 8018722:	222d      	movs	r2, #45	; 0x2d
 8018724:	425b      	negs	r3, r3
 8018726:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801872a:	486f      	ldr	r0, [pc, #444]	; (80188e8 <_printf_i+0x21c>)
 801872c:	220a      	movs	r2, #10
 801872e:	e039      	b.n	80187a4 <_printf_i+0xd8>
 8018730:	2973      	cmp	r1, #115	; 0x73
 8018732:	f000 809d 	beq.w	8018870 <_printf_i+0x1a4>
 8018736:	d808      	bhi.n	801874a <_printf_i+0x7e>
 8018738:	296f      	cmp	r1, #111	; 0x6f
 801873a:	d020      	beq.n	801877e <_printf_i+0xb2>
 801873c:	2970      	cmp	r1, #112	; 0x70
 801873e:	d1dd      	bne.n	80186fc <_printf_i+0x30>
 8018740:	6823      	ldr	r3, [r4, #0]
 8018742:	f043 0320 	orr.w	r3, r3, #32
 8018746:	6023      	str	r3, [r4, #0]
 8018748:	e003      	b.n	8018752 <_printf_i+0x86>
 801874a:	2975      	cmp	r1, #117	; 0x75
 801874c:	d017      	beq.n	801877e <_printf_i+0xb2>
 801874e:	2978      	cmp	r1, #120	; 0x78
 8018750:	d1d4      	bne.n	80186fc <_printf_i+0x30>
 8018752:	2378      	movs	r3, #120	; 0x78
 8018754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018758:	4864      	ldr	r0, [pc, #400]	; (80188ec <_printf_i+0x220>)
 801875a:	e055      	b.n	8018808 <_printf_i+0x13c>
 801875c:	6813      	ldr	r3, [r2, #0]
 801875e:	1d19      	adds	r1, r3, #4
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	6011      	str	r1, [r2, #0]
 8018764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801876c:	2301      	movs	r3, #1
 801876e:	e08c      	b.n	801888a <_printf_i+0x1be>
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	6011      	str	r1, [r2, #0]
 8018774:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018778:	bf18      	it	ne
 801877a:	b21b      	sxthne	r3, r3
 801877c:	e7cf      	b.n	801871e <_printf_i+0x52>
 801877e:	6813      	ldr	r3, [r2, #0]
 8018780:	6825      	ldr	r5, [r4, #0]
 8018782:	1d18      	adds	r0, r3, #4
 8018784:	6010      	str	r0, [r2, #0]
 8018786:	0628      	lsls	r0, r5, #24
 8018788:	d501      	bpl.n	801878e <_printf_i+0xc2>
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	e002      	b.n	8018794 <_printf_i+0xc8>
 801878e:	0668      	lsls	r0, r5, #25
 8018790:	d5fb      	bpl.n	801878a <_printf_i+0xbe>
 8018792:	881b      	ldrh	r3, [r3, #0]
 8018794:	4854      	ldr	r0, [pc, #336]	; (80188e8 <_printf_i+0x21c>)
 8018796:	296f      	cmp	r1, #111	; 0x6f
 8018798:	bf14      	ite	ne
 801879a:	220a      	movne	r2, #10
 801879c:	2208      	moveq	r2, #8
 801879e:	2100      	movs	r1, #0
 80187a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80187a4:	6865      	ldr	r5, [r4, #4]
 80187a6:	60a5      	str	r5, [r4, #8]
 80187a8:	2d00      	cmp	r5, #0
 80187aa:	f2c0 8095 	blt.w	80188d8 <_printf_i+0x20c>
 80187ae:	6821      	ldr	r1, [r4, #0]
 80187b0:	f021 0104 	bic.w	r1, r1, #4
 80187b4:	6021      	str	r1, [r4, #0]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d13d      	bne.n	8018836 <_printf_i+0x16a>
 80187ba:	2d00      	cmp	r5, #0
 80187bc:	f040 808e 	bne.w	80188dc <_printf_i+0x210>
 80187c0:	4665      	mov	r5, ip
 80187c2:	2a08      	cmp	r2, #8
 80187c4:	d10b      	bne.n	80187de <_printf_i+0x112>
 80187c6:	6823      	ldr	r3, [r4, #0]
 80187c8:	07db      	lsls	r3, r3, #31
 80187ca:	d508      	bpl.n	80187de <_printf_i+0x112>
 80187cc:	6923      	ldr	r3, [r4, #16]
 80187ce:	6862      	ldr	r2, [r4, #4]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	bfde      	ittt	le
 80187d4:	2330      	movle	r3, #48	; 0x30
 80187d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80187da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80187de:	ebac 0305 	sub.w	r3, ip, r5
 80187e2:	6123      	str	r3, [r4, #16]
 80187e4:	f8cd 8000 	str.w	r8, [sp]
 80187e8:	463b      	mov	r3, r7
 80187ea:	aa03      	add	r2, sp, #12
 80187ec:	4621      	mov	r1, r4
 80187ee:	4630      	mov	r0, r6
 80187f0:	f7ff fef6 	bl	80185e0 <_printf_common>
 80187f4:	3001      	adds	r0, #1
 80187f6:	d14d      	bne.n	8018894 <_printf_i+0x1c8>
 80187f8:	f04f 30ff 	mov.w	r0, #4294967295
 80187fc:	b005      	add	sp, #20
 80187fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018802:	4839      	ldr	r0, [pc, #228]	; (80188e8 <_printf_i+0x21c>)
 8018804:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018808:	6813      	ldr	r3, [r2, #0]
 801880a:	6821      	ldr	r1, [r4, #0]
 801880c:	1d1d      	adds	r5, r3, #4
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	6015      	str	r5, [r2, #0]
 8018812:	060a      	lsls	r2, r1, #24
 8018814:	d50b      	bpl.n	801882e <_printf_i+0x162>
 8018816:	07ca      	lsls	r2, r1, #31
 8018818:	bf44      	itt	mi
 801881a:	f041 0120 	orrmi.w	r1, r1, #32
 801881e:	6021      	strmi	r1, [r4, #0]
 8018820:	b91b      	cbnz	r3, 801882a <_printf_i+0x15e>
 8018822:	6822      	ldr	r2, [r4, #0]
 8018824:	f022 0220 	bic.w	r2, r2, #32
 8018828:	6022      	str	r2, [r4, #0]
 801882a:	2210      	movs	r2, #16
 801882c:	e7b7      	b.n	801879e <_printf_i+0xd2>
 801882e:	064d      	lsls	r5, r1, #25
 8018830:	bf48      	it	mi
 8018832:	b29b      	uxthmi	r3, r3
 8018834:	e7ef      	b.n	8018816 <_printf_i+0x14a>
 8018836:	4665      	mov	r5, ip
 8018838:	fbb3 f1f2 	udiv	r1, r3, r2
 801883c:	fb02 3311 	mls	r3, r2, r1, r3
 8018840:	5cc3      	ldrb	r3, [r0, r3]
 8018842:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018846:	460b      	mov	r3, r1
 8018848:	2900      	cmp	r1, #0
 801884a:	d1f5      	bne.n	8018838 <_printf_i+0x16c>
 801884c:	e7b9      	b.n	80187c2 <_printf_i+0xf6>
 801884e:	6813      	ldr	r3, [r2, #0]
 8018850:	6825      	ldr	r5, [r4, #0]
 8018852:	6961      	ldr	r1, [r4, #20]
 8018854:	1d18      	adds	r0, r3, #4
 8018856:	6010      	str	r0, [r2, #0]
 8018858:	0628      	lsls	r0, r5, #24
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	d501      	bpl.n	8018862 <_printf_i+0x196>
 801885e:	6019      	str	r1, [r3, #0]
 8018860:	e002      	b.n	8018868 <_printf_i+0x19c>
 8018862:	066a      	lsls	r2, r5, #25
 8018864:	d5fb      	bpl.n	801885e <_printf_i+0x192>
 8018866:	8019      	strh	r1, [r3, #0]
 8018868:	2300      	movs	r3, #0
 801886a:	6123      	str	r3, [r4, #16]
 801886c:	4665      	mov	r5, ip
 801886e:	e7b9      	b.n	80187e4 <_printf_i+0x118>
 8018870:	6813      	ldr	r3, [r2, #0]
 8018872:	1d19      	adds	r1, r3, #4
 8018874:	6011      	str	r1, [r2, #0]
 8018876:	681d      	ldr	r5, [r3, #0]
 8018878:	6862      	ldr	r2, [r4, #4]
 801887a:	2100      	movs	r1, #0
 801887c:	4628      	mov	r0, r5
 801887e:	f7e7 fcbf 	bl	8000200 <memchr>
 8018882:	b108      	cbz	r0, 8018888 <_printf_i+0x1bc>
 8018884:	1b40      	subs	r0, r0, r5
 8018886:	6060      	str	r0, [r4, #4]
 8018888:	6863      	ldr	r3, [r4, #4]
 801888a:	6123      	str	r3, [r4, #16]
 801888c:	2300      	movs	r3, #0
 801888e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018892:	e7a7      	b.n	80187e4 <_printf_i+0x118>
 8018894:	6923      	ldr	r3, [r4, #16]
 8018896:	462a      	mov	r2, r5
 8018898:	4639      	mov	r1, r7
 801889a:	4630      	mov	r0, r6
 801889c:	47c0      	blx	r8
 801889e:	3001      	adds	r0, #1
 80188a0:	d0aa      	beq.n	80187f8 <_printf_i+0x12c>
 80188a2:	6823      	ldr	r3, [r4, #0]
 80188a4:	079b      	lsls	r3, r3, #30
 80188a6:	d413      	bmi.n	80188d0 <_printf_i+0x204>
 80188a8:	68e0      	ldr	r0, [r4, #12]
 80188aa:	9b03      	ldr	r3, [sp, #12]
 80188ac:	4298      	cmp	r0, r3
 80188ae:	bfb8      	it	lt
 80188b0:	4618      	movlt	r0, r3
 80188b2:	e7a3      	b.n	80187fc <_printf_i+0x130>
 80188b4:	2301      	movs	r3, #1
 80188b6:	464a      	mov	r2, r9
 80188b8:	4639      	mov	r1, r7
 80188ba:	4630      	mov	r0, r6
 80188bc:	47c0      	blx	r8
 80188be:	3001      	adds	r0, #1
 80188c0:	d09a      	beq.n	80187f8 <_printf_i+0x12c>
 80188c2:	3501      	adds	r5, #1
 80188c4:	68e3      	ldr	r3, [r4, #12]
 80188c6:	9a03      	ldr	r2, [sp, #12]
 80188c8:	1a9b      	subs	r3, r3, r2
 80188ca:	42ab      	cmp	r3, r5
 80188cc:	dcf2      	bgt.n	80188b4 <_printf_i+0x1e8>
 80188ce:	e7eb      	b.n	80188a8 <_printf_i+0x1dc>
 80188d0:	2500      	movs	r5, #0
 80188d2:	f104 0919 	add.w	r9, r4, #25
 80188d6:	e7f5      	b.n	80188c4 <_printf_i+0x1f8>
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d1ac      	bne.n	8018836 <_printf_i+0x16a>
 80188dc:	7803      	ldrb	r3, [r0, #0]
 80188de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188e6:	e76c      	b.n	80187c2 <_printf_i+0xf6>
 80188e8:	08020ab0 	.word	0x08020ab0
 80188ec:	08020ac1 	.word	0x08020ac1

080188f0 <iprintf>:
 80188f0:	b40f      	push	{r0, r1, r2, r3}
 80188f2:	4b0a      	ldr	r3, [pc, #40]	; (801891c <iprintf+0x2c>)
 80188f4:	b513      	push	{r0, r1, r4, lr}
 80188f6:	681c      	ldr	r4, [r3, #0]
 80188f8:	b124      	cbz	r4, 8018904 <iprintf+0x14>
 80188fa:	69a3      	ldr	r3, [r4, #24]
 80188fc:	b913      	cbnz	r3, 8018904 <iprintf+0x14>
 80188fe:	4620      	mov	r0, r4
 8018900:	f001 fe1a 	bl	801a538 <__sinit>
 8018904:	ab05      	add	r3, sp, #20
 8018906:	9a04      	ldr	r2, [sp, #16]
 8018908:	68a1      	ldr	r1, [r4, #8]
 801890a:	9301      	str	r3, [sp, #4]
 801890c:	4620      	mov	r0, r4
 801890e:	f002 ff5f 	bl	801b7d0 <_vfiprintf_r>
 8018912:	b002      	add	sp, #8
 8018914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018918:	b004      	add	sp, #16
 801891a:	4770      	bx	lr
 801891c:	20000074 	.word	0x20000074

08018920 <rand>:
 8018920:	b538      	push	{r3, r4, r5, lr}
 8018922:	4b13      	ldr	r3, [pc, #76]	; (8018970 <rand+0x50>)
 8018924:	681c      	ldr	r4, [r3, #0]
 8018926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018928:	b97b      	cbnz	r3, 801894a <rand+0x2a>
 801892a:	2018      	movs	r0, #24
 801892c:	f7ff fa7e 	bl	8017e2c <malloc>
 8018930:	4a10      	ldr	r2, [pc, #64]	; (8018974 <rand+0x54>)
 8018932:	4b11      	ldr	r3, [pc, #68]	; (8018978 <rand+0x58>)
 8018934:	63a0      	str	r0, [r4, #56]	; 0x38
 8018936:	e9c0 2300 	strd	r2, r3, [r0]
 801893a:	4b10      	ldr	r3, [pc, #64]	; (801897c <rand+0x5c>)
 801893c:	6083      	str	r3, [r0, #8]
 801893e:	230b      	movs	r3, #11
 8018940:	8183      	strh	r3, [r0, #12]
 8018942:	2201      	movs	r2, #1
 8018944:	2300      	movs	r3, #0
 8018946:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801894a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801894c:	480c      	ldr	r0, [pc, #48]	; (8018980 <rand+0x60>)
 801894e:	690a      	ldr	r2, [r1, #16]
 8018950:	694b      	ldr	r3, [r1, #20]
 8018952:	4c0c      	ldr	r4, [pc, #48]	; (8018984 <rand+0x64>)
 8018954:	4350      	muls	r0, r2
 8018956:	fb04 0003 	mla	r0, r4, r3, r0
 801895a:	fba2 2304 	umull	r2, r3, r2, r4
 801895e:	4403      	add	r3, r0
 8018960:	1c54      	adds	r4, r2, #1
 8018962:	f143 0500 	adc.w	r5, r3, #0
 8018966:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801896a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801896e:	bd38      	pop	{r3, r4, r5, pc}
 8018970:	20000074 	.word	0x20000074
 8018974:	abcd330e 	.word	0xabcd330e
 8018978:	e66d1234 	.word	0xe66d1234
 801897c:	0005deec 	.word	0x0005deec
 8018980:	5851f42d 	.word	0x5851f42d
 8018984:	4c957f2d 	.word	0x4c957f2d

08018988 <_sbrk_r>:
 8018988:	b538      	push	{r3, r4, r5, lr}
 801898a:	4c06      	ldr	r4, [pc, #24]	; (80189a4 <_sbrk_r+0x1c>)
 801898c:	2300      	movs	r3, #0
 801898e:	4605      	mov	r5, r0
 8018990:	4608      	mov	r0, r1
 8018992:	6023      	str	r3, [r4, #0]
 8018994:	f7ec fdbe 	bl	8005514 <_sbrk>
 8018998:	1c43      	adds	r3, r0, #1
 801899a:	d102      	bne.n	80189a2 <_sbrk_r+0x1a>
 801899c:	6823      	ldr	r3, [r4, #0]
 801899e:	b103      	cbz	r3, 80189a2 <_sbrk_r+0x1a>
 80189a0:	602b      	str	r3, [r5, #0]
 80189a2:	bd38      	pop	{r3, r4, r5, pc}
 80189a4:	200073c4 	.word	0x200073c4

080189a8 <sniprintf>:
 80189a8:	b40c      	push	{r2, r3}
 80189aa:	b530      	push	{r4, r5, lr}
 80189ac:	4b17      	ldr	r3, [pc, #92]	; (8018a0c <sniprintf+0x64>)
 80189ae:	1e0c      	subs	r4, r1, #0
 80189b0:	b09d      	sub	sp, #116	; 0x74
 80189b2:	681d      	ldr	r5, [r3, #0]
 80189b4:	da08      	bge.n	80189c8 <sniprintf+0x20>
 80189b6:	238b      	movs	r3, #139	; 0x8b
 80189b8:	602b      	str	r3, [r5, #0]
 80189ba:	f04f 30ff 	mov.w	r0, #4294967295
 80189be:	b01d      	add	sp, #116	; 0x74
 80189c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189c4:	b002      	add	sp, #8
 80189c6:	4770      	bx	lr
 80189c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80189cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80189d0:	bf14      	ite	ne
 80189d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80189d6:	4623      	moveq	r3, r4
 80189d8:	9304      	str	r3, [sp, #16]
 80189da:	9307      	str	r3, [sp, #28]
 80189dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189e0:	9002      	str	r0, [sp, #8]
 80189e2:	9006      	str	r0, [sp, #24]
 80189e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80189e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80189ea:	ab21      	add	r3, sp, #132	; 0x84
 80189ec:	a902      	add	r1, sp, #8
 80189ee:	4628      	mov	r0, r5
 80189f0:	9301      	str	r3, [sp, #4]
 80189f2:	f002 fdcb 	bl	801b58c <_svfiprintf_r>
 80189f6:	1c43      	adds	r3, r0, #1
 80189f8:	bfbc      	itt	lt
 80189fa:	238b      	movlt	r3, #139	; 0x8b
 80189fc:	602b      	strlt	r3, [r5, #0]
 80189fe:	2c00      	cmp	r4, #0
 8018a00:	d0dd      	beq.n	80189be <sniprintf+0x16>
 8018a02:	9b02      	ldr	r3, [sp, #8]
 8018a04:	2200      	movs	r2, #0
 8018a06:	701a      	strb	r2, [r3, #0]
 8018a08:	e7d9      	b.n	80189be <sniprintf+0x16>
 8018a0a:	bf00      	nop
 8018a0c:	20000074 	.word	0x20000074

08018a10 <siprintf>:
 8018a10:	b40e      	push	{r1, r2, r3}
 8018a12:	b500      	push	{lr}
 8018a14:	b09c      	sub	sp, #112	; 0x70
 8018a16:	ab1d      	add	r3, sp, #116	; 0x74
 8018a18:	9002      	str	r0, [sp, #8]
 8018a1a:	9006      	str	r0, [sp, #24]
 8018a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018a20:	4809      	ldr	r0, [pc, #36]	; (8018a48 <siprintf+0x38>)
 8018a22:	9107      	str	r1, [sp, #28]
 8018a24:	9104      	str	r1, [sp, #16]
 8018a26:	4909      	ldr	r1, [pc, #36]	; (8018a4c <siprintf+0x3c>)
 8018a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a2c:	9105      	str	r1, [sp, #20]
 8018a2e:	6800      	ldr	r0, [r0, #0]
 8018a30:	9301      	str	r3, [sp, #4]
 8018a32:	a902      	add	r1, sp, #8
 8018a34:	f002 fdaa 	bl	801b58c <_svfiprintf_r>
 8018a38:	9b02      	ldr	r3, [sp, #8]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	701a      	strb	r2, [r3, #0]
 8018a3e:	b01c      	add	sp, #112	; 0x70
 8018a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a44:	b003      	add	sp, #12
 8018a46:	4770      	bx	lr
 8018a48:	20000074 	.word	0x20000074
 8018a4c:	ffff0208 	.word	0xffff0208

08018a50 <strncmp>:
 8018a50:	b510      	push	{r4, lr}
 8018a52:	b16a      	cbz	r2, 8018a70 <strncmp+0x20>
 8018a54:	3901      	subs	r1, #1
 8018a56:	1884      	adds	r4, r0, r2
 8018a58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018a60:	4293      	cmp	r3, r2
 8018a62:	d103      	bne.n	8018a6c <strncmp+0x1c>
 8018a64:	42a0      	cmp	r0, r4
 8018a66:	d001      	beq.n	8018a6c <strncmp+0x1c>
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d1f5      	bne.n	8018a58 <strncmp+0x8>
 8018a6c:	1a98      	subs	r0, r3, r2
 8018a6e:	bd10      	pop	{r4, pc}
 8018a70:	4610      	mov	r0, r2
 8018a72:	e7fc      	b.n	8018a6e <strncmp+0x1e>

08018a74 <strstr>:
 8018a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a76:	7803      	ldrb	r3, [r0, #0]
 8018a78:	b17b      	cbz	r3, 8018a9a <strstr+0x26>
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	7823      	ldrb	r3, [r4, #0]
 8018a7e:	4620      	mov	r0, r4
 8018a80:	1c66      	adds	r6, r4, #1
 8018a82:	b17b      	cbz	r3, 8018aa4 <strstr+0x30>
 8018a84:	1e4a      	subs	r2, r1, #1
 8018a86:	1e63      	subs	r3, r4, #1
 8018a88:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8018a8c:	b14d      	cbz	r5, 8018aa2 <strstr+0x2e>
 8018a8e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018a92:	42af      	cmp	r7, r5
 8018a94:	4634      	mov	r4, r6
 8018a96:	d0f7      	beq.n	8018a88 <strstr+0x14>
 8018a98:	e7f0      	b.n	8018a7c <strstr+0x8>
 8018a9a:	780b      	ldrb	r3, [r1, #0]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	bf18      	it	ne
 8018aa0:	2000      	movne	r0, #0
 8018aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	e7fc      	b.n	8018aa2 <strstr+0x2e>

08018aa8 <sulp>:
 8018aa8:	b570      	push	{r4, r5, r6, lr}
 8018aaa:	4604      	mov	r4, r0
 8018aac:	460d      	mov	r5, r1
 8018aae:	ec45 4b10 	vmov	d0, r4, r5
 8018ab2:	4616      	mov	r6, r2
 8018ab4:	f002 fbce 	bl	801b254 <__ulp>
 8018ab8:	ec51 0b10 	vmov	r0, r1, d0
 8018abc:	b17e      	cbz	r6, 8018ade <sulp+0x36>
 8018abe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	dd09      	ble.n	8018ade <sulp+0x36>
 8018aca:	051b      	lsls	r3, r3, #20
 8018acc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018ad0:	2400      	movs	r4, #0
 8018ad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018ad6:	4622      	mov	r2, r4
 8018ad8:	462b      	mov	r3, r5
 8018ada:	f7e7 fd9d 	bl	8000618 <__aeabi_dmul>
 8018ade:	bd70      	pop	{r4, r5, r6, pc}

08018ae0 <_strtod_l>:
 8018ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	461f      	mov	r7, r3
 8018ae6:	b0a1      	sub	sp, #132	; 0x84
 8018ae8:	2300      	movs	r3, #0
 8018aea:	4681      	mov	r9, r0
 8018aec:	4638      	mov	r0, r7
 8018aee:	460e      	mov	r6, r1
 8018af0:	9217      	str	r2, [sp, #92]	; 0x5c
 8018af2:	931c      	str	r3, [sp, #112]	; 0x70
 8018af4:	f002 f8d0 	bl	801ac98 <__localeconv_l>
 8018af8:	4680      	mov	r8, r0
 8018afa:	6800      	ldr	r0, [r0, #0]
 8018afc:	f7e7 fb72 	bl	80001e4 <strlen>
 8018b00:	f04f 0a00 	mov.w	sl, #0
 8018b04:	4604      	mov	r4, r0
 8018b06:	f04f 0b00 	mov.w	fp, #0
 8018b0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8018b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018b0e:	781a      	ldrb	r2, [r3, #0]
 8018b10:	2a0d      	cmp	r2, #13
 8018b12:	d832      	bhi.n	8018b7a <_strtod_l+0x9a>
 8018b14:	2a09      	cmp	r2, #9
 8018b16:	d236      	bcs.n	8018b86 <_strtod_l+0xa6>
 8018b18:	2a00      	cmp	r2, #0
 8018b1a:	d03e      	beq.n	8018b9a <_strtod_l+0xba>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8018b20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018b22:	782b      	ldrb	r3, [r5, #0]
 8018b24:	2b30      	cmp	r3, #48	; 0x30
 8018b26:	f040 80ac 	bne.w	8018c82 <_strtod_l+0x1a2>
 8018b2a:	786b      	ldrb	r3, [r5, #1]
 8018b2c:	2b58      	cmp	r3, #88	; 0x58
 8018b2e:	d001      	beq.n	8018b34 <_strtod_l+0x54>
 8018b30:	2b78      	cmp	r3, #120	; 0x78
 8018b32:	d167      	bne.n	8018c04 <_strtod_l+0x124>
 8018b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b36:	9301      	str	r3, [sp, #4]
 8018b38:	ab1c      	add	r3, sp, #112	; 0x70
 8018b3a:	9300      	str	r3, [sp, #0]
 8018b3c:	9702      	str	r7, [sp, #8]
 8018b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8018b40:	4a88      	ldr	r2, [pc, #544]	; (8018d64 <_strtod_l+0x284>)
 8018b42:	a91b      	add	r1, sp, #108	; 0x6c
 8018b44:	4648      	mov	r0, r9
 8018b46:	f001 fdd0 	bl	801a6ea <__gethex>
 8018b4a:	f010 0407 	ands.w	r4, r0, #7
 8018b4e:	4606      	mov	r6, r0
 8018b50:	d005      	beq.n	8018b5e <_strtod_l+0x7e>
 8018b52:	2c06      	cmp	r4, #6
 8018b54:	d12b      	bne.n	8018bae <_strtod_l+0xce>
 8018b56:	3501      	adds	r5, #1
 8018b58:	2300      	movs	r3, #0
 8018b5a:	951b      	str	r5, [sp, #108]	; 0x6c
 8018b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8018b5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f040 859a 	bne.w	801969a <_strtod_l+0xbba>
 8018b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b68:	b1e3      	cbz	r3, 8018ba4 <_strtod_l+0xc4>
 8018b6a:	4652      	mov	r2, sl
 8018b6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018b70:	ec43 2b10 	vmov	d0, r2, r3
 8018b74:	b021      	add	sp, #132	; 0x84
 8018b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b7a:	2a2b      	cmp	r2, #43	; 0x2b
 8018b7c:	d015      	beq.n	8018baa <_strtod_l+0xca>
 8018b7e:	2a2d      	cmp	r2, #45	; 0x2d
 8018b80:	d004      	beq.n	8018b8c <_strtod_l+0xac>
 8018b82:	2a20      	cmp	r2, #32
 8018b84:	d1ca      	bne.n	8018b1c <_strtod_l+0x3c>
 8018b86:	3301      	adds	r3, #1
 8018b88:	931b      	str	r3, [sp, #108]	; 0x6c
 8018b8a:	e7bf      	b.n	8018b0c <_strtod_l+0x2c>
 8018b8c:	2201      	movs	r2, #1
 8018b8e:	920d      	str	r2, [sp, #52]	; 0x34
 8018b90:	1c5a      	adds	r2, r3, #1
 8018b92:	921b      	str	r2, [sp, #108]	; 0x6c
 8018b94:	785b      	ldrb	r3, [r3, #1]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d1c2      	bne.n	8018b20 <_strtod_l+0x40>
 8018b9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	f040 8579 	bne.w	8019696 <_strtod_l+0xbb6>
 8018ba4:	4652      	mov	r2, sl
 8018ba6:	465b      	mov	r3, fp
 8018ba8:	e7e2      	b.n	8018b70 <_strtod_l+0x90>
 8018baa:	2200      	movs	r2, #0
 8018bac:	e7ef      	b.n	8018b8e <_strtod_l+0xae>
 8018bae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018bb0:	b13a      	cbz	r2, 8018bc2 <_strtod_l+0xe2>
 8018bb2:	2135      	movs	r1, #53	; 0x35
 8018bb4:	a81e      	add	r0, sp, #120	; 0x78
 8018bb6:	f002 fc45 	bl	801b444 <__copybits>
 8018bba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018bbc:	4648      	mov	r0, r9
 8018bbe:	f002 f8b1 	bl	801ad24 <_Bfree>
 8018bc2:	3c01      	subs	r4, #1
 8018bc4:	2c04      	cmp	r4, #4
 8018bc6:	d806      	bhi.n	8018bd6 <_strtod_l+0xf6>
 8018bc8:	e8df f004 	tbb	[pc, r4]
 8018bcc:	1714030a 	.word	0x1714030a
 8018bd0:	0a          	.byte	0x0a
 8018bd1:	00          	.byte	0x00
 8018bd2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8018bd6:	0730      	lsls	r0, r6, #28
 8018bd8:	d5c1      	bpl.n	8018b5e <_strtod_l+0x7e>
 8018bda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018bde:	e7be      	b.n	8018b5e <_strtod_l+0x7e>
 8018be0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8018be4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018be6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018bea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018bee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018bf2:	e7f0      	b.n	8018bd6 <_strtod_l+0xf6>
 8018bf4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018d68 <_strtod_l+0x288>
 8018bf8:	e7ed      	b.n	8018bd6 <_strtod_l+0xf6>
 8018bfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018bfe:	f04f 3aff 	mov.w	sl, #4294967295
 8018c02:	e7e8      	b.n	8018bd6 <_strtod_l+0xf6>
 8018c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018c06:	1c5a      	adds	r2, r3, #1
 8018c08:	921b      	str	r2, [sp, #108]	; 0x6c
 8018c0a:	785b      	ldrb	r3, [r3, #1]
 8018c0c:	2b30      	cmp	r3, #48	; 0x30
 8018c0e:	d0f9      	beq.n	8018c04 <_strtod_l+0x124>
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d0a4      	beq.n	8018b5e <_strtod_l+0x7e>
 8018c14:	2301      	movs	r3, #1
 8018c16:	2500      	movs	r5, #0
 8018c18:	9306      	str	r3, [sp, #24]
 8018c1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018c1c:	9308      	str	r3, [sp, #32]
 8018c1e:	9507      	str	r5, [sp, #28]
 8018c20:	9505      	str	r5, [sp, #20]
 8018c22:	220a      	movs	r2, #10
 8018c24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018c26:	7807      	ldrb	r7, [r0, #0]
 8018c28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8018c2c:	b2d9      	uxtb	r1, r3
 8018c2e:	2909      	cmp	r1, #9
 8018c30:	d929      	bls.n	8018c86 <_strtod_l+0x1a6>
 8018c32:	4622      	mov	r2, r4
 8018c34:	f8d8 1000 	ldr.w	r1, [r8]
 8018c38:	f7ff ff0a 	bl	8018a50 <strncmp>
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d031      	beq.n	8018ca4 <_strtod_l+0x1c4>
 8018c40:	2000      	movs	r0, #0
 8018c42:	9c05      	ldr	r4, [sp, #20]
 8018c44:	9004      	str	r0, [sp, #16]
 8018c46:	463b      	mov	r3, r7
 8018c48:	4602      	mov	r2, r0
 8018c4a:	2b65      	cmp	r3, #101	; 0x65
 8018c4c:	d001      	beq.n	8018c52 <_strtod_l+0x172>
 8018c4e:	2b45      	cmp	r3, #69	; 0x45
 8018c50:	d114      	bne.n	8018c7c <_strtod_l+0x19c>
 8018c52:	b924      	cbnz	r4, 8018c5e <_strtod_l+0x17e>
 8018c54:	b910      	cbnz	r0, 8018c5c <_strtod_l+0x17c>
 8018c56:	9b06      	ldr	r3, [sp, #24]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d09e      	beq.n	8018b9a <_strtod_l+0xba>
 8018c5c:	2400      	movs	r4, #0
 8018c5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8018c60:	1c73      	adds	r3, r6, #1
 8018c62:	931b      	str	r3, [sp, #108]	; 0x6c
 8018c64:	7873      	ldrb	r3, [r6, #1]
 8018c66:	2b2b      	cmp	r3, #43	; 0x2b
 8018c68:	d078      	beq.n	8018d5c <_strtod_l+0x27c>
 8018c6a:	2b2d      	cmp	r3, #45	; 0x2d
 8018c6c:	d070      	beq.n	8018d50 <_strtod_l+0x270>
 8018c6e:	f04f 0c00 	mov.w	ip, #0
 8018c72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8018c76:	2f09      	cmp	r7, #9
 8018c78:	d97c      	bls.n	8018d74 <_strtod_l+0x294>
 8018c7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8018c7c:	f04f 0e00 	mov.w	lr, #0
 8018c80:	e09a      	b.n	8018db8 <_strtod_l+0x2d8>
 8018c82:	2300      	movs	r3, #0
 8018c84:	e7c7      	b.n	8018c16 <_strtod_l+0x136>
 8018c86:	9905      	ldr	r1, [sp, #20]
 8018c88:	2908      	cmp	r1, #8
 8018c8a:	bfdd      	ittte	le
 8018c8c:	9907      	ldrle	r1, [sp, #28]
 8018c8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8018c92:	9307      	strle	r3, [sp, #28]
 8018c94:	fb02 3505 	mlagt	r5, r2, r5, r3
 8018c98:	9b05      	ldr	r3, [sp, #20]
 8018c9a:	3001      	adds	r0, #1
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	9305      	str	r3, [sp, #20]
 8018ca0:	901b      	str	r0, [sp, #108]	; 0x6c
 8018ca2:	e7bf      	b.n	8018c24 <_strtod_l+0x144>
 8018ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018ca6:	191a      	adds	r2, r3, r4
 8018ca8:	921b      	str	r2, [sp, #108]	; 0x6c
 8018caa:	9a05      	ldr	r2, [sp, #20]
 8018cac:	5d1b      	ldrb	r3, [r3, r4]
 8018cae:	2a00      	cmp	r2, #0
 8018cb0:	d037      	beq.n	8018d22 <_strtod_l+0x242>
 8018cb2:	9c05      	ldr	r4, [sp, #20]
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018cba:	2909      	cmp	r1, #9
 8018cbc:	d913      	bls.n	8018ce6 <_strtod_l+0x206>
 8018cbe:	2101      	movs	r1, #1
 8018cc0:	9104      	str	r1, [sp, #16]
 8018cc2:	e7c2      	b.n	8018c4a <_strtod_l+0x16a>
 8018cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018cc6:	1c5a      	adds	r2, r3, #1
 8018cc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8018cca:	785b      	ldrb	r3, [r3, #1]
 8018ccc:	3001      	adds	r0, #1
 8018cce:	2b30      	cmp	r3, #48	; 0x30
 8018cd0:	d0f8      	beq.n	8018cc4 <_strtod_l+0x1e4>
 8018cd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018cd6:	2a08      	cmp	r2, #8
 8018cd8:	f200 84e4 	bhi.w	80196a4 <_strtod_l+0xbc4>
 8018cdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018cde:	9208      	str	r2, [sp, #32]
 8018ce0:	4602      	mov	r2, r0
 8018ce2:	2000      	movs	r0, #0
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8018cea:	f100 0101 	add.w	r1, r0, #1
 8018cee:	d012      	beq.n	8018d16 <_strtod_l+0x236>
 8018cf0:	440a      	add	r2, r1
 8018cf2:	eb00 0c04 	add.w	ip, r0, r4
 8018cf6:	4621      	mov	r1, r4
 8018cf8:	270a      	movs	r7, #10
 8018cfa:	458c      	cmp	ip, r1
 8018cfc:	d113      	bne.n	8018d26 <_strtod_l+0x246>
 8018cfe:	1821      	adds	r1, r4, r0
 8018d00:	2908      	cmp	r1, #8
 8018d02:	f104 0401 	add.w	r4, r4, #1
 8018d06:	4404      	add	r4, r0
 8018d08:	dc19      	bgt.n	8018d3e <_strtod_l+0x25e>
 8018d0a:	9b07      	ldr	r3, [sp, #28]
 8018d0c:	210a      	movs	r1, #10
 8018d0e:	fb01 e303 	mla	r3, r1, r3, lr
 8018d12:	9307      	str	r3, [sp, #28]
 8018d14:	2100      	movs	r1, #0
 8018d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d18:	1c58      	adds	r0, r3, #1
 8018d1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8018d1c:	785b      	ldrb	r3, [r3, #1]
 8018d1e:	4608      	mov	r0, r1
 8018d20:	e7c9      	b.n	8018cb6 <_strtod_l+0x1d6>
 8018d22:	9805      	ldr	r0, [sp, #20]
 8018d24:	e7d3      	b.n	8018cce <_strtod_l+0x1ee>
 8018d26:	2908      	cmp	r1, #8
 8018d28:	f101 0101 	add.w	r1, r1, #1
 8018d2c:	dc03      	bgt.n	8018d36 <_strtod_l+0x256>
 8018d2e:	9b07      	ldr	r3, [sp, #28]
 8018d30:	437b      	muls	r3, r7
 8018d32:	9307      	str	r3, [sp, #28]
 8018d34:	e7e1      	b.n	8018cfa <_strtod_l+0x21a>
 8018d36:	2910      	cmp	r1, #16
 8018d38:	bfd8      	it	le
 8018d3a:	437d      	mulle	r5, r7
 8018d3c:	e7dd      	b.n	8018cfa <_strtod_l+0x21a>
 8018d3e:	2c10      	cmp	r4, #16
 8018d40:	bfdc      	itt	le
 8018d42:	210a      	movle	r1, #10
 8018d44:	fb01 e505 	mlale	r5, r1, r5, lr
 8018d48:	e7e4      	b.n	8018d14 <_strtod_l+0x234>
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	9304      	str	r3, [sp, #16]
 8018d4e:	e781      	b.n	8018c54 <_strtod_l+0x174>
 8018d50:	f04f 0c01 	mov.w	ip, #1
 8018d54:	1cb3      	adds	r3, r6, #2
 8018d56:	931b      	str	r3, [sp, #108]	; 0x6c
 8018d58:	78b3      	ldrb	r3, [r6, #2]
 8018d5a:	e78a      	b.n	8018c72 <_strtod_l+0x192>
 8018d5c:	f04f 0c00 	mov.w	ip, #0
 8018d60:	e7f8      	b.n	8018d54 <_strtod_l+0x274>
 8018d62:	bf00      	nop
 8018d64:	08020ad4 	.word	0x08020ad4
 8018d68:	7ff00000 	.word	0x7ff00000
 8018d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d6e:	1c5f      	adds	r7, r3, #1
 8018d70:	971b      	str	r7, [sp, #108]	; 0x6c
 8018d72:	785b      	ldrb	r3, [r3, #1]
 8018d74:	2b30      	cmp	r3, #48	; 0x30
 8018d76:	d0f9      	beq.n	8018d6c <_strtod_l+0x28c>
 8018d78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8018d7c:	2f08      	cmp	r7, #8
 8018d7e:	f63f af7d 	bhi.w	8018c7c <_strtod_l+0x19c>
 8018d82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018d86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d88:	930a      	str	r3, [sp, #40]	; 0x28
 8018d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d8c:	1c5f      	adds	r7, r3, #1
 8018d8e:	971b      	str	r7, [sp, #108]	; 0x6c
 8018d90:	785b      	ldrb	r3, [r3, #1]
 8018d92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8018d96:	f1b8 0f09 	cmp.w	r8, #9
 8018d9a:	d937      	bls.n	8018e0c <_strtod_l+0x32c>
 8018d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018d9e:	1a7f      	subs	r7, r7, r1
 8018da0:	2f08      	cmp	r7, #8
 8018da2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018da6:	dc37      	bgt.n	8018e18 <_strtod_l+0x338>
 8018da8:	45be      	cmp	lr, r7
 8018daa:	bfa8      	it	ge
 8018dac:	46be      	movge	lr, r7
 8018dae:	f1bc 0f00 	cmp.w	ip, #0
 8018db2:	d001      	beq.n	8018db8 <_strtod_l+0x2d8>
 8018db4:	f1ce 0e00 	rsb	lr, lr, #0
 8018db8:	2c00      	cmp	r4, #0
 8018dba:	d151      	bne.n	8018e60 <_strtod_l+0x380>
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	f47f aece 	bne.w	8018b5e <_strtod_l+0x7e>
 8018dc2:	9a06      	ldr	r2, [sp, #24]
 8018dc4:	2a00      	cmp	r2, #0
 8018dc6:	f47f aeca 	bne.w	8018b5e <_strtod_l+0x7e>
 8018dca:	9a04      	ldr	r2, [sp, #16]
 8018dcc:	2a00      	cmp	r2, #0
 8018dce:	f47f aee4 	bne.w	8018b9a <_strtod_l+0xba>
 8018dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8018dd4:	d027      	beq.n	8018e26 <_strtod_l+0x346>
 8018dd6:	dc21      	bgt.n	8018e1c <_strtod_l+0x33c>
 8018dd8:	2b49      	cmp	r3, #73	; 0x49
 8018dda:	f47f aede 	bne.w	8018b9a <_strtod_l+0xba>
 8018dde:	49a0      	ldr	r1, [pc, #640]	; (8019060 <_strtod_l+0x580>)
 8018de0:	a81b      	add	r0, sp, #108	; 0x6c
 8018de2:	f001 feb5 	bl	801ab50 <__match>
 8018de6:	2800      	cmp	r0, #0
 8018de8:	f43f aed7 	beq.w	8018b9a <_strtod_l+0xba>
 8018dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018dee:	499d      	ldr	r1, [pc, #628]	; (8019064 <_strtod_l+0x584>)
 8018df0:	3b01      	subs	r3, #1
 8018df2:	a81b      	add	r0, sp, #108	; 0x6c
 8018df4:	931b      	str	r3, [sp, #108]	; 0x6c
 8018df6:	f001 feab 	bl	801ab50 <__match>
 8018dfa:	b910      	cbnz	r0, 8018e02 <_strtod_l+0x322>
 8018dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018dfe:	3301      	adds	r3, #1
 8018e00:	931b      	str	r3, [sp, #108]	; 0x6c
 8018e02:	f8df b274 	ldr.w	fp, [pc, #628]	; 8019078 <_strtod_l+0x598>
 8018e06:	f04f 0a00 	mov.w	sl, #0
 8018e0a:	e6a8      	b.n	8018b5e <_strtod_l+0x7e>
 8018e0c:	210a      	movs	r1, #10
 8018e0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018e12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018e16:	e7b8      	b.n	8018d8a <_strtod_l+0x2aa>
 8018e18:	46be      	mov	lr, r7
 8018e1a:	e7c8      	b.n	8018dae <_strtod_l+0x2ce>
 8018e1c:	2b69      	cmp	r3, #105	; 0x69
 8018e1e:	d0de      	beq.n	8018dde <_strtod_l+0x2fe>
 8018e20:	2b6e      	cmp	r3, #110	; 0x6e
 8018e22:	f47f aeba 	bne.w	8018b9a <_strtod_l+0xba>
 8018e26:	4990      	ldr	r1, [pc, #576]	; (8019068 <_strtod_l+0x588>)
 8018e28:	a81b      	add	r0, sp, #108	; 0x6c
 8018e2a:	f001 fe91 	bl	801ab50 <__match>
 8018e2e:	2800      	cmp	r0, #0
 8018e30:	f43f aeb3 	beq.w	8018b9a <_strtod_l+0xba>
 8018e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	2b28      	cmp	r3, #40	; 0x28
 8018e3a:	d10e      	bne.n	8018e5a <_strtod_l+0x37a>
 8018e3c:	aa1e      	add	r2, sp, #120	; 0x78
 8018e3e:	498b      	ldr	r1, [pc, #556]	; (801906c <_strtod_l+0x58c>)
 8018e40:	a81b      	add	r0, sp, #108	; 0x6c
 8018e42:	f001 fe99 	bl	801ab78 <__hexnan>
 8018e46:	2805      	cmp	r0, #5
 8018e48:	d107      	bne.n	8018e5a <_strtod_l+0x37a>
 8018e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8018e50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018e54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018e58:	e681      	b.n	8018b5e <_strtod_l+0x7e>
 8018e5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8019080 <_strtod_l+0x5a0>
 8018e5e:	e7d2      	b.n	8018e06 <_strtod_l+0x326>
 8018e60:	ebae 0302 	sub.w	r3, lr, r2
 8018e64:	9306      	str	r3, [sp, #24]
 8018e66:	9b05      	ldr	r3, [sp, #20]
 8018e68:	9807      	ldr	r0, [sp, #28]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	bf08      	it	eq
 8018e6e:	4623      	moveq	r3, r4
 8018e70:	2c10      	cmp	r4, #16
 8018e72:	9305      	str	r3, [sp, #20]
 8018e74:	46a0      	mov	r8, r4
 8018e76:	bfa8      	it	ge
 8018e78:	f04f 0810 	movge.w	r8, #16
 8018e7c:	f7e7 fb52 	bl	8000524 <__aeabi_ui2d>
 8018e80:	2c09      	cmp	r4, #9
 8018e82:	4682      	mov	sl, r0
 8018e84:	468b      	mov	fp, r1
 8018e86:	dc13      	bgt.n	8018eb0 <_strtod_l+0x3d0>
 8018e88:	9b06      	ldr	r3, [sp, #24]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	f43f ae67 	beq.w	8018b5e <_strtod_l+0x7e>
 8018e90:	9b06      	ldr	r3, [sp, #24]
 8018e92:	dd7a      	ble.n	8018f8a <_strtod_l+0x4aa>
 8018e94:	2b16      	cmp	r3, #22
 8018e96:	dc61      	bgt.n	8018f5c <_strtod_l+0x47c>
 8018e98:	4a75      	ldr	r2, [pc, #468]	; (8019070 <_strtod_l+0x590>)
 8018e9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8018e9e:	e9de 0100 	ldrd	r0, r1, [lr]
 8018ea2:	4652      	mov	r2, sl
 8018ea4:	465b      	mov	r3, fp
 8018ea6:	f7e7 fbb7 	bl	8000618 <__aeabi_dmul>
 8018eaa:	4682      	mov	sl, r0
 8018eac:	468b      	mov	fp, r1
 8018eae:	e656      	b.n	8018b5e <_strtod_l+0x7e>
 8018eb0:	4b6f      	ldr	r3, [pc, #444]	; (8019070 <_strtod_l+0x590>)
 8018eb2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018eb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018eba:	f7e7 fbad 	bl	8000618 <__aeabi_dmul>
 8018ebe:	4606      	mov	r6, r0
 8018ec0:	4628      	mov	r0, r5
 8018ec2:	460f      	mov	r7, r1
 8018ec4:	f7e7 fb2e 	bl	8000524 <__aeabi_ui2d>
 8018ec8:	4602      	mov	r2, r0
 8018eca:	460b      	mov	r3, r1
 8018ecc:	4630      	mov	r0, r6
 8018ece:	4639      	mov	r1, r7
 8018ed0:	f7e7 f9ec 	bl	80002ac <__adddf3>
 8018ed4:	2c0f      	cmp	r4, #15
 8018ed6:	4682      	mov	sl, r0
 8018ed8:	468b      	mov	fp, r1
 8018eda:	ddd5      	ble.n	8018e88 <_strtod_l+0x3a8>
 8018edc:	9b06      	ldr	r3, [sp, #24]
 8018ede:	eba4 0808 	sub.w	r8, r4, r8
 8018ee2:	4498      	add	r8, r3
 8018ee4:	f1b8 0f00 	cmp.w	r8, #0
 8018ee8:	f340 8096 	ble.w	8019018 <_strtod_l+0x538>
 8018eec:	f018 030f 	ands.w	r3, r8, #15
 8018ef0:	d00a      	beq.n	8018f08 <_strtod_l+0x428>
 8018ef2:	495f      	ldr	r1, [pc, #380]	; (8019070 <_strtod_l+0x590>)
 8018ef4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018ef8:	4652      	mov	r2, sl
 8018efa:	465b      	mov	r3, fp
 8018efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f00:	f7e7 fb8a 	bl	8000618 <__aeabi_dmul>
 8018f04:	4682      	mov	sl, r0
 8018f06:	468b      	mov	fp, r1
 8018f08:	f038 080f 	bics.w	r8, r8, #15
 8018f0c:	d073      	beq.n	8018ff6 <_strtod_l+0x516>
 8018f0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018f12:	dd47      	ble.n	8018fa4 <_strtod_l+0x4c4>
 8018f14:	2400      	movs	r4, #0
 8018f16:	46a0      	mov	r8, r4
 8018f18:	9407      	str	r4, [sp, #28]
 8018f1a:	9405      	str	r4, [sp, #20]
 8018f1c:	2322      	movs	r3, #34	; 0x22
 8018f1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8019078 <_strtod_l+0x598>
 8018f22:	f8c9 3000 	str.w	r3, [r9]
 8018f26:	f04f 0a00 	mov.w	sl, #0
 8018f2a:	9b07      	ldr	r3, [sp, #28]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f43f ae16 	beq.w	8018b5e <_strtod_l+0x7e>
 8018f32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018f34:	4648      	mov	r0, r9
 8018f36:	f001 fef5 	bl	801ad24 <_Bfree>
 8018f3a:	9905      	ldr	r1, [sp, #20]
 8018f3c:	4648      	mov	r0, r9
 8018f3e:	f001 fef1 	bl	801ad24 <_Bfree>
 8018f42:	4641      	mov	r1, r8
 8018f44:	4648      	mov	r0, r9
 8018f46:	f001 feed 	bl	801ad24 <_Bfree>
 8018f4a:	9907      	ldr	r1, [sp, #28]
 8018f4c:	4648      	mov	r0, r9
 8018f4e:	f001 fee9 	bl	801ad24 <_Bfree>
 8018f52:	4621      	mov	r1, r4
 8018f54:	4648      	mov	r0, r9
 8018f56:	f001 fee5 	bl	801ad24 <_Bfree>
 8018f5a:	e600      	b.n	8018b5e <_strtod_l+0x7e>
 8018f5c:	9a06      	ldr	r2, [sp, #24]
 8018f5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8018f62:	4293      	cmp	r3, r2
 8018f64:	dbba      	blt.n	8018edc <_strtod_l+0x3fc>
 8018f66:	4d42      	ldr	r5, [pc, #264]	; (8019070 <_strtod_l+0x590>)
 8018f68:	f1c4 040f 	rsb	r4, r4, #15
 8018f6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8018f70:	4652      	mov	r2, sl
 8018f72:	465b      	mov	r3, fp
 8018f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f78:	f7e7 fb4e 	bl	8000618 <__aeabi_dmul>
 8018f7c:	9b06      	ldr	r3, [sp, #24]
 8018f7e:	1b1c      	subs	r4, r3, r4
 8018f80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8018f84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f88:	e78d      	b.n	8018ea6 <_strtod_l+0x3c6>
 8018f8a:	f113 0f16 	cmn.w	r3, #22
 8018f8e:	dba5      	blt.n	8018edc <_strtod_l+0x3fc>
 8018f90:	4a37      	ldr	r2, [pc, #220]	; (8019070 <_strtod_l+0x590>)
 8018f92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8018f96:	e9d2 2300 	ldrd	r2, r3, [r2]
 8018f9a:	4650      	mov	r0, sl
 8018f9c:	4659      	mov	r1, fp
 8018f9e:	f7e7 fc65 	bl	800086c <__aeabi_ddiv>
 8018fa2:	e782      	b.n	8018eaa <_strtod_l+0x3ca>
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	4e33      	ldr	r6, [pc, #204]	; (8019074 <_strtod_l+0x594>)
 8018fa8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8018fac:	4650      	mov	r0, sl
 8018fae:	4659      	mov	r1, fp
 8018fb0:	461d      	mov	r5, r3
 8018fb2:	f1b8 0f01 	cmp.w	r8, #1
 8018fb6:	dc21      	bgt.n	8018ffc <_strtod_l+0x51c>
 8018fb8:	b10b      	cbz	r3, 8018fbe <_strtod_l+0x4de>
 8018fba:	4682      	mov	sl, r0
 8018fbc:	468b      	mov	fp, r1
 8018fbe:	4b2d      	ldr	r3, [pc, #180]	; (8019074 <_strtod_l+0x594>)
 8018fc0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018fc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018fc8:	4652      	mov	r2, sl
 8018fca:	465b      	mov	r3, fp
 8018fcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018fd0:	f7e7 fb22 	bl	8000618 <__aeabi_dmul>
 8018fd4:	4b28      	ldr	r3, [pc, #160]	; (8019078 <_strtod_l+0x598>)
 8018fd6:	460a      	mov	r2, r1
 8018fd8:	400b      	ands	r3, r1
 8018fda:	4928      	ldr	r1, [pc, #160]	; (801907c <_strtod_l+0x59c>)
 8018fdc:	428b      	cmp	r3, r1
 8018fde:	4682      	mov	sl, r0
 8018fe0:	d898      	bhi.n	8018f14 <_strtod_l+0x434>
 8018fe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018fe6:	428b      	cmp	r3, r1
 8018fe8:	bf86      	itte	hi
 8018fea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8019084 <_strtod_l+0x5a4>
 8018fee:	f04f 3aff 	movhi.w	sl, #4294967295
 8018ff2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	9304      	str	r3, [sp, #16]
 8018ffa:	e077      	b.n	80190ec <_strtod_l+0x60c>
 8018ffc:	f018 0f01 	tst.w	r8, #1
 8019000:	d006      	beq.n	8019010 <_strtod_l+0x530>
 8019002:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8019006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801900a:	f7e7 fb05 	bl	8000618 <__aeabi_dmul>
 801900e:	2301      	movs	r3, #1
 8019010:	3501      	adds	r5, #1
 8019012:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019016:	e7cc      	b.n	8018fb2 <_strtod_l+0x4d2>
 8019018:	d0ed      	beq.n	8018ff6 <_strtod_l+0x516>
 801901a:	f1c8 0800 	rsb	r8, r8, #0
 801901e:	f018 020f 	ands.w	r2, r8, #15
 8019022:	d00a      	beq.n	801903a <_strtod_l+0x55a>
 8019024:	4b12      	ldr	r3, [pc, #72]	; (8019070 <_strtod_l+0x590>)
 8019026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801902a:	4650      	mov	r0, sl
 801902c:	4659      	mov	r1, fp
 801902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019032:	f7e7 fc1b 	bl	800086c <__aeabi_ddiv>
 8019036:	4682      	mov	sl, r0
 8019038:	468b      	mov	fp, r1
 801903a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801903e:	d0da      	beq.n	8018ff6 <_strtod_l+0x516>
 8019040:	f1b8 0f1f 	cmp.w	r8, #31
 8019044:	dd20      	ble.n	8019088 <_strtod_l+0x5a8>
 8019046:	2400      	movs	r4, #0
 8019048:	46a0      	mov	r8, r4
 801904a:	9407      	str	r4, [sp, #28]
 801904c:	9405      	str	r4, [sp, #20]
 801904e:	2322      	movs	r3, #34	; 0x22
 8019050:	f04f 0a00 	mov.w	sl, #0
 8019054:	f04f 0b00 	mov.w	fp, #0
 8019058:	f8c9 3000 	str.w	r3, [r9]
 801905c:	e765      	b.n	8018f2a <_strtod_l+0x44a>
 801905e:	bf00      	nop
 8019060:	08020aa3 	.word	0x08020aa3
 8019064:	08020c2c 	.word	0x08020c2c
 8019068:	08020aab 	.word	0x08020aab
 801906c:	08020ae8 	.word	0x08020ae8
 8019070:	08020cc0 	.word	0x08020cc0
 8019074:	08020c98 	.word	0x08020c98
 8019078:	7ff00000 	.word	0x7ff00000
 801907c:	7ca00000 	.word	0x7ca00000
 8019080:	fff80000 	.word	0xfff80000
 8019084:	7fefffff 	.word	0x7fefffff
 8019088:	f018 0310 	ands.w	r3, r8, #16
 801908c:	bf18      	it	ne
 801908e:	236a      	movne	r3, #106	; 0x6a
 8019090:	4da0      	ldr	r5, [pc, #640]	; (8019314 <_strtod_l+0x834>)
 8019092:	9304      	str	r3, [sp, #16]
 8019094:	4650      	mov	r0, sl
 8019096:	4659      	mov	r1, fp
 8019098:	2300      	movs	r3, #0
 801909a:	f1b8 0f00 	cmp.w	r8, #0
 801909e:	f300 810a 	bgt.w	80192b6 <_strtod_l+0x7d6>
 80190a2:	b10b      	cbz	r3, 80190a8 <_strtod_l+0x5c8>
 80190a4:	4682      	mov	sl, r0
 80190a6:	468b      	mov	fp, r1
 80190a8:	9b04      	ldr	r3, [sp, #16]
 80190aa:	b1bb      	cbz	r3, 80190dc <_strtod_l+0x5fc>
 80190ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80190b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	4659      	mov	r1, fp
 80190b8:	dd10      	ble.n	80190dc <_strtod_l+0x5fc>
 80190ba:	2b1f      	cmp	r3, #31
 80190bc:	f340 8107 	ble.w	80192ce <_strtod_l+0x7ee>
 80190c0:	2b34      	cmp	r3, #52	; 0x34
 80190c2:	bfde      	ittt	le
 80190c4:	3b20      	suble	r3, #32
 80190c6:	f04f 32ff 	movle.w	r2, #4294967295
 80190ca:	fa02 f303 	lslle.w	r3, r2, r3
 80190ce:	f04f 0a00 	mov.w	sl, #0
 80190d2:	bfcc      	ite	gt
 80190d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80190d8:	ea03 0b01 	andle.w	fp, r3, r1
 80190dc:	2200      	movs	r2, #0
 80190de:	2300      	movs	r3, #0
 80190e0:	4650      	mov	r0, sl
 80190e2:	4659      	mov	r1, fp
 80190e4:	f7e7 fd00 	bl	8000ae8 <__aeabi_dcmpeq>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d1ac      	bne.n	8019046 <_strtod_l+0x566>
 80190ec:	9b07      	ldr	r3, [sp, #28]
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	9a05      	ldr	r2, [sp, #20]
 80190f2:	9908      	ldr	r1, [sp, #32]
 80190f4:	4623      	mov	r3, r4
 80190f6:	4648      	mov	r0, r9
 80190f8:	f001 fe66 	bl	801adc8 <__s2b>
 80190fc:	9007      	str	r0, [sp, #28]
 80190fe:	2800      	cmp	r0, #0
 8019100:	f43f af08 	beq.w	8018f14 <_strtod_l+0x434>
 8019104:	9a06      	ldr	r2, [sp, #24]
 8019106:	9b06      	ldr	r3, [sp, #24]
 8019108:	2a00      	cmp	r2, #0
 801910a:	f1c3 0300 	rsb	r3, r3, #0
 801910e:	bfa8      	it	ge
 8019110:	2300      	movge	r3, #0
 8019112:	930e      	str	r3, [sp, #56]	; 0x38
 8019114:	2400      	movs	r4, #0
 8019116:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801911a:	9316      	str	r3, [sp, #88]	; 0x58
 801911c:	46a0      	mov	r8, r4
 801911e:	9b07      	ldr	r3, [sp, #28]
 8019120:	4648      	mov	r0, r9
 8019122:	6859      	ldr	r1, [r3, #4]
 8019124:	f001 fdca 	bl	801acbc <_Balloc>
 8019128:	9005      	str	r0, [sp, #20]
 801912a:	2800      	cmp	r0, #0
 801912c:	f43f aef6 	beq.w	8018f1c <_strtod_l+0x43c>
 8019130:	9b07      	ldr	r3, [sp, #28]
 8019132:	691a      	ldr	r2, [r3, #16]
 8019134:	3202      	adds	r2, #2
 8019136:	f103 010c 	add.w	r1, r3, #12
 801913a:	0092      	lsls	r2, r2, #2
 801913c:	300c      	adds	r0, #12
 801913e:	f7fe fea6 	bl	8017e8e <memcpy>
 8019142:	aa1e      	add	r2, sp, #120	; 0x78
 8019144:	a91d      	add	r1, sp, #116	; 0x74
 8019146:	ec4b ab10 	vmov	d0, sl, fp
 801914a:	4648      	mov	r0, r9
 801914c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019150:	f002 f8f6 	bl	801b340 <__d2b>
 8019154:	901c      	str	r0, [sp, #112]	; 0x70
 8019156:	2800      	cmp	r0, #0
 8019158:	f43f aee0 	beq.w	8018f1c <_strtod_l+0x43c>
 801915c:	2101      	movs	r1, #1
 801915e:	4648      	mov	r0, r9
 8019160:	f001 febe 	bl	801aee0 <__i2b>
 8019164:	4680      	mov	r8, r0
 8019166:	2800      	cmp	r0, #0
 8019168:	f43f aed8 	beq.w	8018f1c <_strtod_l+0x43c>
 801916c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801916e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019170:	2e00      	cmp	r6, #0
 8019172:	bfab      	itete	ge
 8019174:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8019176:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8019178:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801917a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801917c:	bfac      	ite	ge
 801917e:	18f7      	addge	r7, r6, r3
 8019180:	1b9d      	sublt	r5, r3, r6
 8019182:	9b04      	ldr	r3, [sp, #16]
 8019184:	1af6      	subs	r6, r6, r3
 8019186:	4416      	add	r6, r2
 8019188:	4b63      	ldr	r3, [pc, #396]	; (8019318 <_strtod_l+0x838>)
 801918a:	3e01      	subs	r6, #1
 801918c:	429e      	cmp	r6, r3
 801918e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019192:	f280 80af 	bge.w	80192f4 <_strtod_l+0x814>
 8019196:	1b9b      	subs	r3, r3, r6
 8019198:	2b1f      	cmp	r3, #31
 801919a:	eba2 0203 	sub.w	r2, r2, r3
 801919e:	f04f 0101 	mov.w	r1, #1
 80191a2:	f300 809b 	bgt.w	80192dc <_strtod_l+0x7fc>
 80191a6:	fa01 f303 	lsl.w	r3, r1, r3
 80191aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80191ac:	2300      	movs	r3, #0
 80191ae:	930a      	str	r3, [sp, #40]	; 0x28
 80191b0:	18be      	adds	r6, r7, r2
 80191b2:	9b04      	ldr	r3, [sp, #16]
 80191b4:	42b7      	cmp	r7, r6
 80191b6:	4415      	add	r5, r2
 80191b8:	441d      	add	r5, r3
 80191ba:	463b      	mov	r3, r7
 80191bc:	bfa8      	it	ge
 80191be:	4633      	movge	r3, r6
 80191c0:	42ab      	cmp	r3, r5
 80191c2:	bfa8      	it	ge
 80191c4:	462b      	movge	r3, r5
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	bfc2      	ittt	gt
 80191ca:	1af6      	subgt	r6, r6, r3
 80191cc:	1aed      	subgt	r5, r5, r3
 80191ce:	1aff      	subgt	r7, r7, r3
 80191d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191d2:	b1bb      	cbz	r3, 8019204 <_strtod_l+0x724>
 80191d4:	4641      	mov	r1, r8
 80191d6:	461a      	mov	r2, r3
 80191d8:	4648      	mov	r0, r9
 80191da:	f001 ff21 	bl	801b020 <__pow5mult>
 80191de:	4680      	mov	r8, r0
 80191e0:	2800      	cmp	r0, #0
 80191e2:	f43f ae9b 	beq.w	8018f1c <_strtod_l+0x43c>
 80191e6:	4601      	mov	r1, r0
 80191e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80191ea:	4648      	mov	r0, r9
 80191ec:	f001 fe81 	bl	801aef2 <__multiply>
 80191f0:	900c      	str	r0, [sp, #48]	; 0x30
 80191f2:	2800      	cmp	r0, #0
 80191f4:	f43f ae92 	beq.w	8018f1c <_strtod_l+0x43c>
 80191f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80191fa:	4648      	mov	r0, r9
 80191fc:	f001 fd92 	bl	801ad24 <_Bfree>
 8019200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019202:	931c      	str	r3, [sp, #112]	; 0x70
 8019204:	2e00      	cmp	r6, #0
 8019206:	dc7a      	bgt.n	80192fe <_strtod_l+0x81e>
 8019208:	9b06      	ldr	r3, [sp, #24]
 801920a:	2b00      	cmp	r3, #0
 801920c:	dd08      	ble.n	8019220 <_strtod_l+0x740>
 801920e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019210:	9905      	ldr	r1, [sp, #20]
 8019212:	4648      	mov	r0, r9
 8019214:	f001 ff04 	bl	801b020 <__pow5mult>
 8019218:	9005      	str	r0, [sp, #20]
 801921a:	2800      	cmp	r0, #0
 801921c:	f43f ae7e 	beq.w	8018f1c <_strtod_l+0x43c>
 8019220:	2d00      	cmp	r5, #0
 8019222:	dd08      	ble.n	8019236 <_strtod_l+0x756>
 8019224:	462a      	mov	r2, r5
 8019226:	9905      	ldr	r1, [sp, #20]
 8019228:	4648      	mov	r0, r9
 801922a:	f001 ff47 	bl	801b0bc <__lshift>
 801922e:	9005      	str	r0, [sp, #20]
 8019230:	2800      	cmp	r0, #0
 8019232:	f43f ae73 	beq.w	8018f1c <_strtod_l+0x43c>
 8019236:	2f00      	cmp	r7, #0
 8019238:	dd08      	ble.n	801924c <_strtod_l+0x76c>
 801923a:	4641      	mov	r1, r8
 801923c:	463a      	mov	r2, r7
 801923e:	4648      	mov	r0, r9
 8019240:	f001 ff3c 	bl	801b0bc <__lshift>
 8019244:	4680      	mov	r8, r0
 8019246:	2800      	cmp	r0, #0
 8019248:	f43f ae68 	beq.w	8018f1c <_strtod_l+0x43c>
 801924c:	9a05      	ldr	r2, [sp, #20]
 801924e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019250:	4648      	mov	r0, r9
 8019252:	f001 ffa1 	bl	801b198 <__mdiff>
 8019256:	4604      	mov	r4, r0
 8019258:	2800      	cmp	r0, #0
 801925a:	f43f ae5f 	beq.w	8018f1c <_strtod_l+0x43c>
 801925e:	68c3      	ldr	r3, [r0, #12]
 8019260:	930c      	str	r3, [sp, #48]	; 0x30
 8019262:	2300      	movs	r3, #0
 8019264:	60c3      	str	r3, [r0, #12]
 8019266:	4641      	mov	r1, r8
 8019268:	f001 ff7c 	bl	801b164 <__mcmp>
 801926c:	2800      	cmp	r0, #0
 801926e:	da55      	bge.n	801931c <_strtod_l+0x83c>
 8019270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019272:	b9e3      	cbnz	r3, 80192ae <_strtod_l+0x7ce>
 8019274:	f1ba 0f00 	cmp.w	sl, #0
 8019278:	d119      	bne.n	80192ae <_strtod_l+0x7ce>
 801927a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801927e:	b9b3      	cbnz	r3, 80192ae <_strtod_l+0x7ce>
 8019280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019284:	0d1b      	lsrs	r3, r3, #20
 8019286:	051b      	lsls	r3, r3, #20
 8019288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801928c:	d90f      	bls.n	80192ae <_strtod_l+0x7ce>
 801928e:	6963      	ldr	r3, [r4, #20]
 8019290:	b913      	cbnz	r3, 8019298 <_strtod_l+0x7b8>
 8019292:	6923      	ldr	r3, [r4, #16]
 8019294:	2b01      	cmp	r3, #1
 8019296:	dd0a      	ble.n	80192ae <_strtod_l+0x7ce>
 8019298:	4621      	mov	r1, r4
 801929a:	2201      	movs	r2, #1
 801929c:	4648      	mov	r0, r9
 801929e:	f001 ff0d 	bl	801b0bc <__lshift>
 80192a2:	4641      	mov	r1, r8
 80192a4:	4604      	mov	r4, r0
 80192a6:	f001 ff5d 	bl	801b164 <__mcmp>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	dc67      	bgt.n	801937e <_strtod_l+0x89e>
 80192ae:	9b04      	ldr	r3, [sp, #16]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d171      	bne.n	8019398 <_strtod_l+0x8b8>
 80192b4:	e63d      	b.n	8018f32 <_strtod_l+0x452>
 80192b6:	f018 0f01 	tst.w	r8, #1
 80192ba:	d004      	beq.n	80192c6 <_strtod_l+0x7e6>
 80192bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80192c0:	f7e7 f9aa 	bl	8000618 <__aeabi_dmul>
 80192c4:	2301      	movs	r3, #1
 80192c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80192ca:	3508      	adds	r5, #8
 80192cc:	e6e5      	b.n	801909a <_strtod_l+0x5ba>
 80192ce:	f04f 32ff 	mov.w	r2, #4294967295
 80192d2:	fa02 f303 	lsl.w	r3, r2, r3
 80192d6:	ea03 0a0a 	and.w	sl, r3, sl
 80192da:	e6ff      	b.n	80190dc <_strtod_l+0x5fc>
 80192dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80192e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80192e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80192e8:	36e2      	adds	r6, #226	; 0xe2
 80192ea:	fa01 f306 	lsl.w	r3, r1, r6
 80192ee:	930a      	str	r3, [sp, #40]	; 0x28
 80192f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80192f2:	e75d      	b.n	80191b0 <_strtod_l+0x6d0>
 80192f4:	2300      	movs	r3, #0
 80192f6:	930a      	str	r3, [sp, #40]	; 0x28
 80192f8:	2301      	movs	r3, #1
 80192fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80192fc:	e758      	b.n	80191b0 <_strtod_l+0x6d0>
 80192fe:	4632      	mov	r2, r6
 8019300:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019302:	4648      	mov	r0, r9
 8019304:	f001 feda 	bl	801b0bc <__lshift>
 8019308:	901c      	str	r0, [sp, #112]	; 0x70
 801930a:	2800      	cmp	r0, #0
 801930c:	f47f af7c 	bne.w	8019208 <_strtod_l+0x728>
 8019310:	e604      	b.n	8018f1c <_strtod_l+0x43c>
 8019312:	bf00      	nop
 8019314:	08020b00 	.word	0x08020b00
 8019318:	fffffc02 	.word	0xfffffc02
 801931c:	465d      	mov	r5, fp
 801931e:	f040 8086 	bne.w	801942e <_strtod_l+0x94e>
 8019322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019328:	b32a      	cbz	r2, 8019376 <_strtod_l+0x896>
 801932a:	4aaf      	ldr	r2, [pc, #700]	; (80195e8 <_strtod_l+0xb08>)
 801932c:	4293      	cmp	r3, r2
 801932e:	d153      	bne.n	80193d8 <_strtod_l+0x8f8>
 8019330:	9b04      	ldr	r3, [sp, #16]
 8019332:	4650      	mov	r0, sl
 8019334:	b1d3      	cbz	r3, 801936c <_strtod_l+0x88c>
 8019336:	4aad      	ldr	r2, [pc, #692]	; (80195ec <_strtod_l+0xb0c>)
 8019338:	402a      	ands	r2, r5
 801933a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801933e:	f04f 31ff 	mov.w	r1, #4294967295
 8019342:	d816      	bhi.n	8019372 <_strtod_l+0x892>
 8019344:	0d12      	lsrs	r2, r2, #20
 8019346:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801934a:	fa01 f303 	lsl.w	r3, r1, r3
 801934e:	4298      	cmp	r0, r3
 8019350:	d142      	bne.n	80193d8 <_strtod_l+0x8f8>
 8019352:	4ba7      	ldr	r3, [pc, #668]	; (80195f0 <_strtod_l+0xb10>)
 8019354:	429d      	cmp	r5, r3
 8019356:	d102      	bne.n	801935e <_strtod_l+0x87e>
 8019358:	3001      	adds	r0, #1
 801935a:	f43f addf 	beq.w	8018f1c <_strtod_l+0x43c>
 801935e:	4ba3      	ldr	r3, [pc, #652]	; (80195ec <_strtod_l+0xb0c>)
 8019360:	402b      	ands	r3, r5
 8019362:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8019366:	f04f 0a00 	mov.w	sl, #0
 801936a:	e7a0      	b.n	80192ae <_strtod_l+0x7ce>
 801936c:	f04f 33ff 	mov.w	r3, #4294967295
 8019370:	e7ed      	b.n	801934e <_strtod_l+0x86e>
 8019372:	460b      	mov	r3, r1
 8019374:	e7eb      	b.n	801934e <_strtod_l+0x86e>
 8019376:	bb7b      	cbnz	r3, 80193d8 <_strtod_l+0x8f8>
 8019378:	f1ba 0f00 	cmp.w	sl, #0
 801937c:	d12c      	bne.n	80193d8 <_strtod_l+0x8f8>
 801937e:	9904      	ldr	r1, [sp, #16]
 8019380:	4a9a      	ldr	r2, [pc, #616]	; (80195ec <_strtod_l+0xb0c>)
 8019382:	465b      	mov	r3, fp
 8019384:	b1f1      	cbz	r1, 80193c4 <_strtod_l+0x8e4>
 8019386:	ea02 010b 	and.w	r1, r2, fp
 801938a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801938e:	dc19      	bgt.n	80193c4 <_strtod_l+0x8e4>
 8019390:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019394:	f77f ae5b 	ble.w	801904e <_strtod_l+0x56e>
 8019398:	4a96      	ldr	r2, [pc, #600]	; (80195f4 <_strtod_l+0xb14>)
 801939a:	2300      	movs	r3, #0
 801939c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80193a0:	4650      	mov	r0, sl
 80193a2:	4659      	mov	r1, fp
 80193a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80193a8:	f7e7 f936 	bl	8000618 <__aeabi_dmul>
 80193ac:	4682      	mov	sl, r0
 80193ae:	468b      	mov	fp, r1
 80193b0:	2900      	cmp	r1, #0
 80193b2:	f47f adbe 	bne.w	8018f32 <_strtod_l+0x452>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	f47f adbb 	bne.w	8018f32 <_strtod_l+0x452>
 80193bc:	2322      	movs	r3, #34	; 0x22
 80193be:	f8c9 3000 	str.w	r3, [r9]
 80193c2:	e5b6      	b.n	8018f32 <_strtod_l+0x452>
 80193c4:	4013      	ands	r3, r2
 80193c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80193ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80193ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80193d2:	f04f 3aff 	mov.w	sl, #4294967295
 80193d6:	e76a      	b.n	80192ae <_strtod_l+0x7ce>
 80193d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193da:	b193      	cbz	r3, 8019402 <_strtod_l+0x922>
 80193dc:	422b      	tst	r3, r5
 80193de:	f43f af66 	beq.w	80192ae <_strtod_l+0x7ce>
 80193e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193e4:	9a04      	ldr	r2, [sp, #16]
 80193e6:	4650      	mov	r0, sl
 80193e8:	4659      	mov	r1, fp
 80193ea:	b173      	cbz	r3, 801940a <_strtod_l+0x92a>
 80193ec:	f7ff fb5c 	bl	8018aa8 <sulp>
 80193f0:	4602      	mov	r2, r0
 80193f2:	460b      	mov	r3, r1
 80193f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80193f8:	f7e6 ff58 	bl	80002ac <__adddf3>
 80193fc:	4682      	mov	sl, r0
 80193fe:	468b      	mov	fp, r1
 8019400:	e755      	b.n	80192ae <_strtod_l+0x7ce>
 8019402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019404:	ea13 0f0a 	tst.w	r3, sl
 8019408:	e7e9      	b.n	80193de <_strtod_l+0x8fe>
 801940a:	f7ff fb4d 	bl	8018aa8 <sulp>
 801940e:	4602      	mov	r2, r0
 8019410:	460b      	mov	r3, r1
 8019412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019416:	f7e6 ff47 	bl	80002a8 <__aeabi_dsub>
 801941a:	2200      	movs	r2, #0
 801941c:	2300      	movs	r3, #0
 801941e:	4682      	mov	sl, r0
 8019420:	468b      	mov	fp, r1
 8019422:	f7e7 fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 8019426:	2800      	cmp	r0, #0
 8019428:	f47f ae11 	bne.w	801904e <_strtod_l+0x56e>
 801942c:	e73f      	b.n	80192ae <_strtod_l+0x7ce>
 801942e:	4641      	mov	r1, r8
 8019430:	4620      	mov	r0, r4
 8019432:	f001 ffd4 	bl	801b3de <__ratio>
 8019436:	ec57 6b10 	vmov	r6, r7, d0
 801943a:	2200      	movs	r2, #0
 801943c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019440:	ee10 0a10 	vmov	r0, s0
 8019444:	4639      	mov	r1, r7
 8019446:	f7e7 fb63 	bl	8000b10 <__aeabi_dcmple>
 801944a:	2800      	cmp	r0, #0
 801944c:	d077      	beq.n	801953e <_strtod_l+0xa5e>
 801944e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019450:	2b00      	cmp	r3, #0
 8019452:	d04a      	beq.n	80194ea <_strtod_l+0xa0a>
 8019454:	4b68      	ldr	r3, [pc, #416]	; (80195f8 <_strtod_l+0xb18>)
 8019456:	2200      	movs	r2, #0
 8019458:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801945c:	4f66      	ldr	r7, [pc, #408]	; (80195f8 <_strtod_l+0xb18>)
 801945e:	2600      	movs	r6, #0
 8019460:	4b62      	ldr	r3, [pc, #392]	; (80195ec <_strtod_l+0xb0c>)
 8019462:	402b      	ands	r3, r5
 8019464:	930f      	str	r3, [sp, #60]	; 0x3c
 8019466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019468:	4b64      	ldr	r3, [pc, #400]	; (80195fc <_strtod_l+0xb1c>)
 801946a:	429a      	cmp	r2, r3
 801946c:	f040 80ce 	bne.w	801960c <_strtod_l+0xb2c>
 8019470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019474:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019478:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801947c:	ec4b ab10 	vmov	d0, sl, fp
 8019480:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8019484:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019488:	f001 fee4 	bl	801b254 <__ulp>
 801948c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019490:	ec53 2b10 	vmov	r2, r3, d0
 8019494:	f7e7 f8c0 	bl	8000618 <__aeabi_dmul>
 8019498:	4652      	mov	r2, sl
 801949a:	465b      	mov	r3, fp
 801949c:	f7e6 ff06 	bl	80002ac <__adddf3>
 80194a0:	460b      	mov	r3, r1
 80194a2:	4952      	ldr	r1, [pc, #328]	; (80195ec <_strtod_l+0xb0c>)
 80194a4:	4a56      	ldr	r2, [pc, #344]	; (8019600 <_strtod_l+0xb20>)
 80194a6:	4019      	ands	r1, r3
 80194a8:	4291      	cmp	r1, r2
 80194aa:	4682      	mov	sl, r0
 80194ac:	d95b      	bls.n	8019566 <_strtod_l+0xa86>
 80194ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80194b4:	4293      	cmp	r3, r2
 80194b6:	d103      	bne.n	80194c0 <_strtod_l+0x9e0>
 80194b8:	9b08      	ldr	r3, [sp, #32]
 80194ba:	3301      	adds	r3, #1
 80194bc:	f43f ad2e 	beq.w	8018f1c <_strtod_l+0x43c>
 80194c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80195f0 <_strtod_l+0xb10>
 80194c4:	f04f 3aff 	mov.w	sl, #4294967295
 80194c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80194ca:	4648      	mov	r0, r9
 80194cc:	f001 fc2a 	bl	801ad24 <_Bfree>
 80194d0:	9905      	ldr	r1, [sp, #20]
 80194d2:	4648      	mov	r0, r9
 80194d4:	f001 fc26 	bl	801ad24 <_Bfree>
 80194d8:	4641      	mov	r1, r8
 80194da:	4648      	mov	r0, r9
 80194dc:	f001 fc22 	bl	801ad24 <_Bfree>
 80194e0:	4621      	mov	r1, r4
 80194e2:	4648      	mov	r0, r9
 80194e4:	f001 fc1e 	bl	801ad24 <_Bfree>
 80194e8:	e619      	b.n	801911e <_strtod_l+0x63e>
 80194ea:	f1ba 0f00 	cmp.w	sl, #0
 80194ee:	d11a      	bne.n	8019526 <_strtod_l+0xa46>
 80194f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80194f4:	b9eb      	cbnz	r3, 8019532 <_strtod_l+0xa52>
 80194f6:	2200      	movs	r2, #0
 80194f8:	4b3f      	ldr	r3, [pc, #252]	; (80195f8 <_strtod_l+0xb18>)
 80194fa:	4630      	mov	r0, r6
 80194fc:	4639      	mov	r1, r7
 80194fe:	f7e7 fafd 	bl	8000afc <__aeabi_dcmplt>
 8019502:	b9c8      	cbnz	r0, 8019538 <_strtod_l+0xa58>
 8019504:	4630      	mov	r0, r6
 8019506:	4639      	mov	r1, r7
 8019508:	2200      	movs	r2, #0
 801950a:	4b3e      	ldr	r3, [pc, #248]	; (8019604 <_strtod_l+0xb24>)
 801950c:	f7e7 f884 	bl	8000618 <__aeabi_dmul>
 8019510:	4606      	mov	r6, r0
 8019512:	460f      	mov	r7, r1
 8019514:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019518:	9618      	str	r6, [sp, #96]	; 0x60
 801951a:	9319      	str	r3, [sp, #100]	; 0x64
 801951c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8019520:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019524:	e79c      	b.n	8019460 <_strtod_l+0x980>
 8019526:	f1ba 0f01 	cmp.w	sl, #1
 801952a:	d102      	bne.n	8019532 <_strtod_l+0xa52>
 801952c:	2d00      	cmp	r5, #0
 801952e:	f43f ad8e 	beq.w	801904e <_strtod_l+0x56e>
 8019532:	2200      	movs	r2, #0
 8019534:	4b34      	ldr	r3, [pc, #208]	; (8019608 <_strtod_l+0xb28>)
 8019536:	e78f      	b.n	8019458 <_strtod_l+0x978>
 8019538:	2600      	movs	r6, #0
 801953a:	4f32      	ldr	r7, [pc, #200]	; (8019604 <_strtod_l+0xb24>)
 801953c:	e7ea      	b.n	8019514 <_strtod_l+0xa34>
 801953e:	4b31      	ldr	r3, [pc, #196]	; (8019604 <_strtod_l+0xb24>)
 8019540:	4630      	mov	r0, r6
 8019542:	4639      	mov	r1, r7
 8019544:	2200      	movs	r2, #0
 8019546:	f7e7 f867 	bl	8000618 <__aeabi_dmul>
 801954a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801954c:	4606      	mov	r6, r0
 801954e:	460f      	mov	r7, r1
 8019550:	b933      	cbnz	r3, 8019560 <_strtod_l+0xa80>
 8019552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019556:	9010      	str	r0, [sp, #64]	; 0x40
 8019558:	9311      	str	r3, [sp, #68]	; 0x44
 801955a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801955e:	e7df      	b.n	8019520 <_strtod_l+0xa40>
 8019560:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019564:	e7f9      	b.n	801955a <_strtod_l+0xa7a>
 8019566:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801956a:	9b04      	ldr	r3, [sp, #16]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d1ab      	bne.n	80194c8 <_strtod_l+0x9e8>
 8019570:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019574:	0d1b      	lsrs	r3, r3, #20
 8019576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019578:	051b      	lsls	r3, r3, #20
 801957a:	429a      	cmp	r2, r3
 801957c:	465d      	mov	r5, fp
 801957e:	d1a3      	bne.n	80194c8 <_strtod_l+0x9e8>
 8019580:	4639      	mov	r1, r7
 8019582:	4630      	mov	r0, r6
 8019584:	f7e7 faf8 	bl	8000b78 <__aeabi_d2iz>
 8019588:	f7e6 ffdc 	bl	8000544 <__aeabi_i2d>
 801958c:	460b      	mov	r3, r1
 801958e:	4602      	mov	r2, r0
 8019590:	4639      	mov	r1, r7
 8019592:	4630      	mov	r0, r6
 8019594:	f7e6 fe88 	bl	80002a8 <__aeabi_dsub>
 8019598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801959a:	4606      	mov	r6, r0
 801959c:	460f      	mov	r7, r1
 801959e:	b933      	cbnz	r3, 80195ae <_strtod_l+0xace>
 80195a0:	f1ba 0f00 	cmp.w	sl, #0
 80195a4:	d103      	bne.n	80195ae <_strtod_l+0xace>
 80195a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80195aa:	2d00      	cmp	r5, #0
 80195ac:	d06d      	beq.n	801968a <_strtod_l+0xbaa>
 80195ae:	a30a      	add	r3, pc, #40	; (adr r3, 80195d8 <_strtod_l+0xaf8>)
 80195b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b4:	4630      	mov	r0, r6
 80195b6:	4639      	mov	r1, r7
 80195b8:	f7e7 faa0 	bl	8000afc <__aeabi_dcmplt>
 80195bc:	2800      	cmp	r0, #0
 80195be:	f47f acb8 	bne.w	8018f32 <_strtod_l+0x452>
 80195c2:	a307      	add	r3, pc, #28	; (adr r3, 80195e0 <_strtod_l+0xb00>)
 80195c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c8:	4630      	mov	r0, r6
 80195ca:	4639      	mov	r1, r7
 80195cc:	f7e7 fab4 	bl	8000b38 <__aeabi_dcmpgt>
 80195d0:	2800      	cmp	r0, #0
 80195d2:	f43f af79 	beq.w	80194c8 <_strtod_l+0x9e8>
 80195d6:	e4ac      	b.n	8018f32 <_strtod_l+0x452>
 80195d8:	94a03595 	.word	0x94a03595
 80195dc:	3fdfffff 	.word	0x3fdfffff
 80195e0:	35afe535 	.word	0x35afe535
 80195e4:	3fe00000 	.word	0x3fe00000
 80195e8:	000fffff 	.word	0x000fffff
 80195ec:	7ff00000 	.word	0x7ff00000
 80195f0:	7fefffff 	.word	0x7fefffff
 80195f4:	39500000 	.word	0x39500000
 80195f8:	3ff00000 	.word	0x3ff00000
 80195fc:	7fe00000 	.word	0x7fe00000
 8019600:	7c9fffff 	.word	0x7c9fffff
 8019604:	3fe00000 	.word	0x3fe00000
 8019608:	bff00000 	.word	0xbff00000
 801960c:	9b04      	ldr	r3, [sp, #16]
 801960e:	b333      	cbz	r3, 801965e <_strtod_l+0xb7e>
 8019610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019612:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019616:	d822      	bhi.n	801965e <_strtod_l+0xb7e>
 8019618:	a327      	add	r3, pc, #156	; (adr r3, 80196b8 <_strtod_l+0xbd8>)
 801961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961e:	4630      	mov	r0, r6
 8019620:	4639      	mov	r1, r7
 8019622:	f7e7 fa75 	bl	8000b10 <__aeabi_dcmple>
 8019626:	b1a0      	cbz	r0, 8019652 <_strtod_l+0xb72>
 8019628:	4639      	mov	r1, r7
 801962a:	4630      	mov	r0, r6
 801962c:	f7e7 facc 	bl	8000bc8 <__aeabi_d2uiz>
 8019630:	2800      	cmp	r0, #0
 8019632:	bf08      	it	eq
 8019634:	2001      	moveq	r0, #1
 8019636:	f7e6 ff75 	bl	8000524 <__aeabi_ui2d>
 801963a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801963c:	4606      	mov	r6, r0
 801963e:	460f      	mov	r7, r1
 8019640:	bb03      	cbnz	r3, 8019684 <_strtod_l+0xba4>
 8019642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019646:	9012      	str	r0, [sp, #72]	; 0x48
 8019648:	9313      	str	r3, [sp, #76]	; 0x4c
 801964a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801964e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019656:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801965a:	1a9b      	subs	r3, r3, r2
 801965c:	930b      	str	r3, [sp, #44]	; 0x2c
 801965e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8019662:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8019666:	f001 fdf5 	bl	801b254 <__ulp>
 801966a:	4650      	mov	r0, sl
 801966c:	ec53 2b10 	vmov	r2, r3, d0
 8019670:	4659      	mov	r1, fp
 8019672:	f7e6 ffd1 	bl	8000618 <__aeabi_dmul>
 8019676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801967a:	f7e6 fe17 	bl	80002ac <__adddf3>
 801967e:	4682      	mov	sl, r0
 8019680:	468b      	mov	fp, r1
 8019682:	e772      	b.n	801956a <_strtod_l+0xa8a>
 8019684:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8019688:	e7df      	b.n	801964a <_strtod_l+0xb6a>
 801968a:	a30d      	add	r3, pc, #52	; (adr r3, 80196c0 <_strtod_l+0xbe0>)
 801968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019690:	f7e7 fa34 	bl	8000afc <__aeabi_dcmplt>
 8019694:	e79c      	b.n	80195d0 <_strtod_l+0xaf0>
 8019696:	2300      	movs	r3, #0
 8019698:	930d      	str	r3, [sp, #52]	; 0x34
 801969a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801969c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801969e:	6013      	str	r3, [r2, #0]
 80196a0:	f7ff ba61 	b.w	8018b66 <_strtod_l+0x86>
 80196a4:	2b65      	cmp	r3, #101	; 0x65
 80196a6:	f04f 0200 	mov.w	r2, #0
 80196aa:	f43f ab4e 	beq.w	8018d4a <_strtod_l+0x26a>
 80196ae:	2101      	movs	r1, #1
 80196b0:	4614      	mov	r4, r2
 80196b2:	9104      	str	r1, [sp, #16]
 80196b4:	f7ff bacb 	b.w	8018c4e <_strtod_l+0x16e>
 80196b8:	ffc00000 	.word	0xffc00000
 80196bc:	41dfffff 	.word	0x41dfffff
 80196c0:	94a03595 	.word	0x94a03595
 80196c4:	3fcfffff 	.word	0x3fcfffff

080196c8 <strtod>:
 80196c8:	4b07      	ldr	r3, [pc, #28]	; (80196e8 <strtod+0x20>)
 80196ca:	4a08      	ldr	r2, [pc, #32]	; (80196ec <strtod+0x24>)
 80196cc:	b410      	push	{r4}
 80196ce:	681c      	ldr	r4, [r3, #0]
 80196d0:	6a23      	ldr	r3, [r4, #32]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	bf08      	it	eq
 80196d6:	4613      	moveq	r3, r2
 80196d8:	460a      	mov	r2, r1
 80196da:	4601      	mov	r1, r0
 80196dc:	4620      	mov	r0, r4
 80196de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196e2:	f7ff b9fd 	b.w	8018ae0 <_strtod_l>
 80196e6:	bf00      	nop
 80196e8:	20000074 	.word	0x20000074
 80196ec:	200000d8 	.word	0x200000d8

080196f0 <_strtol_l.isra.0>:
 80196f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196f4:	4680      	mov	r8, r0
 80196f6:	4689      	mov	r9, r1
 80196f8:	4692      	mov	sl, r2
 80196fa:	461e      	mov	r6, r3
 80196fc:	460f      	mov	r7, r1
 80196fe:	463d      	mov	r5, r7
 8019700:	9808      	ldr	r0, [sp, #32]
 8019702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019706:	f7fe fb7f 	bl	8017e08 <__locale_ctype_ptr_l>
 801970a:	4420      	add	r0, r4
 801970c:	7843      	ldrb	r3, [r0, #1]
 801970e:	f013 0308 	ands.w	r3, r3, #8
 8019712:	d132      	bne.n	801977a <_strtol_l.isra.0+0x8a>
 8019714:	2c2d      	cmp	r4, #45	; 0x2d
 8019716:	d132      	bne.n	801977e <_strtol_l.isra.0+0x8e>
 8019718:	787c      	ldrb	r4, [r7, #1]
 801971a:	1cbd      	adds	r5, r7, #2
 801971c:	2201      	movs	r2, #1
 801971e:	2e00      	cmp	r6, #0
 8019720:	d05d      	beq.n	80197de <_strtol_l.isra.0+0xee>
 8019722:	2e10      	cmp	r6, #16
 8019724:	d109      	bne.n	801973a <_strtol_l.isra.0+0x4a>
 8019726:	2c30      	cmp	r4, #48	; 0x30
 8019728:	d107      	bne.n	801973a <_strtol_l.isra.0+0x4a>
 801972a:	782b      	ldrb	r3, [r5, #0]
 801972c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019730:	2b58      	cmp	r3, #88	; 0x58
 8019732:	d14f      	bne.n	80197d4 <_strtol_l.isra.0+0xe4>
 8019734:	786c      	ldrb	r4, [r5, #1]
 8019736:	2610      	movs	r6, #16
 8019738:	3502      	adds	r5, #2
 801973a:	2a00      	cmp	r2, #0
 801973c:	bf14      	ite	ne
 801973e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8019742:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8019746:	2700      	movs	r7, #0
 8019748:	fbb1 fcf6 	udiv	ip, r1, r6
 801974c:	4638      	mov	r0, r7
 801974e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8019752:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019756:	2b09      	cmp	r3, #9
 8019758:	d817      	bhi.n	801978a <_strtol_l.isra.0+0x9a>
 801975a:	461c      	mov	r4, r3
 801975c:	42a6      	cmp	r6, r4
 801975e:	dd23      	ble.n	80197a8 <_strtol_l.isra.0+0xb8>
 8019760:	1c7b      	adds	r3, r7, #1
 8019762:	d007      	beq.n	8019774 <_strtol_l.isra.0+0x84>
 8019764:	4584      	cmp	ip, r0
 8019766:	d31c      	bcc.n	80197a2 <_strtol_l.isra.0+0xb2>
 8019768:	d101      	bne.n	801976e <_strtol_l.isra.0+0x7e>
 801976a:	45a6      	cmp	lr, r4
 801976c:	db19      	blt.n	80197a2 <_strtol_l.isra.0+0xb2>
 801976e:	fb00 4006 	mla	r0, r0, r6, r4
 8019772:	2701      	movs	r7, #1
 8019774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019778:	e7eb      	b.n	8019752 <_strtol_l.isra.0+0x62>
 801977a:	462f      	mov	r7, r5
 801977c:	e7bf      	b.n	80196fe <_strtol_l.isra.0+0xe>
 801977e:	2c2b      	cmp	r4, #43	; 0x2b
 8019780:	bf04      	itt	eq
 8019782:	1cbd      	addeq	r5, r7, #2
 8019784:	787c      	ldrbeq	r4, [r7, #1]
 8019786:	461a      	mov	r2, r3
 8019788:	e7c9      	b.n	801971e <_strtol_l.isra.0+0x2e>
 801978a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801978e:	2b19      	cmp	r3, #25
 8019790:	d801      	bhi.n	8019796 <_strtol_l.isra.0+0xa6>
 8019792:	3c37      	subs	r4, #55	; 0x37
 8019794:	e7e2      	b.n	801975c <_strtol_l.isra.0+0x6c>
 8019796:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801979a:	2b19      	cmp	r3, #25
 801979c:	d804      	bhi.n	80197a8 <_strtol_l.isra.0+0xb8>
 801979e:	3c57      	subs	r4, #87	; 0x57
 80197a0:	e7dc      	b.n	801975c <_strtol_l.isra.0+0x6c>
 80197a2:	f04f 37ff 	mov.w	r7, #4294967295
 80197a6:	e7e5      	b.n	8019774 <_strtol_l.isra.0+0x84>
 80197a8:	1c7b      	adds	r3, r7, #1
 80197aa:	d108      	bne.n	80197be <_strtol_l.isra.0+0xce>
 80197ac:	2322      	movs	r3, #34	; 0x22
 80197ae:	f8c8 3000 	str.w	r3, [r8]
 80197b2:	4608      	mov	r0, r1
 80197b4:	f1ba 0f00 	cmp.w	sl, #0
 80197b8:	d107      	bne.n	80197ca <_strtol_l.isra.0+0xda>
 80197ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197be:	b102      	cbz	r2, 80197c2 <_strtol_l.isra.0+0xd2>
 80197c0:	4240      	negs	r0, r0
 80197c2:	f1ba 0f00 	cmp.w	sl, #0
 80197c6:	d0f8      	beq.n	80197ba <_strtol_l.isra.0+0xca>
 80197c8:	b10f      	cbz	r7, 80197ce <_strtol_l.isra.0+0xde>
 80197ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80197ce:	f8ca 9000 	str.w	r9, [sl]
 80197d2:	e7f2      	b.n	80197ba <_strtol_l.isra.0+0xca>
 80197d4:	2430      	movs	r4, #48	; 0x30
 80197d6:	2e00      	cmp	r6, #0
 80197d8:	d1af      	bne.n	801973a <_strtol_l.isra.0+0x4a>
 80197da:	2608      	movs	r6, #8
 80197dc:	e7ad      	b.n	801973a <_strtol_l.isra.0+0x4a>
 80197de:	2c30      	cmp	r4, #48	; 0x30
 80197e0:	d0a3      	beq.n	801972a <_strtol_l.isra.0+0x3a>
 80197e2:	260a      	movs	r6, #10
 80197e4:	e7a9      	b.n	801973a <_strtol_l.isra.0+0x4a>
	...

080197e8 <strtol>:
 80197e8:	4b08      	ldr	r3, [pc, #32]	; (801980c <strtol+0x24>)
 80197ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197ec:	681c      	ldr	r4, [r3, #0]
 80197ee:	4d08      	ldr	r5, [pc, #32]	; (8019810 <strtol+0x28>)
 80197f0:	6a23      	ldr	r3, [r4, #32]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	bf08      	it	eq
 80197f6:	462b      	moveq	r3, r5
 80197f8:	9300      	str	r3, [sp, #0]
 80197fa:	4613      	mov	r3, r2
 80197fc:	460a      	mov	r2, r1
 80197fe:	4601      	mov	r1, r0
 8019800:	4620      	mov	r0, r4
 8019802:	f7ff ff75 	bl	80196f0 <_strtol_l.isra.0>
 8019806:	b003      	add	sp, #12
 8019808:	bd30      	pop	{r4, r5, pc}
 801980a:	bf00      	nop
 801980c:	20000074 	.word	0x20000074
 8019810:	200000d8 	.word	0x200000d8

08019814 <__ascii_wctomb>:
 8019814:	b149      	cbz	r1, 801982a <__ascii_wctomb+0x16>
 8019816:	2aff      	cmp	r2, #255	; 0xff
 8019818:	bf85      	ittet	hi
 801981a:	238a      	movhi	r3, #138	; 0x8a
 801981c:	6003      	strhi	r3, [r0, #0]
 801981e:	700a      	strbls	r2, [r1, #0]
 8019820:	f04f 30ff 	movhi.w	r0, #4294967295
 8019824:	bf98      	it	ls
 8019826:	2001      	movls	r0, #1
 8019828:	4770      	bx	lr
 801982a:	4608      	mov	r0, r1
 801982c:	4770      	bx	lr

0801982e <quorem>:
 801982e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019832:	6903      	ldr	r3, [r0, #16]
 8019834:	690c      	ldr	r4, [r1, #16]
 8019836:	42a3      	cmp	r3, r4
 8019838:	4680      	mov	r8, r0
 801983a:	f2c0 8082 	blt.w	8019942 <quorem+0x114>
 801983e:	3c01      	subs	r4, #1
 8019840:	f101 0714 	add.w	r7, r1, #20
 8019844:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8019848:	f100 0614 	add.w	r6, r0, #20
 801984c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8019850:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8019854:	eb06 030c 	add.w	r3, r6, ip
 8019858:	3501      	adds	r5, #1
 801985a:	eb07 090c 	add.w	r9, r7, ip
 801985e:	9301      	str	r3, [sp, #4]
 8019860:	fbb0 f5f5 	udiv	r5, r0, r5
 8019864:	b395      	cbz	r5, 80198cc <quorem+0x9e>
 8019866:	f04f 0a00 	mov.w	sl, #0
 801986a:	4638      	mov	r0, r7
 801986c:	46b6      	mov	lr, r6
 801986e:	46d3      	mov	fp, sl
 8019870:	f850 2b04 	ldr.w	r2, [r0], #4
 8019874:	b293      	uxth	r3, r2
 8019876:	fb05 a303 	mla	r3, r5, r3, sl
 801987a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801987e:	b29b      	uxth	r3, r3
 8019880:	ebab 0303 	sub.w	r3, fp, r3
 8019884:	0c12      	lsrs	r2, r2, #16
 8019886:	f8de b000 	ldr.w	fp, [lr]
 801988a:	fb05 a202 	mla	r2, r5, r2, sl
 801988e:	fa13 f38b 	uxtah	r3, r3, fp
 8019892:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8019896:	fa1f fb82 	uxth.w	fp, r2
 801989a:	f8de 2000 	ldr.w	r2, [lr]
 801989e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80198a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80198ac:	4581      	cmp	r9, r0
 80198ae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80198b2:	f84e 3b04 	str.w	r3, [lr], #4
 80198b6:	d2db      	bcs.n	8019870 <quorem+0x42>
 80198b8:	f856 300c 	ldr.w	r3, [r6, ip]
 80198bc:	b933      	cbnz	r3, 80198cc <quorem+0x9e>
 80198be:	9b01      	ldr	r3, [sp, #4]
 80198c0:	3b04      	subs	r3, #4
 80198c2:	429e      	cmp	r6, r3
 80198c4:	461a      	mov	r2, r3
 80198c6:	d330      	bcc.n	801992a <quorem+0xfc>
 80198c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80198cc:	4640      	mov	r0, r8
 80198ce:	f001 fc49 	bl	801b164 <__mcmp>
 80198d2:	2800      	cmp	r0, #0
 80198d4:	db25      	blt.n	8019922 <quorem+0xf4>
 80198d6:	3501      	adds	r5, #1
 80198d8:	4630      	mov	r0, r6
 80198da:	f04f 0c00 	mov.w	ip, #0
 80198de:	f857 2b04 	ldr.w	r2, [r7], #4
 80198e2:	f8d0 e000 	ldr.w	lr, [r0]
 80198e6:	b293      	uxth	r3, r2
 80198e8:	ebac 0303 	sub.w	r3, ip, r3
 80198ec:	0c12      	lsrs	r2, r2, #16
 80198ee:	fa13 f38e 	uxtah	r3, r3, lr
 80198f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80198f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80198fa:	b29b      	uxth	r3, r3
 80198fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019900:	45b9      	cmp	r9, r7
 8019902:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019906:	f840 3b04 	str.w	r3, [r0], #4
 801990a:	d2e8      	bcs.n	80198de <quorem+0xb0>
 801990c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8019910:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019914:	b92a      	cbnz	r2, 8019922 <quorem+0xf4>
 8019916:	3b04      	subs	r3, #4
 8019918:	429e      	cmp	r6, r3
 801991a:	461a      	mov	r2, r3
 801991c:	d30b      	bcc.n	8019936 <quorem+0x108>
 801991e:	f8c8 4010 	str.w	r4, [r8, #16]
 8019922:	4628      	mov	r0, r5
 8019924:	b003      	add	sp, #12
 8019926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992a:	6812      	ldr	r2, [r2, #0]
 801992c:	3b04      	subs	r3, #4
 801992e:	2a00      	cmp	r2, #0
 8019930:	d1ca      	bne.n	80198c8 <quorem+0x9a>
 8019932:	3c01      	subs	r4, #1
 8019934:	e7c5      	b.n	80198c2 <quorem+0x94>
 8019936:	6812      	ldr	r2, [r2, #0]
 8019938:	3b04      	subs	r3, #4
 801993a:	2a00      	cmp	r2, #0
 801993c:	d1ef      	bne.n	801991e <quorem+0xf0>
 801993e:	3c01      	subs	r4, #1
 8019940:	e7ea      	b.n	8019918 <quorem+0xea>
 8019942:	2000      	movs	r0, #0
 8019944:	e7ee      	b.n	8019924 <quorem+0xf6>
	...

08019948 <_dtoa_r>:
 8019948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801994c:	ec57 6b10 	vmov	r6, r7, d0
 8019950:	b097      	sub	sp, #92	; 0x5c
 8019952:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019954:	9106      	str	r1, [sp, #24]
 8019956:	4604      	mov	r4, r0
 8019958:	920b      	str	r2, [sp, #44]	; 0x2c
 801995a:	9312      	str	r3, [sp, #72]	; 0x48
 801995c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019960:	e9cd 6700 	strd	r6, r7, [sp]
 8019964:	b93d      	cbnz	r5, 8019976 <_dtoa_r+0x2e>
 8019966:	2010      	movs	r0, #16
 8019968:	f7fe fa60 	bl	8017e2c <malloc>
 801996c:	6260      	str	r0, [r4, #36]	; 0x24
 801996e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019972:	6005      	str	r5, [r0, #0]
 8019974:	60c5      	str	r5, [r0, #12]
 8019976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019978:	6819      	ldr	r1, [r3, #0]
 801997a:	b151      	cbz	r1, 8019992 <_dtoa_r+0x4a>
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	604a      	str	r2, [r1, #4]
 8019980:	2301      	movs	r3, #1
 8019982:	4093      	lsls	r3, r2
 8019984:	608b      	str	r3, [r1, #8]
 8019986:	4620      	mov	r0, r4
 8019988:	f001 f9cc 	bl	801ad24 <_Bfree>
 801998c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801998e:	2200      	movs	r2, #0
 8019990:	601a      	str	r2, [r3, #0]
 8019992:	1e3b      	subs	r3, r7, #0
 8019994:	bfbb      	ittet	lt
 8019996:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801999a:	9301      	strlt	r3, [sp, #4]
 801999c:	2300      	movge	r3, #0
 801999e:	2201      	movlt	r2, #1
 80199a0:	bfac      	ite	ge
 80199a2:	f8c8 3000 	strge.w	r3, [r8]
 80199a6:	f8c8 2000 	strlt.w	r2, [r8]
 80199aa:	4baf      	ldr	r3, [pc, #700]	; (8019c68 <_dtoa_r+0x320>)
 80199ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80199b0:	ea33 0308 	bics.w	r3, r3, r8
 80199b4:	d114      	bne.n	80199e0 <_dtoa_r+0x98>
 80199b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80199b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80199bc:	6013      	str	r3, [r2, #0]
 80199be:	9b00      	ldr	r3, [sp, #0]
 80199c0:	b923      	cbnz	r3, 80199cc <_dtoa_r+0x84>
 80199c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80199c6:	2800      	cmp	r0, #0
 80199c8:	f000 8542 	beq.w	801a450 <_dtoa_r+0xb08>
 80199cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80199ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8019c7c <_dtoa_r+0x334>
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	f000 8544 	beq.w	801a460 <_dtoa_r+0xb18>
 80199d8:	f10b 0303 	add.w	r3, fp, #3
 80199dc:	f000 bd3e 	b.w	801a45c <_dtoa_r+0xb14>
 80199e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80199e4:	2200      	movs	r2, #0
 80199e6:	2300      	movs	r3, #0
 80199e8:	4630      	mov	r0, r6
 80199ea:	4639      	mov	r1, r7
 80199ec:	f7e7 f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 80199f0:	4681      	mov	r9, r0
 80199f2:	b168      	cbz	r0, 8019a10 <_dtoa_r+0xc8>
 80199f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80199f6:	2301      	movs	r3, #1
 80199f8:	6013      	str	r3, [r2, #0]
 80199fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	f000 8524 	beq.w	801a44a <_dtoa_r+0xb02>
 8019a02:	4b9a      	ldr	r3, [pc, #616]	; (8019c6c <_dtoa_r+0x324>)
 8019a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019a06:	f103 3bff 	add.w	fp, r3, #4294967295
 8019a0a:	6013      	str	r3, [r2, #0]
 8019a0c:	f000 bd28 	b.w	801a460 <_dtoa_r+0xb18>
 8019a10:	aa14      	add	r2, sp, #80	; 0x50
 8019a12:	a915      	add	r1, sp, #84	; 0x54
 8019a14:	ec47 6b10 	vmov	d0, r6, r7
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f001 fc91 	bl	801b340 <__d2b>
 8019a1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8019a22:	9004      	str	r0, [sp, #16]
 8019a24:	2d00      	cmp	r5, #0
 8019a26:	d07c      	beq.n	8019b22 <_dtoa_r+0x1da>
 8019a28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8019a30:	46b2      	mov	sl, r6
 8019a32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8019a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019a3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8019a3e:	2200      	movs	r2, #0
 8019a40:	4b8b      	ldr	r3, [pc, #556]	; (8019c70 <_dtoa_r+0x328>)
 8019a42:	4650      	mov	r0, sl
 8019a44:	4659      	mov	r1, fp
 8019a46:	f7e6 fc2f 	bl	80002a8 <__aeabi_dsub>
 8019a4a:	a381      	add	r3, pc, #516	; (adr r3, 8019c50 <_dtoa_r+0x308>)
 8019a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a50:	f7e6 fde2 	bl	8000618 <__aeabi_dmul>
 8019a54:	a380      	add	r3, pc, #512	; (adr r3, 8019c58 <_dtoa_r+0x310>)
 8019a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a5a:	f7e6 fc27 	bl	80002ac <__adddf3>
 8019a5e:	4606      	mov	r6, r0
 8019a60:	4628      	mov	r0, r5
 8019a62:	460f      	mov	r7, r1
 8019a64:	f7e6 fd6e 	bl	8000544 <__aeabi_i2d>
 8019a68:	a37d      	add	r3, pc, #500	; (adr r3, 8019c60 <_dtoa_r+0x318>)
 8019a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a6e:	f7e6 fdd3 	bl	8000618 <__aeabi_dmul>
 8019a72:	4602      	mov	r2, r0
 8019a74:	460b      	mov	r3, r1
 8019a76:	4630      	mov	r0, r6
 8019a78:	4639      	mov	r1, r7
 8019a7a:	f7e6 fc17 	bl	80002ac <__adddf3>
 8019a7e:	4606      	mov	r6, r0
 8019a80:	460f      	mov	r7, r1
 8019a82:	f7e7 f879 	bl	8000b78 <__aeabi_d2iz>
 8019a86:	2200      	movs	r2, #0
 8019a88:	4682      	mov	sl, r0
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	4639      	mov	r1, r7
 8019a90:	f7e7 f834 	bl	8000afc <__aeabi_dcmplt>
 8019a94:	b148      	cbz	r0, 8019aaa <_dtoa_r+0x162>
 8019a96:	4650      	mov	r0, sl
 8019a98:	f7e6 fd54 	bl	8000544 <__aeabi_i2d>
 8019a9c:	4632      	mov	r2, r6
 8019a9e:	463b      	mov	r3, r7
 8019aa0:	f7e7 f822 	bl	8000ae8 <__aeabi_dcmpeq>
 8019aa4:	b908      	cbnz	r0, 8019aaa <_dtoa_r+0x162>
 8019aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019aaa:	f1ba 0f16 	cmp.w	sl, #22
 8019aae:	d859      	bhi.n	8019b64 <_dtoa_r+0x21c>
 8019ab0:	4970      	ldr	r1, [pc, #448]	; (8019c74 <_dtoa_r+0x32c>)
 8019ab2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019abe:	f7e7 f83b 	bl	8000b38 <__aeabi_dcmpgt>
 8019ac2:	2800      	cmp	r0, #0
 8019ac4:	d050      	beq.n	8019b68 <_dtoa_r+0x220>
 8019ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019aca:	2300      	movs	r3, #0
 8019acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ad0:	1b5d      	subs	r5, r3, r5
 8019ad2:	f1b5 0801 	subs.w	r8, r5, #1
 8019ad6:	bf49      	itett	mi
 8019ad8:	f1c5 0301 	rsbmi	r3, r5, #1
 8019adc:	2300      	movpl	r3, #0
 8019ade:	9305      	strmi	r3, [sp, #20]
 8019ae0:	f04f 0800 	movmi.w	r8, #0
 8019ae4:	bf58      	it	pl
 8019ae6:	9305      	strpl	r3, [sp, #20]
 8019ae8:	f1ba 0f00 	cmp.w	sl, #0
 8019aec:	db3e      	blt.n	8019b6c <_dtoa_r+0x224>
 8019aee:	2300      	movs	r3, #0
 8019af0:	44d0      	add	r8, sl
 8019af2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8019af6:	9307      	str	r3, [sp, #28]
 8019af8:	9b06      	ldr	r3, [sp, #24]
 8019afa:	2b09      	cmp	r3, #9
 8019afc:	f200 8090 	bhi.w	8019c20 <_dtoa_r+0x2d8>
 8019b00:	2b05      	cmp	r3, #5
 8019b02:	bfc4      	itt	gt
 8019b04:	3b04      	subgt	r3, #4
 8019b06:	9306      	strgt	r3, [sp, #24]
 8019b08:	9b06      	ldr	r3, [sp, #24]
 8019b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8019b0e:	bfcc      	ite	gt
 8019b10:	2500      	movgt	r5, #0
 8019b12:	2501      	movle	r5, #1
 8019b14:	2b03      	cmp	r3, #3
 8019b16:	f200 808f 	bhi.w	8019c38 <_dtoa_r+0x2f0>
 8019b1a:	e8df f003 	tbb	[pc, r3]
 8019b1e:	7f7d      	.short	0x7f7d
 8019b20:	7131      	.short	0x7131
 8019b22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8019b26:	441d      	add	r5, r3
 8019b28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8019b2c:	2820      	cmp	r0, #32
 8019b2e:	dd13      	ble.n	8019b58 <_dtoa_r+0x210>
 8019b30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8019b34:	9b00      	ldr	r3, [sp, #0]
 8019b36:	fa08 f800 	lsl.w	r8, r8, r0
 8019b3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8019b3e:	fa23 f000 	lsr.w	r0, r3, r0
 8019b42:	ea48 0000 	orr.w	r0, r8, r0
 8019b46:	f7e6 fced 	bl	8000524 <__aeabi_ui2d>
 8019b4a:	2301      	movs	r3, #1
 8019b4c:	4682      	mov	sl, r0
 8019b4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8019b52:	3d01      	subs	r5, #1
 8019b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b56:	e772      	b.n	8019a3e <_dtoa_r+0xf6>
 8019b58:	9b00      	ldr	r3, [sp, #0]
 8019b5a:	f1c0 0020 	rsb	r0, r0, #32
 8019b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8019b62:	e7f0      	b.n	8019b46 <_dtoa_r+0x1fe>
 8019b64:	2301      	movs	r3, #1
 8019b66:	e7b1      	b.n	8019acc <_dtoa_r+0x184>
 8019b68:	900f      	str	r0, [sp, #60]	; 0x3c
 8019b6a:	e7b0      	b.n	8019ace <_dtoa_r+0x186>
 8019b6c:	9b05      	ldr	r3, [sp, #20]
 8019b6e:	eba3 030a 	sub.w	r3, r3, sl
 8019b72:	9305      	str	r3, [sp, #20]
 8019b74:	f1ca 0300 	rsb	r3, sl, #0
 8019b78:	9307      	str	r3, [sp, #28]
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8019b7e:	e7bb      	b.n	8019af8 <_dtoa_r+0x1b0>
 8019b80:	2301      	movs	r3, #1
 8019b82:	930a      	str	r3, [sp, #40]	; 0x28
 8019b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	dd59      	ble.n	8019c3e <_dtoa_r+0x2f6>
 8019b8a:	9302      	str	r3, [sp, #8]
 8019b8c:	4699      	mov	r9, r3
 8019b8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019b90:	2200      	movs	r2, #0
 8019b92:	6072      	str	r2, [r6, #4]
 8019b94:	2204      	movs	r2, #4
 8019b96:	f102 0014 	add.w	r0, r2, #20
 8019b9a:	4298      	cmp	r0, r3
 8019b9c:	6871      	ldr	r1, [r6, #4]
 8019b9e:	d953      	bls.n	8019c48 <_dtoa_r+0x300>
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f001 f88b 	bl	801acbc <_Balloc>
 8019ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ba8:	6030      	str	r0, [r6, #0]
 8019baa:	f1b9 0f0e 	cmp.w	r9, #14
 8019bae:	f8d3 b000 	ldr.w	fp, [r3]
 8019bb2:	f200 80e6 	bhi.w	8019d82 <_dtoa_r+0x43a>
 8019bb6:	2d00      	cmp	r5, #0
 8019bb8:	f000 80e3 	beq.w	8019d82 <_dtoa_r+0x43a>
 8019bbc:	ed9d 7b00 	vldr	d7, [sp]
 8019bc0:	f1ba 0f00 	cmp.w	sl, #0
 8019bc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8019bc8:	dd74      	ble.n	8019cb4 <_dtoa_r+0x36c>
 8019bca:	4a2a      	ldr	r2, [pc, #168]	; (8019c74 <_dtoa_r+0x32c>)
 8019bcc:	f00a 030f 	and.w	r3, sl, #15
 8019bd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019bd4:	ed93 7b00 	vldr	d7, [r3]
 8019bd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8019bdc:	06f0      	lsls	r0, r6, #27
 8019bde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019be2:	d565      	bpl.n	8019cb0 <_dtoa_r+0x368>
 8019be4:	4b24      	ldr	r3, [pc, #144]	; (8019c78 <_dtoa_r+0x330>)
 8019be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019bea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019bee:	f7e6 fe3d 	bl	800086c <__aeabi_ddiv>
 8019bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8019bf6:	f006 060f 	and.w	r6, r6, #15
 8019bfa:	2503      	movs	r5, #3
 8019bfc:	4f1e      	ldr	r7, [pc, #120]	; (8019c78 <_dtoa_r+0x330>)
 8019bfe:	e04c      	b.n	8019c9a <_dtoa_r+0x352>
 8019c00:	2301      	movs	r3, #1
 8019c02:	930a      	str	r3, [sp, #40]	; 0x28
 8019c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c06:	4453      	add	r3, sl
 8019c08:	f103 0901 	add.w	r9, r3, #1
 8019c0c:	9302      	str	r3, [sp, #8]
 8019c0e:	464b      	mov	r3, r9
 8019c10:	2b01      	cmp	r3, #1
 8019c12:	bfb8      	it	lt
 8019c14:	2301      	movlt	r3, #1
 8019c16:	e7ba      	b.n	8019b8e <_dtoa_r+0x246>
 8019c18:	2300      	movs	r3, #0
 8019c1a:	e7b2      	b.n	8019b82 <_dtoa_r+0x23a>
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	e7f0      	b.n	8019c02 <_dtoa_r+0x2ba>
 8019c20:	2501      	movs	r5, #1
 8019c22:	2300      	movs	r3, #0
 8019c24:	9306      	str	r3, [sp, #24]
 8019c26:	950a      	str	r5, [sp, #40]	; 0x28
 8019c28:	f04f 33ff 	mov.w	r3, #4294967295
 8019c2c:	9302      	str	r3, [sp, #8]
 8019c2e:	4699      	mov	r9, r3
 8019c30:	2200      	movs	r2, #0
 8019c32:	2312      	movs	r3, #18
 8019c34:	920b      	str	r2, [sp, #44]	; 0x2c
 8019c36:	e7aa      	b.n	8019b8e <_dtoa_r+0x246>
 8019c38:	2301      	movs	r3, #1
 8019c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8019c3c:	e7f4      	b.n	8019c28 <_dtoa_r+0x2e0>
 8019c3e:	2301      	movs	r3, #1
 8019c40:	9302      	str	r3, [sp, #8]
 8019c42:	4699      	mov	r9, r3
 8019c44:	461a      	mov	r2, r3
 8019c46:	e7f5      	b.n	8019c34 <_dtoa_r+0x2ec>
 8019c48:	3101      	adds	r1, #1
 8019c4a:	6071      	str	r1, [r6, #4]
 8019c4c:	0052      	lsls	r2, r2, #1
 8019c4e:	e7a2      	b.n	8019b96 <_dtoa_r+0x24e>
 8019c50:	636f4361 	.word	0x636f4361
 8019c54:	3fd287a7 	.word	0x3fd287a7
 8019c58:	8b60c8b3 	.word	0x8b60c8b3
 8019c5c:	3fc68a28 	.word	0x3fc68a28
 8019c60:	509f79fb 	.word	0x509f79fb
 8019c64:	3fd34413 	.word	0x3fd34413
 8019c68:	7ff00000 	.word	0x7ff00000
 8019c6c:	08020aaf 	.word	0x08020aaf
 8019c70:	3ff80000 	.word	0x3ff80000
 8019c74:	08020cc0 	.word	0x08020cc0
 8019c78:	08020c98 	.word	0x08020c98
 8019c7c:	08020c32 	.word	0x08020c32
 8019c80:	07f1      	lsls	r1, r6, #31
 8019c82:	d508      	bpl.n	8019c96 <_dtoa_r+0x34e>
 8019c84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019c8c:	f7e6 fcc4 	bl	8000618 <__aeabi_dmul>
 8019c90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019c94:	3501      	adds	r5, #1
 8019c96:	1076      	asrs	r6, r6, #1
 8019c98:	3708      	adds	r7, #8
 8019c9a:	2e00      	cmp	r6, #0
 8019c9c:	d1f0      	bne.n	8019c80 <_dtoa_r+0x338>
 8019c9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ca6:	f7e6 fde1 	bl	800086c <__aeabi_ddiv>
 8019caa:	e9cd 0100 	strd	r0, r1, [sp]
 8019cae:	e01a      	b.n	8019ce6 <_dtoa_r+0x39e>
 8019cb0:	2502      	movs	r5, #2
 8019cb2:	e7a3      	b.n	8019bfc <_dtoa_r+0x2b4>
 8019cb4:	f000 80a0 	beq.w	8019df8 <_dtoa_r+0x4b0>
 8019cb8:	f1ca 0600 	rsb	r6, sl, #0
 8019cbc:	4b9f      	ldr	r3, [pc, #636]	; (8019f3c <_dtoa_r+0x5f4>)
 8019cbe:	4fa0      	ldr	r7, [pc, #640]	; (8019f40 <_dtoa_r+0x5f8>)
 8019cc0:	f006 020f 	and.w	r2, r6, #15
 8019cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ccc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019cd0:	f7e6 fca2 	bl	8000618 <__aeabi_dmul>
 8019cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8019cd8:	1136      	asrs	r6, r6, #4
 8019cda:	2300      	movs	r3, #0
 8019cdc:	2502      	movs	r5, #2
 8019cde:	2e00      	cmp	r6, #0
 8019ce0:	d17f      	bne.n	8019de2 <_dtoa_r+0x49a>
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1e1      	bne.n	8019caa <_dtoa_r+0x362>
 8019ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	f000 8087 	beq.w	8019dfc <_dtoa_r+0x4b4>
 8019cee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	4b93      	ldr	r3, [pc, #588]	; (8019f44 <_dtoa_r+0x5fc>)
 8019cf6:	4630      	mov	r0, r6
 8019cf8:	4639      	mov	r1, r7
 8019cfa:	f7e6 feff 	bl	8000afc <__aeabi_dcmplt>
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	d07c      	beq.n	8019dfc <_dtoa_r+0x4b4>
 8019d02:	f1b9 0f00 	cmp.w	r9, #0
 8019d06:	d079      	beq.n	8019dfc <_dtoa_r+0x4b4>
 8019d08:	9b02      	ldr	r3, [sp, #8]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	dd35      	ble.n	8019d7a <_dtoa_r+0x432>
 8019d0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019d12:	9308      	str	r3, [sp, #32]
 8019d14:	4639      	mov	r1, r7
 8019d16:	2200      	movs	r2, #0
 8019d18:	4b8b      	ldr	r3, [pc, #556]	; (8019f48 <_dtoa_r+0x600>)
 8019d1a:	4630      	mov	r0, r6
 8019d1c:	f7e6 fc7c 	bl	8000618 <__aeabi_dmul>
 8019d20:	e9cd 0100 	strd	r0, r1, [sp]
 8019d24:	9f02      	ldr	r7, [sp, #8]
 8019d26:	3501      	adds	r5, #1
 8019d28:	4628      	mov	r0, r5
 8019d2a:	f7e6 fc0b 	bl	8000544 <__aeabi_i2d>
 8019d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d32:	f7e6 fc71 	bl	8000618 <__aeabi_dmul>
 8019d36:	2200      	movs	r2, #0
 8019d38:	4b84      	ldr	r3, [pc, #528]	; (8019f4c <_dtoa_r+0x604>)
 8019d3a:	f7e6 fab7 	bl	80002ac <__adddf3>
 8019d3e:	4605      	mov	r5, r0
 8019d40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8019d44:	2f00      	cmp	r7, #0
 8019d46:	d15d      	bne.n	8019e04 <_dtoa_r+0x4bc>
 8019d48:	2200      	movs	r2, #0
 8019d4a:	4b81      	ldr	r3, [pc, #516]	; (8019f50 <_dtoa_r+0x608>)
 8019d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d50:	f7e6 faaa 	bl	80002a8 <__aeabi_dsub>
 8019d54:	462a      	mov	r2, r5
 8019d56:	4633      	mov	r3, r6
 8019d58:	e9cd 0100 	strd	r0, r1, [sp]
 8019d5c:	f7e6 feec 	bl	8000b38 <__aeabi_dcmpgt>
 8019d60:	2800      	cmp	r0, #0
 8019d62:	f040 8288 	bne.w	801a276 <_dtoa_r+0x92e>
 8019d66:	462a      	mov	r2, r5
 8019d68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8019d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d70:	f7e6 fec4 	bl	8000afc <__aeabi_dcmplt>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	f040 827c 	bne.w	801a272 <_dtoa_r+0x92a>
 8019d7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8019d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f2c0 8150 	blt.w	801a02a <_dtoa_r+0x6e2>
 8019d8a:	f1ba 0f0e 	cmp.w	sl, #14
 8019d8e:	f300 814c 	bgt.w	801a02a <_dtoa_r+0x6e2>
 8019d92:	4b6a      	ldr	r3, [pc, #424]	; (8019f3c <_dtoa_r+0x5f4>)
 8019d94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019d98:	ed93 7b00 	vldr	d7, [r3]
 8019d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019da4:	f280 80d8 	bge.w	8019f58 <_dtoa_r+0x610>
 8019da8:	f1b9 0f00 	cmp.w	r9, #0
 8019dac:	f300 80d4 	bgt.w	8019f58 <_dtoa_r+0x610>
 8019db0:	f040 825e 	bne.w	801a270 <_dtoa_r+0x928>
 8019db4:	2200      	movs	r2, #0
 8019db6:	4b66      	ldr	r3, [pc, #408]	; (8019f50 <_dtoa_r+0x608>)
 8019db8:	ec51 0b17 	vmov	r0, r1, d7
 8019dbc:	f7e6 fc2c 	bl	8000618 <__aeabi_dmul>
 8019dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019dc4:	f7e6 feae 	bl	8000b24 <__aeabi_dcmpge>
 8019dc8:	464f      	mov	r7, r9
 8019dca:	464e      	mov	r6, r9
 8019dcc:	2800      	cmp	r0, #0
 8019dce:	f040 8234 	bne.w	801a23a <_dtoa_r+0x8f2>
 8019dd2:	2331      	movs	r3, #49	; 0x31
 8019dd4:	f10b 0501 	add.w	r5, fp, #1
 8019dd8:	f88b 3000 	strb.w	r3, [fp]
 8019ddc:	f10a 0a01 	add.w	sl, sl, #1
 8019de0:	e22f      	b.n	801a242 <_dtoa_r+0x8fa>
 8019de2:	07f2      	lsls	r2, r6, #31
 8019de4:	d505      	bpl.n	8019df2 <_dtoa_r+0x4aa>
 8019de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019dea:	f7e6 fc15 	bl	8000618 <__aeabi_dmul>
 8019dee:	3501      	adds	r5, #1
 8019df0:	2301      	movs	r3, #1
 8019df2:	1076      	asrs	r6, r6, #1
 8019df4:	3708      	adds	r7, #8
 8019df6:	e772      	b.n	8019cde <_dtoa_r+0x396>
 8019df8:	2502      	movs	r5, #2
 8019dfa:	e774      	b.n	8019ce6 <_dtoa_r+0x39e>
 8019dfc:	f8cd a020 	str.w	sl, [sp, #32]
 8019e00:	464f      	mov	r7, r9
 8019e02:	e791      	b.n	8019d28 <_dtoa_r+0x3e0>
 8019e04:	4b4d      	ldr	r3, [pc, #308]	; (8019f3c <_dtoa_r+0x5f4>)
 8019e06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019e0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8019e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d047      	beq.n	8019ea4 <_dtoa_r+0x55c>
 8019e14:	4602      	mov	r2, r0
 8019e16:	460b      	mov	r3, r1
 8019e18:	2000      	movs	r0, #0
 8019e1a:	494e      	ldr	r1, [pc, #312]	; (8019f54 <_dtoa_r+0x60c>)
 8019e1c:	f7e6 fd26 	bl	800086c <__aeabi_ddiv>
 8019e20:	462a      	mov	r2, r5
 8019e22:	4633      	mov	r3, r6
 8019e24:	f7e6 fa40 	bl	80002a8 <__aeabi_dsub>
 8019e28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019e2c:	465d      	mov	r5, fp
 8019e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e32:	f7e6 fea1 	bl	8000b78 <__aeabi_d2iz>
 8019e36:	4606      	mov	r6, r0
 8019e38:	f7e6 fb84 	bl	8000544 <__aeabi_i2d>
 8019e3c:	4602      	mov	r2, r0
 8019e3e:	460b      	mov	r3, r1
 8019e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e44:	f7e6 fa30 	bl	80002a8 <__aeabi_dsub>
 8019e48:	3630      	adds	r6, #48	; 0x30
 8019e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8019e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019e52:	e9cd 0100 	strd	r0, r1, [sp]
 8019e56:	f7e6 fe51 	bl	8000afc <__aeabi_dcmplt>
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	d163      	bne.n	8019f26 <_dtoa_r+0x5de>
 8019e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e62:	2000      	movs	r0, #0
 8019e64:	4937      	ldr	r1, [pc, #220]	; (8019f44 <_dtoa_r+0x5fc>)
 8019e66:	f7e6 fa1f 	bl	80002a8 <__aeabi_dsub>
 8019e6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019e6e:	f7e6 fe45 	bl	8000afc <__aeabi_dcmplt>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	f040 80b7 	bne.w	8019fe6 <_dtoa_r+0x69e>
 8019e78:	eba5 030b 	sub.w	r3, r5, fp
 8019e7c:	429f      	cmp	r7, r3
 8019e7e:	f77f af7c 	ble.w	8019d7a <_dtoa_r+0x432>
 8019e82:	2200      	movs	r2, #0
 8019e84:	4b30      	ldr	r3, [pc, #192]	; (8019f48 <_dtoa_r+0x600>)
 8019e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019e8a:	f7e6 fbc5 	bl	8000618 <__aeabi_dmul>
 8019e8e:	2200      	movs	r2, #0
 8019e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019e94:	4b2c      	ldr	r3, [pc, #176]	; (8019f48 <_dtoa_r+0x600>)
 8019e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e9a:	f7e6 fbbd 	bl	8000618 <__aeabi_dmul>
 8019e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8019ea2:	e7c4      	b.n	8019e2e <_dtoa_r+0x4e6>
 8019ea4:	462a      	mov	r2, r5
 8019ea6:	4633      	mov	r3, r6
 8019ea8:	f7e6 fbb6 	bl	8000618 <__aeabi_dmul>
 8019eac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019eb0:	eb0b 0507 	add.w	r5, fp, r7
 8019eb4:	465e      	mov	r6, fp
 8019eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019eba:	f7e6 fe5d 	bl	8000b78 <__aeabi_d2iz>
 8019ebe:	4607      	mov	r7, r0
 8019ec0:	f7e6 fb40 	bl	8000544 <__aeabi_i2d>
 8019ec4:	3730      	adds	r7, #48	; 0x30
 8019ec6:	4602      	mov	r2, r0
 8019ec8:	460b      	mov	r3, r1
 8019eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ece:	f7e6 f9eb 	bl	80002a8 <__aeabi_dsub>
 8019ed2:	f806 7b01 	strb.w	r7, [r6], #1
 8019ed6:	42ae      	cmp	r6, r5
 8019ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8019edc:	f04f 0200 	mov.w	r2, #0
 8019ee0:	d126      	bne.n	8019f30 <_dtoa_r+0x5e8>
 8019ee2:	4b1c      	ldr	r3, [pc, #112]	; (8019f54 <_dtoa_r+0x60c>)
 8019ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019ee8:	f7e6 f9e0 	bl	80002ac <__adddf3>
 8019eec:	4602      	mov	r2, r0
 8019eee:	460b      	mov	r3, r1
 8019ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ef4:	f7e6 fe20 	bl	8000b38 <__aeabi_dcmpgt>
 8019ef8:	2800      	cmp	r0, #0
 8019efa:	d174      	bne.n	8019fe6 <_dtoa_r+0x69e>
 8019efc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019f00:	2000      	movs	r0, #0
 8019f02:	4914      	ldr	r1, [pc, #80]	; (8019f54 <_dtoa_r+0x60c>)
 8019f04:	f7e6 f9d0 	bl	80002a8 <__aeabi_dsub>
 8019f08:	4602      	mov	r2, r0
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f10:	f7e6 fdf4 	bl	8000afc <__aeabi_dcmplt>
 8019f14:	2800      	cmp	r0, #0
 8019f16:	f43f af30 	beq.w	8019d7a <_dtoa_r+0x432>
 8019f1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019f1e:	2b30      	cmp	r3, #48	; 0x30
 8019f20:	f105 32ff 	add.w	r2, r5, #4294967295
 8019f24:	d002      	beq.n	8019f2c <_dtoa_r+0x5e4>
 8019f26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019f2a:	e04a      	b.n	8019fc2 <_dtoa_r+0x67a>
 8019f2c:	4615      	mov	r5, r2
 8019f2e:	e7f4      	b.n	8019f1a <_dtoa_r+0x5d2>
 8019f30:	4b05      	ldr	r3, [pc, #20]	; (8019f48 <_dtoa_r+0x600>)
 8019f32:	f7e6 fb71 	bl	8000618 <__aeabi_dmul>
 8019f36:	e9cd 0100 	strd	r0, r1, [sp]
 8019f3a:	e7bc      	b.n	8019eb6 <_dtoa_r+0x56e>
 8019f3c:	08020cc0 	.word	0x08020cc0
 8019f40:	08020c98 	.word	0x08020c98
 8019f44:	3ff00000 	.word	0x3ff00000
 8019f48:	40240000 	.word	0x40240000
 8019f4c:	401c0000 	.word	0x401c0000
 8019f50:	40140000 	.word	0x40140000
 8019f54:	3fe00000 	.word	0x3fe00000
 8019f58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019f5c:	465d      	mov	r5, fp
 8019f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019f62:	4630      	mov	r0, r6
 8019f64:	4639      	mov	r1, r7
 8019f66:	f7e6 fc81 	bl	800086c <__aeabi_ddiv>
 8019f6a:	f7e6 fe05 	bl	8000b78 <__aeabi_d2iz>
 8019f6e:	4680      	mov	r8, r0
 8019f70:	f7e6 fae8 	bl	8000544 <__aeabi_i2d>
 8019f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019f78:	f7e6 fb4e 	bl	8000618 <__aeabi_dmul>
 8019f7c:	4602      	mov	r2, r0
 8019f7e:	460b      	mov	r3, r1
 8019f80:	4630      	mov	r0, r6
 8019f82:	4639      	mov	r1, r7
 8019f84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019f88:	f7e6 f98e 	bl	80002a8 <__aeabi_dsub>
 8019f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8019f90:	eba5 060b 	sub.w	r6, r5, fp
 8019f94:	45b1      	cmp	r9, r6
 8019f96:	4602      	mov	r2, r0
 8019f98:	460b      	mov	r3, r1
 8019f9a:	d139      	bne.n	801a010 <_dtoa_r+0x6c8>
 8019f9c:	f7e6 f986 	bl	80002ac <__adddf3>
 8019fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019fa4:	4606      	mov	r6, r0
 8019fa6:	460f      	mov	r7, r1
 8019fa8:	f7e6 fdc6 	bl	8000b38 <__aeabi_dcmpgt>
 8019fac:	b9c8      	cbnz	r0, 8019fe2 <_dtoa_r+0x69a>
 8019fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019fb2:	4630      	mov	r0, r6
 8019fb4:	4639      	mov	r1, r7
 8019fb6:	f7e6 fd97 	bl	8000ae8 <__aeabi_dcmpeq>
 8019fba:	b110      	cbz	r0, 8019fc2 <_dtoa_r+0x67a>
 8019fbc:	f018 0f01 	tst.w	r8, #1
 8019fc0:	d10f      	bne.n	8019fe2 <_dtoa_r+0x69a>
 8019fc2:	9904      	ldr	r1, [sp, #16]
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f000 fead 	bl	801ad24 <_Bfree>
 8019fca:	2300      	movs	r3, #0
 8019fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fce:	702b      	strb	r3, [r5, #0]
 8019fd0:	f10a 0301 	add.w	r3, sl, #1
 8019fd4:	6013      	str	r3, [r2, #0]
 8019fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	f000 8241 	beq.w	801a460 <_dtoa_r+0xb18>
 8019fde:	601d      	str	r5, [r3, #0]
 8019fe0:	e23e      	b.n	801a460 <_dtoa_r+0xb18>
 8019fe2:	f8cd a020 	str.w	sl, [sp, #32]
 8019fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019fea:	2a39      	cmp	r2, #57	; 0x39
 8019fec:	f105 33ff 	add.w	r3, r5, #4294967295
 8019ff0:	d108      	bne.n	801a004 <_dtoa_r+0x6bc>
 8019ff2:	459b      	cmp	fp, r3
 8019ff4:	d10a      	bne.n	801a00c <_dtoa_r+0x6c4>
 8019ff6:	9b08      	ldr	r3, [sp, #32]
 8019ff8:	3301      	adds	r3, #1
 8019ffa:	9308      	str	r3, [sp, #32]
 8019ffc:	2330      	movs	r3, #48	; 0x30
 8019ffe:	f88b 3000 	strb.w	r3, [fp]
 801a002:	465b      	mov	r3, fp
 801a004:	781a      	ldrb	r2, [r3, #0]
 801a006:	3201      	adds	r2, #1
 801a008:	701a      	strb	r2, [r3, #0]
 801a00a:	e78c      	b.n	8019f26 <_dtoa_r+0x5de>
 801a00c:	461d      	mov	r5, r3
 801a00e:	e7ea      	b.n	8019fe6 <_dtoa_r+0x69e>
 801a010:	2200      	movs	r2, #0
 801a012:	4b9b      	ldr	r3, [pc, #620]	; (801a280 <_dtoa_r+0x938>)
 801a014:	f7e6 fb00 	bl	8000618 <__aeabi_dmul>
 801a018:	2200      	movs	r2, #0
 801a01a:	2300      	movs	r3, #0
 801a01c:	4606      	mov	r6, r0
 801a01e:	460f      	mov	r7, r1
 801a020:	f7e6 fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 801a024:	2800      	cmp	r0, #0
 801a026:	d09a      	beq.n	8019f5e <_dtoa_r+0x616>
 801a028:	e7cb      	b.n	8019fc2 <_dtoa_r+0x67a>
 801a02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a02c:	2a00      	cmp	r2, #0
 801a02e:	f000 808b 	beq.w	801a148 <_dtoa_r+0x800>
 801a032:	9a06      	ldr	r2, [sp, #24]
 801a034:	2a01      	cmp	r2, #1
 801a036:	dc6e      	bgt.n	801a116 <_dtoa_r+0x7ce>
 801a038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a03a:	2a00      	cmp	r2, #0
 801a03c:	d067      	beq.n	801a10e <_dtoa_r+0x7c6>
 801a03e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a042:	9f07      	ldr	r7, [sp, #28]
 801a044:	9d05      	ldr	r5, [sp, #20]
 801a046:	9a05      	ldr	r2, [sp, #20]
 801a048:	2101      	movs	r1, #1
 801a04a:	441a      	add	r2, r3
 801a04c:	4620      	mov	r0, r4
 801a04e:	9205      	str	r2, [sp, #20]
 801a050:	4498      	add	r8, r3
 801a052:	f000 ff45 	bl	801aee0 <__i2b>
 801a056:	4606      	mov	r6, r0
 801a058:	2d00      	cmp	r5, #0
 801a05a:	dd0c      	ble.n	801a076 <_dtoa_r+0x72e>
 801a05c:	f1b8 0f00 	cmp.w	r8, #0
 801a060:	dd09      	ble.n	801a076 <_dtoa_r+0x72e>
 801a062:	4545      	cmp	r5, r8
 801a064:	9a05      	ldr	r2, [sp, #20]
 801a066:	462b      	mov	r3, r5
 801a068:	bfa8      	it	ge
 801a06a:	4643      	movge	r3, r8
 801a06c:	1ad2      	subs	r2, r2, r3
 801a06e:	9205      	str	r2, [sp, #20]
 801a070:	1aed      	subs	r5, r5, r3
 801a072:	eba8 0803 	sub.w	r8, r8, r3
 801a076:	9b07      	ldr	r3, [sp, #28]
 801a078:	b1eb      	cbz	r3, 801a0b6 <_dtoa_r+0x76e>
 801a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d067      	beq.n	801a150 <_dtoa_r+0x808>
 801a080:	b18f      	cbz	r7, 801a0a6 <_dtoa_r+0x75e>
 801a082:	4631      	mov	r1, r6
 801a084:	463a      	mov	r2, r7
 801a086:	4620      	mov	r0, r4
 801a088:	f000 ffca 	bl	801b020 <__pow5mult>
 801a08c:	9a04      	ldr	r2, [sp, #16]
 801a08e:	4601      	mov	r1, r0
 801a090:	4606      	mov	r6, r0
 801a092:	4620      	mov	r0, r4
 801a094:	f000 ff2d 	bl	801aef2 <__multiply>
 801a098:	9904      	ldr	r1, [sp, #16]
 801a09a:	9008      	str	r0, [sp, #32]
 801a09c:	4620      	mov	r0, r4
 801a09e:	f000 fe41 	bl	801ad24 <_Bfree>
 801a0a2:	9b08      	ldr	r3, [sp, #32]
 801a0a4:	9304      	str	r3, [sp, #16]
 801a0a6:	9b07      	ldr	r3, [sp, #28]
 801a0a8:	1bda      	subs	r2, r3, r7
 801a0aa:	d004      	beq.n	801a0b6 <_dtoa_r+0x76e>
 801a0ac:	9904      	ldr	r1, [sp, #16]
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f000 ffb6 	bl	801b020 <__pow5mult>
 801a0b4:	9004      	str	r0, [sp, #16]
 801a0b6:	2101      	movs	r1, #1
 801a0b8:	4620      	mov	r0, r4
 801a0ba:	f000 ff11 	bl	801aee0 <__i2b>
 801a0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0c0:	4607      	mov	r7, r0
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	f000 81d0 	beq.w	801a468 <_dtoa_r+0xb20>
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	4601      	mov	r1, r0
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	f000 ffa7 	bl	801b020 <__pow5mult>
 801a0d2:	9b06      	ldr	r3, [sp, #24]
 801a0d4:	2b01      	cmp	r3, #1
 801a0d6:	4607      	mov	r7, r0
 801a0d8:	dc40      	bgt.n	801a15c <_dtoa_r+0x814>
 801a0da:	9b00      	ldr	r3, [sp, #0]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d139      	bne.n	801a154 <_dtoa_r+0x80c>
 801a0e0:	9b01      	ldr	r3, [sp, #4]
 801a0e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d136      	bne.n	801a158 <_dtoa_r+0x810>
 801a0ea:	9b01      	ldr	r3, [sp, #4]
 801a0ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a0f0:	0d1b      	lsrs	r3, r3, #20
 801a0f2:	051b      	lsls	r3, r3, #20
 801a0f4:	b12b      	cbz	r3, 801a102 <_dtoa_r+0x7ba>
 801a0f6:	9b05      	ldr	r3, [sp, #20]
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	9305      	str	r3, [sp, #20]
 801a0fc:	f108 0801 	add.w	r8, r8, #1
 801a100:	2301      	movs	r3, #1
 801a102:	9307      	str	r3, [sp, #28]
 801a104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a106:	2b00      	cmp	r3, #0
 801a108:	d12a      	bne.n	801a160 <_dtoa_r+0x818>
 801a10a:	2001      	movs	r0, #1
 801a10c:	e030      	b.n	801a170 <_dtoa_r+0x828>
 801a10e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a110:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a114:	e795      	b.n	801a042 <_dtoa_r+0x6fa>
 801a116:	9b07      	ldr	r3, [sp, #28]
 801a118:	f109 37ff 	add.w	r7, r9, #4294967295
 801a11c:	42bb      	cmp	r3, r7
 801a11e:	bfbf      	itttt	lt
 801a120:	9b07      	ldrlt	r3, [sp, #28]
 801a122:	9707      	strlt	r7, [sp, #28]
 801a124:	1afa      	sublt	r2, r7, r3
 801a126:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801a128:	bfbb      	ittet	lt
 801a12a:	189b      	addlt	r3, r3, r2
 801a12c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a12e:	1bdf      	subge	r7, r3, r7
 801a130:	2700      	movlt	r7, #0
 801a132:	f1b9 0f00 	cmp.w	r9, #0
 801a136:	bfb5      	itete	lt
 801a138:	9b05      	ldrlt	r3, [sp, #20]
 801a13a:	9d05      	ldrge	r5, [sp, #20]
 801a13c:	eba3 0509 	sublt.w	r5, r3, r9
 801a140:	464b      	movge	r3, r9
 801a142:	bfb8      	it	lt
 801a144:	2300      	movlt	r3, #0
 801a146:	e77e      	b.n	801a046 <_dtoa_r+0x6fe>
 801a148:	9f07      	ldr	r7, [sp, #28]
 801a14a:	9d05      	ldr	r5, [sp, #20]
 801a14c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a14e:	e783      	b.n	801a058 <_dtoa_r+0x710>
 801a150:	9a07      	ldr	r2, [sp, #28]
 801a152:	e7ab      	b.n	801a0ac <_dtoa_r+0x764>
 801a154:	2300      	movs	r3, #0
 801a156:	e7d4      	b.n	801a102 <_dtoa_r+0x7ba>
 801a158:	9b00      	ldr	r3, [sp, #0]
 801a15a:	e7d2      	b.n	801a102 <_dtoa_r+0x7ba>
 801a15c:	2300      	movs	r3, #0
 801a15e:	9307      	str	r3, [sp, #28]
 801a160:	693b      	ldr	r3, [r7, #16]
 801a162:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801a166:	6918      	ldr	r0, [r3, #16]
 801a168:	f000 fe6c 	bl	801ae44 <__hi0bits>
 801a16c:	f1c0 0020 	rsb	r0, r0, #32
 801a170:	4440      	add	r0, r8
 801a172:	f010 001f 	ands.w	r0, r0, #31
 801a176:	d047      	beq.n	801a208 <_dtoa_r+0x8c0>
 801a178:	f1c0 0320 	rsb	r3, r0, #32
 801a17c:	2b04      	cmp	r3, #4
 801a17e:	dd3b      	ble.n	801a1f8 <_dtoa_r+0x8b0>
 801a180:	9b05      	ldr	r3, [sp, #20]
 801a182:	f1c0 001c 	rsb	r0, r0, #28
 801a186:	4403      	add	r3, r0
 801a188:	9305      	str	r3, [sp, #20]
 801a18a:	4405      	add	r5, r0
 801a18c:	4480      	add	r8, r0
 801a18e:	9b05      	ldr	r3, [sp, #20]
 801a190:	2b00      	cmp	r3, #0
 801a192:	dd05      	ble.n	801a1a0 <_dtoa_r+0x858>
 801a194:	461a      	mov	r2, r3
 801a196:	9904      	ldr	r1, [sp, #16]
 801a198:	4620      	mov	r0, r4
 801a19a:	f000 ff8f 	bl	801b0bc <__lshift>
 801a19e:	9004      	str	r0, [sp, #16]
 801a1a0:	f1b8 0f00 	cmp.w	r8, #0
 801a1a4:	dd05      	ble.n	801a1b2 <_dtoa_r+0x86a>
 801a1a6:	4639      	mov	r1, r7
 801a1a8:	4642      	mov	r2, r8
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f000 ff86 	bl	801b0bc <__lshift>
 801a1b0:	4607      	mov	r7, r0
 801a1b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1b4:	b353      	cbz	r3, 801a20c <_dtoa_r+0x8c4>
 801a1b6:	4639      	mov	r1, r7
 801a1b8:	9804      	ldr	r0, [sp, #16]
 801a1ba:	f000 ffd3 	bl	801b164 <__mcmp>
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	da24      	bge.n	801a20c <_dtoa_r+0x8c4>
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	220a      	movs	r2, #10
 801a1c6:	9904      	ldr	r1, [sp, #16]
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	f000 fdc2 	bl	801ad52 <__multadd>
 801a1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1d0:	9004      	str	r0, [sp, #16]
 801a1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	f000 814d 	beq.w	801a476 <_dtoa_r+0xb2e>
 801a1dc:	2300      	movs	r3, #0
 801a1de:	4631      	mov	r1, r6
 801a1e0:	220a      	movs	r2, #10
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	f000 fdb5 	bl	801ad52 <__multadd>
 801a1e8:	9b02      	ldr	r3, [sp, #8]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	4606      	mov	r6, r0
 801a1ee:	dc4f      	bgt.n	801a290 <_dtoa_r+0x948>
 801a1f0:	9b06      	ldr	r3, [sp, #24]
 801a1f2:	2b02      	cmp	r3, #2
 801a1f4:	dd4c      	ble.n	801a290 <_dtoa_r+0x948>
 801a1f6:	e011      	b.n	801a21c <_dtoa_r+0x8d4>
 801a1f8:	d0c9      	beq.n	801a18e <_dtoa_r+0x846>
 801a1fa:	9a05      	ldr	r2, [sp, #20]
 801a1fc:	331c      	adds	r3, #28
 801a1fe:	441a      	add	r2, r3
 801a200:	9205      	str	r2, [sp, #20]
 801a202:	441d      	add	r5, r3
 801a204:	4498      	add	r8, r3
 801a206:	e7c2      	b.n	801a18e <_dtoa_r+0x846>
 801a208:	4603      	mov	r3, r0
 801a20a:	e7f6      	b.n	801a1fa <_dtoa_r+0x8b2>
 801a20c:	f1b9 0f00 	cmp.w	r9, #0
 801a210:	dc38      	bgt.n	801a284 <_dtoa_r+0x93c>
 801a212:	9b06      	ldr	r3, [sp, #24]
 801a214:	2b02      	cmp	r3, #2
 801a216:	dd35      	ble.n	801a284 <_dtoa_r+0x93c>
 801a218:	f8cd 9008 	str.w	r9, [sp, #8]
 801a21c:	9b02      	ldr	r3, [sp, #8]
 801a21e:	b963      	cbnz	r3, 801a23a <_dtoa_r+0x8f2>
 801a220:	4639      	mov	r1, r7
 801a222:	2205      	movs	r2, #5
 801a224:	4620      	mov	r0, r4
 801a226:	f000 fd94 	bl	801ad52 <__multadd>
 801a22a:	4601      	mov	r1, r0
 801a22c:	4607      	mov	r7, r0
 801a22e:	9804      	ldr	r0, [sp, #16]
 801a230:	f000 ff98 	bl	801b164 <__mcmp>
 801a234:	2800      	cmp	r0, #0
 801a236:	f73f adcc 	bgt.w	8019dd2 <_dtoa_r+0x48a>
 801a23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a23c:	465d      	mov	r5, fp
 801a23e:	ea6f 0a03 	mvn.w	sl, r3
 801a242:	f04f 0900 	mov.w	r9, #0
 801a246:	4639      	mov	r1, r7
 801a248:	4620      	mov	r0, r4
 801a24a:	f000 fd6b 	bl	801ad24 <_Bfree>
 801a24e:	2e00      	cmp	r6, #0
 801a250:	f43f aeb7 	beq.w	8019fc2 <_dtoa_r+0x67a>
 801a254:	f1b9 0f00 	cmp.w	r9, #0
 801a258:	d005      	beq.n	801a266 <_dtoa_r+0x91e>
 801a25a:	45b1      	cmp	r9, r6
 801a25c:	d003      	beq.n	801a266 <_dtoa_r+0x91e>
 801a25e:	4649      	mov	r1, r9
 801a260:	4620      	mov	r0, r4
 801a262:	f000 fd5f 	bl	801ad24 <_Bfree>
 801a266:	4631      	mov	r1, r6
 801a268:	4620      	mov	r0, r4
 801a26a:	f000 fd5b 	bl	801ad24 <_Bfree>
 801a26e:	e6a8      	b.n	8019fc2 <_dtoa_r+0x67a>
 801a270:	2700      	movs	r7, #0
 801a272:	463e      	mov	r6, r7
 801a274:	e7e1      	b.n	801a23a <_dtoa_r+0x8f2>
 801a276:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a27a:	463e      	mov	r6, r7
 801a27c:	e5a9      	b.n	8019dd2 <_dtoa_r+0x48a>
 801a27e:	bf00      	nop
 801a280:	40240000 	.word	0x40240000
 801a284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a286:	f8cd 9008 	str.w	r9, [sp, #8]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	f000 80fa 	beq.w	801a484 <_dtoa_r+0xb3c>
 801a290:	2d00      	cmp	r5, #0
 801a292:	dd05      	ble.n	801a2a0 <_dtoa_r+0x958>
 801a294:	4631      	mov	r1, r6
 801a296:	462a      	mov	r2, r5
 801a298:	4620      	mov	r0, r4
 801a29a:	f000 ff0f 	bl	801b0bc <__lshift>
 801a29e:	4606      	mov	r6, r0
 801a2a0:	9b07      	ldr	r3, [sp, #28]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d04c      	beq.n	801a340 <_dtoa_r+0x9f8>
 801a2a6:	6871      	ldr	r1, [r6, #4]
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	f000 fd07 	bl	801acbc <_Balloc>
 801a2ae:	6932      	ldr	r2, [r6, #16]
 801a2b0:	3202      	adds	r2, #2
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	0092      	lsls	r2, r2, #2
 801a2b6:	f106 010c 	add.w	r1, r6, #12
 801a2ba:	300c      	adds	r0, #12
 801a2bc:	f7fd fde7 	bl	8017e8e <memcpy>
 801a2c0:	2201      	movs	r2, #1
 801a2c2:	4629      	mov	r1, r5
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	f000 fef9 	bl	801b0bc <__lshift>
 801a2ca:	9b00      	ldr	r3, [sp, #0]
 801a2cc:	f8cd b014 	str.w	fp, [sp, #20]
 801a2d0:	f003 0301 	and.w	r3, r3, #1
 801a2d4:	46b1      	mov	r9, r6
 801a2d6:	9307      	str	r3, [sp, #28]
 801a2d8:	4606      	mov	r6, r0
 801a2da:	4639      	mov	r1, r7
 801a2dc:	9804      	ldr	r0, [sp, #16]
 801a2de:	f7ff faa6 	bl	801982e <quorem>
 801a2e2:	4649      	mov	r1, r9
 801a2e4:	4605      	mov	r5, r0
 801a2e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a2ea:	9804      	ldr	r0, [sp, #16]
 801a2ec:	f000 ff3a 	bl	801b164 <__mcmp>
 801a2f0:	4632      	mov	r2, r6
 801a2f2:	9000      	str	r0, [sp, #0]
 801a2f4:	4639      	mov	r1, r7
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f000 ff4e 	bl	801b198 <__mdiff>
 801a2fc:	68c3      	ldr	r3, [r0, #12]
 801a2fe:	4602      	mov	r2, r0
 801a300:	bb03      	cbnz	r3, 801a344 <_dtoa_r+0x9fc>
 801a302:	4601      	mov	r1, r0
 801a304:	9008      	str	r0, [sp, #32]
 801a306:	9804      	ldr	r0, [sp, #16]
 801a308:	f000 ff2c 	bl	801b164 <__mcmp>
 801a30c:	9a08      	ldr	r2, [sp, #32]
 801a30e:	4603      	mov	r3, r0
 801a310:	4611      	mov	r1, r2
 801a312:	4620      	mov	r0, r4
 801a314:	9308      	str	r3, [sp, #32]
 801a316:	f000 fd05 	bl	801ad24 <_Bfree>
 801a31a:	9b08      	ldr	r3, [sp, #32]
 801a31c:	b9a3      	cbnz	r3, 801a348 <_dtoa_r+0xa00>
 801a31e:	9a06      	ldr	r2, [sp, #24]
 801a320:	b992      	cbnz	r2, 801a348 <_dtoa_r+0xa00>
 801a322:	9a07      	ldr	r2, [sp, #28]
 801a324:	b982      	cbnz	r2, 801a348 <_dtoa_r+0xa00>
 801a326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a32a:	d029      	beq.n	801a380 <_dtoa_r+0xa38>
 801a32c:	9b00      	ldr	r3, [sp, #0]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	dd01      	ble.n	801a336 <_dtoa_r+0x9ee>
 801a332:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801a336:	9b05      	ldr	r3, [sp, #20]
 801a338:	1c5d      	adds	r5, r3, #1
 801a33a:	f883 8000 	strb.w	r8, [r3]
 801a33e:	e782      	b.n	801a246 <_dtoa_r+0x8fe>
 801a340:	4630      	mov	r0, r6
 801a342:	e7c2      	b.n	801a2ca <_dtoa_r+0x982>
 801a344:	2301      	movs	r3, #1
 801a346:	e7e3      	b.n	801a310 <_dtoa_r+0x9c8>
 801a348:	9a00      	ldr	r2, [sp, #0]
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	db04      	blt.n	801a358 <_dtoa_r+0xa10>
 801a34e:	d125      	bne.n	801a39c <_dtoa_r+0xa54>
 801a350:	9a06      	ldr	r2, [sp, #24]
 801a352:	bb1a      	cbnz	r2, 801a39c <_dtoa_r+0xa54>
 801a354:	9a07      	ldr	r2, [sp, #28]
 801a356:	bb0a      	cbnz	r2, 801a39c <_dtoa_r+0xa54>
 801a358:	2b00      	cmp	r3, #0
 801a35a:	ddec      	ble.n	801a336 <_dtoa_r+0x9ee>
 801a35c:	2201      	movs	r2, #1
 801a35e:	9904      	ldr	r1, [sp, #16]
 801a360:	4620      	mov	r0, r4
 801a362:	f000 feab 	bl	801b0bc <__lshift>
 801a366:	4639      	mov	r1, r7
 801a368:	9004      	str	r0, [sp, #16]
 801a36a:	f000 fefb 	bl	801b164 <__mcmp>
 801a36e:	2800      	cmp	r0, #0
 801a370:	dc03      	bgt.n	801a37a <_dtoa_r+0xa32>
 801a372:	d1e0      	bne.n	801a336 <_dtoa_r+0x9ee>
 801a374:	f018 0f01 	tst.w	r8, #1
 801a378:	d0dd      	beq.n	801a336 <_dtoa_r+0x9ee>
 801a37a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a37e:	d1d8      	bne.n	801a332 <_dtoa_r+0x9ea>
 801a380:	9b05      	ldr	r3, [sp, #20]
 801a382:	9a05      	ldr	r2, [sp, #20]
 801a384:	1c5d      	adds	r5, r3, #1
 801a386:	2339      	movs	r3, #57	; 0x39
 801a388:	7013      	strb	r3, [r2, #0]
 801a38a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a38e:	2b39      	cmp	r3, #57	; 0x39
 801a390:	f105 32ff 	add.w	r2, r5, #4294967295
 801a394:	d04f      	beq.n	801a436 <_dtoa_r+0xaee>
 801a396:	3301      	adds	r3, #1
 801a398:	7013      	strb	r3, [r2, #0]
 801a39a:	e754      	b.n	801a246 <_dtoa_r+0x8fe>
 801a39c:	9a05      	ldr	r2, [sp, #20]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	f102 0501 	add.w	r5, r2, #1
 801a3a4:	dd06      	ble.n	801a3b4 <_dtoa_r+0xa6c>
 801a3a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a3aa:	d0e9      	beq.n	801a380 <_dtoa_r+0xa38>
 801a3ac:	f108 0801 	add.w	r8, r8, #1
 801a3b0:	9b05      	ldr	r3, [sp, #20]
 801a3b2:	e7c2      	b.n	801a33a <_dtoa_r+0x9f2>
 801a3b4:	9a02      	ldr	r2, [sp, #8]
 801a3b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a3ba:	eba5 030b 	sub.w	r3, r5, fp
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	d021      	beq.n	801a406 <_dtoa_r+0xabe>
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	220a      	movs	r2, #10
 801a3c6:	9904      	ldr	r1, [sp, #16]
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f000 fcc2 	bl	801ad52 <__multadd>
 801a3ce:	45b1      	cmp	r9, r6
 801a3d0:	9004      	str	r0, [sp, #16]
 801a3d2:	f04f 0300 	mov.w	r3, #0
 801a3d6:	f04f 020a 	mov.w	r2, #10
 801a3da:	4649      	mov	r1, r9
 801a3dc:	4620      	mov	r0, r4
 801a3de:	d105      	bne.n	801a3ec <_dtoa_r+0xaa4>
 801a3e0:	f000 fcb7 	bl	801ad52 <__multadd>
 801a3e4:	4681      	mov	r9, r0
 801a3e6:	4606      	mov	r6, r0
 801a3e8:	9505      	str	r5, [sp, #20]
 801a3ea:	e776      	b.n	801a2da <_dtoa_r+0x992>
 801a3ec:	f000 fcb1 	bl	801ad52 <__multadd>
 801a3f0:	4631      	mov	r1, r6
 801a3f2:	4681      	mov	r9, r0
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	220a      	movs	r2, #10
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	f000 fcaa 	bl	801ad52 <__multadd>
 801a3fe:	4606      	mov	r6, r0
 801a400:	e7f2      	b.n	801a3e8 <_dtoa_r+0xaa0>
 801a402:	f04f 0900 	mov.w	r9, #0
 801a406:	2201      	movs	r2, #1
 801a408:	9904      	ldr	r1, [sp, #16]
 801a40a:	4620      	mov	r0, r4
 801a40c:	f000 fe56 	bl	801b0bc <__lshift>
 801a410:	4639      	mov	r1, r7
 801a412:	9004      	str	r0, [sp, #16]
 801a414:	f000 fea6 	bl	801b164 <__mcmp>
 801a418:	2800      	cmp	r0, #0
 801a41a:	dcb6      	bgt.n	801a38a <_dtoa_r+0xa42>
 801a41c:	d102      	bne.n	801a424 <_dtoa_r+0xadc>
 801a41e:	f018 0f01 	tst.w	r8, #1
 801a422:	d1b2      	bne.n	801a38a <_dtoa_r+0xa42>
 801a424:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a428:	2b30      	cmp	r3, #48	; 0x30
 801a42a:	f105 32ff 	add.w	r2, r5, #4294967295
 801a42e:	f47f af0a 	bne.w	801a246 <_dtoa_r+0x8fe>
 801a432:	4615      	mov	r5, r2
 801a434:	e7f6      	b.n	801a424 <_dtoa_r+0xadc>
 801a436:	4593      	cmp	fp, r2
 801a438:	d105      	bne.n	801a446 <_dtoa_r+0xafe>
 801a43a:	2331      	movs	r3, #49	; 0x31
 801a43c:	f10a 0a01 	add.w	sl, sl, #1
 801a440:	f88b 3000 	strb.w	r3, [fp]
 801a444:	e6ff      	b.n	801a246 <_dtoa_r+0x8fe>
 801a446:	4615      	mov	r5, r2
 801a448:	e79f      	b.n	801a38a <_dtoa_r+0xa42>
 801a44a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801a4b0 <_dtoa_r+0xb68>
 801a44e:	e007      	b.n	801a460 <_dtoa_r+0xb18>
 801a450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a452:	f8df b060 	ldr.w	fp, [pc, #96]	; 801a4b4 <_dtoa_r+0xb6c>
 801a456:	b11b      	cbz	r3, 801a460 <_dtoa_r+0xb18>
 801a458:	f10b 0308 	add.w	r3, fp, #8
 801a45c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a45e:	6013      	str	r3, [r2, #0]
 801a460:	4658      	mov	r0, fp
 801a462:	b017      	add	sp, #92	; 0x5c
 801a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a468:	9b06      	ldr	r3, [sp, #24]
 801a46a:	2b01      	cmp	r3, #1
 801a46c:	f77f ae35 	ble.w	801a0da <_dtoa_r+0x792>
 801a470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a472:	9307      	str	r3, [sp, #28]
 801a474:	e649      	b.n	801a10a <_dtoa_r+0x7c2>
 801a476:	9b02      	ldr	r3, [sp, #8]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	dc03      	bgt.n	801a484 <_dtoa_r+0xb3c>
 801a47c:	9b06      	ldr	r3, [sp, #24]
 801a47e:	2b02      	cmp	r3, #2
 801a480:	f73f aecc 	bgt.w	801a21c <_dtoa_r+0x8d4>
 801a484:	465d      	mov	r5, fp
 801a486:	4639      	mov	r1, r7
 801a488:	9804      	ldr	r0, [sp, #16]
 801a48a:	f7ff f9d0 	bl	801982e <quorem>
 801a48e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a492:	f805 8b01 	strb.w	r8, [r5], #1
 801a496:	9a02      	ldr	r2, [sp, #8]
 801a498:	eba5 030b 	sub.w	r3, r5, fp
 801a49c:	429a      	cmp	r2, r3
 801a49e:	ddb0      	ble.n	801a402 <_dtoa_r+0xaba>
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	220a      	movs	r2, #10
 801a4a4:	9904      	ldr	r1, [sp, #16]
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	f000 fc53 	bl	801ad52 <__multadd>
 801a4ac:	9004      	str	r0, [sp, #16]
 801a4ae:	e7ea      	b.n	801a486 <_dtoa_r+0xb3e>
 801a4b0:	08020aae 	.word	0x08020aae
 801a4b4:	08020c29 	.word	0x08020c29

0801a4b8 <std>:
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	4604      	mov	r4, r0
 801a4be:	e9c0 3300 	strd	r3, r3, [r0]
 801a4c2:	6083      	str	r3, [r0, #8]
 801a4c4:	8181      	strh	r1, [r0, #12]
 801a4c6:	6643      	str	r3, [r0, #100]	; 0x64
 801a4c8:	81c2      	strh	r2, [r0, #14]
 801a4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a4ce:	6183      	str	r3, [r0, #24]
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	2208      	movs	r2, #8
 801a4d4:	305c      	adds	r0, #92	; 0x5c
 801a4d6:	f7fd fcfe 	bl	8017ed6 <memset>
 801a4da:	4b05      	ldr	r3, [pc, #20]	; (801a4f0 <std+0x38>)
 801a4dc:	6263      	str	r3, [r4, #36]	; 0x24
 801a4de:	4b05      	ldr	r3, [pc, #20]	; (801a4f4 <std+0x3c>)
 801a4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 801a4e2:	4b05      	ldr	r3, [pc, #20]	; (801a4f8 <std+0x40>)
 801a4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a4e6:	4b05      	ldr	r3, [pc, #20]	; (801a4fc <std+0x44>)
 801a4e8:	6224      	str	r4, [r4, #32]
 801a4ea:	6323      	str	r3, [r4, #48]	; 0x30
 801a4ec:	bd10      	pop	{r4, pc}
 801a4ee:	bf00      	nop
 801a4f0:	0801b9fd 	.word	0x0801b9fd
 801a4f4:	0801ba1f 	.word	0x0801ba1f
 801a4f8:	0801ba57 	.word	0x0801ba57
 801a4fc:	0801ba7b 	.word	0x0801ba7b

0801a500 <_cleanup_r>:
 801a500:	4901      	ldr	r1, [pc, #4]	; (801a508 <_cleanup_r+0x8>)
 801a502:	f000 b885 	b.w	801a610 <_fwalk_reent>
 801a506:	bf00      	nop
 801a508:	0801bd55 	.word	0x0801bd55

0801a50c <__sfmoreglue>:
 801a50c:	b570      	push	{r4, r5, r6, lr}
 801a50e:	1e4a      	subs	r2, r1, #1
 801a510:	2568      	movs	r5, #104	; 0x68
 801a512:	4355      	muls	r5, r2
 801a514:	460e      	mov	r6, r1
 801a516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a51a:	f7fd fd33 	bl	8017f84 <_malloc_r>
 801a51e:	4604      	mov	r4, r0
 801a520:	b140      	cbz	r0, 801a534 <__sfmoreglue+0x28>
 801a522:	2100      	movs	r1, #0
 801a524:	e9c0 1600 	strd	r1, r6, [r0]
 801a528:	300c      	adds	r0, #12
 801a52a:	60a0      	str	r0, [r4, #8]
 801a52c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a530:	f7fd fcd1 	bl	8017ed6 <memset>
 801a534:	4620      	mov	r0, r4
 801a536:	bd70      	pop	{r4, r5, r6, pc}

0801a538 <__sinit>:
 801a538:	6983      	ldr	r3, [r0, #24]
 801a53a:	b510      	push	{r4, lr}
 801a53c:	4604      	mov	r4, r0
 801a53e:	bb33      	cbnz	r3, 801a58e <__sinit+0x56>
 801a540:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a544:	6503      	str	r3, [r0, #80]	; 0x50
 801a546:	4b12      	ldr	r3, [pc, #72]	; (801a590 <__sinit+0x58>)
 801a548:	4a12      	ldr	r2, [pc, #72]	; (801a594 <__sinit+0x5c>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	6282      	str	r2, [r0, #40]	; 0x28
 801a54e:	4298      	cmp	r0, r3
 801a550:	bf04      	itt	eq
 801a552:	2301      	moveq	r3, #1
 801a554:	6183      	streq	r3, [r0, #24]
 801a556:	f000 f81f 	bl	801a598 <__sfp>
 801a55a:	6060      	str	r0, [r4, #4]
 801a55c:	4620      	mov	r0, r4
 801a55e:	f000 f81b 	bl	801a598 <__sfp>
 801a562:	60a0      	str	r0, [r4, #8]
 801a564:	4620      	mov	r0, r4
 801a566:	f000 f817 	bl	801a598 <__sfp>
 801a56a:	2200      	movs	r2, #0
 801a56c:	60e0      	str	r0, [r4, #12]
 801a56e:	2104      	movs	r1, #4
 801a570:	6860      	ldr	r0, [r4, #4]
 801a572:	f7ff ffa1 	bl	801a4b8 <std>
 801a576:	2201      	movs	r2, #1
 801a578:	2109      	movs	r1, #9
 801a57a:	68a0      	ldr	r0, [r4, #8]
 801a57c:	f7ff ff9c 	bl	801a4b8 <std>
 801a580:	2202      	movs	r2, #2
 801a582:	2112      	movs	r1, #18
 801a584:	68e0      	ldr	r0, [r4, #12]
 801a586:	f7ff ff97 	bl	801a4b8 <std>
 801a58a:	2301      	movs	r3, #1
 801a58c:	61a3      	str	r3, [r4, #24]
 801a58e:	bd10      	pop	{r4, pc}
 801a590:	08020a90 	.word	0x08020a90
 801a594:	0801a501 	.word	0x0801a501

0801a598 <__sfp>:
 801a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a59a:	4b1b      	ldr	r3, [pc, #108]	; (801a608 <__sfp+0x70>)
 801a59c:	681e      	ldr	r6, [r3, #0]
 801a59e:	69b3      	ldr	r3, [r6, #24]
 801a5a0:	4607      	mov	r7, r0
 801a5a2:	b913      	cbnz	r3, 801a5aa <__sfp+0x12>
 801a5a4:	4630      	mov	r0, r6
 801a5a6:	f7ff ffc7 	bl	801a538 <__sinit>
 801a5aa:	3648      	adds	r6, #72	; 0x48
 801a5ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a5b0:	3b01      	subs	r3, #1
 801a5b2:	d503      	bpl.n	801a5bc <__sfp+0x24>
 801a5b4:	6833      	ldr	r3, [r6, #0]
 801a5b6:	b133      	cbz	r3, 801a5c6 <__sfp+0x2e>
 801a5b8:	6836      	ldr	r6, [r6, #0]
 801a5ba:	e7f7      	b.n	801a5ac <__sfp+0x14>
 801a5bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a5c0:	b16d      	cbz	r5, 801a5de <__sfp+0x46>
 801a5c2:	3468      	adds	r4, #104	; 0x68
 801a5c4:	e7f4      	b.n	801a5b0 <__sfp+0x18>
 801a5c6:	2104      	movs	r1, #4
 801a5c8:	4638      	mov	r0, r7
 801a5ca:	f7ff ff9f 	bl	801a50c <__sfmoreglue>
 801a5ce:	6030      	str	r0, [r6, #0]
 801a5d0:	2800      	cmp	r0, #0
 801a5d2:	d1f1      	bne.n	801a5b8 <__sfp+0x20>
 801a5d4:	230c      	movs	r3, #12
 801a5d6:	603b      	str	r3, [r7, #0]
 801a5d8:	4604      	mov	r4, r0
 801a5da:	4620      	mov	r0, r4
 801a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5de:	4b0b      	ldr	r3, [pc, #44]	; (801a60c <__sfp+0x74>)
 801a5e0:	6665      	str	r5, [r4, #100]	; 0x64
 801a5e2:	e9c4 5500 	strd	r5, r5, [r4]
 801a5e6:	60a5      	str	r5, [r4, #8]
 801a5e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a5ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a5f0:	2208      	movs	r2, #8
 801a5f2:	4629      	mov	r1, r5
 801a5f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a5f8:	f7fd fc6d 	bl	8017ed6 <memset>
 801a5fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a604:	e7e9      	b.n	801a5da <__sfp+0x42>
 801a606:	bf00      	nop
 801a608:	08020a90 	.word	0x08020a90
 801a60c:	ffff0001 	.word	0xffff0001

0801a610 <_fwalk_reent>:
 801a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a614:	4680      	mov	r8, r0
 801a616:	4689      	mov	r9, r1
 801a618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a61c:	2600      	movs	r6, #0
 801a61e:	b914      	cbnz	r4, 801a626 <_fwalk_reent+0x16>
 801a620:	4630      	mov	r0, r6
 801a622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a626:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a62a:	3f01      	subs	r7, #1
 801a62c:	d501      	bpl.n	801a632 <_fwalk_reent+0x22>
 801a62e:	6824      	ldr	r4, [r4, #0]
 801a630:	e7f5      	b.n	801a61e <_fwalk_reent+0xe>
 801a632:	89ab      	ldrh	r3, [r5, #12]
 801a634:	2b01      	cmp	r3, #1
 801a636:	d907      	bls.n	801a648 <_fwalk_reent+0x38>
 801a638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a63c:	3301      	adds	r3, #1
 801a63e:	d003      	beq.n	801a648 <_fwalk_reent+0x38>
 801a640:	4629      	mov	r1, r5
 801a642:	4640      	mov	r0, r8
 801a644:	47c8      	blx	r9
 801a646:	4306      	orrs	r6, r0
 801a648:	3568      	adds	r5, #104	; 0x68
 801a64a:	e7ee      	b.n	801a62a <_fwalk_reent+0x1a>

0801a64c <rshift>:
 801a64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a64e:	6906      	ldr	r6, [r0, #16]
 801a650:	114b      	asrs	r3, r1, #5
 801a652:	429e      	cmp	r6, r3
 801a654:	f100 0414 	add.w	r4, r0, #20
 801a658:	dd30      	ble.n	801a6bc <rshift+0x70>
 801a65a:	f011 011f 	ands.w	r1, r1, #31
 801a65e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801a662:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801a666:	d108      	bne.n	801a67a <rshift+0x2e>
 801a668:	4621      	mov	r1, r4
 801a66a:	42b2      	cmp	r2, r6
 801a66c:	460b      	mov	r3, r1
 801a66e:	d211      	bcs.n	801a694 <rshift+0x48>
 801a670:	f852 3b04 	ldr.w	r3, [r2], #4
 801a674:	f841 3b04 	str.w	r3, [r1], #4
 801a678:	e7f7      	b.n	801a66a <rshift+0x1e>
 801a67a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801a67e:	f1c1 0c20 	rsb	ip, r1, #32
 801a682:	40cd      	lsrs	r5, r1
 801a684:	3204      	adds	r2, #4
 801a686:	4623      	mov	r3, r4
 801a688:	42b2      	cmp	r2, r6
 801a68a:	4617      	mov	r7, r2
 801a68c:	d30c      	bcc.n	801a6a8 <rshift+0x5c>
 801a68e:	601d      	str	r5, [r3, #0]
 801a690:	b105      	cbz	r5, 801a694 <rshift+0x48>
 801a692:	3304      	adds	r3, #4
 801a694:	1b1a      	subs	r2, r3, r4
 801a696:	42a3      	cmp	r3, r4
 801a698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a69c:	bf08      	it	eq
 801a69e:	2300      	moveq	r3, #0
 801a6a0:	6102      	str	r2, [r0, #16]
 801a6a2:	bf08      	it	eq
 801a6a4:	6143      	streq	r3, [r0, #20]
 801a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6a8:	683f      	ldr	r7, [r7, #0]
 801a6aa:	fa07 f70c 	lsl.w	r7, r7, ip
 801a6ae:	433d      	orrs	r5, r7
 801a6b0:	f843 5b04 	str.w	r5, [r3], #4
 801a6b4:	f852 5b04 	ldr.w	r5, [r2], #4
 801a6b8:	40cd      	lsrs	r5, r1
 801a6ba:	e7e5      	b.n	801a688 <rshift+0x3c>
 801a6bc:	4623      	mov	r3, r4
 801a6be:	e7e9      	b.n	801a694 <rshift+0x48>

0801a6c0 <__hexdig_fun>:
 801a6c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a6c4:	2b09      	cmp	r3, #9
 801a6c6:	d802      	bhi.n	801a6ce <__hexdig_fun+0xe>
 801a6c8:	3820      	subs	r0, #32
 801a6ca:	b2c0      	uxtb	r0, r0
 801a6cc:	4770      	bx	lr
 801a6ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a6d2:	2b05      	cmp	r3, #5
 801a6d4:	d801      	bhi.n	801a6da <__hexdig_fun+0x1a>
 801a6d6:	3847      	subs	r0, #71	; 0x47
 801a6d8:	e7f7      	b.n	801a6ca <__hexdig_fun+0xa>
 801a6da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a6de:	2b05      	cmp	r3, #5
 801a6e0:	d801      	bhi.n	801a6e6 <__hexdig_fun+0x26>
 801a6e2:	3827      	subs	r0, #39	; 0x27
 801a6e4:	e7f1      	b.n	801a6ca <__hexdig_fun+0xa>
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	4770      	bx	lr

0801a6ea <__gethex>:
 801a6ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ee:	b08b      	sub	sp, #44	; 0x2c
 801a6f0:	468a      	mov	sl, r1
 801a6f2:	9002      	str	r0, [sp, #8]
 801a6f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a6f6:	9306      	str	r3, [sp, #24]
 801a6f8:	4690      	mov	r8, r2
 801a6fa:	f000 facd 	bl	801ac98 <__localeconv_l>
 801a6fe:	6803      	ldr	r3, [r0, #0]
 801a700:	9303      	str	r3, [sp, #12]
 801a702:	4618      	mov	r0, r3
 801a704:	f7e5 fd6e 	bl	80001e4 <strlen>
 801a708:	9b03      	ldr	r3, [sp, #12]
 801a70a:	9001      	str	r0, [sp, #4]
 801a70c:	4403      	add	r3, r0
 801a70e:	f04f 0b00 	mov.w	fp, #0
 801a712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a716:	9307      	str	r3, [sp, #28]
 801a718:	f8da 3000 	ldr.w	r3, [sl]
 801a71c:	3302      	adds	r3, #2
 801a71e:	461f      	mov	r7, r3
 801a720:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a724:	2830      	cmp	r0, #48	; 0x30
 801a726:	d06c      	beq.n	801a802 <__gethex+0x118>
 801a728:	f7ff ffca 	bl	801a6c0 <__hexdig_fun>
 801a72c:	4604      	mov	r4, r0
 801a72e:	2800      	cmp	r0, #0
 801a730:	d16a      	bne.n	801a808 <__gethex+0x11e>
 801a732:	9a01      	ldr	r2, [sp, #4]
 801a734:	9903      	ldr	r1, [sp, #12]
 801a736:	4638      	mov	r0, r7
 801a738:	f7fe f98a 	bl	8018a50 <strncmp>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	d166      	bne.n	801a80e <__gethex+0x124>
 801a740:	9b01      	ldr	r3, [sp, #4]
 801a742:	5cf8      	ldrb	r0, [r7, r3]
 801a744:	18fe      	adds	r6, r7, r3
 801a746:	f7ff ffbb 	bl	801a6c0 <__hexdig_fun>
 801a74a:	2800      	cmp	r0, #0
 801a74c:	d062      	beq.n	801a814 <__gethex+0x12a>
 801a74e:	4633      	mov	r3, r6
 801a750:	7818      	ldrb	r0, [r3, #0]
 801a752:	2830      	cmp	r0, #48	; 0x30
 801a754:	461f      	mov	r7, r3
 801a756:	f103 0301 	add.w	r3, r3, #1
 801a75a:	d0f9      	beq.n	801a750 <__gethex+0x66>
 801a75c:	f7ff ffb0 	bl	801a6c0 <__hexdig_fun>
 801a760:	fab0 f580 	clz	r5, r0
 801a764:	096d      	lsrs	r5, r5, #5
 801a766:	4634      	mov	r4, r6
 801a768:	f04f 0b01 	mov.w	fp, #1
 801a76c:	463a      	mov	r2, r7
 801a76e:	4616      	mov	r6, r2
 801a770:	3201      	adds	r2, #1
 801a772:	7830      	ldrb	r0, [r6, #0]
 801a774:	f7ff ffa4 	bl	801a6c0 <__hexdig_fun>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d1f8      	bne.n	801a76e <__gethex+0x84>
 801a77c:	9a01      	ldr	r2, [sp, #4]
 801a77e:	9903      	ldr	r1, [sp, #12]
 801a780:	4630      	mov	r0, r6
 801a782:	f7fe f965 	bl	8018a50 <strncmp>
 801a786:	b950      	cbnz	r0, 801a79e <__gethex+0xb4>
 801a788:	b954      	cbnz	r4, 801a7a0 <__gethex+0xb6>
 801a78a:	9b01      	ldr	r3, [sp, #4]
 801a78c:	18f4      	adds	r4, r6, r3
 801a78e:	4622      	mov	r2, r4
 801a790:	4616      	mov	r6, r2
 801a792:	3201      	adds	r2, #1
 801a794:	7830      	ldrb	r0, [r6, #0]
 801a796:	f7ff ff93 	bl	801a6c0 <__hexdig_fun>
 801a79a:	2800      	cmp	r0, #0
 801a79c:	d1f8      	bne.n	801a790 <__gethex+0xa6>
 801a79e:	b10c      	cbz	r4, 801a7a4 <__gethex+0xba>
 801a7a0:	1ba4      	subs	r4, r4, r6
 801a7a2:	00a4      	lsls	r4, r4, #2
 801a7a4:	7833      	ldrb	r3, [r6, #0]
 801a7a6:	2b50      	cmp	r3, #80	; 0x50
 801a7a8:	d001      	beq.n	801a7ae <__gethex+0xc4>
 801a7aa:	2b70      	cmp	r3, #112	; 0x70
 801a7ac:	d140      	bne.n	801a830 <__gethex+0x146>
 801a7ae:	7873      	ldrb	r3, [r6, #1]
 801a7b0:	2b2b      	cmp	r3, #43	; 0x2b
 801a7b2:	d031      	beq.n	801a818 <__gethex+0x12e>
 801a7b4:	2b2d      	cmp	r3, #45	; 0x2d
 801a7b6:	d033      	beq.n	801a820 <__gethex+0x136>
 801a7b8:	1c71      	adds	r1, r6, #1
 801a7ba:	f04f 0900 	mov.w	r9, #0
 801a7be:	7808      	ldrb	r0, [r1, #0]
 801a7c0:	f7ff ff7e 	bl	801a6c0 <__hexdig_fun>
 801a7c4:	1e43      	subs	r3, r0, #1
 801a7c6:	b2db      	uxtb	r3, r3
 801a7c8:	2b18      	cmp	r3, #24
 801a7ca:	d831      	bhi.n	801a830 <__gethex+0x146>
 801a7cc:	f1a0 0210 	sub.w	r2, r0, #16
 801a7d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a7d4:	f7ff ff74 	bl	801a6c0 <__hexdig_fun>
 801a7d8:	1e43      	subs	r3, r0, #1
 801a7da:	b2db      	uxtb	r3, r3
 801a7dc:	2b18      	cmp	r3, #24
 801a7de:	d922      	bls.n	801a826 <__gethex+0x13c>
 801a7e0:	f1b9 0f00 	cmp.w	r9, #0
 801a7e4:	d000      	beq.n	801a7e8 <__gethex+0xfe>
 801a7e6:	4252      	negs	r2, r2
 801a7e8:	4414      	add	r4, r2
 801a7ea:	f8ca 1000 	str.w	r1, [sl]
 801a7ee:	b30d      	cbz	r5, 801a834 <__gethex+0x14a>
 801a7f0:	f1bb 0f00 	cmp.w	fp, #0
 801a7f4:	bf0c      	ite	eq
 801a7f6:	2706      	moveq	r7, #6
 801a7f8:	2700      	movne	r7, #0
 801a7fa:	4638      	mov	r0, r7
 801a7fc:	b00b      	add	sp, #44	; 0x2c
 801a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a802:	f10b 0b01 	add.w	fp, fp, #1
 801a806:	e78a      	b.n	801a71e <__gethex+0x34>
 801a808:	2500      	movs	r5, #0
 801a80a:	462c      	mov	r4, r5
 801a80c:	e7ae      	b.n	801a76c <__gethex+0x82>
 801a80e:	463e      	mov	r6, r7
 801a810:	2501      	movs	r5, #1
 801a812:	e7c7      	b.n	801a7a4 <__gethex+0xba>
 801a814:	4604      	mov	r4, r0
 801a816:	e7fb      	b.n	801a810 <__gethex+0x126>
 801a818:	f04f 0900 	mov.w	r9, #0
 801a81c:	1cb1      	adds	r1, r6, #2
 801a81e:	e7ce      	b.n	801a7be <__gethex+0xd4>
 801a820:	f04f 0901 	mov.w	r9, #1
 801a824:	e7fa      	b.n	801a81c <__gethex+0x132>
 801a826:	230a      	movs	r3, #10
 801a828:	fb03 0202 	mla	r2, r3, r2, r0
 801a82c:	3a10      	subs	r2, #16
 801a82e:	e7cf      	b.n	801a7d0 <__gethex+0xe6>
 801a830:	4631      	mov	r1, r6
 801a832:	e7da      	b.n	801a7ea <__gethex+0x100>
 801a834:	1bf3      	subs	r3, r6, r7
 801a836:	3b01      	subs	r3, #1
 801a838:	4629      	mov	r1, r5
 801a83a:	2b07      	cmp	r3, #7
 801a83c:	dc49      	bgt.n	801a8d2 <__gethex+0x1e8>
 801a83e:	9802      	ldr	r0, [sp, #8]
 801a840:	f000 fa3c 	bl	801acbc <_Balloc>
 801a844:	9b01      	ldr	r3, [sp, #4]
 801a846:	f100 0914 	add.w	r9, r0, #20
 801a84a:	f04f 0b00 	mov.w	fp, #0
 801a84e:	f1c3 0301 	rsb	r3, r3, #1
 801a852:	4605      	mov	r5, r0
 801a854:	f8cd 9010 	str.w	r9, [sp, #16]
 801a858:	46da      	mov	sl, fp
 801a85a:	9308      	str	r3, [sp, #32]
 801a85c:	42b7      	cmp	r7, r6
 801a85e:	d33b      	bcc.n	801a8d8 <__gethex+0x1ee>
 801a860:	9804      	ldr	r0, [sp, #16]
 801a862:	f840 ab04 	str.w	sl, [r0], #4
 801a866:	eba0 0009 	sub.w	r0, r0, r9
 801a86a:	1080      	asrs	r0, r0, #2
 801a86c:	6128      	str	r0, [r5, #16]
 801a86e:	0147      	lsls	r7, r0, #5
 801a870:	4650      	mov	r0, sl
 801a872:	f000 fae7 	bl	801ae44 <__hi0bits>
 801a876:	f8d8 6000 	ldr.w	r6, [r8]
 801a87a:	1a3f      	subs	r7, r7, r0
 801a87c:	42b7      	cmp	r7, r6
 801a87e:	dd64      	ble.n	801a94a <__gethex+0x260>
 801a880:	1bbf      	subs	r7, r7, r6
 801a882:	4639      	mov	r1, r7
 801a884:	4628      	mov	r0, r5
 801a886:	f000 fdf7 	bl	801b478 <__any_on>
 801a88a:	4682      	mov	sl, r0
 801a88c:	b178      	cbz	r0, 801a8ae <__gethex+0x1c4>
 801a88e:	1e7b      	subs	r3, r7, #1
 801a890:	1159      	asrs	r1, r3, #5
 801a892:	f003 021f 	and.w	r2, r3, #31
 801a896:	f04f 0a01 	mov.w	sl, #1
 801a89a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a89e:	fa0a f202 	lsl.w	r2, sl, r2
 801a8a2:	420a      	tst	r2, r1
 801a8a4:	d003      	beq.n	801a8ae <__gethex+0x1c4>
 801a8a6:	4553      	cmp	r3, sl
 801a8a8:	dc46      	bgt.n	801a938 <__gethex+0x24e>
 801a8aa:	f04f 0a02 	mov.w	sl, #2
 801a8ae:	4639      	mov	r1, r7
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	f7ff fecb 	bl	801a64c <rshift>
 801a8b6:	443c      	add	r4, r7
 801a8b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a8bc:	42a3      	cmp	r3, r4
 801a8be:	da52      	bge.n	801a966 <__gethex+0x27c>
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	9802      	ldr	r0, [sp, #8]
 801a8c4:	f000 fa2e 	bl	801ad24 <_Bfree>
 801a8c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	6013      	str	r3, [r2, #0]
 801a8ce:	27a3      	movs	r7, #163	; 0xa3
 801a8d0:	e793      	b.n	801a7fa <__gethex+0x110>
 801a8d2:	3101      	adds	r1, #1
 801a8d4:	105b      	asrs	r3, r3, #1
 801a8d6:	e7b0      	b.n	801a83a <__gethex+0x150>
 801a8d8:	1e73      	subs	r3, r6, #1
 801a8da:	9305      	str	r3, [sp, #20]
 801a8dc:	9a07      	ldr	r2, [sp, #28]
 801a8de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	d018      	beq.n	801a918 <__gethex+0x22e>
 801a8e6:	f1bb 0f20 	cmp.w	fp, #32
 801a8ea:	d107      	bne.n	801a8fc <__gethex+0x212>
 801a8ec:	9b04      	ldr	r3, [sp, #16]
 801a8ee:	f8c3 a000 	str.w	sl, [r3]
 801a8f2:	3304      	adds	r3, #4
 801a8f4:	f04f 0a00 	mov.w	sl, #0
 801a8f8:	9304      	str	r3, [sp, #16]
 801a8fa:	46d3      	mov	fp, sl
 801a8fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a900:	f7ff fede 	bl	801a6c0 <__hexdig_fun>
 801a904:	f000 000f 	and.w	r0, r0, #15
 801a908:	fa00 f00b 	lsl.w	r0, r0, fp
 801a90c:	ea4a 0a00 	orr.w	sl, sl, r0
 801a910:	f10b 0b04 	add.w	fp, fp, #4
 801a914:	9b05      	ldr	r3, [sp, #20]
 801a916:	e00d      	b.n	801a934 <__gethex+0x24a>
 801a918:	9b05      	ldr	r3, [sp, #20]
 801a91a:	9a08      	ldr	r2, [sp, #32]
 801a91c:	4413      	add	r3, r2
 801a91e:	42bb      	cmp	r3, r7
 801a920:	d3e1      	bcc.n	801a8e6 <__gethex+0x1fc>
 801a922:	4618      	mov	r0, r3
 801a924:	9a01      	ldr	r2, [sp, #4]
 801a926:	9903      	ldr	r1, [sp, #12]
 801a928:	9309      	str	r3, [sp, #36]	; 0x24
 801a92a:	f7fe f891 	bl	8018a50 <strncmp>
 801a92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a930:	2800      	cmp	r0, #0
 801a932:	d1d8      	bne.n	801a8e6 <__gethex+0x1fc>
 801a934:	461e      	mov	r6, r3
 801a936:	e791      	b.n	801a85c <__gethex+0x172>
 801a938:	1eb9      	subs	r1, r7, #2
 801a93a:	4628      	mov	r0, r5
 801a93c:	f000 fd9c 	bl	801b478 <__any_on>
 801a940:	2800      	cmp	r0, #0
 801a942:	d0b2      	beq.n	801a8aa <__gethex+0x1c0>
 801a944:	f04f 0a03 	mov.w	sl, #3
 801a948:	e7b1      	b.n	801a8ae <__gethex+0x1c4>
 801a94a:	da09      	bge.n	801a960 <__gethex+0x276>
 801a94c:	1bf7      	subs	r7, r6, r7
 801a94e:	4629      	mov	r1, r5
 801a950:	463a      	mov	r2, r7
 801a952:	9802      	ldr	r0, [sp, #8]
 801a954:	f000 fbb2 	bl	801b0bc <__lshift>
 801a958:	1be4      	subs	r4, r4, r7
 801a95a:	4605      	mov	r5, r0
 801a95c:	f100 0914 	add.w	r9, r0, #20
 801a960:	f04f 0a00 	mov.w	sl, #0
 801a964:	e7a8      	b.n	801a8b8 <__gethex+0x1ce>
 801a966:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a96a:	42a0      	cmp	r0, r4
 801a96c:	dd6a      	ble.n	801aa44 <__gethex+0x35a>
 801a96e:	1b04      	subs	r4, r0, r4
 801a970:	42a6      	cmp	r6, r4
 801a972:	dc2e      	bgt.n	801a9d2 <__gethex+0x2e8>
 801a974:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a978:	2b02      	cmp	r3, #2
 801a97a:	d022      	beq.n	801a9c2 <__gethex+0x2d8>
 801a97c:	2b03      	cmp	r3, #3
 801a97e:	d024      	beq.n	801a9ca <__gethex+0x2e0>
 801a980:	2b01      	cmp	r3, #1
 801a982:	d115      	bne.n	801a9b0 <__gethex+0x2c6>
 801a984:	42a6      	cmp	r6, r4
 801a986:	d113      	bne.n	801a9b0 <__gethex+0x2c6>
 801a988:	2e01      	cmp	r6, #1
 801a98a:	dc0b      	bgt.n	801a9a4 <__gethex+0x2ba>
 801a98c:	9a06      	ldr	r2, [sp, #24]
 801a98e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a992:	6013      	str	r3, [r2, #0]
 801a994:	2301      	movs	r3, #1
 801a996:	612b      	str	r3, [r5, #16]
 801a998:	f8c9 3000 	str.w	r3, [r9]
 801a99c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a99e:	2762      	movs	r7, #98	; 0x62
 801a9a0:	601d      	str	r5, [r3, #0]
 801a9a2:	e72a      	b.n	801a7fa <__gethex+0x110>
 801a9a4:	1e71      	subs	r1, r6, #1
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	f000 fd66 	bl	801b478 <__any_on>
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	d1ed      	bne.n	801a98c <__gethex+0x2a2>
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	9802      	ldr	r0, [sp, #8]
 801a9b4:	f000 f9b6 	bl	801ad24 <_Bfree>
 801a9b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	6013      	str	r3, [r2, #0]
 801a9be:	2750      	movs	r7, #80	; 0x50
 801a9c0:	e71b      	b.n	801a7fa <__gethex+0x110>
 801a9c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d0e1      	beq.n	801a98c <__gethex+0x2a2>
 801a9c8:	e7f2      	b.n	801a9b0 <__gethex+0x2c6>
 801a9ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d1dd      	bne.n	801a98c <__gethex+0x2a2>
 801a9d0:	e7ee      	b.n	801a9b0 <__gethex+0x2c6>
 801a9d2:	1e67      	subs	r7, r4, #1
 801a9d4:	f1ba 0f00 	cmp.w	sl, #0
 801a9d8:	d131      	bne.n	801aa3e <__gethex+0x354>
 801a9da:	b127      	cbz	r7, 801a9e6 <__gethex+0x2fc>
 801a9dc:	4639      	mov	r1, r7
 801a9de:	4628      	mov	r0, r5
 801a9e0:	f000 fd4a 	bl	801b478 <__any_on>
 801a9e4:	4682      	mov	sl, r0
 801a9e6:	117a      	asrs	r2, r7, #5
 801a9e8:	2301      	movs	r3, #1
 801a9ea:	f007 071f 	and.w	r7, r7, #31
 801a9ee:	fa03 f707 	lsl.w	r7, r3, r7
 801a9f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801a9f6:	4621      	mov	r1, r4
 801a9f8:	421f      	tst	r7, r3
 801a9fa:	4628      	mov	r0, r5
 801a9fc:	bf18      	it	ne
 801a9fe:	f04a 0a02 	orrne.w	sl, sl, #2
 801aa02:	1b36      	subs	r6, r6, r4
 801aa04:	f7ff fe22 	bl	801a64c <rshift>
 801aa08:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801aa0c:	2702      	movs	r7, #2
 801aa0e:	f1ba 0f00 	cmp.w	sl, #0
 801aa12:	d048      	beq.n	801aaa6 <__gethex+0x3bc>
 801aa14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aa18:	2b02      	cmp	r3, #2
 801aa1a:	d015      	beq.n	801aa48 <__gethex+0x35e>
 801aa1c:	2b03      	cmp	r3, #3
 801aa1e:	d017      	beq.n	801aa50 <__gethex+0x366>
 801aa20:	2b01      	cmp	r3, #1
 801aa22:	d109      	bne.n	801aa38 <__gethex+0x34e>
 801aa24:	f01a 0f02 	tst.w	sl, #2
 801aa28:	d006      	beq.n	801aa38 <__gethex+0x34e>
 801aa2a:	f8d9 3000 	ldr.w	r3, [r9]
 801aa2e:	ea4a 0a03 	orr.w	sl, sl, r3
 801aa32:	f01a 0f01 	tst.w	sl, #1
 801aa36:	d10e      	bne.n	801aa56 <__gethex+0x36c>
 801aa38:	f047 0710 	orr.w	r7, r7, #16
 801aa3c:	e033      	b.n	801aaa6 <__gethex+0x3bc>
 801aa3e:	f04f 0a01 	mov.w	sl, #1
 801aa42:	e7d0      	b.n	801a9e6 <__gethex+0x2fc>
 801aa44:	2701      	movs	r7, #1
 801aa46:	e7e2      	b.n	801aa0e <__gethex+0x324>
 801aa48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa4a:	f1c3 0301 	rsb	r3, r3, #1
 801aa4e:	9315      	str	r3, [sp, #84]	; 0x54
 801aa50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d0f0      	beq.n	801aa38 <__gethex+0x34e>
 801aa56:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801aa5a:	f105 0314 	add.w	r3, r5, #20
 801aa5e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801aa62:	eb03 010a 	add.w	r1, r3, sl
 801aa66:	f04f 0c00 	mov.w	ip, #0
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa70:	f1b2 3fff 	cmp.w	r2, #4294967295
 801aa74:	d01c      	beq.n	801aab0 <__gethex+0x3c6>
 801aa76:	3201      	adds	r2, #1
 801aa78:	6002      	str	r2, [r0, #0]
 801aa7a:	2f02      	cmp	r7, #2
 801aa7c:	f105 0314 	add.w	r3, r5, #20
 801aa80:	d138      	bne.n	801aaf4 <__gethex+0x40a>
 801aa82:	f8d8 2000 	ldr.w	r2, [r8]
 801aa86:	3a01      	subs	r2, #1
 801aa88:	42b2      	cmp	r2, r6
 801aa8a:	d10a      	bne.n	801aaa2 <__gethex+0x3b8>
 801aa8c:	1171      	asrs	r1, r6, #5
 801aa8e:	2201      	movs	r2, #1
 801aa90:	f006 061f 	and.w	r6, r6, #31
 801aa94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aa98:	fa02 f606 	lsl.w	r6, r2, r6
 801aa9c:	421e      	tst	r6, r3
 801aa9e:	bf18      	it	ne
 801aaa0:	4617      	movne	r7, r2
 801aaa2:	f047 0720 	orr.w	r7, r7, #32
 801aaa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aaa8:	601d      	str	r5, [r3, #0]
 801aaaa:	9b06      	ldr	r3, [sp, #24]
 801aaac:	601c      	str	r4, [r3, #0]
 801aaae:	e6a4      	b.n	801a7fa <__gethex+0x110>
 801aab0:	4299      	cmp	r1, r3
 801aab2:	f843 cc04 	str.w	ip, [r3, #-4]
 801aab6:	d8d8      	bhi.n	801aa6a <__gethex+0x380>
 801aab8:	68ab      	ldr	r3, [r5, #8]
 801aaba:	4599      	cmp	r9, r3
 801aabc:	db12      	blt.n	801aae4 <__gethex+0x3fa>
 801aabe:	6869      	ldr	r1, [r5, #4]
 801aac0:	9802      	ldr	r0, [sp, #8]
 801aac2:	3101      	adds	r1, #1
 801aac4:	f000 f8fa 	bl	801acbc <_Balloc>
 801aac8:	692a      	ldr	r2, [r5, #16]
 801aaca:	3202      	adds	r2, #2
 801aacc:	f105 010c 	add.w	r1, r5, #12
 801aad0:	4683      	mov	fp, r0
 801aad2:	0092      	lsls	r2, r2, #2
 801aad4:	300c      	adds	r0, #12
 801aad6:	f7fd f9da 	bl	8017e8e <memcpy>
 801aada:	4629      	mov	r1, r5
 801aadc:	9802      	ldr	r0, [sp, #8]
 801aade:	f000 f921 	bl	801ad24 <_Bfree>
 801aae2:	465d      	mov	r5, fp
 801aae4:	692b      	ldr	r3, [r5, #16]
 801aae6:	1c5a      	adds	r2, r3, #1
 801aae8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801aaec:	612a      	str	r2, [r5, #16]
 801aaee:	2201      	movs	r2, #1
 801aaf0:	615a      	str	r2, [r3, #20]
 801aaf2:	e7c2      	b.n	801aa7a <__gethex+0x390>
 801aaf4:	692a      	ldr	r2, [r5, #16]
 801aaf6:	454a      	cmp	r2, r9
 801aaf8:	dd0b      	ble.n	801ab12 <__gethex+0x428>
 801aafa:	2101      	movs	r1, #1
 801aafc:	4628      	mov	r0, r5
 801aafe:	f7ff fda5 	bl	801a64c <rshift>
 801ab02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab06:	3401      	adds	r4, #1
 801ab08:	42a3      	cmp	r3, r4
 801ab0a:	f6ff aed9 	blt.w	801a8c0 <__gethex+0x1d6>
 801ab0e:	2701      	movs	r7, #1
 801ab10:	e7c7      	b.n	801aaa2 <__gethex+0x3b8>
 801ab12:	f016 061f 	ands.w	r6, r6, #31
 801ab16:	d0fa      	beq.n	801ab0e <__gethex+0x424>
 801ab18:	449a      	add	sl, r3
 801ab1a:	f1c6 0620 	rsb	r6, r6, #32
 801ab1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ab22:	f000 f98f 	bl	801ae44 <__hi0bits>
 801ab26:	42b0      	cmp	r0, r6
 801ab28:	dbe7      	blt.n	801aafa <__gethex+0x410>
 801ab2a:	e7f0      	b.n	801ab0e <__gethex+0x424>

0801ab2c <L_shift>:
 801ab2c:	f1c2 0208 	rsb	r2, r2, #8
 801ab30:	0092      	lsls	r2, r2, #2
 801ab32:	b570      	push	{r4, r5, r6, lr}
 801ab34:	f1c2 0620 	rsb	r6, r2, #32
 801ab38:	6843      	ldr	r3, [r0, #4]
 801ab3a:	6804      	ldr	r4, [r0, #0]
 801ab3c:	fa03 f506 	lsl.w	r5, r3, r6
 801ab40:	432c      	orrs	r4, r5
 801ab42:	40d3      	lsrs	r3, r2
 801ab44:	6004      	str	r4, [r0, #0]
 801ab46:	f840 3f04 	str.w	r3, [r0, #4]!
 801ab4a:	4288      	cmp	r0, r1
 801ab4c:	d3f4      	bcc.n	801ab38 <L_shift+0xc>
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}

0801ab50 <__match>:
 801ab50:	b530      	push	{r4, r5, lr}
 801ab52:	6803      	ldr	r3, [r0, #0]
 801ab54:	3301      	adds	r3, #1
 801ab56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab5a:	b914      	cbnz	r4, 801ab62 <__match+0x12>
 801ab5c:	6003      	str	r3, [r0, #0]
 801ab5e:	2001      	movs	r0, #1
 801ab60:	bd30      	pop	{r4, r5, pc}
 801ab62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ab6a:	2d19      	cmp	r5, #25
 801ab6c:	bf98      	it	ls
 801ab6e:	3220      	addls	r2, #32
 801ab70:	42a2      	cmp	r2, r4
 801ab72:	d0f0      	beq.n	801ab56 <__match+0x6>
 801ab74:	2000      	movs	r0, #0
 801ab76:	e7f3      	b.n	801ab60 <__match+0x10>

0801ab78 <__hexnan>:
 801ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab7c:	680b      	ldr	r3, [r1, #0]
 801ab7e:	6801      	ldr	r1, [r0, #0]
 801ab80:	115f      	asrs	r7, r3, #5
 801ab82:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801ab86:	f013 031f 	ands.w	r3, r3, #31
 801ab8a:	b087      	sub	sp, #28
 801ab8c:	bf18      	it	ne
 801ab8e:	3704      	addne	r7, #4
 801ab90:	2500      	movs	r5, #0
 801ab92:	1f3e      	subs	r6, r7, #4
 801ab94:	4682      	mov	sl, r0
 801ab96:	4690      	mov	r8, r2
 801ab98:	9301      	str	r3, [sp, #4]
 801ab9a:	f847 5c04 	str.w	r5, [r7, #-4]
 801ab9e:	46b1      	mov	r9, r6
 801aba0:	4634      	mov	r4, r6
 801aba2:	9502      	str	r5, [sp, #8]
 801aba4:	46ab      	mov	fp, r5
 801aba6:	784a      	ldrb	r2, [r1, #1]
 801aba8:	1c4b      	adds	r3, r1, #1
 801abaa:	9303      	str	r3, [sp, #12]
 801abac:	b342      	cbz	r2, 801ac00 <__hexnan+0x88>
 801abae:	4610      	mov	r0, r2
 801abb0:	9105      	str	r1, [sp, #20]
 801abb2:	9204      	str	r2, [sp, #16]
 801abb4:	f7ff fd84 	bl	801a6c0 <__hexdig_fun>
 801abb8:	2800      	cmp	r0, #0
 801abba:	d143      	bne.n	801ac44 <__hexnan+0xcc>
 801abbc:	9a04      	ldr	r2, [sp, #16]
 801abbe:	9905      	ldr	r1, [sp, #20]
 801abc0:	2a20      	cmp	r2, #32
 801abc2:	d818      	bhi.n	801abf6 <__hexnan+0x7e>
 801abc4:	9b02      	ldr	r3, [sp, #8]
 801abc6:	459b      	cmp	fp, r3
 801abc8:	dd13      	ble.n	801abf2 <__hexnan+0x7a>
 801abca:	454c      	cmp	r4, r9
 801abcc:	d206      	bcs.n	801abdc <__hexnan+0x64>
 801abce:	2d07      	cmp	r5, #7
 801abd0:	dc04      	bgt.n	801abdc <__hexnan+0x64>
 801abd2:	462a      	mov	r2, r5
 801abd4:	4649      	mov	r1, r9
 801abd6:	4620      	mov	r0, r4
 801abd8:	f7ff ffa8 	bl	801ab2c <L_shift>
 801abdc:	4544      	cmp	r4, r8
 801abde:	d944      	bls.n	801ac6a <__hexnan+0xf2>
 801abe0:	2300      	movs	r3, #0
 801abe2:	f1a4 0904 	sub.w	r9, r4, #4
 801abe6:	f844 3c04 	str.w	r3, [r4, #-4]
 801abea:	f8cd b008 	str.w	fp, [sp, #8]
 801abee:	464c      	mov	r4, r9
 801abf0:	461d      	mov	r5, r3
 801abf2:	9903      	ldr	r1, [sp, #12]
 801abf4:	e7d7      	b.n	801aba6 <__hexnan+0x2e>
 801abf6:	2a29      	cmp	r2, #41	; 0x29
 801abf8:	d14a      	bne.n	801ac90 <__hexnan+0x118>
 801abfa:	3102      	adds	r1, #2
 801abfc:	f8ca 1000 	str.w	r1, [sl]
 801ac00:	f1bb 0f00 	cmp.w	fp, #0
 801ac04:	d044      	beq.n	801ac90 <__hexnan+0x118>
 801ac06:	454c      	cmp	r4, r9
 801ac08:	d206      	bcs.n	801ac18 <__hexnan+0xa0>
 801ac0a:	2d07      	cmp	r5, #7
 801ac0c:	dc04      	bgt.n	801ac18 <__hexnan+0xa0>
 801ac0e:	462a      	mov	r2, r5
 801ac10:	4649      	mov	r1, r9
 801ac12:	4620      	mov	r0, r4
 801ac14:	f7ff ff8a 	bl	801ab2c <L_shift>
 801ac18:	4544      	cmp	r4, r8
 801ac1a:	d928      	bls.n	801ac6e <__hexnan+0xf6>
 801ac1c:	4643      	mov	r3, r8
 801ac1e:	f854 2b04 	ldr.w	r2, [r4], #4
 801ac22:	f843 2b04 	str.w	r2, [r3], #4
 801ac26:	42a6      	cmp	r6, r4
 801ac28:	d2f9      	bcs.n	801ac1e <__hexnan+0xa6>
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	f843 2b04 	str.w	r2, [r3], #4
 801ac30:	429e      	cmp	r6, r3
 801ac32:	d2fb      	bcs.n	801ac2c <__hexnan+0xb4>
 801ac34:	6833      	ldr	r3, [r6, #0]
 801ac36:	b91b      	cbnz	r3, 801ac40 <__hexnan+0xc8>
 801ac38:	4546      	cmp	r6, r8
 801ac3a:	d127      	bne.n	801ac8c <__hexnan+0x114>
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	6033      	str	r3, [r6, #0]
 801ac40:	2005      	movs	r0, #5
 801ac42:	e026      	b.n	801ac92 <__hexnan+0x11a>
 801ac44:	3501      	adds	r5, #1
 801ac46:	2d08      	cmp	r5, #8
 801ac48:	f10b 0b01 	add.w	fp, fp, #1
 801ac4c:	dd06      	ble.n	801ac5c <__hexnan+0xe4>
 801ac4e:	4544      	cmp	r4, r8
 801ac50:	d9cf      	bls.n	801abf2 <__hexnan+0x7a>
 801ac52:	2300      	movs	r3, #0
 801ac54:	f844 3c04 	str.w	r3, [r4, #-4]
 801ac58:	2501      	movs	r5, #1
 801ac5a:	3c04      	subs	r4, #4
 801ac5c:	6822      	ldr	r2, [r4, #0]
 801ac5e:	f000 000f 	and.w	r0, r0, #15
 801ac62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ac66:	6020      	str	r0, [r4, #0]
 801ac68:	e7c3      	b.n	801abf2 <__hexnan+0x7a>
 801ac6a:	2508      	movs	r5, #8
 801ac6c:	e7c1      	b.n	801abf2 <__hexnan+0x7a>
 801ac6e:	9b01      	ldr	r3, [sp, #4]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d0df      	beq.n	801ac34 <__hexnan+0xbc>
 801ac74:	f04f 32ff 	mov.w	r2, #4294967295
 801ac78:	f1c3 0320 	rsb	r3, r3, #32
 801ac7c:	fa22 f303 	lsr.w	r3, r2, r3
 801ac80:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801ac84:	401a      	ands	r2, r3
 801ac86:	f847 2c04 	str.w	r2, [r7, #-4]
 801ac8a:	e7d3      	b.n	801ac34 <__hexnan+0xbc>
 801ac8c:	3e04      	subs	r6, #4
 801ac8e:	e7d1      	b.n	801ac34 <__hexnan+0xbc>
 801ac90:	2004      	movs	r0, #4
 801ac92:	b007      	add	sp, #28
 801ac94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac98 <__localeconv_l>:
 801ac98:	30f0      	adds	r0, #240	; 0xf0
 801ac9a:	4770      	bx	lr

0801ac9c <_localeconv_r>:
 801ac9c:	4b04      	ldr	r3, [pc, #16]	; (801acb0 <_localeconv_r+0x14>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	6a18      	ldr	r0, [r3, #32]
 801aca2:	4b04      	ldr	r3, [pc, #16]	; (801acb4 <_localeconv_r+0x18>)
 801aca4:	2800      	cmp	r0, #0
 801aca6:	bf08      	it	eq
 801aca8:	4618      	moveq	r0, r3
 801acaa:	30f0      	adds	r0, #240	; 0xf0
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop
 801acb0:	20000074 	.word	0x20000074
 801acb4:	200000d8 	.word	0x200000d8

0801acb8 <__malloc_lock>:
 801acb8:	4770      	bx	lr

0801acba <__malloc_unlock>:
 801acba:	4770      	bx	lr

0801acbc <_Balloc>:
 801acbc:	b570      	push	{r4, r5, r6, lr}
 801acbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801acc0:	4604      	mov	r4, r0
 801acc2:	460e      	mov	r6, r1
 801acc4:	b93d      	cbnz	r5, 801acd6 <_Balloc+0x1a>
 801acc6:	2010      	movs	r0, #16
 801acc8:	f7fd f8b0 	bl	8017e2c <malloc>
 801accc:	6260      	str	r0, [r4, #36]	; 0x24
 801acce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801acd2:	6005      	str	r5, [r0, #0]
 801acd4:	60c5      	str	r5, [r0, #12]
 801acd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801acd8:	68eb      	ldr	r3, [r5, #12]
 801acda:	b183      	cbz	r3, 801acfe <_Balloc+0x42>
 801acdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801acde:	68db      	ldr	r3, [r3, #12]
 801ace0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ace4:	b9b8      	cbnz	r0, 801ad16 <_Balloc+0x5a>
 801ace6:	2101      	movs	r1, #1
 801ace8:	fa01 f506 	lsl.w	r5, r1, r6
 801acec:	1d6a      	adds	r2, r5, #5
 801acee:	0092      	lsls	r2, r2, #2
 801acf0:	4620      	mov	r0, r4
 801acf2:	f000 fbe2 	bl	801b4ba <_calloc_r>
 801acf6:	b160      	cbz	r0, 801ad12 <_Balloc+0x56>
 801acf8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801acfc:	e00e      	b.n	801ad1c <_Balloc+0x60>
 801acfe:	2221      	movs	r2, #33	; 0x21
 801ad00:	2104      	movs	r1, #4
 801ad02:	4620      	mov	r0, r4
 801ad04:	f000 fbd9 	bl	801b4ba <_calloc_r>
 801ad08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ad0a:	60e8      	str	r0, [r5, #12]
 801ad0c:	68db      	ldr	r3, [r3, #12]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d1e4      	bne.n	801acdc <_Balloc+0x20>
 801ad12:	2000      	movs	r0, #0
 801ad14:	bd70      	pop	{r4, r5, r6, pc}
 801ad16:	6802      	ldr	r2, [r0, #0]
 801ad18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ad22:	e7f7      	b.n	801ad14 <_Balloc+0x58>

0801ad24 <_Bfree>:
 801ad24:	b570      	push	{r4, r5, r6, lr}
 801ad26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801ad28:	4606      	mov	r6, r0
 801ad2a:	460d      	mov	r5, r1
 801ad2c:	b93c      	cbnz	r4, 801ad3e <_Bfree+0x1a>
 801ad2e:	2010      	movs	r0, #16
 801ad30:	f7fd f87c 	bl	8017e2c <malloc>
 801ad34:	6270      	str	r0, [r6, #36]	; 0x24
 801ad36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ad3a:	6004      	str	r4, [r0, #0]
 801ad3c:	60c4      	str	r4, [r0, #12]
 801ad3e:	b13d      	cbz	r5, 801ad50 <_Bfree+0x2c>
 801ad40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ad42:	686a      	ldr	r2, [r5, #4]
 801ad44:	68db      	ldr	r3, [r3, #12]
 801ad46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ad4a:	6029      	str	r1, [r5, #0]
 801ad4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801ad50:	bd70      	pop	{r4, r5, r6, pc}

0801ad52 <__multadd>:
 801ad52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad56:	690d      	ldr	r5, [r1, #16]
 801ad58:	461f      	mov	r7, r3
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	460c      	mov	r4, r1
 801ad5e:	f101 0c14 	add.w	ip, r1, #20
 801ad62:	2300      	movs	r3, #0
 801ad64:	f8dc 0000 	ldr.w	r0, [ip]
 801ad68:	b281      	uxth	r1, r0
 801ad6a:	fb02 7101 	mla	r1, r2, r1, r7
 801ad6e:	0c0f      	lsrs	r7, r1, #16
 801ad70:	0c00      	lsrs	r0, r0, #16
 801ad72:	fb02 7000 	mla	r0, r2, r0, r7
 801ad76:	b289      	uxth	r1, r1
 801ad78:	3301      	adds	r3, #1
 801ad7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801ad7e:	429d      	cmp	r5, r3
 801ad80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801ad84:	f84c 1b04 	str.w	r1, [ip], #4
 801ad88:	dcec      	bgt.n	801ad64 <__multadd+0x12>
 801ad8a:	b1d7      	cbz	r7, 801adc2 <__multadd+0x70>
 801ad8c:	68a3      	ldr	r3, [r4, #8]
 801ad8e:	42ab      	cmp	r3, r5
 801ad90:	dc12      	bgt.n	801adb8 <__multadd+0x66>
 801ad92:	6861      	ldr	r1, [r4, #4]
 801ad94:	4630      	mov	r0, r6
 801ad96:	3101      	adds	r1, #1
 801ad98:	f7ff ff90 	bl	801acbc <_Balloc>
 801ad9c:	6922      	ldr	r2, [r4, #16]
 801ad9e:	3202      	adds	r2, #2
 801ada0:	f104 010c 	add.w	r1, r4, #12
 801ada4:	4680      	mov	r8, r0
 801ada6:	0092      	lsls	r2, r2, #2
 801ada8:	300c      	adds	r0, #12
 801adaa:	f7fd f870 	bl	8017e8e <memcpy>
 801adae:	4621      	mov	r1, r4
 801adb0:	4630      	mov	r0, r6
 801adb2:	f7ff ffb7 	bl	801ad24 <_Bfree>
 801adb6:	4644      	mov	r4, r8
 801adb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801adbc:	3501      	adds	r5, #1
 801adbe:	615f      	str	r7, [r3, #20]
 801adc0:	6125      	str	r5, [r4, #16]
 801adc2:	4620      	mov	r0, r4
 801adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801adc8 <__s2b>:
 801adc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adcc:	460c      	mov	r4, r1
 801adce:	4615      	mov	r5, r2
 801add0:	461f      	mov	r7, r3
 801add2:	2209      	movs	r2, #9
 801add4:	3308      	adds	r3, #8
 801add6:	4606      	mov	r6, r0
 801add8:	fb93 f3f2 	sdiv	r3, r3, r2
 801addc:	2100      	movs	r1, #0
 801adde:	2201      	movs	r2, #1
 801ade0:	429a      	cmp	r2, r3
 801ade2:	db20      	blt.n	801ae26 <__s2b+0x5e>
 801ade4:	4630      	mov	r0, r6
 801ade6:	f7ff ff69 	bl	801acbc <_Balloc>
 801adea:	9b08      	ldr	r3, [sp, #32]
 801adec:	6143      	str	r3, [r0, #20]
 801adee:	2d09      	cmp	r5, #9
 801adf0:	f04f 0301 	mov.w	r3, #1
 801adf4:	6103      	str	r3, [r0, #16]
 801adf6:	dd19      	ble.n	801ae2c <__s2b+0x64>
 801adf8:	f104 0809 	add.w	r8, r4, #9
 801adfc:	46c1      	mov	r9, r8
 801adfe:	442c      	add	r4, r5
 801ae00:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ae04:	4601      	mov	r1, r0
 801ae06:	3b30      	subs	r3, #48	; 0x30
 801ae08:	220a      	movs	r2, #10
 801ae0a:	4630      	mov	r0, r6
 801ae0c:	f7ff ffa1 	bl	801ad52 <__multadd>
 801ae10:	45a1      	cmp	r9, r4
 801ae12:	d1f5      	bne.n	801ae00 <__s2b+0x38>
 801ae14:	eb08 0405 	add.w	r4, r8, r5
 801ae18:	3c08      	subs	r4, #8
 801ae1a:	1b2d      	subs	r5, r5, r4
 801ae1c:	1963      	adds	r3, r4, r5
 801ae1e:	42bb      	cmp	r3, r7
 801ae20:	db07      	blt.n	801ae32 <__s2b+0x6a>
 801ae22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae26:	0052      	lsls	r2, r2, #1
 801ae28:	3101      	adds	r1, #1
 801ae2a:	e7d9      	b.n	801ade0 <__s2b+0x18>
 801ae2c:	340a      	adds	r4, #10
 801ae2e:	2509      	movs	r5, #9
 801ae30:	e7f3      	b.n	801ae1a <__s2b+0x52>
 801ae32:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ae36:	4601      	mov	r1, r0
 801ae38:	3b30      	subs	r3, #48	; 0x30
 801ae3a:	220a      	movs	r2, #10
 801ae3c:	4630      	mov	r0, r6
 801ae3e:	f7ff ff88 	bl	801ad52 <__multadd>
 801ae42:	e7eb      	b.n	801ae1c <__s2b+0x54>

0801ae44 <__hi0bits>:
 801ae44:	0c02      	lsrs	r2, r0, #16
 801ae46:	0412      	lsls	r2, r2, #16
 801ae48:	4603      	mov	r3, r0
 801ae4a:	b9b2      	cbnz	r2, 801ae7a <__hi0bits+0x36>
 801ae4c:	0403      	lsls	r3, r0, #16
 801ae4e:	2010      	movs	r0, #16
 801ae50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ae54:	bf04      	itt	eq
 801ae56:	021b      	lsleq	r3, r3, #8
 801ae58:	3008      	addeq	r0, #8
 801ae5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ae5e:	bf04      	itt	eq
 801ae60:	011b      	lsleq	r3, r3, #4
 801ae62:	3004      	addeq	r0, #4
 801ae64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ae68:	bf04      	itt	eq
 801ae6a:	009b      	lsleq	r3, r3, #2
 801ae6c:	3002      	addeq	r0, #2
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	db06      	blt.n	801ae80 <__hi0bits+0x3c>
 801ae72:	005b      	lsls	r3, r3, #1
 801ae74:	d503      	bpl.n	801ae7e <__hi0bits+0x3a>
 801ae76:	3001      	adds	r0, #1
 801ae78:	4770      	bx	lr
 801ae7a:	2000      	movs	r0, #0
 801ae7c:	e7e8      	b.n	801ae50 <__hi0bits+0xc>
 801ae7e:	2020      	movs	r0, #32
 801ae80:	4770      	bx	lr

0801ae82 <__lo0bits>:
 801ae82:	6803      	ldr	r3, [r0, #0]
 801ae84:	f013 0207 	ands.w	r2, r3, #7
 801ae88:	4601      	mov	r1, r0
 801ae8a:	d00b      	beq.n	801aea4 <__lo0bits+0x22>
 801ae8c:	07da      	lsls	r2, r3, #31
 801ae8e:	d423      	bmi.n	801aed8 <__lo0bits+0x56>
 801ae90:	0798      	lsls	r0, r3, #30
 801ae92:	bf49      	itett	mi
 801ae94:	085b      	lsrmi	r3, r3, #1
 801ae96:	089b      	lsrpl	r3, r3, #2
 801ae98:	2001      	movmi	r0, #1
 801ae9a:	600b      	strmi	r3, [r1, #0]
 801ae9c:	bf5c      	itt	pl
 801ae9e:	600b      	strpl	r3, [r1, #0]
 801aea0:	2002      	movpl	r0, #2
 801aea2:	4770      	bx	lr
 801aea4:	b298      	uxth	r0, r3
 801aea6:	b9a8      	cbnz	r0, 801aed4 <__lo0bits+0x52>
 801aea8:	0c1b      	lsrs	r3, r3, #16
 801aeaa:	2010      	movs	r0, #16
 801aeac:	f013 0fff 	tst.w	r3, #255	; 0xff
 801aeb0:	bf04      	itt	eq
 801aeb2:	0a1b      	lsreq	r3, r3, #8
 801aeb4:	3008      	addeq	r0, #8
 801aeb6:	071a      	lsls	r2, r3, #28
 801aeb8:	bf04      	itt	eq
 801aeba:	091b      	lsreq	r3, r3, #4
 801aebc:	3004      	addeq	r0, #4
 801aebe:	079a      	lsls	r2, r3, #30
 801aec0:	bf04      	itt	eq
 801aec2:	089b      	lsreq	r3, r3, #2
 801aec4:	3002      	addeq	r0, #2
 801aec6:	07da      	lsls	r2, r3, #31
 801aec8:	d402      	bmi.n	801aed0 <__lo0bits+0x4e>
 801aeca:	085b      	lsrs	r3, r3, #1
 801aecc:	d006      	beq.n	801aedc <__lo0bits+0x5a>
 801aece:	3001      	adds	r0, #1
 801aed0:	600b      	str	r3, [r1, #0]
 801aed2:	4770      	bx	lr
 801aed4:	4610      	mov	r0, r2
 801aed6:	e7e9      	b.n	801aeac <__lo0bits+0x2a>
 801aed8:	2000      	movs	r0, #0
 801aeda:	4770      	bx	lr
 801aedc:	2020      	movs	r0, #32
 801aede:	4770      	bx	lr

0801aee0 <__i2b>:
 801aee0:	b510      	push	{r4, lr}
 801aee2:	460c      	mov	r4, r1
 801aee4:	2101      	movs	r1, #1
 801aee6:	f7ff fee9 	bl	801acbc <_Balloc>
 801aeea:	2201      	movs	r2, #1
 801aeec:	6144      	str	r4, [r0, #20]
 801aeee:	6102      	str	r2, [r0, #16]
 801aef0:	bd10      	pop	{r4, pc}

0801aef2 <__multiply>:
 801aef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef6:	4614      	mov	r4, r2
 801aef8:	690a      	ldr	r2, [r1, #16]
 801aefa:	6923      	ldr	r3, [r4, #16]
 801aefc:	429a      	cmp	r2, r3
 801aefe:	bfb8      	it	lt
 801af00:	460b      	movlt	r3, r1
 801af02:	4688      	mov	r8, r1
 801af04:	bfbc      	itt	lt
 801af06:	46a0      	movlt	r8, r4
 801af08:	461c      	movlt	r4, r3
 801af0a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801af0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801af12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801af16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801af1a:	eb07 0609 	add.w	r6, r7, r9
 801af1e:	42b3      	cmp	r3, r6
 801af20:	bfb8      	it	lt
 801af22:	3101      	addlt	r1, #1
 801af24:	f7ff feca 	bl	801acbc <_Balloc>
 801af28:	f100 0514 	add.w	r5, r0, #20
 801af2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801af30:	462b      	mov	r3, r5
 801af32:	2200      	movs	r2, #0
 801af34:	4573      	cmp	r3, lr
 801af36:	d316      	bcc.n	801af66 <__multiply+0x74>
 801af38:	f104 0214 	add.w	r2, r4, #20
 801af3c:	f108 0114 	add.w	r1, r8, #20
 801af40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801af44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801af48:	9300      	str	r3, [sp, #0]
 801af4a:	9b00      	ldr	r3, [sp, #0]
 801af4c:	9201      	str	r2, [sp, #4]
 801af4e:	4293      	cmp	r3, r2
 801af50:	d80c      	bhi.n	801af6c <__multiply+0x7a>
 801af52:	2e00      	cmp	r6, #0
 801af54:	dd03      	ble.n	801af5e <__multiply+0x6c>
 801af56:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d05d      	beq.n	801b01a <__multiply+0x128>
 801af5e:	6106      	str	r6, [r0, #16]
 801af60:	b003      	add	sp, #12
 801af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af66:	f843 2b04 	str.w	r2, [r3], #4
 801af6a:	e7e3      	b.n	801af34 <__multiply+0x42>
 801af6c:	f8b2 b000 	ldrh.w	fp, [r2]
 801af70:	f1bb 0f00 	cmp.w	fp, #0
 801af74:	d023      	beq.n	801afbe <__multiply+0xcc>
 801af76:	4689      	mov	r9, r1
 801af78:	46ac      	mov	ip, r5
 801af7a:	f04f 0800 	mov.w	r8, #0
 801af7e:	f859 4b04 	ldr.w	r4, [r9], #4
 801af82:	f8dc a000 	ldr.w	sl, [ip]
 801af86:	b2a3      	uxth	r3, r4
 801af88:	fa1f fa8a 	uxth.w	sl, sl
 801af8c:	fb0b a303 	mla	r3, fp, r3, sl
 801af90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801af94:	f8dc 4000 	ldr.w	r4, [ip]
 801af98:	4443      	add	r3, r8
 801af9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801af9e:	fb0b 840a 	mla	r4, fp, sl, r8
 801afa2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801afa6:	46e2      	mov	sl, ip
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801afae:	454f      	cmp	r7, r9
 801afb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801afb4:	f84a 3b04 	str.w	r3, [sl], #4
 801afb8:	d82b      	bhi.n	801b012 <__multiply+0x120>
 801afba:	f8cc 8004 	str.w	r8, [ip, #4]
 801afbe:	9b01      	ldr	r3, [sp, #4]
 801afc0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801afc4:	3204      	adds	r2, #4
 801afc6:	f1ba 0f00 	cmp.w	sl, #0
 801afca:	d020      	beq.n	801b00e <__multiply+0x11c>
 801afcc:	682b      	ldr	r3, [r5, #0]
 801afce:	4689      	mov	r9, r1
 801afd0:	46a8      	mov	r8, r5
 801afd2:	f04f 0b00 	mov.w	fp, #0
 801afd6:	f8b9 c000 	ldrh.w	ip, [r9]
 801afda:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801afde:	fb0a 440c 	mla	r4, sl, ip, r4
 801afe2:	445c      	add	r4, fp
 801afe4:	46c4      	mov	ip, r8
 801afe6:	b29b      	uxth	r3, r3
 801afe8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801afec:	f84c 3b04 	str.w	r3, [ip], #4
 801aff0:	f859 3b04 	ldr.w	r3, [r9], #4
 801aff4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801aff8:	0c1b      	lsrs	r3, r3, #16
 801affa:	fb0a b303 	mla	r3, sl, r3, fp
 801affe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b002:	454f      	cmp	r7, r9
 801b004:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801b008:	d805      	bhi.n	801b016 <__multiply+0x124>
 801b00a:	f8c8 3004 	str.w	r3, [r8, #4]
 801b00e:	3504      	adds	r5, #4
 801b010:	e79b      	b.n	801af4a <__multiply+0x58>
 801b012:	46d4      	mov	ip, sl
 801b014:	e7b3      	b.n	801af7e <__multiply+0x8c>
 801b016:	46e0      	mov	r8, ip
 801b018:	e7dd      	b.n	801afd6 <__multiply+0xe4>
 801b01a:	3e01      	subs	r6, #1
 801b01c:	e799      	b.n	801af52 <__multiply+0x60>
	...

0801b020 <__pow5mult>:
 801b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b024:	4615      	mov	r5, r2
 801b026:	f012 0203 	ands.w	r2, r2, #3
 801b02a:	4606      	mov	r6, r0
 801b02c:	460f      	mov	r7, r1
 801b02e:	d007      	beq.n	801b040 <__pow5mult+0x20>
 801b030:	3a01      	subs	r2, #1
 801b032:	4c21      	ldr	r4, [pc, #132]	; (801b0b8 <__pow5mult+0x98>)
 801b034:	2300      	movs	r3, #0
 801b036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b03a:	f7ff fe8a 	bl	801ad52 <__multadd>
 801b03e:	4607      	mov	r7, r0
 801b040:	10ad      	asrs	r5, r5, #2
 801b042:	d035      	beq.n	801b0b0 <__pow5mult+0x90>
 801b044:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b046:	b93c      	cbnz	r4, 801b058 <__pow5mult+0x38>
 801b048:	2010      	movs	r0, #16
 801b04a:	f7fc feef 	bl	8017e2c <malloc>
 801b04e:	6270      	str	r0, [r6, #36]	; 0x24
 801b050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b054:	6004      	str	r4, [r0, #0]
 801b056:	60c4      	str	r4, [r0, #12]
 801b058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b060:	b94c      	cbnz	r4, 801b076 <__pow5mult+0x56>
 801b062:	f240 2171 	movw	r1, #625	; 0x271
 801b066:	4630      	mov	r0, r6
 801b068:	f7ff ff3a 	bl	801aee0 <__i2b>
 801b06c:	2300      	movs	r3, #0
 801b06e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b072:	4604      	mov	r4, r0
 801b074:	6003      	str	r3, [r0, #0]
 801b076:	f04f 0800 	mov.w	r8, #0
 801b07a:	07eb      	lsls	r3, r5, #31
 801b07c:	d50a      	bpl.n	801b094 <__pow5mult+0x74>
 801b07e:	4639      	mov	r1, r7
 801b080:	4622      	mov	r2, r4
 801b082:	4630      	mov	r0, r6
 801b084:	f7ff ff35 	bl	801aef2 <__multiply>
 801b088:	4639      	mov	r1, r7
 801b08a:	4681      	mov	r9, r0
 801b08c:	4630      	mov	r0, r6
 801b08e:	f7ff fe49 	bl	801ad24 <_Bfree>
 801b092:	464f      	mov	r7, r9
 801b094:	106d      	asrs	r5, r5, #1
 801b096:	d00b      	beq.n	801b0b0 <__pow5mult+0x90>
 801b098:	6820      	ldr	r0, [r4, #0]
 801b09a:	b938      	cbnz	r0, 801b0ac <__pow5mult+0x8c>
 801b09c:	4622      	mov	r2, r4
 801b09e:	4621      	mov	r1, r4
 801b0a0:	4630      	mov	r0, r6
 801b0a2:	f7ff ff26 	bl	801aef2 <__multiply>
 801b0a6:	6020      	str	r0, [r4, #0]
 801b0a8:	f8c0 8000 	str.w	r8, [r0]
 801b0ac:	4604      	mov	r4, r0
 801b0ae:	e7e4      	b.n	801b07a <__pow5mult+0x5a>
 801b0b0:	4638      	mov	r0, r7
 801b0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0b6:	bf00      	nop
 801b0b8:	08020d88 	.word	0x08020d88

0801b0bc <__lshift>:
 801b0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0c0:	460c      	mov	r4, r1
 801b0c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b0c6:	6923      	ldr	r3, [r4, #16]
 801b0c8:	6849      	ldr	r1, [r1, #4]
 801b0ca:	eb0a 0903 	add.w	r9, sl, r3
 801b0ce:	68a3      	ldr	r3, [r4, #8]
 801b0d0:	4607      	mov	r7, r0
 801b0d2:	4616      	mov	r6, r2
 801b0d4:	f109 0501 	add.w	r5, r9, #1
 801b0d8:	42ab      	cmp	r3, r5
 801b0da:	db32      	blt.n	801b142 <__lshift+0x86>
 801b0dc:	4638      	mov	r0, r7
 801b0de:	f7ff fded 	bl	801acbc <_Balloc>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	4680      	mov	r8, r0
 801b0e6:	f100 0114 	add.w	r1, r0, #20
 801b0ea:	461a      	mov	r2, r3
 801b0ec:	4553      	cmp	r3, sl
 801b0ee:	db2b      	blt.n	801b148 <__lshift+0x8c>
 801b0f0:	6920      	ldr	r0, [r4, #16]
 801b0f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b0f6:	f104 0314 	add.w	r3, r4, #20
 801b0fa:	f016 021f 	ands.w	r2, r6, #31
 801b0fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b102:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b106:	d025      	beq.n	801b154 <__lshift+0x98>
 801b108:	f1c2 0e20 	rsb	lr, r2, #32
 801b10c:	2000      	movs	r0, #0
 801b10e:	681e      	ldr	r6, [r3, #0]
 801b110:	468a      	mov	sl, r1
 801b112:	4096      	lsls	r6, r2
 801b114:	4330      	orrs	r0, r6
 801b116:	f84a 0b04 	str.w	r0, [sl], #4
 801b11a:	f853 0b04 	ldr.w	r0, [r3], #4
 801b11e:	459c      	cmp	ip, r3
 801b120:	fa20 f00e 	lsr.w	r0, r0, lr
 801b124:	d814      	bhi.n	801b150 <__lshift+0x94>
 801b126:	6048      	str	r0, [r1, #4]
 801b128:	b108      	cbz	r0, 801b12e <__lshift+0x72>
 801b12a:	f109 0502 	add.w	r5, r9, #2
 801b12e:	3d01      	subs	r5, #1
 801b130:	4638      	mov	r0, r7
 801b132:	f8c8 5010 	str.w	r5, [r8, #16]
 801b136:	4621      	mov	r1, r4
 801b138:	f7ff fdf4 	bl	801ad24 <_Bfree>
 801b13c:	4640      	mov	r0, r8
 801b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b142:	3101      	adds	r1, #1
 801b144:	005b      	lsls	r3, r3, #1
 801b146:	e7c7      	b.n	801b0d8 <__lshift+0x1c>
 801b148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801b14c:	3301      	adds	r3, #1
 801b14e:	e7cd      	b.n	801b0ec <__lshift+0x30>
 801b150:	4651      	mov	r1, sl
 801b152:	e7dc      	b.n	801b10e <__lshift+0x52>
 801b154:	3904      	subs	r1, #4
 801b156:	f853 2b04 	ldr.w	r2, [r3], #4
 801b15a:	f841 2f04 	str.w	r2, [r1, #4]!
 801b15e:	459c      	cmp	ip, r3
 801b160:	d8f9      	bhi.n	801b156 <__lshift+0x9a>
 801b162:	e7e4      	b.n	801b12e <__lshift+0x72>

0801b164 <__mcmp>:
 801b164:	6903      	ldr	r3, [r0, #16]
 801b166:	690a      	ldr	r2, [r1, #16]
 801b168:	1a9b      	subs	r3, r3, r2
 801b16a:	b530      	push	{r4, r5, lr}
 801b16c:	d10c      	bne.n	801b188 <__mcmp+0x24>
 801b16e:	0092      	lsls	r2, r2, #2
 801b170:	3014      	adds	r0, #20
 801b172:	3114      	adds	r1, #20
 801b174:	1884      	adds	r4, r0, r2
 801b176:	4411      	add	r1, r2
 801b178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b17c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b180:	4295      	cmp	r5, r2
 801b182:	d003      	beq.n	801b18c <__mcmp+0x28>
 801b184:	d305      	bcc.n	801b192 <__mcmp+0x2e>
 801b186:	2301      	movs	r3, #1
 801b188:	4618      	mov	r0, r3
 801b18a:	bd30      	pop	{r4, r5, pc}
 801b18c:	42a0      	cmp	r0, r4
 801b18e:	d3f3      	bcc.n	801b178 <__mcmp+0x14>
 801b190:	e7fa      	b.n	801b188 <__mcmp+0x24>
 801b192:	f04f 33ff 	mov.w	r3, #4294967295
 801b196:	e7f7      	b.n	801b188 <__mcmp+0x24>

0801b198 <__mdiff>:
 801b198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b19c:	460d      	mov	r5, r1
 801b19e:	4607      	mov	r7, r0
 801b1a0:	4611      	mov	r1, r2
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	4614      	mov	r4, r2
 801b1a6:	f7ff ffdd 	bl	801b164 <__mcmp>
 801b1aa:	1e06      	subs	r6, r0, #0
 801b1ac:	d108      	bne.n	801b1c0 <__mdiff+0x28>
 801b1ae:	4631      	mov	r1, r6
 801b1b0:	4638      	mov	r0, r7
 801b1b2:	f7ff fd83 	bl	801acbc <_Balloc>
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1c0:	bfa4      	itt	ge
 801b1c2:	4623      	movge	r3, r4
 801b1c4:	462c      	movge	r4, r5
 801b1c6:	4638      	mov	r0, r7
 801b1c8:	6861      	ldr	r1, [r4, #4]
 801b1ca:	bfa6      	itte	ge
 801b1cc:	461d      	movge	r5, r3
 801b1ce:	2600      	movge	r6, #0
 801b1d0:	2601      	movlt	r6, #1
 801b1d2:	f7ff fd73 	bl	801acbc <_Balloc>
 801b1d6:	692b      	ldr	r3, [r5, #16]
 801b1d8:	60c6      	str	r6, [r0, #12]
 801b1da:	6926      	ldr	r6, [r4, #16]
 801b1dc:	f105 0914 	add.w	r9, r5, #20
 801b1e0:	f104 0214 	add.w	r2, r4, #20
 801b1e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801b1e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801b1ec:	f100 0514 	add.w	r5, r0, #20
 801b1f0:	f04f 0e00 	mov.w	lr, #0
 801b1f4:	f852 ab04 	ldr.w	sl, [r2], #4
 801b1f8:	f859 4b04 	ldr.w	r4, [r9], #4
 801b1fc:	fa1e f18a 	uxtah	r1, lr, sl
 801b200:	b2a3      	uxth	r3, r4
 801b202:	1ac9      	subs	r1, r1, r3
 801b204:	0c23      	lsrs	r3, r4, #16
 801b206:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801b20a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801b20e:	b289      	uxth	r1, r1
 801b210:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801b214:	45c8      	cmp	r8, r9
 801b216:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801b21a:	4694      	mov	ip, r2
 801b21c:	f845 3b04 	str.w	r3, [r5], #4
 801b220:	d8e8      	bhi.n	801b1f4 <__mdiff+0x5c>
 801b222:	45bc      	cmp	ip, r7
 801b224:	d304      	bcc.n	801b230 <__mdiff+0x98>
 801b226:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801b22a:	b183      	cbz	r3, 801b24e <__mdiff+0xb6>
 801b22c:	6106      	str	r6, [r0, #16]
 801b22e:	e7c5      	b.n	801b1bc <__mdiff+0x24>
 801b230:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b234:	fa1e f381 	uxtah	r3, lr, r1
 801b238:	141a      	asrs	r2, r3, #16
 801b23a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b23e:	b29b      	uxth	r3, r3
 801b240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b244:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b248:	f845 3b04 	str.w	r3, [r5], #4
 801b24c:	e7e9      	b.n	801b222 <__mdiff+0x8a>
 801b24e:	3e01      	subs	r6, #1
 801b250:	e7e9      	b.n	801b226 <__mdiff+0x8e>
	...

0801b254 <__ulp>:
 801b254:	4b12      	ldr	r3, [pc, #72]	; (801b2a0 <__ulp+0x4c>)
 801b256:	ee10 2a90 	vmov	r2, s1
 801b25a:	401a      	ands	r2, r3
 801b25c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801b260:	2b00      	cmp	r3, #0
 801b262:	dd04      	ble.n	801b26e <__ulp+0x1a>
 801b264:	2000      	movs	r0, #0
 801b266:	4619      	mov	r1, r3
 801b268:	ec41 0b10 	vmov	d0, r0, r1
 801b26c:	4770      	bx	lr
 801b26e:	425b      	negs	r3, r3
 801b270:	151b      	asrs	r3, r3, #20
 801b272:	2b13      	cmp	r3, #19
 801b274:	f04f 0000 	mov.w	r0, #0
 801b278:	f04f 0100 	mov.w	r1, #0
 801b27c:	dc04      	bgt.n	801b288 <__ulp+0x34>
 801b27e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801b282:	fa42 f103 	asr.w	r1, r2, r3
 801b286:	e7ef      	b.n	801b268 <__ulp+0x14>
 801b288:	3b14      	subs	r3, #20
 801b28a:	2b1e      	cmp	r3, #30
 801b28c:	f04f 0201 	mov.w	r2, #1
 801b290:	bfda      	itte	le
 801b292:	f1c3 031f 	rsble	r3, r3, #31
 801b296:	fa02 f303 	lslle.w	r3, r2, r3
 801b29a:	4613      	movgt	r3, r2
 801b29c:	4618      	mov	r0, r3
 801b29e:	e7e3      	b.n	801b268 <__ulp+0x14>
 801b2a0:	7ff00000 	.word	0x7ff00000

0801b2a4 <__b2d>:
 801b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2a6:	6905      	ldr	r5, [r0, #16]
 801b2a8:	f100 0714 	add.w	r7, r0, #20
 801b2ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b2b0:	1f2e      	subs	r6, r5, #4
 801b2b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	f7ff fdc4 	bl	801ae44 <__hi0bits>
 801b2bc:	f1c0 0320 	rsb	r3, r0, #32
 801b2c0:	280a      	cmp	r0, #10
 801b2c2:	600b      	str	r3, [r1, #0]
 801b2c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801b33c <__b2d+0x98>
 801b2c8:	dc14      	bgt.n	801b2f4 <__b2d+0x50>
 801b2ca:	f1c0 0e0b 	rsb	lr, r0, #11
 801b2ce:	fa24 f10e 	lsr.w	r1, r4, lr
 801b2d2:	42b7      	cmp	r7, r6
 801b2d4:	ea41 030c 	orr.w	r3, r1, ip
 801b2d8:	bf34      	ite	cc
 801b2da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b2de:	2100      	movcs	r1, #0
 801b2e0:	3015      	adds	r0, #21
 801b2e2:	fa04 f000 	lsl.w	r0, r4, r0
 801b2e6:	fa21 f10e 	lsr.w	r1, r1, lr
 801b2ea:	ea40 0201 	orr.w	r2, r0, r1
 801b2ee:	ec43 2b10 	vmov	d0, r2, r3
 801b2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2f4:	42b7      	cmp	r7, r6
 801b2f6:	bf3a      	itte	cc
 801b2f8:	f1a5 0608 	subcc.w	r6, r5, #8
 801b2fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b300:	2100      	movcs	r1, #0
 801b302:	380b      	subs	r0, #11
 801b304:	d015      	beq.n	801b332 <__b2d+0x8e>
 801b306:	4084      	lsls	r4, r0
 801b308:	f1c0 0520 	rsb	r5, r0, #32
 801b30c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801b310:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801b314:	42be      	cmp	r6, r7
 801b316:	fa21 fc05 	lsr.w	ip, r1, r5
 801b31a:	ea44 030c 	orr.w	r3, r4, ip
 801b31e:	bf8c      	ite	hi
 801b320:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b324:	2400      	movls	r4, #0
 801b326:	fa01 f000 	lsl.w	r0, r1, r0
 801b32a:	40ec      	lsrs	r4, r5
 801b32c:	ea40 0204 	orr.w	r2, r0, r4
 801b330:	e7dd      	b.n	801b2ee <__b2d+0x4a>
 801b332:	ea44 030c 	orr.w	r3, r4, ip
 801b336:	460a      	mov	r2, r1
 801b338:	e7d9      	b.n	801b2ee <__b2d+0x4a>
 801b33a:	bf00      	nop
 801b33c:	3ff00000 	.word	0x3ff00000

0801b340 <__d2b>:
 801b340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b344:	460e      	mov	r6, r1
 801b346:	2101      	movs	r1, #1
 801b348:	ec59 8b10 	vmov	r8, r9, d0
 801b34c:	4615      	mov	r5, r2
 801b34e:	f7ff fcb5 	bl	801acbc <_Balloc>
 801b352:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801b356:	4607      	mov	r7, r0
 801b358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b35c:	bb34      	cbnz	r4, 801b3ac <__d2b+0x6c>
 801b35e:	9301      	str	r3, [sp, #4]
 801b360:	f1b8 0300 	subs.w	r3, r8, #0
 801b364:	d027      	beq.n	801b3b6 <__d2b+0x76>
 801b366:	a802      	add	r0, sp, #8
 801b368:	f840 3d08 	str.w	r3, [r0, #-8]!
 801b36c:	f7ff fd89 	bl	801ae82 <__lo0bits>
 801b370:	9900      	ldr	r1, [sp, #0]
 801b372:	b1f0      	cbz	r0, 801b3b2 <__d2b+0x72>
 801b374:	9a01      	ldr	r2, [sp, #4]
 801b376:	f1c0 0320 	rsb	r3, r0, #32
 801b37a:	fa02 f303 	lsl.w	r3, r2, r3
 801b37e:	430b      	orrs	r3, r1
 801b380:	40c2      	lsrs	r2, r0
 801b382:	617b      	str	r3, [r7, #20]
 801b384:	9201      	str	r2, [sp, #4]
 801b386:	9b01      	ldr	r3, [sp, #4]
 801b388:	61bb      	str	r3, [r7, #24]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	bf14      	ite	ne
 801b38e:	2102      	movne	r1, #2
 801b390:	2101      	moveq	r1, #1
 801b392:	6139      	str	r1, [r7, #16]
 801b394:	b1c4      	cbz	r4, 801b3c8 <__d2b+0x88>
 801b396:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801b39a:	4404      	add	r4, r0
 801b39c:	6034      	str	r4, [r6, #0]
 801b39e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b3a2:	6028      	str	r0, [r5, #0]
 801b3a4:	4638      	mov	r0, r7
 801b3a6:	b003      	add	sp, #12
 801b3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b3b0:	e7d5      	b.n	801b35e <__d2b+0x1e>
 801b3b2:	6179      	str	r1, [r7, #20]
 801b3b4:	e7e7      	b.n	801b386 <__d2b+0x46>
 801b3b6:	a801      	add	r0, sp, #4
 801b3b8:	f7ff fd63 	bl	801ae82 <__lo0bits>
 801b3bc:	9b01      	ldr	r3, [sp, #4]
 801b3be:	617b      	str	r3, [r7, #20]
 801b3c0:	2101      	movs	r1, #1
 801b3c2:	6139      	str	r1, [r7, #16]
 801b3c4:	3020      	adds	r0, #32
 801b3c6:	e7e5      	b.n	801b394 <__d2b+0x54>
 801b3c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801b3cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b3d0:	6030      	str	r0, [r6, #0]
 801b3d2:	6918      	ldr	r0, [r3, #16]
 801b3d4:	f7ff fd36 	bl	801ae44 <__hi0bits>
 801b3d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801b3dc:	e7e1      	b.n	801b3a2 <__d2b+0x62>

0801b3de <__ratio>:
 801b3de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3e2:	4688      	mov	r8, r1
 801b3e4:	4669      	mov	r1, sp
 801b3e6:	4681      	mov	r9, r0
 801b3e8:	f7ff ff5c 	bl	801b2a4 <__b2d>
 801b3ec:	a901      	add	r1, sp, #4
 801b3ee:	4640      	mov	r0, r8
 801b3f0:	ec57 6b10 	vmov	r6, r7, d0
 801b3f4:	f7ff ff56 	bl	801b2a4 <__b2d>
 801b3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b3fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b400:	eba3 0c02 	sub.w	ip, r3, r2
 801b404:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b408:	1a9b      	subs	r3, r3, r2
 801b40a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b40e:	ec5b ab10 	vmov	sl, fp, d0
 801b412:	2b00      	cmp	r3, #0
 801b414:	bfce      	itee	gt
 801b416:	463a      	movgt	r2, r7
 801b418:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b41c:	465a      	movle	r2, fp
 801b41e:	4659      	mov	r1, fp
 801b420:	463d      	mov	r5, r7
 801b422:	bfd4      	ite	le
 801b424:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801b428:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801b42c:	4630      	mov	r0, r6
 801b42e:	ee10 2a10 	vmov	r2, s0
 801b432:	460b      	mov	r3, r1
 801b434:	4629      	mov	r1, r5
 801b436:	f7e5 fa19 	bl	800086c <__aeabi_ddiv>
 801b43a:	ec41 0b10 	vmov	d0, r0, r1
 801b43e:	b003      	add	sp, #12
 801b440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b444 <__copybits>:
 801b444:	3901      	subs	r1, #1
 801b446:	b510      	push	{r4, lr}
 801b448:	1149      	asrs	r1, r1, #5
 801b44a:	6914      	ldr	r4, [r2, #16]
 801b44c:	3101      	adds	r1, #1
 801b44e:	f102 0314 	add.w	r3, r2, #20
 801b452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b45a:	42a3      	cmp	r3, r4
 801b45c:	4602      	mov	r2, r0
 801b45e:	d303      	bcc.n	801b468 <__copybits+0x24>
 801b460:	2300      	movs	r3, #0
 801b462:	428a      	cmp	r2, r1
 801b464:	d305      	bcc.n	801b472 <__copybits+0x2e>
 801b466:	bd10      	pop	{r4, pc}
 801b468:	f853 2b04 	ldr.w	r2, [r3], #4
 801b46c:	f840 2b04 	str.w	r2, [r0], #4
 801b470:	e7f3      	b.n	801b45a <__copybits+0x16>
 801b472:	f842 3b04 	str.w	r3, [r2], #4
 801b476:	e7f4      	b.n	801b462 <__copybits+0x1e>

0801b478 <__any_on>:
 801b478:	f100 0214 	add.w	r2, r0, #20
 801b47c:	6900      	ldr	r0, [r0, #16]
 801b47e:	114b      	asrs	r3, r1, #5
 801b480:	4298      	cmp	r0, r3
 801b482:	b510      	push	{r4, lr}
 801b484:	db11      	blt.n	801b4aa <__any_on+0x32>
 801b486:	dd0a      	ble.n	801b49e <__any_on+0x26>
 801b488:	f011 011f 	ands.w	r1, r1, #31
 801b48c:	d007      	beq.n	801b49e <__any_on+0x26>
 801b48e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b492:	fa24 f001 	lsr.w	r0, r4, r1
 801b496:	fa00 f101 	lsl.w	r1, r0, r1
 801b49a:	428c      	cmp	r4, r1
 801b49c:	d10b      	bne.n	801b4b6 <__any_on+0x3e>
 801b49e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b4a2:	4293      	cmp	r3, r2
 801b4a4:	d803      	bhi.n	801b4ae <__any_on+0x36>
 801b4a6:	2000      	movs	r0, #0
 801b4a8:	bd10      	pop	{r4, pc}
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	e7f7      	b.n	801b49e <__any_on+0x26>
 801b4ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b4b2:	2900      	cmp	r1, #0
 801b4b4:	d0f5      	beq.n	801b4a2 <__any_on+0x2a>
 801b4b6:	2001      	movs	r0, #1
 801b4b8:	e7f6      	b.n	801b4a8 <__any_on+0x30>

0801b4ba <_calloc_r>:
 801b4ba:	b538      	push	{r3, r4, r5, lr}
 801b4bc:	fb02 f401 	mul.w	r4, r2, r1
 801b4c0:	4621      	mov	r1, r4
 801b4c2:	f7fc fd5f 	bl	8017f84 <_malloc_r>
 801b4c6:	4605      	mov	r5, r0
 801b4c8:	b118      	cbz	r0, 801b4d2 <_calloc_r+0x18>
 801b4ca:	4622      	mov	r2, r4
 801b4cc:	2100      	movs	r1, #0
 801b4ce:	f7fc fd02 	bl	8017ed6 <memset>
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	bd38      	pop	{r3, r4, r5, pc}

0801b4d6 <__ssputs_r>:
 801b4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4da:	688e      	ldr	r6, [r1, #8]
 801b4dc:	429e      	cmp	r6, r3
 801b4de:	4682      	mov	sl, r0
 801b4e0:	460c      	mov	r4, r1
 801b4e2:	4690      	mov	r8, r2
 801b4e4:	4699      	mov	r9, r3
 801b4e6:	d837      	bhi.n	801b558 <__ssputs_r+0x82>
 801b4e8:	898a      	ldrh	r2, [r1, #12]
 801b4ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b4ee:	d031      	beq.n	801b554 <__ssputs_r+0x7e>
 801b4f0:	6825      	ldr	r5, [r4, #0]
 801b4f2:	6909      	ldr	r1, [r1, #16]
 801b4f4:	1a6f      	subs	r7, r5, r1
 801b4f6:	6965      	ldr	r5, [r4, #20]
 801b4f8:	2302      	movs	r3, #2
 801b4fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b4fe:	fb95 f5f3 	sdiv	r5, r5, r3
 801b502:	f109 0301 	add.w	r3, r9, #1
 801b506:	443b      	add	r3, r7
 801b508:	429d      	cmp	r5, r3
 801b50a:	bf38      	it	cc
 801b50c:	461d      	movcc	r5, r3
 801b50e:	0553      	lsls	r3, r2, #21
 801b510:	d530      	bpl.n	801b574 <__ssputs_r+0x9e>
 801b512:	4629      	mov	r1, r5
 801b514:	f7fc fd36 	bl	8017f84 <_malloc_r>
 801b518:	4606      	mov	r6, r0
 801b51a:	b950      	cbnz	r0, 801b532 <__ssputs_r+0x5c>
 801b51c:	230c      	movs	r3, #12
 801b51e:	f8ca 3000 	str.w	r3, [sl]
 801b522:	89a3      	ldrh	r3, [r4, #12]
 801b524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b528:	81a3      	strh	r3, [r4, #12]
 801b52a:	f04f 30ff 	mov.w	r0, #4294967295
 801b52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b532:	463a      	mov	r2, r7
 801b534:	6921      	ldr	r1, [r4, #16]
 801b536:	f7fc fcaa 	bl	8017e8e <memcpy>
 801b53a:	89a3      	ldrh	r3, [r4, #12]
 801b53c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b544:	81a3      	strh	r3, [r4, #12]
 801b546:	6126      	str	r6, [r4, #16]
 801b548:	6165      	str	r5, [r4, #20]
 801b54a:	443e      	add	r6, r7
 801b54c:	1bed      	subs	r5, r5, r7
 801b54e:	6026      	str	r6, [r4, #0]
 801b550:	60a5      	str	r5, [r4, #8]
 801b552:	464e      	mov	r6, r9
 801b554:	454e      	cmp	r6, r9
 801b556:	d900      	bls.n	801b55a <__ssputs_r+0x84>
 801b558:	464e      	mov	r6, r9
 801b55a:	4632      	mov	r2, r6
 801b55c:	4641      	mov	r1, r8
 801b55e:	6820      	ldr	r0, [r4, #0]
 801b560:	f7fc fca0 	bl	8017ea4 <memmove>
 801b564:	68a3      	ldr	r3, [r4, #8]
 801b566:	1b9b      	subs	r3, r3, r6
 801b568:	60a3      	str	r3, [r4, #8]
 801b56a:	6823      	ldr	r3, [r4, #0]
 801b56c:	441e      	add	r6, r3
 801b56e:	6026      	str	r6, [r4, #0]
 801b570:	2000      	movs	r0, #0
 801b572:	e7dc      	b.n	801b52e <__ssputs_r+0x58>
 801b574:	462a      	mov	r2, r5
 801b576:	f000 fc8d 	bl	801be94 <_realloc_r>
 801b57a:	4606      	mov	r6, r0
 801b57c:	2800      	cmp	r0, #0
 801b57e:	d1e2      	bne.n	801b546 <__ssputs_r+0x70>
 801b580:	6921      	ldr	r1, [r4, #16]
 801b582:	4650      	mov	r0, sl
 801b584:	f7fc fcb0 	bl	8017ee8 <_free_r>
 801b588:	e7c8      	b.n	801b51c <__ssputs_r+0x46>
	...

0801b58c <_svfiprintf_r>:
 801b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b590:	461d      	mov	r5, r3
 801b592:	898b      	ldrh	r3, [r1, #12]
 801b594:	061f      	lsls	r7, r3, #24
 801b596:	b09d      	sub	sp, #116	; 0x74
 801b598:	4680      	mov	r8, r0
 801b59a:	460c      	mov	r4, r1
 801b59c:	4616      	mov	r6, r2
 801b59e:	d50f      	bpl.n	801b5c0 <_svfiprintf_r+0x34>
 801b5a0:	690b      	ldr	r3, [r1, #16]
 801b5a2:	b96b      	cbnz	r3, 801b5c0 <_svfiprintf_r+0x34>
 801b5a4:	2140      	movs	r1, #64	; 0x40
 801b5a6:	f7fc fced 	bl	8017f84 <_malloc_r>
 801b5aa:	6020      	str	r0, [r4, #0]
 801b5ac:	6120      	str	r0, [r4, #16]
 801b5ae:	b928      	cbnz	r0, 801b5bc <_svfiprintf_r+0x30>
 801b5b0:	230c      	movs	r3, #12
 801b5b2:	f8c8 3000 	str.w	r3, [r8]
 801b5b6:	f04f 30ff 	mov.w	r0, #4294967295
 801b5ba:	e0c8      	b.n	801b74e <_svfiprintf_r+0x1c2>
 801b5bc:	2340      	movs	r3, #64	; 0x40
 801b5be:	6163      	str	r3, [r4, #20]
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	9309      	str	r3, [sp, #36]	; 0x24
 801b5c4:	2320      	movs	r3, #32
 801b5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b5ca:	2330      	movs	r3, #48	; 0x30
 801b5cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b5d0:	9503      	str	r5, [sp, #12]
 801b5d2:	f04f 0b01 	mov.w	fp, #1
 801b5d6:	4637      	mov	r7, r6
 801b5d8:	463d      	mov	r5, r7
 801b5da:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b5de:	b10b      	cbz	r3, 801b5e4 <_svfiprintf_r+0x58>
 801b5e0:	2b25      	cmp	r3, #37	; 0x25
 801b5e2:	d13e      	bne.n	801b662 <_svfiprintf_r+0xd6>
 801b5e4:	ebb7 0a06 	subs.w	sl, r7, r6
 801b5e8:	d00b      	beq.n	801b602 <_svfiprintf_r+0x76>
 801b5ea:	4653      	mov	r3, sl
 801b5ec:	4632      	mov	r2, r6
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	4640      	mov	r0, r8
 801b5f2:	f7ff ff70 	bl	801b4d6 <__ssputs_r>
 801b5f6:	3001      	adds	r0, #1
 801b5f8:	f000 80a4 	beq.w	801b744 <_svfiprintf_r+0x1b8>
 801b5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5fe:	4453      	add	r3, sl
 801b600:	9309      	str	r3, [sp, #36]	; 0x24
 801b602:	783b      	ldrb	r3, [r7, #0]
 801b604:	2b00      	cmp	r3, #0
 801b606:	f000 809d 	beq.w	801b744 <_svfiprintf_r+0x1b8>
 801b60a:	2300      	movs	r3, #0
 801b60c:	f04f 32ff 	mov.w	r2, #4294967295
 801b610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b614:	9304      	str	r3, [sp, #16]
 801b616:	9307      	str	r3, [sp, #28]
 801b618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b61c:	931a      	str	r3, [sp, #104]	; 0x68
 801b61e:	462f      	mov	r7, r5
 801b620:	2205      	movs	r2, #5
 801b622:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b626:	4850      	ldr	r0, [pc, #320]	; (801b768 <_svfiprintf_r+0x1dc>)
 801b628:	f7e4 fdea 	bl	8000200 <memchr>
 801b62c:	9b04      	ldr	r3, [sp, #16]
 801b62e:	b9d0      	cbnz	r0, 801b666 <_svfiprintf_r+0xda>
 801b630:	06d9      	lsls	r1, r3, #27
 801b632:	bf44      	itt	mi
 801b634:	2220      	movmi	r2, #32
 801b636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b63a:	071a      	lsls	r2, r3, #28
 801b63c:	bf44      	itt	mi
 801b63e:	222b      	movmi	r2, #43	; 0x2b
 801b640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b644:	782a      	ldrb	r2, [r5, #0]
 801b646:	2a2a      	cmp	r2, #42	; 0x2a
 801b648:	d015      	beq.n	801b676 <_svfiprintf_r+0xea>
 801b64a:	9a07      	ldr	r2, [sp, #28]
 801b64c:	462f      	mov	r7, r5
 801b64e:	2000      	movs	r0, #0
 801b650:	250a      	movs	r5, #10
 801b652:	4639      	mov	r1, r7
 801b654:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b658:	3b30      	subs	r3, #48	; 0x30
 801b65a:	2b09      	cmp	r3, #9
 801b65c:	d94d      	bls.n	801b6fa <_svfiprintf_r+0x16e>
 801b65e:	b1b8      	cbz	r0, 801b690 <_svfiprintf_r+0x104>
 801b660:	e00f      	b.n	801b682 <_svfiprintf_r+0xf6>
 801b662:	462f      	mov	r7, r5
 801b664:	e7b8      	b.n	801b5d8 <_svfiprintf_r+0x4c>
 801b666:	4a40      	ldr	r2, [pc, #256]	; (801b768 <_svfiprintf_r+0x1dc>)
 801b668:	1a80      	subs	r0, r0, r2
 801b66a:	fa0b f000 	lsl.w	r0, fp, r0
 801b66e:	4318      	orrs	r0, r3
 801b670:	9004      	str	r0, [sp, #16]
 801b672:	463d      	mov	r5, r7
 801b674:	e7d3      	b.n	801b61e <_svfiprintf_r+0x92>
 801b676:	9a03      	ldr	r2, [sp, #12]
 801b678:	1d11      	adds	r1, r2, #4
 801b67a:	6812      	ldr	r2, [r2, #0]
 801b67c:	9103      	str	r1, [sp, #12]
 801b67e:	2a00      	cmp	r2, #0
 801b680:	db01      	blt.n	801b686 <_svfiprintf_r+0xfa>
 801b682:	9207      	str	r2, [sp, #28]
 801b684:	e004      	b.n	801b690 <_svfiprintf_r+0x104>
 801b686:	4252      	negs	r2, r2
 801b688:	f043 0302 	orr.w	r3, r3, #2
 801b68c:	9207      	str	r2, [sp, #28]
 801b68e:	9304      	str	r3, [sp, #16]
 801b690:	783b      	ldrb	r3, [r7, #0]
 801b692:	2b2e      	cmp	r3, #46	; 0x2e
 801b694:	d10c      	bne.n	801b6b0 <_svfiprintf_r+0x124>
 801b696:	787b      	ldrb	r3, [r7, #1]
 801b698:	2b2a      	cmp	r3, #42	; 0x2a
 801b69a:	d133      	bne.n	801b704 <_svfiprintf_r+0x178>
 801b69c:	9b03      	ldr	r3, [sp, #12]
 801b69e:	1d1a      	adds	r2, r3, #4
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	9203      	str	r2, [sp, #12]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	bfb8      	it	lt
 801b6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 801b6ac:	3702      	adds	r7, #2
 801b6ae:	9305      	str	r3, [sp, #20]
 801b6b0:	4d2e      	ldr	r5, [pc, #184]	; (801b76c <_svfiprintf_r+0x1e0>)
 801b6b2:	7839      	ldrb	r1, [r7, #0]
 801b6b4:	2203      	movs	r2, #3
 801b6b6:	4628      	mov	r0, r5
 801b6b8:	f7e4 fda2 	bl	8000200 <memchr>
 801b6bc:	b138      	cbz	r0, 801b6ce <_svfiprintf_r+0x142>
 801b6be:	2340      	movs	r3, #64	; 0x40
 801b6c0:	1b40      	subs	r0, r0, r5
 801b6c2:	fa03 f000 	lsl.w	r0, r3, r0
 801b6c6:	9b04      	ldr	r3, [sp, #16]
 801b6c8:	4303      	orrs	r3, r0
 801b6ca:	3701      	adds	r7, #1
 801b6cc:	9304      	str	r3, [sp, #16]
 801b6ce:	7839      	ldrb	r1, [r7, #0]
 801b6d0:	4827      	ldr	r0, [pc, #156]	; (801b770 <_svfiprintf_r+0x1e4>)
 801b6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b6d6:	2206      	movs	r2, #6
 801b6d8:	1c7e      	adds	r6, r7, #1
 801b6da:	f7e4 fd91 	bl	8000200 <memchr>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d038      	beq.n	801b754 <_svfiprintf_r+0x1c8>
 801b6e2:	4b24      	ldr	r3, [pc, #144]	; (801b774 <_svfiprintf_r+0x1e8>)
 801b6e4:	bb13      	cbnz	r3, 801b72c <_svfiprintf_r+0x1a0>
 801b6e6:	9b03      	ldr	r3, [sp, #12]
 801b6e8:	3307      	adds	r3, #7
 801b6ea:	f023 0307 	bic.w	r3, r3, #7
 801b6ee:	3308      	adds	r3, #8
 801b6f0:	9303      	str	r3, [sp, #12]
 801b6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6f4:	444b      	add	r3, r9
 801b6f6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6f8:	e76d      	b.n	801b5d6 <_svfiprintf_r+0x4a>
 801b6fa:	fb05 3202 	mla	r2, r5, r2, r3
 801b6fe:	2001      	movs	r0, #1
 801b700:	460f      	mov	r7, r1
 801b702:	e7a6      	b.n	801b652 <_svfiprintf_r+0xc6>
 801b704:	2300      	movs	r3, #0
 801b706:	3701      	adds	r7, #1
 801b708:	9305      	str	r3, [sp, #20]
 801b70a:	4619      	mov	r1, r3
 801b70c:	250a      	movs	r5, #10
 801b70e:	4638      	mov	r0, r7
 801b710:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b714:	3a30      	subs	r2, #48	; 0x30
 801b716:	2a09      	cmp	r2, #9
 801b718:	d903      	bls.n	801b722 <_svfiprintf_r+0x196>
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d0c8      	beq.n	801b6b0 <_svfiprintf_r+0x124>
 801b71e:	9105      	str	r1, [sp, #20]
 801b720:	e7c6      	b.n	801b6b0 <_svfiprintf_r+0x124>
 801b722:	fb05 2101 	mla	r1, r5, r1, r2
 801b726:	2301      	movs	r3, #1
 801b728:	4607      	mov	r7, r0
 801b72a:	e7f0      	b.n	801b70e <_svfiprintf_r+0x182>
 801b72c:	ab03      	add	r3, sp, #12
 801b72e:	9300      	str	r3, [sp, #0]
 801b730:	4622      	mov	r2, r4
 801b732:	4b11      	ldr	r3, [pc, #68]	; (801b778 <_svfiprintf_r+0x1ec>)
 801b734:	a904      	add	r1, sp, #16
 801b736:	4640      	mov	r0, r8
 801b738:	f7fc fd12 	bl	8018160 <_printf_float>
 801b73c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b740:	4681      	mov	r9, r0
 801b742:	d1d6      	bne.n	801b6f2 <_svfiprintf_r+0x166>
 801b744:	89a3      	ldrh	r3, [r4, #12]
 801b746:	065b      	lsls	r3, r3, #25
 801b748:	f53f af35 	bmi.w	801b5b6 <_svfiprintf_r+0x2a>
 801b74c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b74e:	b01d      	add	sp, #116	; 0x74
 801b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b754:	ab03      	add	r3, sp, #12
 801b756:	9300      	str	r3, [sp, #0]
 801b758:	4622      	mov	r2, r4
 801b75a:	4b07      	ldr	r3, [pc, #28]	; (801b778 <_svfiprintf_r+0x1ec>)
 801b75c:	a904      	add	r1, sp, #16
 801b75e:	4640      	mov	r0, r8
 801b760:	f7fc ffb4 	bl	80186cc <_printf_i>
 801b764:	e7ea      	b.n	801b73c <_svfiprintf_r+0x1b0>
 801b766:	bf00      	nop
 801b768:	08020d94 	.word	0x08020d94
 801b76c:	08020d9a 	.word	0x08020d9a
 801b770:	08020d9e 	.word	0x08020d9e
 801b774:	08018161 	.word	0x08018161
 801b778:	0801b4d7 	.word	0x0801b4d7

0801b77c <__sfputc_r>:
 801b77c:	6893      	ldr	r3, [r2, #8]
 801b77e:	3b01      	subs	r3, #1
 801b780:	2b00      	cmp	r3, #0
 801b782:	b410      	push	{r4}
 801b784:	6093      	str	r3, [r2, #8]
 801b786:	da08      	bge.n	801b79a <__sfputc_r+0x1e>
 801b788:	6994      	ldr	r4, [r2, #24]
 801b78a:	42a3      	cmp	r3, r4
 801b78c:	db01      	blt.n	801b792 <__sfputc_r+0x16>
 801b78e:	290a      	cmp	r1, #10
 801b790:	d103      	bne.n	801b79a <__sfputc_r+0x1e>
 801b792:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b796:	f000 b975 	b.w	801ba84 <__swbuf_r>
 801b79a:	6813      	ldr	r3, [r2, #0]
 801b79c:	1c58      	adds	r0, r3, #1
 801b79e:	6010      	str	r0, [r2, #0]
 801b7a0:	7019      	strb	r1, [r3, #0]
 801b7a2:	4608      	mov	r0, r1
 801b7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7a8:	4770      	bx	lr

0801b7aa <__sfputs_r>:
 801b7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ac:	4606      	mov	r6, r0
 801b7ae:	460f      	mov	r7, r1
 801b7b0:	4614      	mov	r4, r2
 801b7b2:	18d5      	adds	r5, r2, r3
 801b7b4:	42ac      	cmp	r4, r5
 801b7b6:	d101      	bne.n	801b7bc <__sfputs_r+0x12>
 801b7b8:	2000      	movs	r0, #0
 801b7ba:	e007      	b.n	801b7cc <__sfputs_r+0x22>
 801b7bc:	463a      	mov	r2, r7
 801b7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7c2:	4630      	mov	r0, r6
 801b7c4:	f7ff ffda 	bl	801b77c <__sfputc_r>
 801b7c8:	1c43      	adds	r3, r0, #1
 801b7ca:	d1f3      	bne.n	801b7b4 <__sfputs_r+0xa>
 801b7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b7d0 <_vfiprintf_r>:
 801b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7d4:	460c      	mov	r4, r1
 801b7d6:	b09d      	sub	sp, #116	; 0x74
 801b7d8:	4617      	mov	r7, r2
 801b7da:	461d      	mov	r5, r3
 801b7dc:	4606      	mov	r6, r0
 801b7de:	b118      	cbz	r0, 801b7e8 <_vfiprintf_r+0x18>
 801b7e0:	6983      	ldr	r3, [r0, #24]
 801b7e2:	b90b      	cbnz	r3, 801b7e8 <_vfiprintf_r+0x18>
 801b7e4:	f7fe fea8 	bl	801a538 <__sinit>
 801b7e8:	4b7c      	ldr	r3, [pc, #496]	; (801b9dc <_vfiprintf_r+0x20c>)
 801b7ea:	429c      	cmp	r4, r3
 801b7ec:	d158      	bne.n	801b8a0 <_vfiprintf_r+0xd0>
 801b7ee:	6874      	ldr	r4, [r6, #4]
 801b7f0:	89a3      	ldrh	r3, [r4, #12]
 801b7f2:	0718      	lsls	r0, r3, #28
 801b7f4:	d55e      	bpl.n	801b8b4 <_vfiprintf_r+0xe4>
 801b7f6:	6923      	ldr	r3, [r4, #16]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d05b      	beq.n	801b8b4 <_vfiprintf_r+0xe4>
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	9309      	str	r3, [sp, #36]	; 0x24
 801b800:	2320      	movs	r3, #32
 801b802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b806:	2330      	movs	r3, #48	; 0x30
 801b808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b80c:	9503      	str	r5, [sp, #12]
 801b80e:	f04f 0b01 	mov.w	fp, #1
 801b812:	46b8      	mov	r8, r7
 801b814:	4645      	mov	r5, r8
 801b816:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b81a:	b10b      	cbz	r3, 801b820 <_vfiprintf_r+0x50>
 801b81c:	2b25      	cmp	r3, #37	; 0x25
 801b81e:	d154      	bne.n	801b8ca <_vfiprintf_r+0xfa>
 801b820:	ebb8 0a07 	subs.w	sl, r8, r7
 801b824:	d00b      	beq.n	801b83e <_vfiprintf_r+0x6e>
 801b826:	4653      	mov	r3, sl
 801b828:	463a      	mov	r2, r7
 801b82a:	4621      	mov	r1, r4
 801b82c:	4630      	mov	r0, r6
 801b82e:	f7ff ffbc 	bl	801b7aa <__sfputs_r>
 801b832:	3001      	adds	r0, #1
 801b834:	f000 80c2 	beq.w	801b9bc <_vfiprintf_r+0x1ec>
 801b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b83a:	4453      	add	r3, sl
 801b83c:	9309      	str	r3, [sp, #36]	; 0x24
 801b83e:	f898 3000 	ldrb.w	r3, [r8]
 801b842:	2b00      	cmp	r3, #0
 801b844:	f000 80ba 	beq.w	801b9bc <_vfiprintf_r+0x1ec>
 801b848:	2300      	movs	r3, #0
 801b84a:	f04f 32ff 	mov.w	r2, #4294967295
 801b84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b852:	9304      	str	r3, [sp, #16]
 801b854:	9307      	str	r3, [sp, #28]
 801b856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b85a:	931a      	str	r3, [sp, #104]	; 0x68
 801b85c:	46a8      	mov	r8, r5
 801b85e:	2205      	movs	r2, #5
 801b860:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b864:	485e      	ldr	r0, [pc, #376]	; (801b9e0 <_vfiprintf_r+0x210>)
 801b866:	f7e4 fccb 	bl	8000200 <memchr>
 801b86a:	9b04      	ldr	r3, [sp, #16]
 801b86c:	bb78      	cbnz	r0, 801b8ce <_vfiprintf_r+0xfe>
 801b86e:	06d9      	lsls	r1, r3, #27
 801b870:	bf44      	itt	mi
 801b872:	2220      	movmi	r2, #32
 801b874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b878:	071a      	lsls	r2, r3, #28
 801b87a:	bf44      	itt	mi
 801b87c:	222b      	movmi	r2, #43	; 0x2b
 801b87e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b882:	782a      	ldrb	r2, [r5, #0]
 801b884:	2a2a      	cmp	r2, #42	; 0x2a
 801b886:	d02a      	beq.n	801b8de <_vfiprintf_r+0x10e>
 801b888:	9a07      	ldr	r2, [sp, #28]
 801b88a:	46a8      	mov	r8, r5
 801b88c:	2000      	movs	r0, #0
 801b88e:	250a      	movs	r5, #10
 801b890:	4641      	mov	r1, r8
 801b892:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b896:	3b30      	subs	r3, #48	; 0x30
 801b898:	2b09      	cmp	r3, #9
 801b89a:	d969      	bls.n	801b970 <_vfiprintf_r+0x1a0>
 801b89c:	b360      	cbz	r0, 801b8f8 <_vfiprintf_r+0x128>
 801b89e:	e024      	b.n	801b8ea <_vfiprintf_r+0x11a>
 801b8a0:	4b50      	ldr	r3, [pc, #320]	; (801b9e4 <_vfiprintf_r+0x214>)
 801b8a2:	429c      	cmp	r4, r3
 801b8a4:	d101      	bne.n	801b8aa <_vfiprintf_r+0xda>
 801b8a6:	68b4      	ldr	r4, [r6, #8]
 801b8a8:	e7a2      	b.n	801b7f0 <_vfiprintf_r+0x20>
 801b8aa:	4b4f      	ldr	r3, [pc, #316]	; (801b9e8 <_vfiprintf_r+0x218>)
 801b8ac:	429c      	cmp	r4, r3
 801b8ae:	bf08      	it	eq
 801b8b0:	68f4      	ldreq	r4, [r6, #12]
 801b8b2:	e79d      	b.n	801b7f0 <_vfiprintf_r+0x20>
 801b8b4:	4621      	mov	r1, r4
 801b8b6:	4630      	mov	r0, r6
 801b8b8:	f000 f948 	bl	801bb4c <__swsetup_r>
 801b8bc:	2800      	cmp	r0, #0
 801b8be:	d09d      	beq.n	801b7fc <_vfiprintf_r+0x2c>
 801b8c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b8c4:	b01d      	add	sp, #116	; 0x74
 801b8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ca:	46a8      	mov	r8, r5
 801b8cc:	e7a2      	b.n	801b814 <_vfiprintf_r+0x44>
 801b8ce:	4a44      	ldr	r2, [pc, #272]	; (801b9e0 <_vfiprintf_r+0x210>)
 801b8d0:	1a80      	subs	r0, r0, r2
 801b8d2:	fa0b f000 	lsl.w	r0, fp, r0
 801b8d6:	4318      	orrs	r0, r3
 801b8d8:	9004      	str	r0, [sp, #16]
 801b8da:	4645      	mov	r5, r8
 801b8dc:	e7be      	b.n	801b85c <_vfiprintf_r+0x8c>
 801b8de:	9a03      	ldr	r2, [sp, #12]
 801b8e0:	1d11      	adds	r1, r2, #4
 801b8e2:	6812      	ldr	r2, [r2, #0]
 801b8e4:	9103      	str	r1, [sp, #12]
 801b8e6:	2a00      	cmp	r2, #0
 801b8e8:	db01      	blt.n	801b8ee <_vfiprintf_r+0x11e>
 801b8ea:	9207      	str	r2, [sp, #28]
 801b8ec:	e004      	b.n	801b8f8 <_vfiprintf_r+0x128>
 801b8ee:	4252      	negs	r2, r2
 801b8f0:	f043 0302 	orr.w	r3, r3, #2
 801b8f4:	9207      	str	r2, [sp, #28]
 801b8f6:	9304      	str	r3, [sp, #16]
 801b8f8:	f898 3000 	ldrb.w	r3, [r8]
 801b8fc:	2b2e      	cmp	r3, #46	; 0x2e
 801b8fe:	d10e      	bne.n	801b91e <_vfiprintf_r+0x14e>
 801b900:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b904:	2b2a      	cmp	r3, #42	; 0x2a
 801b906:	d138      	bne.n	801b97a <_vfiprintf_r+0x1aa>
 801b908:	9b03      	ldr	r3, [sp, #12]
 801b90a:	1d1a      	adds	r2, r3, #4
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	9203      	str	r2, [sp, #12]
 801b910:	2b00      	cmp	r3, #0
 801b912:	bfb8      	it	lt
 801b914:	f04f 33ff 	movlt.w	r3, #4294967295
 801b918:	f108 0802 	add.w	r8, r8, #2
 801b91c:	9305      	str	r3, [sp, #20]
 801b91e:	4d33      	ldr	r5, [pc, #204]	; (801b9ec <_vfiprintf_r+0x21c>)
 801b920:	f898 1000 	ldrb.w	r1, [r8]
 801b924:	2203      	movs	r2, #3
 801b926:	4628      	mov	r0, r5
 801b928:	f7e4 fc6a 	bl	8000200 <memchr>
 801b92c:	b140      	cbz	r0, 801b940 <_vfiprintf_r+0x170>
 801b92e:	2340      	movs	r3, #64	; 0x40
 801b930:	1b40      	subs	r0, r0, r5
 801b932:	fa03 f000 	lsl.w	r0, r3, r0
 801b936:	9b04      	ldr	r3, [sp, #16]
 801b938:	4303      	orrs	r3, r0
 801b93a:	f108 0801 	add.w	r8, r8, #1
 801b93e:	9304      	str	r3, [sp, #16]
 801b940:	f898 1000 	ldrb.w	r1, [r8]
 801b944:	482a      	ldr	r0, [pc, #168]	; (801b9f0 <_vfiprintf_r+0x220>)
 801b946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b94a:	2206      	movs	r2, #6
 801b94c:	f108 0701 	add.w	r7, r8, #1
 801b950:	f7e4 fc56 	bl	8000200 <memchr>
 801b954:	2800      	cmp	r0, #0
 801b956:	d037      	beq.n	801b9c8 <_vfiprintf_r+0x1f8>
 801b958:	4b26      	ldr	r3, [pc, #152]	; (801b9f4 <_vfiprintf_r+0x224>)
 801b95a:	bb1b      	cbnz	r3, 801b9a4 <_vfiprintf_r+0x1d4>
 801b95c:	9b03      	ldr	r3, [sp, #12]
 801b95e:	3307      	adds	r3, #7
 801b960:	f023 0307 	bic.w	r3, r3, #7
 801b964:	3308      	adds	r3, #8
 801b966:	9303      	str	r3, [sp, #12]
 801b968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b96a:	444b      	add	r3, r9
 801b96c:	9309      	str	r3, [sp, #36]	; 0x24
 801b96e:	e750      	b.n	801b812 <_vfiprintf_r+0x42>
 801b970:	fb05 3202 	mla	r2, r5, r2, r3
 801b974:	2001      	movs	r0, #1
 801b976:	4688      	mov	r8, r1
 801b978:	e78a      	b.n	801b890 <_vfiprintf_r+0xc0>
 801b97a:	2300      	movs	r3, #0
 801b97c:	f108 0801 	add.w	r8, r8, #1
 801b980:	9305      	str	r3, [sp, #20]
 801b982:	4619      	mov	r1, r3
 801b984:	250a      	movs	r5, #10
 801b986:	4640      	mov	r0, r8
 801b988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b98c:	3a30      	subs	r2, #48	; 0x30
 801b98e:	2a09      	cmp	r2, #9
 801b990:	d903      	bls.n	801b99a <_vfiprintf_r+0x1ca>
 801b992:	2b00      	cmp	r3, #0
 801b994:	d0c3      	beq.n	801b91e <_vfiprintf_r+0x14e>
 801b996:	9105      	str	r1, [sp, #20]
 801b998:	e7c1      	b.n	801b91e <_vfiprintf_r+0x14e>
 801b99a:	fb05 2101 	mla	r1, r5, r1, r2
 801b99e:	2301      	movs	r3, #1
 801b9a0:	4680      	mov	r8, r0
 801b9a2:	e7f0      	b.n	801b986 <_vfiprintf_r+0x1b6>
 801b9a4:	ab03      	add	r3, sp, #12
 801b9a6:	9300      	str	r3, [sp, #0]
 801b9a8:	4622      	mov	r2, r4
 801b9aa:	4b13      	ldr	r3, [pc, #76]	; (801b9f8 <_vfiprintf_r+0x228>)
 801b9ac:	a904      	add	r1, sp, #16
 801b9ae:	4630      	mov	r0, r6
 801b9b0:	f7fc fbd6 	bl	8018160 <_printf_float>
 801b9b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b9b8:	4681      	mov	r9, r0
 801b9ba:	d1d5      	bne.n	801b968 <_vfiprintf_r+0x198>
 801b9bc:	89a3      	ldrh	r3, [r4, #12]
 801b9be:	065b      	lsls	r3, r3, #25
 801b9c0:	f53f af7e 	bmi.w	801b8c0 <_vfiprintf_r+0xf0>
 801b9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9c6:	e77d      	b.n	801b8c4 <_vfiprintf_r+0xf4>
 801b9c8:	ab03      	add	r3, sp, #12
 801b9ca:	9300      	str	r3, [sp, #0]
 801b9cc:	4622      	mov	r2, r4
 801b9ce:	4b0a      	ldr	r3, [pc, #40]	; (801b9f8 <_vfiprintf_r+0x228>)
 801b9d0:	a904      	add	r1, sp, #16
 801b9d2:	4630      	mov	r0, r6
 801b9d4:	f7fc fe7a 	bl	80186cc <_printf_i>
 801b9d8:	e7ec      	b.n	801b9b4 <_vfiprintf_r+0x1e4>
 801b9da:	bf00      	nop
 801b9dc:	08020c58 	.word	0x08020c58
 801b9e0:	08020d94 	.word	0x08020d94
 801b9e4:	08020c78 	.word	0x08020c78
 801b9e8:	08020c38 	.word	0x08020c38
 801b9ec:	08020d9a 	.word	0x08020d9a
 801b9f0:	08020d9e 	.word	0x08020d9e
 801b9f4:	08018161 	.word	0x08018161
 801b9f8:	0801b7ab 	.word	0x0801b7ab

0801b9fc <__sread>:
 801b9fc:	b510      	push	{r4, lr}
 801b9fe:	460c      	mov	r4, r1
 801ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba04:	f000 fa6c 	bl	801bee0 <_read_r>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	bfab      	itete	ge
 801ba0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ba0e:	89a3      	ldrhlt	r3, [r4, #12]
 801ba10:	181b      	addge	r3, r3, r0
 801ba12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ba16:	bfac      	ite	ge
 801ba18:	6563      	strge	r3, [r4, #84]	; 0x54
 801ba1a:	81a3      	strhlt	r3, [r4, #12]
 801ba1c:	bd10      	pop	{r4, pc}

0801ba1e <__swrite>:
 801ba1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba22:	461f      	mov	r7, r3
 801ba24:	898b      	ldrh	r3, [r1, #12]
 801ba26:	05db      	lsls	r3, r3, #23
 801ba28:	4605      	mov	r5, r0
 801ba2a:	460c      	mov	r4, r1
 801ba2c:	4616      	mov	r6, r2
 801ba2e:	d505      	bpl.n	801ba3c <__swrite+0x1e>
 801ba30:	2302      	movs	r3, #2
 801ba32:	2200      	movs	r2, #0
 801ba34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba38:	f000 f9b6 	bl	801bda8 <_lseek_r>
 801ba3c:	89a3      	ldrh	r3, [r4, #12]
 801ba3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ba46:	81a3      	strh	r3, [r4, #12]
 801ba48:	4632      	mov	r2, r6
 801ba4a:	463b      	mov	r3, r7
 801ba4c:	4628      	mov	r0, r5
 801ba4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba52:	f000 b869 	b.w	801bb28 <_write_r>

0801ba56 <__sseek>:
 801ba56:	b510      	push	{r4, lr}
 801ba58:	460c      	mov	r4, r1
 801ba5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba5e:	f000 f9a3 	bl	801bda8 <_lseek_r>
 801ba62:	1c43      	adds	r3, r0, #1
 801ba64:	89a3      	ldrh	r3, [r4, #12]
 801ba66:	bf15      	itete	ne
 801ba68:	6560      	strne	r0, [r4, #84]	; 0x54
 801ba6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ba6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ba72:	81a3      	strheq	r3, [r4, #12]
 801ba74:	bf18      	it	ne
 801ba76:	81a3      	strhne	r3, [r4, #12]
 801ba78:	bd10      	pop	{r4, pc}

0801ba7a <__sclose>:
 801ba7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba7e:	f000 b8d3 	b.w	801bc28 <_close_r>
	...

0801ba84 <__swbuf_r>:
 801ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba86:	460e      	mov	r6, r1
 801ba88:	4614      	mov	r4, r2
 801ba8a:	4605      	mov	r5, r0
 801ba8c:	b118      	cbz	r0, 801ba96 <__swbuf_r+0x12>
 801ba8e:	6983      	ldr	r3, [r0, #24]
 801ba90:	b90b      	cbnz	r3, 801ba96 <__swbuf_r+0x12>
 801ba92:	f7fe fd51 	bl	801a538 <__sinit>
 801ba96:	4b21      	ldr	r3, [pc, #132]	; (801bb1c <__swbuf_r+0x98>)
 801ba98:	429c      	cmp	r4, r3
 801ba9a:	d12a      	bne.n	801baf2 <__swbuf_r+0x6e>
 801ba9c:	686c      	ldr	r4, [r5, #4]
 801ba9e:	69a3      	ldr	r3, [r4, #24]
 801baa0:	60a3      	str	r3, [r4, #8]
 801baa2:	89a3      	ldrh	r3, [r4, #12]
 801baa4:	071a      	lsls	r2, r3, #28
 801baa6:	d52e      	bpl.n	801bb06 <__swbuf_r+0x82>
 801baa8:	6923      	ldr	r3, [r4, #16]
 801baaa:	b363      	cbz	r3, 801bb06 <__swbuf_r+0x82>
 801baac:	6923      	ldr	r3, [r4, #16]
 801baae:	6820      	ldr	r0, [r4, #0]
 801bab0:	1ac0      	subs	r0, r0, r3
 801bab2:	6963      	ldr	r3, [r4, #20]
 801bab4:	b2f6      	uxtb	r6, r6
 801bab6:	4283      	cmp	r3, r0
 801bab8:	4637      	mov	r7, r6
 801baba:	dc04      	bgt.n	801bac6 <__swbuf_r+0x42>
 801babc:	4621      	mov	r1, r4
 801babe:	4628      	mov	r0, r5
 801bac0:	f000 f948 	bl	801bd54 <_fflush_r>
 801bac4:	bb28      	cbnz	r0, 801bb12 <__swbuf_r+0x8e>
 801bac6:	68a3      	ldr	r3, [r4, #8]
 801bac8:	3b01      	subs	r3, #1
 801baca:	60a3      	str	r3, [r4, #8]
 801bacc:	6823      	ldr	r3, [r4, #0]
 801bace:	1c5a      	adds	r2, r3, #1
 801bad0:	6022      	str	r2, [r4, #0]
 801bad2:	701e      	strb	r6, [r3, #0]
 801bad4:	6963      	ldr	r3, [r4, #20]
 801bad6:	3001      	adds	r0, #1
 801bad8:	4283      	cmp	r3, r0
 801bada:	d004      	beq.n	801bae6 <__swbuf_r+0x62>
 801badc:	89a3      	ldrh	r3, [r4, #12]
 801bade:	07db      	lsls	r3, r3, #31
 801bae0:	d519      	bpl.n	801bb16 <__swbuf_r+0x92>
 801bae2:	2e0a      	cmp	r6, #10
 801bae4:	d117      	bne.n	801bb16 <__swbuf_r+0x92>
 801bae6:	4621      	mov	r1, r4
 801bae8:	4628      	mov	r0, r5
 801baea:	f000 f933 	bl	801bd54 <_fflush_r>
 801baee:	b190      	cbz	r0, 801bb16 <__swbuf_r+0x92>
 801baf0:	e00f      	b.n	801bb12 <__swbuf_r+0x8e>
 801baf2:	4b0b      	ldr	r3, [pc, #44]	; (801bb20 <__swbuf_r+0x9c>)
 801baf4:	429c      	cmp	r4, r3
 801baf6:	d101      	bne.n	801bafc <__swbuf_r+0x78>
 801baf8:	68ac      	ldr	r4, [r5, #8]
 801bafa:	e7d0      	b.n	801ba9e <__swbuf_r+0x1a>
 801bafc:	4b09      	ldr	r3, [pc, #36]	; (801bb24 <__swbuf_r+0xa0>)
 801bafe:	429c      	cmp	r4, r3
 801bb00:	bf08      	it	eq
 801bb02:	68ec      	ldreq	r4, [r5, #12]
 801bb04:	e7cb      	b.n	801ba9e <__swbuf_r+0x1a>
 801bb06:	4621      	mov	r1, r4
 801bb08:	4628      	mov	r0, r5
 801bb0a:	f000 f81f 	bl	801bb4c <__swsetup_r>
 801bb0e:	2800      	cmp	r0, #0
 801bb10:	d0cc      	beq.n	801baac <__swbuf_r+0x28>
 801bb12:	f04f 37ff 	mov.w	r7, #4294967295
 801bb16:	4638      	mov	r0, r7
 801bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb1a:	bf00      	nop
 801bb1c:	08020c58 	.word	0x08020c58
 801bb20:	08020c78 	.word	0x08020c78
 801bb24:	08020c38 	.word	0x08020c38

0801bb28 <_write_r>:
 801bb28:	b538      	push	{r3, r4, r5, lr}
 801bb2a:	4c07      	ldr	r4, [pc, #28]	; (801bb48 <_write_r+0x20>)
 801bb2c:	4605      	mov	r5, r0
 801bb2e:	4608      	mov	r0, r1
 801bb30:	4611      	mov	r1, r2
 801bb32:	2200      	movs	r2, #0
 801bb34:	6022      	str	r2, [r4, #0]
 801bb36:	461a      	mov	r2, r3
 801bb38:	f7e9 fc9b 	bl	8005472 <_write>
 801bb3c:	1c43      	adds	r3, r0, #1
 801bb3e:	d102      	bne.n	801bb46 <_write_r+0x1e>
 801bb40:	6823      	ldr	r3, [r4, #0]
 801bb42:	b103      	cbz	r3, 801bb46 <_write_r+0x1e>
 801bb44:	602b      	str	r3, [r5, #0]
 801bb46:	bd38      	pop	{r3, r4, r5, pc}
 801bb48:	200073c4 	.word	0x200073c4

0801bb4c <__swsetup_r>:
 801bb4c:	4b32      	ldr	r3, [pc, #200]	; (801bc18 <__swsetup_r+0xcc>)
 801bb4e:	b570      	push	{r4, r5, r6, lr}
 801bb50:	681d      	ldr	r5, [r3, #0]
 801bb52:	4606      	mov	r6, r0
 801bb54:	460c      	mov	r4, r1
 801bb56:	b125      	cbz	r5, 801bb62 <__swsetup_r+0x16>
 801bb58:	69ab      	ldr	r3, [r5, #24]
 801bb5a:	b913      	cbnz	r3, 801bb62 <__swsetup_r+0x16>
 801bb5c:	4628      	mov	r0, r5
 801bb5e:	f7fe fceb 	bl	801a538 <__sinit>
 801bb62:	4b2e      	ldr	r3, [pc, #184]	; (801bc1c <__swsetup_r+0xd0>)
 801bb64:	429c      	cmp	r4, r3
 801bb66:	d10f      	bne.n	801bb88 <__swsetup_r+0x3c>
 801bb68:	686c      	ldr	r4, [r5, #4]
 801bb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb6e:	b29a      	uxth	r2, r3
 801bb70:	0715      	lsls	r5, r2, #28
 801bb72:	d42c      	bmi.n	801bbce <__swsetup_r+0x82>
 801bb74:	06d0      	lsls	r0, r2, #27
 801bb76:	d411      	bmi.n	801bb9c <__swsetup_r+0x50>
 801bb78:	2209      	movs	r2, #9
 801bb7a:	6032      	str	r2, [r6, #0]
 801bb7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb80:	81a3      	strh	r3, [r4, #12]
 801bb82:	f04f 30ff 	mov.w	r0, #4294967295
 801bb86:	e03e      	b.n	801bc06 <__swsetup_r+0xba>
 801bb88:	4b25      	ldr	r3, [pc, #148]	; (801bc20 <__swsetup_r+0xd4>)
 801bb8a:	429c      	cmp	r4, r3
 801bb8c:	d101      	bne.n	801bb92 <__swsetup_r+0x46>
 801bb8e:	68ac      	ldr	r4, [r5, #8]
 801bb90:	e7eb      	b.n	801bb6a <__swsetup_r+0x1e>
 801bb92:	4b24      	ldr	r3, [pc, #144]	; (801bc24 <__swsetup_r+0xd8>)
 801bb94:	429c      	cmp	r4, r3
 801bb96:	bf08      	it	eq
 801bb98:	68ec      	ldreq	r4, [r5, #12]
 801bb9a:	e7e6      	b.n	801bb6a <__swsetup_r+0x1e>
 801bb9c:	0751      	lsls	r1, r2, #29
 801bb9e:	d512      	bpl.n	801bbc6 <__swsetup_r+0x7a>
 801bba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bba2:	b141      	cbz	r1, 801bbb6 <__swsetup_r+0x6a>
 801bba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bba8:	4299      	cmp	r1, r3
 801bbaa:	d002      	beq.n	801bbb2 <__swsetup_r+0x66>
 801bbac:	4630      	mov	r0, r6
 801bbae:	f7fc f99b 	bl	8017ee8 <_free_r>
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	6363      	str	r3, [r4, #52]	; 0x34
 801bbb6:	89a3      	ldrh	r3, [r4, #12]
 801bbb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bbbc:	81a3      	strh	r3, [r4, #12]
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	6063      	str	r3, [r4, #4]
 801bbc2:	6923      	ldr	r3, [r4, #16]
 801bbc4:	6023      	str	r3, [r4, #0]
 801bbc6:	89a3      	ldrh	r3, [r4, #12]
 801bbc8:	f043 0308 	orr.w	r3, r3, #8
 801bbcc:	81a3      	strh	r3, [r4, #12]
 801bbce:	6923      	ldr	r3, [r4, #16]
 801bbd0:	b94b      	cbnz	r3, 801bbe6 <__swsetup_r+0x9a>
 801bbd2:	89a3      	ldrh	r3, [r4, #12]
 801bbd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bbdc:	d003      	beq.n	801bbe6 <__swsetup_r+0x9a>
 801bbde:	4621      	mov	r1, r4
 801bbe0:	4630      	mov	r0, r6
 801bbe2:	f000 f917 	bl	801be14 <__smakebuf_r>
 801bbe6:	89a2      	ldrh	r2, [r4, #12]
 801bbe8:	f012 0301 	ands.w	r3, r2, #1
 801bbec:	d00c      	beq.n	801bc08 <__swsetup_r+0xbc>
 801bbee:	2300      	movs	r3, #0
 801bbf0:	60a3      	str	r3, [r4, #8]
 801bbf2:	6963      	ldr	r3, [r4, #20]
 801bbf4:	425b      	negs	r3, r3
 801bbf6:	61a3      	str	r3, [r4, #24]
 801bbf8:	6923      	ldr	r3, [r4, #16]
 801bbfa:	b953      	cbnz	r3, 801bc12 <__swsetup_r+0xc6>
 801bbfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801bc04:	d1ba      	bne.n	801bb7c <__swsetup_r+0x30>
 801bc06:	bd70      	pop	{r4, r5, r6, pc}
 801bc08:	0792      	lsls	r2, r2, #30
 801bc0a:	bf58      	it	pl
 801bc0c:	6963      	ldrpl	r3, [r4, #20]
 801bc0e:	60a3      	str	r3, [r4, #8]
 801bc10:	e7f2      	b.n	801bbf8 <__swsetup_r+0xac>
 801bc12:	2000      	movs	r0, #0
 801bc14:	e7f7      	b.n	801bc06 <__swsetup_r+0xba>
 801bc16:	bf00      	nop
 801bc18:	20000074 	.word	0x20000074
 801bc1c:	08020c58 	.word	0x08020c58
 801bc20:	08020c78 	.word	0x08020c78
 801bc24:	08020c38 	.word	0x08020c38

0801bc28 <_close_r>:
 801bc28:	b538      	push	{r3, r4, r5, lr}
 801bc2a:	4c06      	ldr	r4, [pc, #24]	; (801bc44 <_close_r+0x1c>)
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	4605      	mov	r5, r0
 801bc30:	4608      	mov	r0, r1
 801bc32:	6023      	str	r3, [r4, #0]
 801bc34:	f7e9 fc39 	bl	80054aa <_close>
 801bc38:	1c43      	adds	r3, r0, #1
 801bc3a:	d102      	bne.n	801bc42 <_close_r+0x1a>
 801bc3c:	6823      	ldr	r3, [r4, #0]
 801bc3e:	b103      	cbz	r3, 801bc42 <_close_r+0x1a>
 801bc40:	602b      	str	r3, [r5, #0]
 801bc42:	bd38      	pop	{r3, r4, r5, pc}
 801bc44:	200073c4 	.word	0x200073c4

0801bc48 <__sflush_r>:
 801bc48:	898a      	ldrh	r2, [r1, #12]
 801bc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc4e:	4605      	mov	r5, r0
 801bc50:	0710      	lsls	r0, r2, #28
 801bc52:	460c      	mov	r4, r1
 801bc54:	d458      	bmi.n	801bd08 <__sflush_r+0xc0>
 801bc56:	684b      	ldr	r3, [r1, #4]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	dc05      	bgt.n	801bc68 <__sflush_r+0x20>
 801bc5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	dc02      	bgt.n	801bc68 <__sflush_r+0x20>
 801bc62:	2000      	movs	r0, #0
 801bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc6a:	2e00      	cmp	r6, #0
 801bc6c:	d0f9      	beq.n	801bc62 <__sflush_r+0x1a>
 801bc6e:	2300      	movs	r3, #0
 801bc70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bc74:	682f      	ldr	r7, [r5, #0]
 801bc76:	6a21      	ldr	r1, [r4, #32]
 801bc78:	602b      	str	r3, [r5, #0]
 801bc7a:	d032      	beq.n	801bce2 <__sflush_r+0x9a>
 801bc7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bc7e:	89a3      	ldrh	r3, [r4, #12]
 801bc80:	075a      	lsls	r2, r3, #29
 801bc82:	d505      	bpl.n	801bc90 <__sflush_r+0x48>
 801bc84:	6863      	ldr	r3, [r4, #4]
 801bc86:	1ac0      	subs	r0, r0, r3
 801bc88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc8a:	b10b      	cbz	r3, 801bc90 <__sflush_r+0x48>
 801bc8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc8e:	1ac0      	subs	r0, r0, r3
 801bc90:	2300      	movs	r3, #0
 801bc92:	4602      	mov	r2, r0
 801bc94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc96:	6a21      	ldr	r1, [r4, #32]
 801bc98:	4628      	mov	r0, r5
 801bc9a:	47b0      	blx	r6
 801bc9c:	1c43      	adds	r3, r0, #1
 801bc9e:	89a3      	ldrh	r3, [r4, #12]
 801bca0:	d106      	bne.n	801bcb0 <__sflush_r+0x68>
 801bca2:	6829      	ldr	r1, [r5, #0]
 801bca4:	291d      	cmp	r1, #29
 801bca6:	d848      	bhi.n	801bd3a <__sflush_r+0xf2>
 801bca8:	4a29      	ldr	r2, [pc, #164]	; (801bd50 <__sflush_r+0x108>)
 801bcaa:	40ca      	lsrs	r2, r1
 801bcac:	07d6      	lsls	r6, r2, #31
 801bcae:	d544      	bpl.n	801bd3a <__sflush_r+0xf2>
 801bcb0:	2200      	movs	r2, #0
 801bcb2:	6062      	str	r2, [r4, #4]
 801bcb4:	04d9      	lsls	r1, r3, #19
 801bcb6:	6922      	ldr	r2, [r4, #16]
 801bcb8:	6022      	str	r2, [r4, #0]
 801bcba:	d504      	bpl.n	801bcc6 <__sflush_r+0x7e>
 801bcbc:	1c42      	adds	r2, r0, #1
 801bcbe:	d101      	bne.n	801bcc4 <__sflush_r+0x7c>
 801bcc0:	682b      	ldr	r3, [r5, #0]
 801bcc2:	b903      	cbnz	r3, 801bcc6 <__sflush_r+0x7e>
 801bcc4:	6560      	str	r0, [r4, #84]	; 0x54
 801bcc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bcc8:	602f      	str	r7, [r5, #0]
 801bcca:	2900      	cmp	r1, #0
 801bccc:	d0c9      	beq.n	801bc62 <__sflush_r+0x1a>
 801bcce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bcd2:	4299      	cmp	r1, r3
 801bcd4:	d002      	beq.n	801bcdc <__sflush_r+0x94>
 801bcd6:	4628      	mov	r0, r5
 801bcd8:	f7fc f906 	bl	8017ee8 <_free_r>
 801bcdc:	2000      	movs	r0, #0
 801bcde:	6360      	str	r0, [r4, #52]	; 0x34
 801bce0:	e7c0      	b.n	801bc64 <__sflush_r+0x1c>
 801bce2:	2301      	movs	r3, #1
 801bce4:	4628      	mov	r0, r5
 801bce6:	47b0      	blx	r6
 801bce8:	1c41      	adds	r1, r0, #1
 801bcea:	d1c8      	bne.n	801bc7e <__sflush_r+0x36>
 801bcec:	682b      	ldr	r3, [r5, #0]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d0c5      	beq.n	801bc7e <__sflush_r+0x36>
 801bcf2:	2b1d      	cmp	r3, #29
 801bcf4:	d001      	beq.n	801bcfa <__sflush_r+0xb2>
 801bcf6:	2b16      	cmp	r3, #22
 801bcf8:	d101      	bne.n	801bcfe <__sflush_r+0xb6>
 801bcfa:	602f      	str	r7, [r5, #0]
 801bcfc:	e7b1      	b.n	801bc62 <__sflush_r+0x1a>
 801bcfe:	89a3      	ldrh	r3, [r4, #12]
 801bd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd04:	81a3      	strh	r3, [r4, #12]
 801bd06:	e7ad      	b.n	801bc64 <__sflush_r+0x1c>
 801bd08:	690f      	ldr	r7, [r1, #16]
 801bd0a:	2f00      	cmp	r7, #0
 801bd0c:	d0a9      	beq.n	801bc62 <__sflush_r+0x1a>
 801bd0e:	0793      	lsls	r3, r2, #30
 801bd10:	680e      	ldr	r6, [r1, #0]
 801bd12:	bf08      	it	eq
 801bd14:	694b      	ldreq	r3, [r1, #20]
 801bd16:	600f      	str	r7, [r1, #0]
 801bd18:	bf18      	it	ne
 801bd1a:	2300      	movne	r3, #0
 801bd1c:	eba6 0807 	sub.w	r8, r6, r7
 801bd20:	608b      	str	r3, [r1, #8]
 801bd22:	f1b8 0f00 	cmp.w	r8, #0
 801bd26:	dd9c      	ble.n	801bc62 <__sflush_r+0x1a>
 801bd28:	4643      	mov	r3, r8
 801bd2a:	463a      	mov	r2, r7
 801bd2c:	6a21      	ldr	r1, [r4, #32]
 801bd2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bd30:	4628      	mov	r0, r5
 801bd32:	47b0      	blx	r6
 801bd34:	2800      	cmp	r0, #0
 801bd36:	dc06      	bgt.n	801bd46 <__sflush_r+0xfe>
 801bd38:	89a3      	ldrh	r3, [r4, #12]
 801bd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd3e:	81a3      	strh	r3, [r4, #12]
 801bd40:	f04f 30ff 	mov.w	r0, #4294967295
 801bd44:	e78e      	b.n	801bc64 <__sflush_r+0x1c>
 801bd46:	4407      	add	r7, r0
 801bd48:	eba8 0800 	sub.w	r8, r8, r0
 801bd4c:	e7e9      	b.n	801bd22 <__sflush_r+0xda>
 801bd4e:	bf00      	nop
 801bd50:	20400001 	.word	0x20400001

0801bd54 <_fflush_r>:
 801bd54:	b538      	push	{r3, r4, r5, lr}
 801bd56:	690b      	ldr	r3, [r1, #16]
 801bd58:	4605      	mov	r5, r0
 801bd5a:	460c      	mov	r4, r1
 801bd5c:	b1db      	cbz	r3, 801bd96 <_fflush_r+0x42>
 801bd5e:	b118      	cbz	r0, 801bd68 <_fflush_r+0x14>
 801bd60:	6983      	ldr	r3, [r0, #24]
 801bd62:	b90b      	cbnz	r3, 801bd68 <_fflush_r+0x14>
 801bd64:	f7fe fbe8 	bl	801a538 <__sinit>
 801bd68:	4b0c      	ldr	r3, [pc, #48]	; (801bd9c <_fflush_r+0x48>)
 801bd6a:	429c      	cmp	r4, r3
 801bd6c:	d109      	bne.n	801bd82 <_fflush_r+0x2e>
 801bd6e:	686c      	ldr	r4, [r5, #4]
 801bd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd74:	b17b      	cbz	r3, 801bd96 <_fflush_r+0x42>
 801bd76:	4621      	mov	r1, r4
 801bd78:	4628      	mov	r0, r5
 801bd7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd7e:	f7ff bf63 	b.w	801bc48 <__sflush_r>
 801bd82:	4b07      	ldr	r3, [pc, #28]	; (801bda0 <_fflush_r+0x4c>)
 801bd84:	429c      	cmp	r4, r3
 801bd86:	d101      	bne.n	801bd8c <_fflush_r+0x38>
 801bd88:	68ac      	ldr	r4, [r5, #8]
 801bd8a:	e7f1      	b.n	801bd70 <_fflush_r+0x1c>
 801bd8c:	4b05      	ldr	r3, [pc, #20]	; (801bda4 <_fflush_r+0x50>)
 801bd8e:	429c      	cmp	r4, r3
 801bd90:	bf08      	it	eq
 801bd92:	68ec      	ldreq	r4, [r5, #12]
 801bd94:	e7ec      	b.n	801bd70 <_fflush_r+0x1c>
 801bd96:	2000      	movs	r0, #0
 801bd98:	bd38      	pop	{r3, r4, r5, pc}
 801bd9a:	bf00      	nop
 801bd9c:	08020c58 	.word	0x08020c58
 801bda0:	08020c78 	.word	0x08020c78
 801bda4:	08020c38 	.word	0x08020c38

0801bda8 <_lseek_r>:
 801bda8:	b538      	push	{r3, r4, r5, lr}
 801bdaa:	4c07      	ldr	r4, [pc, #28]	; (801bdc8 <_lseek_r+0x20>)
 801bdac:	4605      	mov	r5, r0
 801bdae:	4608      	mov	r0, r1
 801bdb0:	4611      	mov	r1, r2
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	6022      	str	r2, [r4, #0]
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	f7e9 fb9e 	bl	80054f8 <_lseek>
 801bdbc:	1c43      	adds	r3, r0, #1
 801bdbe:	d102      	bne.n	801bdc6 <_lseek_r+0x1e>
 801bdc0:	6823      	ldr	r3, [r4, #0]
 801bdc2:	b103      	cbz	r3, 801bdc6 <_lseek_r+0x1e>
 801bdc4:	602b      	str	r3, [r5, #0]
 801bdc6:	bd38      	pop	{r3, r4, r5, pc}
 801bdc8:	200073c4 	.word	0x200073c4

0801bdcc <__swhatbuf_r>:
 801bdcc:	b570      	push	{r4, r5, r6, lr}
 801bdce:	460e      	mov	r6, r1
 801bdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdd4:	2900      	cmp	r1, #0
 801bdd6:	b096      	sub	sp, #88	; 0x58
 801bdd8:	4614      	mov	r4, r2
 801bdda:	461d      	mov	r5, r3
 801bddc:	da07      	bge.n	801bdee <__swhatbuf_r+0x22>
 801bdde:	2300      	movs	r3, #0
 801bde0:	602b      	str	r3, [r5, #0]
 801bde2:	89b3      	ldrh	r3, [r6, #12]
 801bde4:	061a      	lsls	r2, r3, #24
 801bde6:	d410      	bmi.n	801be0a <__swhatbuf_r+0x3e>
 801bde8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bdec:	e00e      	b.n	801be0c <__swhatbuf_r+0x40>
 801bdee:	466a      	mov	r2, sp
 801bdf0:	f000 f888 	bl	801bf04 <_fstat_r>
 801bdf4:	2800      	cmp	r0, #0
 801bdf6:	dbf2      	blt.n	801bdde <__swhatbuf_r+0x12>
 801bdf8:	9a01      	ldr	r2, [sp, #4]
 801bdfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bdfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801be02:	425a      	negs	r2, r3
 801be04:	415a      	adcs	r2, r3
 801be06:	602a      	str	r2, [r5, #0]
 801be08:	e7ee      	b.n	801bde8 <__swhatbuf_r+0x1c>
 801be0a:	2340      	movs	r3, #64	; 0x40
 801be0c:	2000      	movs	r0, #0
 801be0e:	6023      	str	r3, [r4, #0]
 801be10:	b016      	add	sp, #88	; 0x58
 801be12:	bd70      	pop	{r4, r5, r6, pc}

0801be14 <__smakebuf_r>:
 801be14:	898b      	ldrh	r3, [r1, #12]
 801be16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be18:	079d      	lsls	r5, r3, #30
 801be1a:	4606      	mov	r6, r0
 801be1c:	460c      	mov	r4, r1
 801be1e:	d507      	bpl.n	801be30 <__smakebuf_r+0x1c>
 801be20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801be24:	6023      	str	r3, [r4, #0]
 801be26:	6123      	str	r3, [r4, #16]
 801be28:	2301      	movs	r3, #1
 801be2a:	6163      	str	r3, [r4, #20]
 801be2c:	b002      	add	sp, #8
 801be2e:	bd70      	pop	{r4, r5, r6, pc}
 801be30:	ab01      	add	r3, sp, #4
 801be32:	466a      	mov	r2, sp
 801be34:	f7ff ffca 	bl	801bdcc <__swhatbuf_r>
 801be38:	9900      	ldr	r1, [sp, #0]
 801be3a:	4605      	mov	r5, r0
 801be3c:	4630      	mov	r0, r6
 801be3e:	f7fc f8a1 	bl	8017f84 <_malloc_r>
 801be42:	b948      	cbnz	r0, 801be58 <__smakebuf_r+0x44>
 801be44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be48:	059a      	lsls	r2, r3, #22
 801be4a:	d4ef      	bmi.n	801be2c <__smakebuf_r+0x18>
 801be4c:	f023 0303 	bic.w	r3, r3, #3
 801be50:	f043 0302 	orr.w	r3, r3, #2
 801be54:	81a3      	strh	r3, [r4, #12]
 801be56:	e7e3      	b.n	801be20 <__smakebuf_r+0xc>
 801be58:	4b0d      	ldr	r3, [pc, #52]	; (801be90 <__smakebuf_r+0x7c>)
 801be5a:	62b3      	str	r3, [r6, #40]	; 0x28
 801be5c:	89a3      	ldrh	r3, [r4, #12]
 801be5e:	6020      	str	r0, [r4, #0]
 801be60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be64:	81a3      	strh	r3, [r4, #12]
 801be66:	9b00      	ldr	r3, [sp, #0]
 801be68:	6163      	str	r3, [r4, #20]
 801be6a:	9b01      	ldr	r3, [sp, #4]
 801be6c:	6120      	str	r0, [r4, #16]
 801be6e:	b15b      	cbz	r3, 801be88 <__smakebuf_r+0x74>
 801be70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be74:	4630      	mov	r0, r6
 801be76:	f000 f857 	bl	801bf28 <_isatty_r>
 801be7a:	b128      	cbz	r0, 801be88 <__smakebuf_r+0x74>
 801be7c:	89a3      	ldrh	r3, [r4, #12]
 801be7e:	f023 0303 	bic.w	r3, r3, #3
 801be82:	f043 0301 	orr.w	r3, r3, #1
 801be86:	81a3      	strh	r3, [r4, #12]
 801be88:	89a3      	ldrh	r3, [r4, #12]
 801be8a:	431d      	orrs	r5, r3
 801be8c:	81a5      	strh	r5, [r4, #12]
 801be8e:	e7cd      	b.n	801be2c <__smakebuf_r+0x18>
 801be90:	0801a501 	.word	0x0801a501

0801be94 <_realloc_r>:
 801be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be96:	4607      	mov	r7, r0
 801be98:	4614      	mov	r4, r2
 801be9a:	460e      	mov	r6, r1
 801be9c:	b921      	cbnz	r1, 801bea8 <_realloc_r+0x14>
 801be9e:	4611      	mov	r1, r2
 801bea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bea4:	f7fc b86e 	b.w	8017f84 <_malloc_r>
 801bea8:	b922      	cbnz	r2, 801beb4 <_realloc_r+0x20>
 801beaa:	f7fc f81d 	bl	8017ee8 <_free_r>
 801beae:	4625      	mov	r5, r4
 801beb0:	4628      	mov	r0, r5
 801beb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801beb4:	f000 f848 	bl	801bf48 <_malloc_usable_size_r>
 801beb8:	42a0      	cmp	r0, r4
 801beba:	d20f      	bcs.n	801bedc <_realloc_r+0x48>
 801bebc:	4621      	mov	r1, r4
 801bebe:	4638      	mov	r0, r7
 801bec0:	f7fc f860 	bl	8017f84 <_malloc_r>
 801bec4:	4605      	mov	r5, r0
 801bec6:	2800      	cmp	r0, #0
 801bec8:	d0f2      	beq.n	801beb0 <_realloc_r+0x1c>
 801beca:	4631      	mov	r1, r6
 801becc:	4622      	mov	r2, r4
 801bece:	f7fb ffde 	bl	8017e8e <memcpy>
 801bed2:	4631      	mov	r1, r6
 801bed4:	4638      	mov	r0, r7
 801bed6:	f7fc f807 	bl	8017ee8 <_free_r>
 801beda:	e7e9      	b.n	801beb0 <_realloc_r+0x1c>
 801bedc:	4635      	mov	r5, r6
 801bede:	e7e7      	b.n	801beb0 <_realloc_r+0x1c>

0801bee0 <_read_r>:
 801bee0:	b538      	push	{r3, r4, r5, lr}
 801bee2:	4c07      	ldr	r4, [pc, #28]	; (801bf00 <_read_r+0x20>)
 801bee4:	4605      	mov	r5, r0
 801bee6:	4608      	mov	r0, r1
 801bee8:	4611      	mov	r1, r2
 801beea:	2200      	movs	r2, #0
 801beec:	6022      	str	r2, [r4, #0]
 801beee:	461a      	mov	r2, r3
 801bef0:	f7e9 faa2 	bl	8005438 <_read>
 801bef4:	1c43      	adds	r3, r0, #1
 801bef6:	d102      	bne.n	801befe <_read_r+0x1e>
 801bef8:	6823      	ldr	r3, [r4, #0]
 801befa:	b103      	cbz	r3, 801befe <_read_r+0x1e>
 801befc:	602b      	str	r3, [r5, #0]
 801befe:	bd38      	pop	{r3, r4, r5, pc}
 801bf00:	200073c4 	.word	0x200073c4

0801bf04 <_fstat_r>:
 801bf04:	b538      	push	{r3, r4, r5, lr}
 801bf06:	4c07      	ldr	r4, [pc, #28]	; (801bf24 <_fstat_r+0x20>)
 801bf08:	2300      	movs	r3, #0
 801bf0a:	4605      	mov	r5, r0
 801bf0c:	4608      	mov	r0, r1
 801bf0e:	4611      	mov	r1, r2
 801bf10:	6023      	str	r3, [r4, #0]
 801bf12:	f7e9 fad6 	bl	80054c2 <_fstat>
 801bf16:	1c43      	adds	r3, r0, #1
 801bf18:	d102      	bne.n	801bf20 <_fstat_r+0x1c>
 801bf1a:	6823      	ldr	r3, [r4, #0]
 801bf1c:	b103      	cbz	r3, 801bf20 <_fstat_r+0x1c>
 801bf1e:	602b      	str	r3, [r5, #0]
 801bf20:	bd38      	pop	{r3, r4, r5, pc}
 801bf22:	bf00      	nop
 801bf24:	200073c4 	.word	0x200073c4

0801bf28 <_isatty_r>:
 801bf28:	b538      	push	{r3, r4, r5, lr}
 801bf2a:	4c06      	ldr	r4, [pc, #24]	; (801bf44 <_isatty_r+0x1c>)
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	4605      	mov	r5, r0
 801bf30:	4608      	mov	r0, r1
 801bf32:	6023      	str	r3, [r4, #0]
 801bf34:	f7e9 fad5 	bl	80054e2 <_isatty>
 801bf38:	1c43      	adds	r3, r0, #1
 801bf3a:	d102      	bne.n	801bf42 <_isatty_r+0x1a>
 801bf3c:	6823      	ldr	r3, [r4, #0]
 801bf3e:	b103      	cbz	r3, 801bf42 <_isatty_r+0x1a>
 801bf40:	602b      	str	r3, [r5, #0]
 801bf42:	bd38      	pop	{r3, r4, r5, pc}
 801bf44:	200073c4 	.word	0x200073c4

0801bf48 <_malloc_usable_size_r>:
 801bf48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf4c:	1f18      	subs	r0, r3, #4
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	bfbc      	itt	lt
 801bf52:	580b      	ldrlt	r3, [r1, r0]
 801bf54:	18c0      	addlt	r0, r0, r3
 801bf56:	4770      	bx	lr

0801bf58 <pow>:
 801bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf5c:	ed2d 8b04 	vpush	{d8-d9}
 801bf60:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801c234 <pow+0x2dc>
 801bf64:	b08d      	sub	sp, #52	; 0x34
 801bf66:	ec57 6b10 	vmov	r6, r7, d0
 801bf6a:	ec55 4b11 	vmov	r4, r5, d1
 801bf6e:	f000 f963 	bl	801c238 <__ieee754_pow>
 801bf72:	f999 3000 	ldrsb.w	r3, [r9]
 801bf76:	9300      	str	r3, [sp, #0]
 801bf78:	3301      	adds	r3, #1
 801bf7a:	eeb0 8a40 	vmov.f32	s16, s0
 801bf7e:	eef0 8a60 	vmov.f32	s17, s1
 801bf82:	46c8      	mov	r8, r9
 801bf84:	d05f      	beq.n	801c046 <pow+0xee>
 801bf86:	4622      	mov	r2, r4
 801bf88:	462b      	mov	r3, r5
 801bf8a:	4620      	mov	r0, r4
 801bf8c:	4629      	mov	r1, r5
 801bf8e:	f7e4 fddd 	bl	8000b4c <__aeabi_dcmpun>
 801bf92:	4683      	mov	fp, r0
 801bf94:	2800      	cmp	r0, #0
 801bf96:	d156      	bne.n	801c046 <pow+0xee>
 801bf98:	4632      	mov	r2, r6
 801bf9a:	463b      	mov	r3, r7
 801bf9c:	4630      	mov	r0, r6
 801bf9e:	4639      	mov	r1, r7
 801bfa0:	f7e4 fdd4 	bl	8000b4c <__aeabi_dcmpun>
 801bfa4:	9001      	str	r0, [sp, #4]
 801bfa6:	b1e8      	cbz	r0, 801bfe4 <pow+0x8c>
 801bfa8:	2200      	movs	r2, #0
 801bfaa:	2300      	movs	r3, #0
 801bfac:	4620      	mov	r0, r4
 801bfae:	4629      	mov	r1, r5
 801bfb0:	f7e4 fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	d046      	beq.n	801c046 <pow+0xee>
 801bfb8:	2301      	movs	r3, #1
 801bfba:	9302      	str	r3, [sp, #8]
 801bfbc:	4b96      	ldr	r3, [pc, #600]	; (801c218 <pow+0x2c0>)
 801bfbe:	9303      	str	r3, [sp, #12]
 801bfc0:	4b96      	ldr	r3, [pc, #600]	; (801c21c <pow+0x2c4>)
 801bfc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bfcc:	9b00      	ldr	r3, [sp, #0]
 801bfce:	2b02      	cmp	r3, #2
 801bfd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801bfd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801bfd8:	d033      	beq.n	801c042 <pow+0xea>
 801bfda:	a802      	add	r0, sp, #8
 801bfdc:	f000 fefb 	bl	801cdd6 <matherr>
 801bfe0:	bb48      	cbnz	r0, 801c036 <pow+0xde>
 801bfe2:	e05d      	b.n	801c0a0 <pow+0x148>
 801bfe4:	f04f 0a00 	mov.w	sl, #0
 801bfe8:	f04f 0b00 	mov.w	fp, #0
 801bfec:	4652      	mov	r2, sl
 801bfee:	465b      	mov	r3, fp
 801bff0:	4630      	mov	r0, r6
 801bff2:	4639      	mov	r1, r7
 801bff4:	f7e4 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 801bff8:	ec4b ab19 	vmov	d9, sl, fp
 801bffc:	2800      	cmp	r0, #0
 801bffe:	d054      	beq.n	801c0aa <pow+0x152>
 801c000:	4652      	mov	r2, sl
 801c002:	465b      	mov	r3, fp
 801c004:	4620      	mov	r0, r4
 801c006:	4629      	mov	r1, r5
 801c008:	f7e4 fd6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c00c:	4680      	mov	r8, r0
 801c00e:	b318      	cbz	r0, 801c058 <pow+0x100>
 801c010:	2301      	movs	r3, #1
 801c012:	9302      	str	r3, [sp, #8]
 801c014:	4b80      	ldr	r3, [pc, #512]	; (801c218 <pow+0x2c0>)
 801c016:	9303      	str	r3, [sp, #12]
 801c018:	9b01      	ldr	r3, [sp, #4]
 801c01a:	930a      	str	r3, [sp, #40]	; 0x28
 801c01c:	9b00      	ldr	r3, [sp, #0]
 801c01e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c022:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c026:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d0d5      	beq.n	801bfda <pow+0x82>
 801c02e:	4b7b      	ldr	r3, [pc, #492]	; (801c21c <pow+0x2c4>)
 801c030:	2200      	movs	r2, #0
 801c032:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c038:	b11b      	cbz	r3, 801c042 <pow+0xea>
 801c03a:	f000 ffe3 	bl	801d004 <__errno>
 801c03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c040:	6003      	str	r3, [r0, #0]
 801c042:	ed9d 8b08 	vldr	d8, [sp, #32]
 801c046:	eeb0 0a48 	vmov.f32	s0, s16
 801c04a:	eef0 0a68 	vmov.f32	s1, s17
 801c04e:	b00d      	add	sp, #52	; 0x34
 801c050:	ecbd 8b04 	vpop	{d8-d9}
 801c054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c058:	ec45 4b10 	vmov	d0, r4, r5
 801c05c:	f000 feb3 	bl	801cdc6 <finite>
 801c060:	2800      	cmp	r0, #0
 801c062:	d0f0      	beq.n	801c046 <pow+0xee>
 801c064:	4652      	mov	r2, sl
 801c066:	465b      	mov	r3, fp
 801c068:	4620      	mov	r0, r4
 801c06a:	4629      	mov	r1, r5
 801c06c:	f7e4 fd46 	bl	8000afc <__aeabi_dcmplt>
 801c070:	2800      	cmp	r0, #0
 801c072:	d0e8      	beq.n	801c046 <pow+0xee>
 801c074:	2301      	movs	r3, #1
 801c076:	9302      	str	r3, [sp, #8]
 801c078:	4b67      	ldr	r3, [pc, #412]	; (801c218 <pow+0x2c0>)
 801c07a:	9303      	str	r3, [sp, #12]
 801c07c:	f999 3000 	ldrsb.w	r3, [r9]
 801c080:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c084:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c088:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c08c:	b913      	cbnz	r3, 801c094 <pow+0x13c>
 801c08e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c092:	e7a2      	b.n	801bfda <pow+0x82>
 801c094:	4962      	ldr	r1, [pc, #392]	; (801c220 <pow+0x2c8>)
 801c096:	2000      	movs	r0, #0
 801c098:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c09c:	2b02      	cmp	r3, #2
 801c09e:	d19c      	bne.n	801bfda <pow+0x82>
 801c0a0:	f000 ffb0 	bl	801d004 <__errno>
 801c0a4:	2321      	movs	r3, #33	; 0x21
 801c0a6:	6003      	str	r3, [r0, #0]
 801c0a8:	e7c5      	b.n	801c036 <pow+0xde>
 801c0aa:	eeb0 0a48 	vmov.f32	s0, s16
 801c0ae:	eef0 0a68 	vmov.f32	s1, s17
 801c0b2:	f000 fe88 	bl	801cdc6 <finite>
 801c0b6:	9000      	str	r0, [sp, #0]
 801c0b8:	2800      	cmp	r0, #0
 801c0ba:	f040 8081 	bne.w	801c1c0 <pow+0x268>
 801c0be:	ec47 6b10 	vmov	d0, r6, r7
 801c0c2:	f000 fe80 	bl	801cdc6 <finite>
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	d07a      	beq.n	801c1c0 <pow+0x268>
 801c0ca:	ec45 4b10 	vmov	d0, r4, r5
 801c0ce:	f000 fe7a 	bl	801cdc6 <finite>
 801c0d2:	2800      	cmp	r0, #0
 801c0d4:	d074      	beq.n	801c1c0 <pow+0x268>
 801c0d6:	ec53 2b18 	vmov	r2, r3, d8
 801c0da:	ee18 0a10 	vmov	r0, s16
 801c0de:	4619      	mov	r1, r3
 801c0e0:	f7e4 fd34 	bl	8000b4c <__aeabi_dcmpun>
 801c0e4:	f999 9000 	ldrsb.w	r9, [r9]
 801c0e8:	4b4b      	ldr	r3, [pc, #300]	; (801c218 <pow+0x2c0>)
 801c0ea:	b1b0      	cbz	r0, 801c11a <pow+0x1c2>
 801c0ec:	2201      	movs	r2, #1
 801c0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c0f2:	9b00      	ldr	r3, [sp, #0]
 801c0f4:	930a      	str	r3, [sp, #40]	; 0x28
 801c0f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c0fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c0fe:	f1b9 0f00 	cmp.w	r9, #0
 801c102:	d0c4      	beq.n	801c08e <pow+0x136>
 801c104:	4652      	mov	r2, sl
 801c106:	465b      	mov	r3, fp
 801c108:	4650      	mov	r0, sl
 801c10a:	4659      	mov	r1, fp
 801c10c:	f7e4 fbae 	bl	800086c <__aeabi_ddiv>
 801c110:	f1b9 0f02 	cmp.w	r9, #2
 801c114:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c118:	e7c1      	b.n	801c09e <pow+0x146>
 801c11a:	2203      	movs	r2, #3
 801c11c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c120:	900a      	str	r0, [sp, #40]	; 0x28
 801c122:	4629      	mov	r1, r5
 801c124:	4620      	mov	r0, r4
 801c126:	2200      	movs	r2, #0
 801c128:	4b3e      	ldr	r3, [pc, #248]	; (801c224 <pow+0x2cc>)
 801c12a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c12e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c132:	f7e4 fa71 	bl	8000618 <__aeabi_dmul>
 801c136:	4604      	mov	r4, r0
 801c138:	460d      	mov	r5, r1
 801c13a:	f1b9 0f00 	cmp.w	r9, #0
 801c13e:	d124      	bne.n	801c18a <pow+0x232>
 801c140:	4b39      	ldr	r3, [pc, #228]	; (801c228 <pow+0x2d0>)
 801c142:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c146:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c14a:	4630      	mov	r0, r6
 801c14c:	4652      	mov	r2, sl
 801c14e:	465b      	mov	r3, fp
 801c150:	4639      	mov	r1, r7
 801c152:	f7e4 fcd3 	bl	8000afc <__aeabi_dcmplt>
 801c156:	2800      	cmp	r0, #0
 801c158:	d056      	beq.n	801c208 <pow+0x2b0>
 801c15a:	ec45 4b10 	vmov	d0, r4, r5
 801c15e:	f000 fe47 	bl	801cdf0 <rint>
 801c162:	4622      	mov	r2, r4
 801c164:	462b      	mov	r3, r5
 801c166:	ec51 0b10 	vmov	r0, r1, d0
 801c16a:	f7e4 fcbd 	bl	8000ae8 <__aeabi_dcmpeq>
 801c16e:	b920      	cbnz	r0, 801c17a <pow+0x222>
 801c170:	4b2e      	ldr	r3, [pc, #184]	; (801c22c <pow+0x2d4>)
 801c172:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c176:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c17a:	f998 3000 	ldrsb.w	r3, [r8]
 801c17e:	2b02      	cmp	r3, #2
 801c180:	d142      	bne.n	801c208 <pow+0x2b0>
 801c182:	f000 ff3f 	bl	801d004 <__errno>
 801c186:	2322      	movs	r3, #34	; 0x22
 801c188:	e78d      	b.n	801c0a6 <pow+0x14e>
 801c18a:	4b29      	ldr	r3, [pc, #164]	; (801c230 <pow+0x2d8>)
 801c18c:	2200      	movs	r2, #0
 801c18e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c192:	4630      	mov	r0, r6
 801c194:	4652      	mov	r2, sl
 801c196:	465b      	mov	r3, fp
 801c198:	4639      	mov	r1, r7
 801c19a:	f7e4 fcaf 	bl	8000afc <__aeabi_dcmplt>
 801c19e:	2800      	cmp	r0, #0
 801c1a0:	d0eb      	beq.n	801c17a <pow+0x222>
 801c1a2:	ec45 4b10 	vmov	d0, r4, r5
 801c1a6:	f000 fe23 	bl	801cdf0 <rint>
 801c1aa:	4622      	mov	r2, r4
 801c1ac:	462b      	mov	r3, r5
 801c1ae:	ec51 0b10 	vmov	r0, r1, d0
 801c1b2:	f7e4 fc99 	bl	8000ae8 <__aeabi_dcmpeq>
 801c1b6:	2800      	cmp	r0, #0
 801c1b8:	d1df      	bne.n	801c17a <pow+0x222>
 801c1ba:	2200      	movs	r2, #0
 801c1bc:	4b18      	ldr	r3, [pc, #96]	; (801c220 <pow+0x2c8>)
 801c1be:	e7da      	b.n	801c176 <pow+0x21e>
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	ec51 0b18 	vmov	r0, r1, d8
 801c1c8:	f7e4 fc8e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c1cc:	2800      	cmp	r0, #0
 801c1ce:	f43f af3a 	beq.w	801c046 <pow+0xee>
 801c1d2:	ec47 6b10 	vmov	d0, r6, r7
 801c1d6:	f000 fdf6 	bl	801cdc6 <finite>
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	f43f af33 	beq.w	801c046 <pow+0xee>
 801c1e0:	ec45 4b10 	vmov	d0, r4, r5
 801c1e4:	f000 fdef 	bl	801cdc6 <finite>
 801c1e8:	2800      	cmp	r0, #0
 801c1ea:	f43f af2c 	beq.w	801c046 <pow+0xee>
 801c1ee:	2304      	movs	r3, #4
 801c1f0:	9302      	str	r3, [sp, #8]
 801c1f2:	4b09      	ldr	r3, [pc, #36]	; (801c218 <pow+0x2c0>)
 801c1f4:	9303      	str	r3, [sp, #12]
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	930a      	str	r3, [sp, #40]	; 0x28
 801c1fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c1fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c202:	ed8d 9b08 	vstr	d9, [sp, #32]
 801c206:	e7b8      	b.n	801c17a <pow+0x222>
 801c208:	a802      	add	r0, sp, #8
 801c20a:	f000 fde4 	bl	801cdd6 <matherr>
 801c20e:	2800      	cmp	r0, #0
 801c210:	f47f af11 	bne.w	801c036 <pow+0xde>
 801c214:	e7b5      	b.n	801c182 <pow+0x22a>
 801c216:	bf00      	nop
 801c218:	08020da5 	.word	0x08020da5
 801c21c:	3ff00000 	.word	0x3ff00000
 801c220:	fff00000 	.word	0xfff00000
 801c224:	3fe00000 	.word	0x3fe00000
 801c228:	47efffff 	.word	0x47efffff
 801c22c:	c7efffff 	.word	0xc7efffff
 801c230:	7ff00000 	.word	0x7ff00000
 801c234:	20000244 	.word	0x20000244

0801c238 <__ieee754_pow>:
 801c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c23c:	b091      	sub	sp, #68	; 0x44
 801c23e:	ed8d 1b00 	vstr	d1, [sp]
 801c242:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c246:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c24a:	ea58 0302 	orrs.w	r3, r8, r2
 801c24e:	ec57 6b10 	vmov	r6, r7, d0
 801c252:	f000 84be 	beq.w	801cbd2 <__ieee754_pow+0x99a>
 801c256:	4b7a      	ldr	r3, [pc, #488]	; (801c440 <__ieee754_pow+0x208>)
 801c258:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c25c:	429c      	cmp	r4, r3
 801c25e:	463d      	mov	r5, r7
 801c260:	ee10 aa10 	vmov	sl, s0
 801c264:	dc09      	bgt.n	801c27a <__ieee754_pow+0x42>
 801c266:	d103      	bne.n	801c270 <__ieee754_pow+0x38>
 801c268:	b93e      	cbnz	r6, 801c27a <__ieee754_pow+0x42>
 801c26a:	45a0      	cmp	r8, r4
 801c26c:	dc0d      	bgt.n	801c28a <__ieee754_pow+0x52>
 801c26e:	e001      	b.n	801c274 <__ieee754_pow+0x3c>
 801c270:	4598      	cmp	r8, r3
 801c272:	dc02      	bgt.n	801c27a <__ieee754_pow+0x42>
 801c274:	4598      	cmp	r8, r3
 801c276:	d10e      	bne.n	801c296 <__ieee754_pow+0x5e>
 801c278:	b16a      	cbz	r2, 801c296 <__ieee754_pow+0x5e>
 801c27a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c27e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c282:	ea54 030a 	orrs.w	r3, r4, sl
 801c286:	f000 84a4 	beq.w	801cbd2 <__ieee754_pow+0x99a>
 801c28a:	486e      	ldr	r0, [pc, #440]	; (801c444 <__ieee754_pow+0x20c>)
 801c28c:	b011      	add	sp, #68	; 0x44
 801c28e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c292:	f000 bda5 	b.w	801cde0 <nan>
 801c296:	2d00      	cmp	r5, #0
 801c298:	da53      	bge.n	801c342 <__ieee754_pow+0x10a>
 801c29a:	4b6b      	ldr	r3, [pc, #428]	; (801c448 <__ieee754_pow+0x210>)
 801c29c:	4598      	cmp	r8, r3
 801c29e:	dc4d      	bgt.n	801c33c <__ieee754_pow+0x104>
 801c2a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c2a4:	4598      	cmp	r8, r3
 801c2a6:	dd4c      	ble.n	801c342 <__ieee754_pow+0x10a>
 801c2a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c2ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c2b0:	2b14      	cmp	r3, #20
 801c2b2:	dd26      	ble.n	801c302 <__ieee754_pow+0xca>
 801c2b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c2b8:	fa22 f103 	lsr.w	r1, r2, r3
 801c2bc:	fa01 f303 	lsl.w	r3, r1, r3
 801c2c0:	4293      	cmp	r3, r2
 801c2c2:	d13e      	bne.n	801c342 <__ieee754_pow+0x10a>
 801c2c4:	f001 0101 	and.w	r1, r1, #1
 801c2c8:	f1c1 0b02 	rsb	fp, r1, #2
 801c2cc:	2a00      	cmp	r2, #0
 801c2ce:	d15b      	bne.n	801c388 <__ieee754_pow+0x150>
 801c2d0:	4b5b      	ldr	r3, [pc, #364]	; (801c440 <__ieee754_pow+0x208>)
 801c2d2:	4598      	cmp	r8, r3
 801c2d4:	d124      	bne.n	801c320 <__ieee754_pow+0xe8>
 801c2d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c2da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c2de:	ea53 030a 	orrs.w	r3, r3, sl
 801c2e2:	f000 8476 	beq.w	801cbd2 <__ieee754_pow+0x99a>
 801c2e6:	4b59      	ldr	r3, [pc, #356]	; (801c44c <__ieee754_pow+0x214>)
 801c2e8:	429c      	cmp	r4, r3
 801c2ea:	dd2d      	ble.n	801c348 <__ieee754_pow+0x110>
 801c2ec:	f1b9 0f00 	cmp.w	r9, #0
 801c2f0:	f280 8473 	bge.w	801cbda <__ieee754_pow+0x9a2>
 801c2f4:	2000      	movs	r0, #0
 801c2f6:	2100      	movs	r1, #0
 801c2f8:	ec41 0b10 	vmov	d0, r0, r1
 801c2fc:	b011      	add	sp, #68	; 0x44
 801c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c302:	2a00      	cmp	r2, #0
 801c304:	d13e      	bne.n	801c384 <__ieee754_pow+0x14c>
 801c306:	f1c3 0314 	rsb	r3, r3, #20
 801c30a:	fa48 f103 	asr.w	r1, r8, r3
 801c30e:	fa01 f303 	lsl.w	r3, r1, r3
 801c312:	4543      	cmp	r3, r8
 801c314:	f040 8469 	bne.w	801cbea <__ieee754_pow+0x9b2>
 801c318:	f001 0101 	and.w	r1, r1, #1
 801c31c:	f1c1 0b02 	rsb	fp, r1, #2
 801c320:	4b4b      	ldr	r3, [pc, #300]	; (801c450 <__ieee754_pow+0x218>)
 801c322:	4598      	cmp	r8, r3
 801c324:	d118      	bne.n	801c358 <__ieee754_pow+0x120>
 801c326:	f1b9 0f00 	cmp.w	r9, #0
 801c32a:	f280 845a 	bge.w	801cbe2 <__ieee754_pow+0x9aa>
 801c32e:	4948      	ldr	r1, [pc, #288]	; (801c450 <__ieee754_pow+0x218>)
 801c330:	4632      	mov	r2, r6
 801c332:	463b      	mov	r3, r7
 801c334:	2000      	movs	r0, #0
 801c336:	f7e4 fa99 	bl	800086c <__aeabi_ddiv>
 801c33a:	e7dd      	b.n	801c2f8 <__ieee754_pow+0xc0>
 801c33c:	f04f 0b02 	mov.w	fp, #2
 801c340:	e7c4      	b.n	801c2cc <__ieee754_pow+0x94>
 801c342:	f04f 0b00 	mov.w	fp, #0
 801c346:	e7c1      	b.n	801c2cc <__ieee754_pow+0x94>
 801c348:	f1b9 0f00 	cmp.w	r9, #0
 801c34c:	dad2      	bge.n	801c2f4 <__ieee754_pow+0xbc>
 801c34e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c352:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c356:	e7cf      	b.n	801c2f8 <__ieee754_pow+0xc0>
 801c358:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c35c:	d106      	bne.n	801c36c <__ieee754_pow+0x134>
 801c35e:	4632      	mov	r2, r6
 801c360:	463b      	mov	r3, r7
 801c362:	4610      	mov	r0, r2
 801c364:	4619      	mov	r1, r3
 801c366:	f7e4 f957 	bl	8000618 <__aeabi_dmul>
 801c36a:	e7c5      	b.n	801c2f8 <__ieee754_pow+0xc0>
 801c36c:	4b39      	ldr	r3, [pc, #228]	; (801c454 <__ieee754_pow+0x21c>)
 801c36e:	4599      	cmp	r9, r3
 801c370:	d10a      	bne.n	801c388 <__ieee754_pow+0x150>
 801c372:	2d00      	cmp	r5, #0
 801c374:	db08      	blt.n	801c388 <__ieee754_pow+0x150>
 801c376:	ec47 6b10 	vmov	d0, r6, r7
 801c37a:	b011      	add	sp, #68	; 0x44
 801c37c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c380:	f000 bc68 	b.w	801cc54 <__ieee754_sqrt>
 801c384:	f04f 0b00 	mov.w	fp, #0
 801c388:	ec47 6b10 	vmov	d0, r6, r7
 801c38c:	f000 fd12 	bl	801cdb4 <fabs>
 801c390:	ec51 0b10 	vmov	r0, r1, d0
 801c394:	f1ba 0f00 	cmp.w	sl, #0
 801c398:	d127      	bne.n	801c3ea <__ieee754_pow+0x1b2>
 801c39a:	b124      	cbz	r4, 801c3a6 <__ieee754_pow+0x16e>
 801c39c:	4b2c      	ldr	r3, [pc, #176]	; (801c450 <__ieee754_pow+0x218>)
 801c39e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	d121      	bne.n	801c3ea <__ieee754_pow+0x1b2>
 801c3a6:	f1b9 0f00 	cmp.w	r9, #0
 801c3aa:	da05      	bge.n	801c3b8 <__ieee754_pow+0x180>
 801c3ac:	4602      	mov	r2, r0
 801c3ae:	460b      	mov	r3, r1
 801c3b0:	2000      	movs	r0, #0
 801c3b2:	4927      	ldr	r1, [pc, #156]	; (801c450 <__ieee754_pow+0x218>)
 801c3b4:	f7e4 fa5a 	bl	800086c <__aeabi_ddiv>
 801c3b8:	2d00      	cmp	r5, #0
 801c3ba:	da9d      	bge.n	801c2f8 <__ieee754_pow+0xc0>
 801c3bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c3c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c3c4:	ea54 030b 	orrs.w	r3, r4, fp
 801c3c8:	d108      	bne.n	801c3dc <__ieee754_pow+0x1a4>
 801c3ca:	4602      	mov	r2, r0
 801c3cc:	460b      	mov	r3, r1
 801c3ce:	4610      	mov	r0, r2
 801c3d0:	4619      	mov	r1, r3
 801c3d2:	f7e3 ff69 	bl	80002a8 <__aeabi_dsub>
 801c3d6:	4602      	mov	r2, r0
 801c3d8:	460b      	mov	r3, r1
 801c3da:	e7ac      	b.n	801c336 <__ieee754_pow+0xfe>
 801c3dc:	f1bb 0f01 	cmp.w	fp, #1
 801c3e0:	d18a      	bne.n	801c2f8 <__ieee754_pow+0xc0>
 801c3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3e6:	4619      	mov	r1, r3
 801c3e8:	e786      	b.n	801c2f8 <__ieee754_pow+0xc0>
 801c3ea:	0fed      	lsrs	r5, r5, #31
 801c3ec:	1e6b      	subs	r3, r5, #1
 801c3ee:	930d      	str	r3, [sp, #52]	; 0x34
 801c3f0:	ea5b 0303 	orrs.w	r3, fp, r3
 801c3f4:	d102      	bne.n	801c3fc <__ieee754_pow+0x1c4>
 801c3f6:	4632      	mov	r2, r6
 801c3f8:	463b      	mov	r3, r7
 801c3fa:	e7e8      	b.n	801c3ce <__ieee754_pow+0x196>
 801c3fc:	4b16      	ldr	r3, [pc, #88]	; (801c458 <__ieee754_pow+0x220>)
 801c3fe:	4598      	cmp	r8, r3
 801c400:	f340 80fe 	ble.w	801c600 <__ieee754_pow+0x3c8>
 801c404:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c408:	4598      	cmp	r8, r3
 801c40a:	dd0a      	ble.n	801c422 <__ieee754_pow+0x1ea>
 801c40c:	4b0f      	ldr	r3, [pc, #60]	; (801c44c <__ieee754_pow+0x214>)
 801c40e:	429c      	cmp	r4, r3
 801c410:	dc0d      	bgt.n	801c42e <__ieee754_pow+0x1f6>
 801c412:	f1b9 0f00 	cmp.w	r9, #0
 801c416:	f6bf af6d 	bge.w	801c2f4 <__ieee754_pow+0xbc>
 801c41a:	a307      	add	r3, pc, #28	; (adr r3, 801c438 <__ieee754_pow+0x200>)
 801c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c420:	e79f      	b.n	801c362 <__ieee754_pow+0x12a>
 801c422:	4b0e      	ldr	r3, [pc, #56]	; (801c45c <__ieee754_pow+0x224>)
 801c424:	429c      	cmp	r4, r3
 801c426:	ddf4      	ble.n	801c412 <__ieee754_pow+0x1da>
 801c428:	4b09      	ldr	r3, [pc, #36]	; (801c450 <__ieee754_pow+0x218>)
 801c42a:	429c      	cmp	r4, r3
 801c42c:	dd18      	ble.n	801c460 <__ieee754_pow+0x228>
 801c42e:	f1b9 0f00 	cmp.w	r9, #0
 801c432:	dcf2      	bgt.n	801c41a <__ieee754_pow+0x1e2>
 801c434:	e75e      	b.n	801c2f4 <__ieee754_pow+0xbc>
 801c436:	bf00      	nop
 801c438:	8800759c 	.word	0x8800759c
 801c43c:	7e37e43c 	.word	0x7e37e43c
 801c440:	7ff00000 	.word	0x7ff00000
 801c444:	08020d99 	.word	0x08020d99
 801c448:	433fffff 	.word	0x433fffff
 801c44c:	3fefffff 	.word	0x3fefffff
 801c450:	3ff00000 	.word	0x3ff00000
 801c454:	3fe00000 	.word	0x3fe00000
 801c458:	41e00000 	.word	0x41e00000
 801c45c:	3feffffe 	.word	0x3feffffe
 801c460:	2200      	movs	r2, #0
 801c462:	4b63      	ldr	r3, [pc, #396]	; (801c5f0 <__ieee754_pow+0x3b8>)
 801c464:	f7e3 ff20 	bl	80002a8 <__aeabi_dsub>
 801c468:	a355      	add	r3, pc, #340	; (adr r3, 801c5c0 <__ieee754_pow+0x388>)
 801c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c46e:	4604      	mov	r4, r0
 801c470:	460d      	mov	r5, r1
 801c472:	f7e4 f8d1 	bl	8000618 <__aeabi_dmul>
 801c476:	a354      	add	r3, pc, #336	; (adr r3, 801c5c8 <__ieee754_pow+0x390>)
 801c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c47c:	4606      	mov	r6, r0
 801c47e:	460f      	mov	r7, r1
 801c480:	4620      	mov	r0, r4
 801c482:	4629      	mov	r1, r5
 801c484:	f7e4 f8c8 	bl	8000618 <__aeabi_dmul>
 801c488:	2200      	movs	r2, #0
 801c48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c48e:	4b59      	ldr	r3, [pc, #356]	; (801c5f4 <__ieee754_pow+0x3bc>)
 801c490:	4620      	mov	r0, r4
 801c492:	4629      	mov	r1, r5
 801c494:	f7e4 f8c0 	bl	8000618 <__aeabi_dmul>
 801c498:	4602      	mov	r2, r0
 801c49a:	460b      	mov	r3, r1
 801c49c:	a14c      	add	r1, pc, #304	; (adr r1, 801c5d0 <__ieee754_pow+0x398>)
 801c49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4a2:	f7e3 ff01 	bl	80002a8 <__aeabi_dsub>
 801c4a6:	4622      	mov	r2, r4
 801c4a8:	462b      	mov	r3, r5
 801c4aa:	f7e4 f8b5 	bl	8000618 <__aeabi_dmul>
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	460b      	mov	r3, r1
 801c4b2:	2000      	movs	r0, #0
 801c4b4:	4950      	ldr	r1, [pc, #320]	; (801c5f8 <__ieee754_pow+0x3c0>)
 801c4b6:	f7e3 fef7 	bl	80002a8 <__aeabi_dsub>
 801c4ba:	4622      	mov	r2, r4
 801c4bc:	462b      	mov	r3, r5
 801c4be:	4680      	mov	r8, r0
 801c4c0:	4689      	mov	r9, r1
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	4629      	mov	r1, r5
 801c4c6:	f7e4 f8a7 	bl	8000618 <__aeabi_dmul>
 801c4ca:	4602      	mov	r2, r0
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	4640      	mov	r0, r8
 801c4d0:	4649      	mov	r1, r9
 801c4d2:	f7e4 f8a1 	bl	8000618 <__aeabi_dmul>
 801c4d6:	a340      	add	r3, pc, #256	; (adr r3, 801c5d8 <__ieee754_pow+0x3a0>)
 801c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4dc:	f7e4 f89c 	bl	8000618 <__aeabi_dmul>
 801c4e0:	4602      	mov	r2, r0
 801c4e2:	460b      	mov	r3, r1
 801c4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c4e8:	f7e3 fede 	bl	80002a8 <__aeabi_dsub>
 801c4ec:	4602      	mov	r2, r0
 801c4ee:	460b      	mov	r3, r1
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	460d      	mov	r5, r1
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	4639      	mov	r1, r7
 801c4f8:	f7e3 fed8 	bl	80002ac <__adddf3>
 801c4fc:	2000      	movs	r0, #0
 801c4fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c502:	4632      	mov	r2, r6
 801c504:	463b      	mov	r3, r7
 801c506:	f7e3 fecf 	bl	80002a8 <__aeabi_dsub>
 801c50a:	4602      	mov	r2, r0
 801c50c:	460b      	mov	r3, r1
 801c50e:	4620      	mov	r0, r4
 801c510:	4629      	mov	r1, r5
 801c512:	f7e3 fec9 	bl	80002a8 <__aeabi_dsub>
 801c516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c518:	f10b 33ff 	add.w	r3, fp, #4294967295
 801c51c:	4313      	orrs	r3, r2
 801c51e:	4606      	mov	r6, r0
 801c520:	460f      	mov	r7, r1
 801c522:	f040 81eb 	bne.w	801c8fc <__ieee754_pow+0x6c4>
 801c526:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801c5e0 <__ieee754_pow+0x3a8>
 801c52a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c52e:	2400      	movs	r4, #0
 801c530:	4622      	mov	r2, r4
 801c532:	462b      	mov	r3, r5
 801c534:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c538:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c53c:	f7e3 feb4 	bl	80002a8 <__aeabi_dsub>
 801c540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c544:	f7e4 f868 	bl	8000618 <__aeabi_dmul>
 801c548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c54c:	4680      	mov	r8, r0
 801c54e:	4689      	mov	r9, r1
 801c550:	4630      	mov	r0, r6
 801c552:	4639      	mov	r1, r7
 801c554:	f7e4 f860 	bl	8000618 <__aeabi_dmul>
 801c558:	4602      	mov	r2, r0
 801c55a:	460b      	mov	r3, r1
 801c55c:	4640      	mov	r0, r8
 801c55e:	4649      	mov	r1, r9
 801c560:	f7e3 fea4 	bl	80002ac <__adddf3>
 801c564:	4622      	mov	r2, r4
 801c566:	462b      	mov	r3, r5
 801c568:	4680      	mov	r8, r0
 801c56a:	4689      	mov	r9, r1
 801c56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c570:	f7e4 f852 	bl	8000618 <__aeabi_dmul>
 801c574:	460b      	mov	r3, r1
 801c576:	4604      	mov	r4, r0
 801c578:	460d      	mov	r5, r1
 801c57a:	4602      	mov	r2, r0
 801c57c:	4649      	mov	r1, r9
 801c57e:	4640      	mov	r0, r8
 801c580:	e9cd 4500 	strd	r4, r5, [sp]
 801c584:	f7e3 fe92 	bl	80002ac <__adddf3>
 801c588:	4b1c      	ldr	r3, [pc, #112]	; (801c5fc <__ieee754_pow+0x3c4>)
 801c58a:	4299      	cmp	r1, r3
 801c58c:	4606      	mov	r6, r0
 801c58e:	460f      	mov	r7, r1
 801c590:	468b      	mov	fp, r1
 801c592:	f340 82f7 	ble.w	801cb84 <__ieee754_pow+0x94c>
 801c596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c59a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c59e:	4303      	orrs	r3, r0
 801c5a0:	f000 81ea 	beq.w	801c978 <__ieee754_pow+0x740>
 801c5a4:	a310      	add	r3, pc, #64	; (adr r3, 801c5e8 <__ieee754_pow+0x3b0>)
 801c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c5ae:	f7e4 f833 	bl	8000618 <__aeabi_dmul>
 801c5b2:	a30d      	add	r3, pc, #52	; (adr r3, 801c5e8 <__ieee754_pow+0x3b0>)
 801c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5b8:	e6d5      	b.n	801c366 <__ieee754_pow+0x12e>
 801c5ba:	bf00      	nop
 801c5bc:	f3af 8000 	nop.w
 801c5c0:	60000000 	.word	0x60000000
 801c5c4:	3ff71547 	.word	0x3ff71547
 801c5c8:	f85ddf44 	.word	0xf85ddf44
 801c5cc:	3e54ae0b 	.word	0x3e54ae0b
 801c5d0:	55555555 	.word	0x55555555
 801c5d4:	3fd55555 	.word	0x3fd55555
 801c5d8:	652b82fe 	.word	0x652b82fe
 801c5dc:	3ff71547 	.word	0x3ff71547
 801c5e0:	00000000 	.word	0x00000000
 801c5e4:	bff00000 	.word	0xbff00000
 801c5e8:	8800759c 	.word	0x8800759c
 801c5ec:	7e37e43c 	.word	0x7e37e43c
 801c5f0:	3ff00000 	.word	0x3ff00000
 801c5f4:	3fd00000 	.word	0x3fd00000
 801c5f8:	3fe00000 	.word	0x3fe00000
 801c5fc:	408fffff 	.word	0x408fffff
 801c600:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c604:	f04f 0200 	mov.w	r2, #0
 801c608:	da05      	bge.n	801c616 <__ieee754_pow+0x3de>
 801c60a:	4bd3      	ldr	r3, [pc, #844]	; (801c958 <__ieee754_pow+0x720>)
 801c60c:	f7e4 f804 	bl	8000618 <__aeabi_dmul>
 801c610:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c614:	460c      	mov	r4, r1
 801c616:	1523      	asrs	r3, r4, #20
 801c618:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c61c:	4413      	add	r3, r2
 801c61e:	9309      	str	r3, [sp, #36]	; 0x24
 801c620:	4bce      	ldr	r3, [pc, #824]	; (801c95c <__ieee754_pow+0x724>)
 801c622:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c626:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c62a:	429c      	cmp	r4, r3
 801c62c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c630:	dd08      	ble.n	801c644 <__ieee754_pow+0x40c>
 801c632:	4bcb      	ldr	r3, [pc, #812]	; (801c960 <__ieee754_pow+0x728>)
 801c634:	429c      	cmp	r4, r3
 801c636:	f340 815e 	ble.w	801c8f6 <__ieee754_pow+0x6be>
 801c63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c63c:	3301      	adds	r3, #1
 801c63e:	9309      	str	r3, [sp, #36]	; 0x24
 801c640:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c644:	f04f 0a00 	mov.w	sl, #0
 801c648:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c64c:	930c      	str	r3, [sp, #48]	; 0x30
 801c64e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c650:	4bc4      	ldr	r3, [pc, #784]	; (801c964 <__ieee754_pow+0x72c>)
 801c652:	4413      	add	r3, r2
 801c654:	ed93 7b00 	vldr	d7, [r3]
 801c658:	4629      	mov	r1, r5
 801c65a:	ec53 2b17 	vmov	r2, r3, d7
 801c65e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c662:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c666:	f7e3 fe1f 	bl	80002a8 <__aeabi_dsub>
 801c66a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c66e:	4606      	mov	r6, r0
 801c670:	460f      	mov	r7, r1
 801c672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c676:	f7e3 fe19 	bl	80002ac <__adddf3>
 801c67a:	4602      	mov	r2, r0
 801c67c:	460b      	mov	r3, r1
 801c67e:	2000      	movs	r0, #0
 801c680:	49b9      	ldr	r1, [pc, #740]	; (801c968 <__ieee754_pow+0x730>)
 801c682:	f7e4 f8f3 	bl	800086c <__aeabi_ddiv>
 801c686:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801c68a:	4602      	mov	r2, r0
 801c68c:	460b      	mov	r3, r1
 801c68e:	4630      	mov	r0, r6
 801c690:	4639      	mov	r1, r7
 801c692:	f7e3 ffc1 	bl	8000618 <__aeabi_dmul>
 801c696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c69a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801c69e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	9302      	str	r3, [sp, #8]
 801c6a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c6aa:	106d      	asrs	r5, r5, #1
 801c6ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c6b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c6ba:	4640      	mov	r0, r8
 801c6bc:	4649      	mov	r1, r9
 801c6be:	4614      	mov	r4, r2
 801c6c0:	461d      	mov	r5, r3
 801c6c2:	f7e3 ffa9 	bl	8000618 <__aeabi_dmul>
 801c6c6:	4602      	mov	r2, r0
 801c6c8:	460b      	mov	r3, r1
 801c6ca:	4630      	mov	r0, r6
 801c6cc:	4639      	mov	r1, r7
 801c6ce:	f7e3 fdeb 	bl	80002a8 <__aeabi_dsub>
 801c6d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c6d6:	4606      	mov	r6, r0
 801c6d8:	460f      	mov	r7, r1
 801c6da:	4620      	mov	r0, r4
 801c6dc:	4629      	mov	r1, r5
 801c6de:	f7e3 fde3 	bl	80002a8 <__aeabi_dsub>
 801c6e2:	4602      	mov	r2, r0
 801c6e4:	460b      	mov	r3, r1
 801c6e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c6ea:	f7e3 fddd 	bl	80002a8 <__aeabi_dsub>
 801c6ee:	4642      	mov	r2, r8
 801c6f0:	464b      	mov	r3, r9
 801c6f2:	f7e3 ff91 	bl	8000618 <__aeabi_dmul>
 801c6f6:	4602      	mov	r2, r0
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	4630      	mov	r0, r6
 801c6fc:	4639      	mov	r1, r7
 801c6fe:	f7e3 fdd3 	bl	80002a8 <__aeabi_dsub>
 801c702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c706:	f7e3 ff87 	bl	8000618 <__aeabi_dmul>
 801c70a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c70e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c712:	4610      	mov	r0, r2
 801c714:	4619      	mov	r1, r3
 801c716:	f7e3 ff7f 	bl	8000618 <__aeabi_dmul>
 801c71a:	a37b      	add	r3, pc, #492	; (adr r3, 801c908 <__ieee754_pow+0x6d0>)
 801c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c720:	4604      	mov	r4, r0
 801c722:	460d      	mov	r5, r1
 801c724:	f7e3 ff78 	bl	8000618 <__aeabi_dmul>
 801c728:	a379      	add	r3, pc, #484	; (adr r3, 801c910 <__ieee754_pow+0x6d8>)
 801c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c72e:	f7e3 fdbd 	bl	80002ac <__adddf3>
 801c732:	4622      	mov	r2, r4
 801c734:	462b      	mov	r3, r5
 801c736:	f7e3 ff6f 	bl	8000618 <__aeabi_dmul>
 801c73a:	a377      	add	r3, pc, #476	; (adr r3, 801c918 <__ieee754_pow+0x6e0>)
 801c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c740:	f7e3 fdb4 	bl	80002ac <__adddf3>
 801c744:	4622      	mov	r2, r4
 801c746:	462b      	mov	r3, r5
 801c748:	f7e3 ff66 	bl	8000618 <__aeabi_dmul>
 801c74c:	a374      	add	r3, pc, #464	; (adr r3, 801c920 <__ieee754_pow+0x6e8>)
 801c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c752:	f7e3 fdab 	bl	80002ac <__adddf3>
 801c756:	4622      	mov	r2, r4
 801c758:	462b      	mov	r3, r5
 801c75a:	f7e3 ff5d 	bl	8000618 <__aeabi_dmul>
 801c75e:	a372      	add	r3, pc, #456	; (adr r3, 801c928 <__ieee754_pow+0x6f0>)
 801c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c764:	f7e3 fda2 	bl	80002ac <__adddf3>
 801c768:	4622      	mov	r2, r4
 801c76a:	462b      	mov	r3, r5
 801c76c:	f7e3 ff54 	bl	8000618 <__aeabi_dmul>
 801c770:	a36f      	add	r3, pc, #444	; (adr r3, 801c930 <__ieee754_pow+0x6f8>)
 801c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c776:	f7e3 fd99 	bl	80002ac <__adddf3>
 801c77a:	4622      	mov	r2, r4
 801c77c:	4606      	mov	r6, r0
 801c77e:	460f      	mov	r7, r1
 801c780:	462b      	mov	r3, r5
 801c782:	4620      	mov	r0, r4
 801c784:	4629      	mov	r1, r5
 801c786:	f7e3 ff47 	bl	8000618 <__aeabi_dmul>
 801c78a:	4602      	mov	r2, r0
 801c78c:	460b      	mov	r3, r1
 801c78e:	4630      	mov	r0, r6
 801c790:	4639      	mov	r1, r7
 801c792:	f7e3 ff41 	bl	8000618 <__aeabi_dmul>
 801c796:	4642      	mov	r2, r8
 801c798:	4604      	mov	r4, r0
 801c79a:	460d      	mov	r5, r1
 801c79c:	464b      	mov	r3, r9
 801c79e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c7a2:	f7e3 fd83 	bl	80002ac <__adddf3>
 801c7a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c7aa:	f7e3 ff35 	bl	8000618 <__aeabi_dmul>
 801c7ae:	4622      	mov	r2, r4
 801c7b0:	462b      	mov	r3, r5
 801c7b2:	f7e3 fd7b 	bl	80002ac <__adddf3>
 801c7b6:	4642      	mov	r2, r8
 801c7b8:	4606      	mov	r6, r0
 801c7ba:	460f      	mov	r7, r1
 801c7bc:	464b      	mov	r3, r9
 801c7be:	4640      	mov	r0, r8
 801c7c0:	4649      	mov	r1, r9
 801c7c2:	f7e3 ff29 	bl	8000618 <__aeabi_dmul>
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	4b68      	ldr	r3, [pc, #416]	; (801c96c <__ieee754_pow+0x734>)
 801c7ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c7ce:	f7e3 fd6d 	bl	80002ac <__adddf3>
 801c7d2:	4632      	mov	r2, r6
 801c7d4:	463b      	mov	r3, r7
 801c7d6:	f7e3 fd69 	bl	80002ac <__adddf3>
 801c7da:	9802      	ldr	r0, [sp, #8]
 801c7dc:	460d      	mov	r5, r1
 801c7de:	4604      	mov	r4, r0
 801c7e0:	4602      	mov	r2, r0
 801c7e2:	460b      	mov	r3, r1
 801c7e4:	4640      	mov	r0, r8
 801c7e6:	4649      	mov	r1, r9
 801c7e8:	f7e3 ff16 	bl	8000618 <__aeabi_dmul>
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	4680      	mov	r8, r0
 801c7f0:	4689      	mov	r9, r1
 801c7f2:	4b5e      	ldr	r3, [pc, #376]	; (801c96c <__ieee754_pow+0x734>)
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	4629      	mov	r1, r5
 801c7f8:	f7e3 fd56 	bl	80002a8 <__aeabi_dsub>
 801c7fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c800:	f7e3 fd52 	bl	80002a8 <__aeabi_dsub>
 801c804:	4602      	mov	r2, r0
 801c806:	460b      	mov	r3, r1
 801c808:	4630      	mov	r0, r6
 801c80a:	4639      	mov	r1, r7
 801c80c:	f7e3 fd4c 	bl	80002a8 <__aeabi_dsub>
 801c810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c814:	f7e3 ff00 	bl	8000618 <__aeabi_dmul>
 801c818:	4622      	mov	r2, r4
 801c81a:	4606      	mov	r6, r0
 801c81c:	460f      	mov	r7, r1
 801c81e:	462b      	mov	r3, r5
 801c820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c824:	f7e3 fef8 	bl	8000618 <__aeabi_dmul>
 801c828:	4602      	mov	r2, r0
 801c82a:	460b      	mov	r3, r1
 801c82c:	4630      	mov	r0, r6
 801c82e:	4639      	mov	r1, r7
 801c830:	f7e3 fd3c 	bl	80002ac <__adddf3>
 801c834:	4606      	mov	r6, r0
 801c836:	460f      	mov	r7, r1
 801c838:	4602      	mov	r2, r0
 801c83a:	460b      	mov	r3, r1
 801c83c:	4640      	mov	r0, r8
 801c83e:	4649      	mov	r1, r9
 801c840:	f7e3 fd34 	bl	80002ac <__adddf3>
 801c844:	9802      	ldr	r0, [sp, #8]
 801c846:	a33c      	add	r3, pc, #240	; (adr r3, 801c938 <__ieee754_pow+0x700>)
 801c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c84c:	4604      	mov	r4, r0
 801c84e:	460d      	mov	r5, r1
 801c850:	f7e3 fee2 	bl	8000618 <__aeabi_dmul>
 801c854:	4642      	mov	r2, r8
 801c856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c85a:	464b      	mov	r3, r9
 801c85c:	4620      	mov	r0, r4
 801c85e:	4629      	mov	r1, r5
 801c860:	f7e3 fd22 	bl	80002a8 <__aeabi_dsub>
 801c864:	4602      	mov	r2, r0
 801c866:	460b      	mov	r3, r1
 801c868:	4630      	mov	r0, r6
 801c86a:	4639      	mov	r1, r7
 801c86c:	f7e3 fd1c 	bl	80002a8 <__aeabi_dsub>
 801c870:	a333      	add	r3, pc, #204	; (adr r3, 801c940 <__ieee754_pow+0x708>)
 801c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c876:	f7e3 fecf 	bl	8000618 <__aeabi_dmul>
 801c87a:	a333      	add	r3, pc, #204	; (adr r3, 801c948 <__ieee754_pow+0x710>)
 801c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c880:	4606      	mov	r6, r0
 801c882:	460f      	mov	r7, r1
 801c884:	4620      	mov	r0, r4
 801c886:	4629      	mov	r1, r5
 801c888:	f7e3 fec6 	bl	8000618 <__aeabi_dmul>
 801c88c:	4602      	mov	r2, r0
 801c88e:	460b      	mov	r3, r1
 801c890:	4630      	mov	r0, r6
 801c892:	4639      	mov	r1, r7
 801c894:	f7e3 fd0a 	bl	80002ac <__adddf3>
 801c898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c89a:	4b35      	ldr	r3, [pc, #212]	; (801c970 <__ieee754_pow+0x738>)
 801c89c:	4413      	add	r3, r2
 801c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a2:	f7e3 fd03 	bl	80002ac <__adddf3>
 801c8a6:	4604      	mov	r4, r0
 801c8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c8aa:	460d      	mov	r5, r1
 801c8ac:	f7e3 fe4a 	bl	8000544 <__aeabi_i2d>
 801c8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c8b2:	4b30      	ldr	r3, [pc, #192]	; (801c974 <__ieee754_pow+0x73c>)
 801c8b4:	4413      	add	r3, r2
 801c8b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c8ba:	4606      	mov	r6, r0
 801c8bc:	460f      	mov	r7, r1
 801c8be:	4622      	mov	r2, r4
 801c8c0:	462b      	mov	r3, r5
 801c8c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c8c6:	f7e3 fcf1 	bl	80002ac <__adddf3>
 801c8ca:	4642      	mov	r2, r8
 801c8cc:	464b      	mov	r3, r9
 801c8ce:	f7e3 fced 	bl	80002ac <__adddf3>
 801c8d2:	4632      	mov	r2, r6
 801c8d4:	463b      	mov	r3, r7
 801c8d6:	f7e3 fce9 	bl	80002ac <__adddf3>
 801c8da:	9802      	ldr	r0, [sp, #8]
 801c8dc:	4632      	mov	r2, r6
 801c8de:	463b      	mov	r3, r7
 801c8e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c8e4:	f7e3 fce0 	bl	80002a8 <__aeabi_dsub>
 801c8e8:	4642      	mov	r2, r8
 801c8ea:	464b      	mov	r3, r9
 801c8ec:	f7e3 fcdc 	bl	80002a8 <__aeabi_dsub>
 801c8f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c8f4:	e607      	b.n	801c506 <__ieee754_pow+0x2ce>
 801c8f6:	f04f 0a01 	mov.w	sl, #1
 801c8fa:	e6a5      	b.n	801c648 <__ieee754_pow+0x410>
 801c8fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c950 <__ieee754_pow+0x718>
 801c900:	e613      	b.n	801c52a <__ieee754_pow+0x2f2>
 801c902:	bf00      	nop
 801c904:	f3af 8000 	nop.w
 801c908:	4a454eef 	.word	0x4a454eef
 801c90c:	3fca7e28 	.word	0x3fca7e28
 801c910:	93c9db65 	.word	0x93c9db65
 801c914:	3fcd864a 	.word	0x3fcd864a
 801c918:	a91d4101 	.word	0xa91d4101
 801c91c:	3fd17460 	.word	0x3fd17460
 801c920:	518f264d 	.word	0x518f264d
 801c924:	3fd55555 	.word	0x3fd55555
 801c928:	db6fabff 	.word	0xdb6fabff
 801c92c:	3fdb6db6 	.word	0x3fdb6db6
 801c930:	33333303 	.word	0x33333303
 801c934:	3fe33333 	.word	0x3fe33333
 801c938:	e0000000 	.word	0xe0000000
 801c93c:	3feec709 	.word	0x3feec709
 801c940:	dc3a03fd 	.word	0xdc3a03fd
 801c944:	3feec709 	.word	0x3feec709
 801c948:	145b01f5 	.word	0x145b01f5
 801c94c:	be3e2fe0 	.word	0xbe3e2fe0
 801c950:	00000000 	.word	0x00000000
 801c954:	3ff00000 	.word	0x3ff00000
 801c958:	43400000 	.word	0x43400000
 801c95c:	0003988e 	.word	0x0003988e
 801c960:	000bb679 	.word	0x000bb679
 801c964:	08020db0 	.word	0x08020db0
 801c968:	3ff00000 	.word	0x3ff00000
 801c96c:	40080000 	.word	0x40080000
 801c970:	08020dd0 	.word	0x08020dd0
 801c974:	08020dc0 	.word	0x08020dc0
 801c978:	a3b4      	add	r3, pc, #720	; (adr r3, 801cc4c <__ieee754_pow+0xa14>)
 801c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97e:	4640      	mov	r0, r8
 801c980:	4649      	mov	r1, r9
 801c982:	f7e3 fc93 	bl	80002ac <__adddf3>
 801c986:	4622      	mov	r2, r4
 801c988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c98c:	462b      	mov	r3, r5
 801c98e:	4630      	mov	r0, r6
 801c990:	4639      	mov	r1, r7
 801c992:	f7e3 fc89 	bl	80002a8 <__aeabi_dsub>
 801c996:	4602      	mov	r2, r0
 801c998:	460b      	mov	r3, r1
 801c99a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c99e:	f7e4 f8cb 	bl	8000b38 <__aeabi_dcmpgt>
 801c9a2:	2800      	cmp	r0, #0
 801c9a4:	f47f adfe 	bne.w	801c5a4 <__ieee754_pow+0x36c>
 801c9a8:	4aa3      	ldr	r2, [pc, #652]	; (801cc38 <__ieee754_pow+0xa00>)
 801c9aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	f340 810a 	ble.w	801cbc8 <__ieee754_pow+0x990>
 801c9b4:	151b      	asrs	r3, r3, #20
 801c9b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c9ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c9be:	fa4a f303 	asr.w	r3, sl, r3
 801c9c2:	445b      	add	r3, fp
 801c9c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c9c8:	4e9c      	ldr	r6, [pc, #624]	; (801cc3c <__ieee754_pow+0xa04>)
 801c9ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c9ce:	4116      	asrs	r6, r2
 801c9d0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c9d4:	2000      	movs	r0, #0
 801c9d6:	ea23 0106 	bic.w	r1, r3, r6
 801c9da:	f1c2 0214 	rsb	r2, r2, #20
 801c9de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c9e2:	fa4a fa02 	asr.w	sl, sl, r2
 801c9e6:	f1bb 0f00 	cmp.w	fp, #0
 801c9ea:	4602      	mov	r2, r0
 801c9ec:	460b      	mov	r3, r1
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	4629      	mov	r1, r5
 801c9f2:	bfb8      	it	lt
 801c9f4:	f1ca 0a00 	rsblt	sl, sl, #0
 801c9f8:	f7e3 fc56 	bl	80002a8 <__aeabi_dsub>
 801c9fc:	e9cd 0100 	strd	r0, r1, [sp]
 801ca00:	4642      	mov	r2, r8
 801ca02:	464b      	mov	r3, r9
 801ca04:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ca08:	f7e3 fc50 	bl	80002ac <__adddf3>
 801ca0c:	2000      	movs	r0, #0
 801ca0e:	a378      	add	r3, pc, #480	; (adr r3, 801cbf0 <__ieee754_pow+0x9b8>)
 801ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca14:	4604      	mov	r4, r0
 801ca16:	460d      	mov	r5, r1
 801ca18:	f7e3 fdfe 	bl	8000618 <__aeabi_dmul>
 801ca1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca20:	4606      	mov	r6, r0
 801ca22:	460f      	mov	r7, r1
 801ca24:	4620      	mov	r0, r4
 801ca26:	4629      	mov	r1, r5
 801ca28:	f7e3 fc3e 	bl	80002a8 <__aeabi_dsub>
 801ca2c:	4602      	mov	r2, r0
 801ca2e:	460b      	mov	r3, r1
 801ca30:	4640      	mov	r0, r8
 801ca32:	4649      	mov	r1, r9
 801ca34:	f7e3 fc38 	bl	80002a8 <__aeabi_dsub>
 801ca38:	a36f      	add	r3, pc, #444	; (adr r3, 801cbf8 <__ieee754_pow+0x9c0>)
 801ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca3e:	f7e3 fdeb 	bl	8000618 <__aeabi_dmul>
 801ca42:	a36f      	add	r3, pc, #444	; (adr r3, 801cc00 <__ieee754_pow+0x9c8>)
 801ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca48:	4680      	mov	r8, r0
 801ca4a:	4689      	mov	r9, r1
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	4629      	mov	r1, r5
 801ca50:	f7e3 fde2 	bl	8000618 <__aeabi_dmul>
 801ca54:	4602      	mov	r2, r0
 801ca56:	460b      	mov	r3, r1
 801ca58:	4640      	mov	r0, r8
 801ca5a:	4649      	mov	r1, r9
 801ca5c:	f7e3 fc26 	bl	80002ac <__adddf3>
 801ca60:	4604      	mov	r4, r0
 801ca62:	460d      	mov	r5, r1
 801ca64:	4602      	mov	r2, r0
 801ca66:	460b      	mov	r3, r1
 801ca68:	4630      	mov	r0, r6
 801ca6a:	4639      	mov	r1, r7
 801ca6c:	f7e3 fc1e 	bl	80002ac <__adddf3>
 801ca70:	4632      	mov	r2, r6
 801ca72:	463b      	mov	r3, r7
 801ca74:	4680      	mov	r8, r0
 801ca76:	4689      	mov	r9, r1
 801ca78:	f7e3 fc16 	bl	80002a8 <__aeabi_dsub>
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	460b      	mov	r3, r1
 801ca80:	4620      	mov	r0, r4
 801ca82:	4629      	mov	r1, r5
 801ca84:	f7e3 fc10 	bl	80002a8 <__aeabi_dsub>
 801ca88:	4642      	mov	r2, r8
 801ca8a:	4606      	mov	r6, r0
 801ca8c:	460f      	mov	r7, r1
 801ca8e:	464b      	mov	r3, r9
 801ca90:	4640      	mov	r0, r8
 801ca92:	4649      	mov	r1, r9
 801ca94:	f7e3 fdc0 	bl	8000618 <__aeabi_dmul>
 801ca98:	a35b      	add	r3, pc, #364	; (adr r3, 801cc08 <__ieee754_pow+0x9d0>)
 801ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9e:	4604      	mov	r4, r0
 801caa0:	460d      	mov	r5, r1
 801caa2:	f7e3 fdb9 	bl	8000618 <__aeabi_dmul>
 801caa6:	a35a      	add	r3, pc, #360	; (adr r3, 801cc10 <__ieee754_pow+0x9d8>)
 801caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caac:	f7e3 fbfc 	bl	80002a8 <__aeabi_dsub>
 801cab0:	4622      	mov	r2, r4
 801cab2:	462b      	mov	r3, r5
 801cab4:	f7e3 fdb0 	bl	8000618 <__aeabi_dmul>
 801cab8:	a357      	add	r3, pc, #348	; (adr r3, 801cc18 <__ieee754_pow+0x9e0>)
 801caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cabe:	f7e3 fbf5 	bl	80002ac <__adddf3>
 801cac2:	4622      	mov	r2, r4
 801cac4:	462b      	mov	r3, r5
 801cac6:	f7e3 fda7 	bl	8000618 <__aeabi_dmul>
 801caca:	a355      	add	r3, pc, #340	; (adr r3, 801cc20 <__ieee754_pow+0x9e8>)
 801cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad0:	f7e3 fbea 	bl	80002a8 <__aeabi_dsub>
 801cad4:	4622      	mov	r2, r4
 801cad6:	462b      	mov	r3, r5
 801cad8:	f7e3 fd9e 	bl	8000618 <__aeabi_dmul>
 801cadc:	a352      	add	r3, pc, #328	; (adr r3, 801cc28 <__ieee754_pow+0x9f0>)
 801cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae2:	f7e3 fbe3 	bl	80002ac <__adddf3>
 801cae6:	4622      	mov	r2, r4
 801cae8:	462b      	mov	r3, r5
 801caea:	f7e3 fd95 	bl	8000618 <__aeabi_dmul>
 801caee:	4602      	mov	r2, r0
 801caf0:	460b      	mov	r3, r1
 801caf2:	4640      	mov	r0, r8
 801caf4:	4649      	mov	r1, r9
 801caf6:	f7e3 fbd7 	bl	80002a8 <__aeabi_dsub>
 801cafa:	4604      	mov	r4, r0
 801cafc:	460d      	mov	r5, r1
 801cafe:	4602      	mov	r2, r0
 801cb00:	460b      	mov	r3, r1
 801cb02:	4640      	mov	r0, r8
 801cb04:	4649      	mov	r1, r9
 801cb06:	f7e3 fd87 	bl	8000618 <__aeabi_dmul>
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	e9cd 0100 	strd	r0, r1, [sp]
 801cb10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cb14:	4620      	mov	r0, r4
 801cb16:	4629      	mov	r1, r5
 801cb18:	f7e3 fbc6 	bl	80002a8 <__aeabi_dsub>
 801cb1c:	4602      	mov	r2, r0
 801cb1e:	460b      	mov	r3, r1
 801cb20:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb24:	f7e3 fea2 	bl	800086c <__aeabi_ddiv>
 801cb28:	4632      	mov	r2, r6
 801cb2a:	4604      	mov	r4, r0
 801cb2c:	460d      	mov	r5, r1
 801cb2e:	463b      	mov	r3, r7
 801cb30:	4640      	mov	r0, r8
 801cb32:	4649      	mov	r1, r9
 801cb34:	f7e3 fd70 	bl	8000618 <__aeabi_dmul>
 801cb38:	4632      	mov	r2, r6
 801cb3a:	463b      	mov	r3, r7
 801cb3c:	f7e3 fbb6 	bl	80002ac <__adddf3>
 801cb40:	4602      	mov	r2, r0
 801cb42:	460b      	mov	r3, r1
 801cb44:	4620      	mov	r0, r4
 801cb46:	4629      	mov	r1, r5
 801cb48:	f7e3 fbae 	bl	80002a8 <__aeabi_dsub>
 801cb4c:	4642      	mov	r2, r8
 801cb4e:	464b      	mov	r3, r9
 801cb50:	f7e3 fbaa 	bl	80002a8 <__aeabi_dsub>
 801cb54:	4602      	mov	r2, r0
 801cb56:	460b      	mov	r3, r1
 801cb58:	2000      	movs	r0, #0
 801cb5a:	4939      	ldr	r1, [pc, #228]	; (801cc40 <__ieee754_pow+0xa08>)
 801cb5c:	f7e3 fba4 	bl	80002a8 <__aeabi_dsub>
 801cb60:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801cb64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801cb68:	4602      	mov	r2, r0
 801cb6a:	460b      	mov	r3, r1
 801cb6c:	da2f      	bge.n	801cbce <__ieee754_pow+0x996>
 801cb6e:	4650      	mov	r0, sl
 801cb70:	ec43 2b10 	vmov	d0, r2, r3
 801cb74:	f000 f9c0 	bl	801cef8 <scalbn>
 801cb78:	ec51 0b10 	vmov	r0, r1, d0
 801cb7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cb80:	f7ff bbf1 	b.w	801c366 <__ieee754_pow+0x12e>
 801cb84:	4b2f      	ldr	r3, [pc, #188]	; (801cc44 <__ieee754_pow+0xa0c>)
 801cb86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cb8a:	429e      	cmp	r6, r3
 801cb8c:	f77f af0c 	ble.w	801c9a8 <__ieee754_pow+0x770>
 801cb90:	4b2d      	ldr	r3, [pc, #180]	; (801cc48 <__ieee754_pow+0xa10>)
 801cb92:	440b      	add	r3, r1
 801cb94:	4303      	orrs	r3, r0
 801cb96:	d00b      	beq.n	801cbb0 <__ieee754_pow+0x978>
 801cb98:	a325      	add	r3, pc, #148	; (adr r3, 801cc30 <__ieee754_pow+0x9f8>)
 801cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cba2:	f7e3 fd39 	bl	8000618 <__aeabi_dmul>
 801cba6:	a322      	add	r3, pc, #136	; (adr r3, 801cc30 <__ieee754_pow+0x9f8>)
 801cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbac:	f7ff bbdb 	b.w	801c366 <__ieee754_pow+0x12e>
 801cbb0:	4622      	mov	r2, r4
 801cbb2:	462b      	mov	r3, r5
 801cbb4:	f7e3 fb78 	bl	80002a8 <__aeabi_dsub>
 801cbb8:	4642      	mov	r2, r8
 801cbba:	464b      	mov	r3, r9
 801cbbc:	f7e3 ffb2 	bl	8000b24 <__aeabi_dcmpge>
 801cbc0:	2800      	cmp	r0, #0
 801cbc2:	f43f aef1 	beq.w	801c9a8 <__ieee754_pow+0x770>
 801cbc6:	e7e7      	b.n	801cb98 <__ieee754_pow+0x960>
 801cbc8:	f04f 0a00 	mov.w	sl, #0
 801cbcc:	e718      	b.n	801ca00 <__ieee754_pow+0x7c8>
 801cbce:	4621      	mov	r1, r4
 801cbd0:	e7d4      	b.n	801cb7c <__ieee754_pow+0x944>
 801cbd2:	2000      	movs	r0, #0
 801cbd4:	491a      	ldr	r1, [pc, #104]	; (801cc40 <__ieee754_pow+0xa08>)
 801cbd6:	f7ff bb8f 	b.w	801c2f8 <__ieee754_pow+0xc0>
 801cbda:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cbde:	f7ff bb8b 	b.w	801c2f8 <__ieee754_pow+0xc0>
 801cbe2:	4630      	mov	r0, r6
 801cbe4:	4639      	mov	r1, r7
 801cbe6:	f7ff bb87 	b.w	801c2f8 <__ieee754_pow+0xc0>
 801cbea:	4693      	mov	fp, r2
 801cbec:	f7ff bb98 	b.w	801c320 <__ieee754_pow+0xe8>
 801cbf0:	00000000 	.word	0x00000000
 801cbf4:	3fe62e43 	.word	0x3fe62e43
 801cbf8:	fefa39ef 	.word	0xfefa39ef
 801cbfc:	3fe62e42 	.word	0x3fe62e42
 801cc00:	0ca86c39 	.word	0x0ca86c39
 801cc04:	be205c61 	.word	0xbe205c61
 801cc08:	72bea4d0 	.word	0x72bea4d0
 801cc0c:	3e663769 	.word	0x3e663769
 801cc10:	c5d26bf1 	.word	0xc5d26bf1
 801cc14:	3ebbbd41 	.word	0x3ebbbd41
 801cc18:	af25de2c 	.word	0xaf25de2c
 801cc1c:	3f11566a 	.word	0x3f11566a
 801cc20:	16bebd93 	.word	0x16bebd93
 801cc24:	3f66c16c 	.word	0x3f66c16c
 801cc28:	5555553e 	.word	0x5555553e
 801cc2c:	3fc55555 	.word	0x3fc55555
 801cc30:	c2f8f359 	.word	0xc2f8f359
 801cc34:	01a56e1f 	.word	0x01a56e1f
 801cc38:	3fe00000 	.word	0x3fe00000
 801cc3c:	000fffff 	.word	0x000fffff
 801cc40:	3ff00000 	.word	0x3ff00000
 801cc44:	4090cbff 	.word	0x4090cbff
 801cc48:	3f6f3400 	.word	0x3f6f3400
 801cc4c:	652b82fe 	.word	0x652b82fe
 801cc50:	3c971547 	.word	0x3c971547

0801cc54 <__ieee754_sqrt>:
 801cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc58:	4955      	ldr	r1, [pc, #340]	; (801cdb0 <__ieee754_sqrt+0x15c>)
 801cc5a:	ec55 4b10 	vmov	r4, r5, d0
 801cc5e:	43a9      	bics	r1, r5
 801cc60:	462b      	mov	r3, r5
 801cc62:	462a      	mov	r2, r5
 801cc64:	d112      	bne.n	801cc8c <__ieee754_sqrt+0x38>
 801cc66:	ee10 2a10 	vmov	r2, s0
 801cc6a:	ee10 0a10 	vmov	r0, s0
 801cc6e:	4629      	mov	r1, r5
 801cc70:	f7e3 fcd2 	bl	8000618 <__aeabi_dmul>
 801cc74:	4602      	mov	r2, r0
 801cc76:	460b      	mov	r3, r1
 801cc78:	4620      	mov	r0, r4
 801cc7a:	4629      	mov	r1, r5
 801cc7c:	f7e3 fb16 	bl	80002ac <__adddf3>
 801cc80:	4604      	mov	r4, r0
 801cc82:	460d      	mov	r5, r1
 801cc84:	ec45 4b10 	vmov	d0, r4, r5
 801cc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc8c:	2d00      	cmp	r5, #0
 801cc8e:	ee10 0a10 	vmov	r0, s0
 801cc92:	4621      	mov	r1, r4
 801cc94:	dc0f      	bgt.n	801ccb6 <__ieee754_sqrt+0x62>
 801cc96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cc9a:	4330      	orrs	r0, r6
 801cc9c:	d0f2      	beq.n	801cc84 <__ieee754_sqrt+0x30>
 801cc9e:	b155      	cbz	r5, 801ccb6 <__ieee754_sqrt+0x62>
 801cca0:	ee10 2a10 	vmov	r2, s0
 801cca4:	4620      	mov	r0, r4
 801cca6:	4629      	mov	r1, r5
 801cca8:	f7e3 fafe 	bl	80002a8 <__aeabi_dsub>
 801ccac:	4602      	mov	r2, r0
 801ccae:	460b      	mov	r3, r1
 801ccb0:	f7e3 fddc 	bl	800086c <__aeabi_ddiv>
 801ccb4:	e7e4      	b.n	801cc80 <__ieee754_sqrt+0x2c>
 801ccb6:	151b      	asrs	r3, r3, #20
 801ccb8:	d073      	beq.n	801cda2 <__ieee754_sqrt+0x14e>
 801ccba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ccbe:	07dd      	lsls	r5, r3, #31
 801ccc0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ccc4:	bf48      	it	mi
 801ccc6:	0fc8      	lsrmi	r0, r1, #31
 801ccc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801cccc:	bf44      	itt	mi
 801ccce:	0049      	lslmi	r1, r1, #1
 801ccd0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801ccd4:	2500      	movs	r5, #0
 801ccd6:	1058      	asrs	r0, r3, #1
 801ccd8:	0fcb      	lsrs	r3, r1, #31
 801ccda:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801ccde:	0049      	lsls	r1, r1, #1
 801cce0:	2316      	movs	r3, #22
 801cce2:	462c      	mov	r4, r5
 801cce4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801cce8:	19a7      	adds	r7, r4, r6
 801ccea:	4297      	cmp	r7, r2
 801ccec:	bfde      	ittt	le
 801ccee:	19bc      	addle	r4, r7, r6
 801ccf0:	1bd2      	suble	r2, r2, r7
 801ccf2:	19ad      	addle	r5, r5, r6
 801ccf4:	0fcf      	lsrs	r7, r1, #31
 801ccf6:	3b01      	subs	r3, #1
 801ccf8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801ccfc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cd00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801cd04:	d1f0      	bne.n	801cce8 <__ieee754_sqrt+0x94>
 801cd06:	f04f 0c20 	mov.w	ip, #32
 801cd0a:	469e      	mov	lr, r3
 801cd0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cd10:	42a2      	cmp	r2, r4
 801cd12:	eb06 070e 	add.w	r7, r6, lr
 801cd16:	dc02      	bgt.n	801cd1e <__ieee754_sqrt+0xca>
 801cd18:	d112      	bne.n	801cd40 <__ieee754_sqrt+0xec>
 801cd1a:	428f      	cmp	r7, r1
 801cd1c:	d810      	bhi.n	801cd40 <__ieee754_sqrt+0xec>
 801cd1e:	2f00      	cmp	r7, #0
 801cd20:	eb07 0e06 	add.w	lr, r7, r6
 801cd24:	da42      	bge.n	801cdac <__ieee754_sqrt+0x158>
 801cd26:	f1be 0f00 	cmp.w	lr, #0
 801cd2a:	db3f      	blt.n	801cdac <__ieee754_sqrt+0x158>
 801cd2c:	f104 0801 	add.w	r8, r4, #1
 801cd30:	1b12      	subs	r2, r2, r4
 801cd32:	428f      	cmp	r7, r1
 801cd34:	bf88      	it	hi
 801cd36:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cd3a:	1bc9      	subs	r1, r1, r7
 801cd3c:	4433      	add	r3, r6
 801cd3e:	4644      	mov	r4, r8
 801cd40:	0052      	lsls	r2, r2, #1
 801cd42:	f1bc 0c01 	subs.w	ip, ip, #1
 801cd46:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801cd4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801cd4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cd52:	d1dd      	bne.n	801cd10 <__ieee754_sqrt+0xbc>
 801cd54:	430a      	orrs	r2, r1
 801cd56:	d006      	beq.n	801cd66 <__ieee754_sqrt+0x112>
 801cd58:	1c5c      	adds	r4, r3, #1
 801cd5a:	bf13      	iteet	ne
 801cd5c:	3301      	addne	r3, #1
 801cd5e:	3501      	addeq	r5, #1
 801cd60:	4663      	moveq	r3, ip
 801cd62:	f023 0301 	bicne.w	r3, r3, #1
 801cd66:	106a      	asrs	r2, r5, #1
 801cd68:	085b      	lsrs	r3, r3, #1
 801cd6a:	07e9      	lsls	r1, r5, #31
 801cd6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801cd70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801cd74:	bf48      	it	mi
 801cd76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801cd7a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801cd7e:	461c      	mov	r4, r3
 801cd80:	e780      	b.n	801cc84 <__ieee754_sqrt+0x30>
 801cd82:	0aca      	lsrs	r2, r1, #11
 801cd84:	3815      	subs	r0, #21
 801cd86:	0549      	lsls	r1, r1, #21
 801cd88:	2a00      	cmp	r2, #0
 801cd8a:	d0fa      	beq.n	801cd82 <__ieee754_sqrt+0x12e>
 801cd8c:	02d6      	lsls	r6, r2, #11
 801cd8e:	d50a      	bpl.n	801cda6 <__ieee754_sqrt+0x152>
 801cd90:	f1c3 0420 	rsb	r4, r3, #32
 801cd94:	fa21 f404 	lsr.w	r4, r1, r4
 801cd98:	1e5d      	subs	r5, r3, #1
 801cd9a:	4099      	lsls	r1, r3
 801cd9c:	4322      	orrs	r2, r4
 801cd9e:	1b43      	subs	r3, r0, r5
 801cda0:	e78b      	b.n	801ccba <__ieee754_sqrt+0x66>
 801cda2:	4618      	mov	r0, r3
 801cda4:	e7f0      	b.n	801cd88 <__ieee754_sqrt+0x134>
 801cda6:	0052      	lsls	r2, r2, #1
 801cda8:	3301      	adds	r3, #1
 801cdaa:	e7ef      	b.n	801cd8c <__ieee754_sqrt+0x138>
 801cdac:	46a0      	mov	r8, r4
 801cdae:	e7bf      	b.n	801cd30 <__ieee754_sqrt+0xdc>
 801cdb0:	7ff00000 	.word	0x7ff00000

0801cdb4 <fabs>:
 801cdb4:	ec51 0b10 	vmov	r0, r1, d0
 801cdb8:	ee10 2a10 	vmov	r2, s0
 801cdbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cdc0:	ec43 2b10 	vmov	d0, r2, r3
 801cdc4:	4770      	bx	lr

0801cdc6 <finite>:
 801cdc6:	ee10 3a90 	vmov	r3, s1
 801cdca:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801cdce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801cdd2:	0fc0      	lsrs	r0, r0, #31
 801cdd4:	4770      	bx	lr

0801cdd6 <matherr>:
 801cdd6:	2000      	movs	r0, #0
 801cdd8:	4770      	bx	lr
 801cdda:	0000      	movs	r0, r0
 801cddc:	0000      	movs	r0, r0
	...

0801cde0 <nan>:
 801cde0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cde8 <nan+0x8>
 801cde4:	4770      	bx	lr
 801cde6:	bf00      	nop
 801cde8:	00000000 	.word	0x00000000
 801cdec:	7ff80000 	.word	0x7ff80000

0801cdf0 <rint>:
 801cdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cdf2:	ec51 0b10 	vmov	r0, r1, d0
 801cdf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cdfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801cdfe:	2e13      	cmp	r6, #19
 801ce00:	460b      	mov	r3, r1
 801ce02:	ee10 4a10 	vmov	r4, s0
 801ce06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ce0a:	dc56      	bgt.n	801ceba <rint+0xca>
 801ce0c:	2e00      	cmp	r6, #0
 801ce0e:	da2b      	bge.n	801ce68 <rint+0x78>
 801ce10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ce14:	4302      	orrs	r2, r0
 801ce16:	d023      	beq.n	801ce60 <rint+0x70>
 801ce18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ce1c:	4302      	orrs	r2, r0
 801ce1e:	4254      	negs	r4, r2
 801ce20:	4314      	orrs	r4, r2
 801ce22:	0c4b      	lsrs	r3, r1, #17
 801ce24:	0b24      	lsrs	r4, r4, #12
 801ce26:	045b      	lsls	r3, r3, #17
 801ce28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801ce2c:	ea44 0103 	orr.w	r1, r4, r3
 801ce30:	460b      	mov	r3, r1
 801ce32:	492f      	ldr	r1, [pc, #188]	; (801cef0 <rint+0x100>)
 801ce34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801ce38:	e9d1 6700 	ldrd	r6, r7, [r1]
 801ce3c:	4602      	mov	r2, r0
 801ce3e:	4639      	mov	r1, r7
 801ce40:	4630      	mov	r0, r6
 801ce42:	f7e3 fa33 	bl	80002ac <__adddf3>
 801ce46:	e9cd 0100 	strd	r0, r1, [sp]
 801ce4a:	463b      	mov	r3, r7
 801ce4c:	4632      	mov	r2, r6
 801ce4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce52:	f7e3 fa29 	bl	80002a8 <__aeabi_dsub>
 801ce56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ce5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ce5e:	4639      	mov	r1, r7
 801ce60:	ec41 0b10 	vmov	d0, r0, r1
 801ce64:	b003      	add	sp, #12
 801ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce68:	4a22      	ldr	r2, [pc, #136]	; (801cef4 <rint+0x104>)
 801ce6a:	4132      	asrs	r2, r6
 801ce6c:	ea01 0702 	and.w	r7, r1, r2
 801ce70:	4307      	orrs	r7, r0
 801ce72:	d0f5      	beq.n	801ce60 <rint+0x70>
 801ce74:	0852      	lsrs	r2, r2, #1
 801ce76:	4011      	ands	r1, r2
 801ce78:	430c      	orrs	r4, r1
 801ce7a:	d00b      	beq.n	801ce94 <rint+0xa4>
 801ce7c:	ea23 0202 	bic.w	r2, r3, r2
 801ce80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ce84:	2e13      	cmp	r6, #19
 801ce86:	fa43 f306 	asr.w	r3, r3, r6
 801ce8a:	bf0c      	ite	eq
 801ce8c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ce90:	2400      	movne	r4, #0
 801ce92:	4313      	orrs	r3, r2
 801ce94:	4916      	ldr	r1, [pc, #88]	; (801cef0 <rint+0x100>)
 801ce96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ce9a:	4622      	mov	r2, r4
 801ce9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cea0:	4620      	mov	r0, r4
 801cea2:	4629      	mov	r1, r5
 801cea4:	f7e3 fa02 	bl	80002ac <__adddf3>
 801cea8:	e9cd 0100 	strd	r0, r1, [sp]
 801ceac:	4622      	mov	r2, r4
 801ceae:	462b      	mov	r3, r5
 801ceb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ceb4:	f7e3 f9f8 	bl	80002a8 <__aeabi_dsub>
 801ceb8:	e7d2      	b.n	801ce60 <rint+0x70>
 801ceba:	2e33      	cmp	r6, #51	; 0x33
 801cebc:	dd07      	ble.n	801cece <rint+0xde>
 801cebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cec2:	d1cd      	bne.n	801ce60 <rint+0x70>
 801cec4:	ee10 2a10 	vmov	r2, s0
 801cec8:	f7e3 f9f0 	bl	80002ac <__adddf3>
 801cecc:	e7c8      	b.n	801ce60 <rint+0x70>
 801cece:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801ced2:	f04f 32ff 	mov.w	r2, #4294967295
 801ced6:	40f2      	lsrs	r2, r6
 801ced8:	4210      	tst	r0, r2
 801ceda:	d0c1      	beq.n	801ce60 <rint+0x70>
 801cedc:	0852      	lsrs	r2, r2, #1
 801cede:	4210      	tst	r0, r2
 801cee0:	bf1f      	itttt	ne
 801cee2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801cee6:	ea20 0202 	bicne.w	r2, r0, r2
 801ceea:	4134      	asrne	r4, r6
 801ceec:	4314      	orrne	r4, r2
 801ceee:	e7d1      	b.n	801ce94 <rint+0xa4>
 801cef0:	08020de0 	.word	0x08020de0
 801cef4:	000fffff 	.word	0x000fffff

0801cef8 <scalbn>:
 801cef8:	b570      	push	{r4, r5, r6, lr}
 801cefa:	ec55 4b10 	vmov	r4, r5, d0
 801cefe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801cf02:	4606      	mov	r6, r0
 801cf04:	462b      	mov	r3, r5
 801cf06:	b9aa      	cbnz	r2, 801cf34 <scalbn+0x3c>
 801cf08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cf0c:	4323      	orrs	r3, r4
 801cf0e:	d03b      	beq.n	801cf88 <scalbn+0x90>
 801cf10:	4b31      	ldr	r3, [pc, #196]	; (801cfd8 <scalbn+0xe0>)
 801cf12:	4629      	mov	r1, r5
 801cf14:	2200      	movs	r2, #0
 801cf16:	ee10 0a10 	vmov	r0, s0
 801cf1a:	f7e3 fb7d 	bl	8000618 <__aeabi_dmul>
 801cf1e:	4b2f      	ldr	r3, [pc, #188]	; (801cfdc <scalbn+0xe4>)
 801cf20:	429e      	cmp	r6, r3
 801cf22:	4604      	mov	r4, r0
 801cf24:	460d      	mov	r5, r1
 801cf26:	da12      	bge.n	801cf4e <scalbn+0x56>
 801cf28:	a327      	add	r3, pc, #156	; (adr r3, 801cfc8 <scalbn+0xd0>)
 801cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf2e:	f7e3 fb73 	bl	8000618 <__aeabi_dmul>
 801cf32:	e009      	b.n	801cf48 <scalbn+0x50>
 801cf34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801cf38:	428a      	cmp	r2, r1
 801cf3a:	d10c      	bne.n	801cf56 <scalbn+0x5e>
 801cf3c:	ee10 2a10 	vmov	r2, s0
 801cf40:	4620      	mov	r0, r4
 801cf42:	4629      	mov	r1, r5
 801cf44:	f7e3 f9b2 	bl	80002ac <__adddf3>
 801cf48:	4604      	mov	r4, r0
 801cf4a:	460d      	mov	r5, r1
 801cf4c:	e01c      	b.n	801cf88 <scalbn+0x90>
 801cf4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cf52:	460b      	mov	r3, r1
 801cf54:	3a36      	subs	r2, #54	; 0x36
 801cf56:	4432      	add	r2, r6
 801cf58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801cf5c:	428a      	cmp	r2, r1
 801cf5e:	dd0b      	ble.n	801cf78 <scalbn+0x80>
 801cf60:	ec45 4b11 	vmov	d1, r4, r5
 801cf64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801cfd0 <scalbn+0xd8>
 801cf68:	f000 f83c 	bl	801cfe4 <copysign>
 801cf6c:	a318      	add	r3, pc, #96	; (adr r3, 801cfd0 <scalbn+0xd8>)
 801cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf72:	ec51 0b10 	vmov	r0, r1, d0
 801cf76:	e7da      	b.n	801cf2e <scalbn+0x36>
 801cf78:	2a00      	cmp	r2, #0
 801cf7a:	dd08      	ble.n	801cf8e <scalbn+0x96>
 801cf7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cf80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cf84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cf88:	ec45 4b10 	vmov	d0, r4, r5
 801cf8c:	bd70      	pop	{r4, r5, r6, pc}
 801cf8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801cf92:	da0d      	bge.n	801cfb0 <scalbn+0xb8>
 801cf94:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cf98:	429e      	cmp	r6, r3
 801cf9a:	ec45 4b11 	vmov	d1, r4, r5
 801cf9e:	dce1      	bgt.n	801cf64 <scalbn+0x6c>
 801cfa0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801cfc8 <scalbn+0xd0>
 801cfa4:	f000 f81e 	bl	801cfe4 <copysign>
 801cfa8:	a307      	add	r3, pc, #28	; (adr r3, 801cfc8 <scalbn+0xd0>)
 801cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfae:	e7e0      	b.n	801cf72 <scalbn+0x7a>
 801cfb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cfb4:	3236      	adds	r2, #54	; 0x36
 801cfb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cfba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	4629      	mov	r1, r5
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	4b06      	ldr	r3, [pc, #24]	; (801cfe0 <scalbn+0xe8>)
 801cfc6:	e7b2      	b.n	801cf2e <scalbn+0x36>
 801cfc8:	c2f8f359 	.word	0xc2f8f359
 801cfcc:	01a56e1f 	.word	0x01a56e1f
 801cfd0:	8800759c 	.word	0x8800759c
 801cfd4:	7e37e43c 	.word	0x7e37e43c
 801cfd8:	43500000 	.word	0x43500000
 801cfdc:	ffff3cb0 	.word	0xffff3cb0
 801cfe0:	3c900000 	.word	0x3c900000

0801cfe4 <copysign>:
 801cfe4:	ec51 0b10 	vmov	r0, r1, d0
 801cfe8:	ee11 0a90 	vmov	r0, s3
 801cfec:	ee10 2a10 	vmov	r2, s0
 801cff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cff4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801cff8:	ea41 0300 	orr.w	r3, r1, r0
 801cffc:	ec43 2b10 	vmov	d0, r2, r3
 801d000:	4770      	bx	lr
	...

0801d004 <__errno>:
 801d004:	4b01      	ldr	r3, [pc, #4]	; (801d00c <__errno+0x8>)
 801d006:	6818      	ldr	r0, [r3, #0]
 801d008:	4770      	bx	lr
 801d00a:	bf00      	nop
 801d00c:	20000074 	.word	0x20000074

0801d010 <_init>:
 801d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d012:	bf00      	nop
 801d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d016:	bc08      	pop	{r3}
 801d018:	469e      	mov	lr, r3
 801d01a:	4770      	bx	lr

0801d01c <_fini>:
 801d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d01e:	bf00      	nop
 801d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d022:	bc08      	pop	{r3}
 801d024:	469e      	mov	lr, r3
 801d026:	4770      	bx	lr
